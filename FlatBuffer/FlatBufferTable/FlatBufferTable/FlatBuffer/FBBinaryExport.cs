using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Shark;
using UnityEngine;
using System;
using FlatBuffers;
namespace JsonPaser
{
    public sealed class FBBinaryExport
    {
        public static string BinaryRoot = "datables/";
        public static string TxtRoot = "";
        public static string csSavePath = "";
        public static StringBuilder builder = new StringBuilder();
        public static Func<string, byte[]> ReadBytesHandler;
        public static Func<string, string> ReDirectFilePathHandler;
        public static Action OnLoadFBTableFinish;
        static public string ReadTxtTable(string strPath)
        {
            builder.Clear();
            string tablePath = TxtRoot;
            builder.Append(tablePath).Append("/").Append(strPath);
            string strData = null;
            var localPath = builder.ToString();
            if (File.Exists(localPath))
            {
                using (StreamReader sr = File.OpenText(localPath))
                {
                    strData = sr.ReadToEnd();
                }
            }
            return strData;
        }
        /// <summary>
        /// ��FlatBufer�����Ķ�����д���ļ�
        /// </summary>
        /// <param name="relFilePath"></param>
        /// <param name="bytes"></param>
        static public void WriteToFile(string relFilePath, byte[] bytes)
        {
            builder.Clear();
            builder.Append(BinaryRoot).Append("/").Append(relFilePath);
            string newFilePath = builder.ToString();
            string dirPath = Path.GetDirectoryName(newFilePath);
            if (!Directory.Exists(dirPath))
            {
                Directory.CreateDirectory(dirPath);
            }
            File.WriteAllBytes(newFilePath, bytes);
        }
        /// <summary>
        /// ��ȡFlatBuffer�������ļ�
        /// </summary>
        /// <param name="strPath"></param>
        /// <returns></returns>
        public static string GetFlatBufferPath(string relFilePath)
        {
            if (null != ReDirectFilePathHandler)
            {
                return ReDirectFilePathHandler(relFilePath);
            }
            builder.Clear();
            builder.Append(BinaryRoot).Append(relFilePath);
            return builder.ToString();
        }
        public static byte[] ReadFlatBufferDTBytes(string relFilePath)
        {
            if (null != ReadBytesHandler)
            {
                return ReadBytesHandler(relFilePath);
            }
            return File.ReadAllBytes(BinaryRoot + relFilePath);
        }
        /// <summary>
        /// ����TXT�͵���FlatBuffer�������ļ�
        /// </summary>
        /// <returns></returns>
        static public void Export()
        {
            LoadData();
            ExportBinaryData();
            ExportMapDict();
        }
        /// <summary>
        /// ��TXT�ļ����ص��ڴ�
        /// </summary>
        /// <returns></returns>
        static public void LoadData()
        {
            //Debug.Log("<color=green>LoadData Begin.</color>");
            Tab_AchievementJumpProvider.Instance.Load(ReadTxtTable("Client/AchievementJump.txt"));
			Tab_ActivityDaZhiGouShowProvider.Instance.Load(ReadTxtTable("Client/ActivityDaZhiGouShow.txt"));
			Tab_ActivityPrayShowProvider.Instance.Load(ReadTxtTable("Client/ActivityPrayShow.txt"));
			Tab_ActivityTypeProvider.Instance.Load(ReadTxtTable("Client/ActivityType.txt"));
			Tab_AllActivityProvider.Instance.Load(ReadTxtTable("Client/AllActivity.txt"));
			Tab_AnimationProvider.Instance.Load(ReadTxtTable("Client/Animation.txt"));
			Tab_AnimationCurveProvider.Instance.Load(ReadTxtTable("Client/AnimationCurve.txt"));
			Tab_AreaCodeProvider.Instance.Load(ReadTxtTable("Client/AreaCode.txt"));
			Tab_AttributeLessProvider.Instance.Load(ReadTxtTable("Client/AttributeLess.txt"));
			Tab_BottomRightMenuProvider.Instance.Load(ReadTxtTable("Client/BottomRightMenu.txt"));
			Tab_BulletProvider.Instance.Load(ReadTxtTable("Client/Bullet.txt"));
			Tab_CameraEffectProvider.Instance.Load(ReadTxtTable("Client/CameraEffect.txt"));
			Tab_CharAnimProvider.Instance.Load(ReadTxtTable("Client/CharAnim.txt"));
			Tab_CharAnimEffectProvider.Instance.Load(ReadTxtTable("Client/CharAnimEffect.txt"));
			Tab_CharModelProvider.Instance.Load(ReadTxtTable("Client/CharModel.txt"));
			Tab_CharMountProvider.Instance.Load(ReadTxtTable("Client/CharMount.txt"));
			Tab_CharSoulProvider.Instance.Load(ReadTxtTable("Client/CharSoul.txt"));
			Tab_CharWingProvider.Instance.Load(ReadTxtTable("Client/CharWing.txt"));
			Tab_CharXingHunProvider.Instance.Load(ReadTxtTable("Client/CharXingHun.txt"));
			Tab_ChatExpressionProvider.Instance.Load(ReadTxtTable("Client/ChatExpression.txt"));
			Tab_ChatRobotBaseProvider.Instance.Load(ReadTxtTable("Client/ChatRobotBase.txt"));
			Tab_ChatRobotContentProvider.Instance.Load(ReadTxtTable("Client/ChatRobotContent.txt"));
			Tab_ChatWordExpressionProvider.Instance.Load(ReadTxtTable("Client/ChatWordExpression.txt"));
			Tab_ClientStoryTableProvider.Instance.Load(ReadTxtTable("Client/ClientStoryTable.txt"));
			Tab_CloseUpShotProvider.Instance.Load(ReadTxtTable("Client/CloseUpShot.txt"));
			Tab_CombatPetSceneProvider.Instance.Load(ReadTxtTable("Client/CombatPetScene.txt"));
			Tab_CommonItemDataAboutSexProvider.Instance.Load(ReadTxtTable("Client/CommonItemDataAboutSex.txt"));
			Tab_CommonItemParamTypeListProvider.Instance.Load(ReadTxtTable("Client/CommonItemParamTypeList.txt"));
			Tab_CopySceneLastShotProvider.Instance.Load(ReadTxtTable("Client/CopySceneLastShot.txt"));
			Tab_CSQXuanSNpcProvider.Instance.Load(ReadTxtTable("Client/CSQXuanSNpc.txt"));
			Tab_DamageBoardTypeProvider.Instance.Load(ReadTxtTable("Client/DamageBoardType.txt"));
			Tab_DestinyBloodSkillDesProvider.Instance.Load(ReadTxtTable("Client/DestinyBloodSkillDes.txt"));
			Tab_DestinyObjParamsProvider.Instance.Load(ReadTxtTable("Client/DestinyObjParams.txt"));
			Tab_DymaticSceneEffectProvider.Instance.Load(ReadTxtTable("Client/DymaticSceneEffect.txt"));
			Tab_EffectProvider.Instance.Load(ReadTxtTable("Client/Effect.txt"));
			Tab_EffectPointProvider.Instance.Load(ReadTxtTable("Client/EffectPoint.txt"));
			Tab_EquipStarEffectProvider.Instance.Load(ReadTxtTable("Client/EquipStarEffect.txt"));
			Tab_EquipTipsProvider.Instance.Load(ReadTxtTable("Client/EquipTips.txt"));
			Tab_FittingBaseProvider.Instance.Load(ReadTxtTable("Client/FittingBase.txt"));
			Tab_FlyCutterUIProvider.Instance.Load(ReadTxtTable("Client/FlyCutterUI.txt"));
			Tab_fwqlistProvider.Instance.Load(ReadTxtTable("Client/fwqlist.txt"));
			Tab_GetPathBaseProvider.Instance.Load(ReadTxtTable("Client/GetPathBase.txt"));
			Tab_GetPathInfoProvider.Instance.Load(ReadTxtTable("Client/GetPathInfo.txt"));
			Tab_gonggaoProvider.Instance.Load(ReadTxtTable("Client/gonggao.txt"));
			Tab_GuideBaseProvider.Instance.Load(ReadTxtTable("Client/GuideBase.txt"));
			Tab_GuideTypeProvider.Instance.Load(ReadTxtTable("Client/GuideType.txt"));
			Tab_GuildFormationTypeProvider.Instance.Load(ReadTxtTable("Client/GuildFormationType.txt"));
			Tab_HairModelProvider.Instance.Load(ReadTxtTable("Client/HairModel.txt"));
			Tab_HuanJingObjParamsProvider.Instance.Load(ReadTxtTable("Client/HuanJingObjParams.txt"));
			Tab_HuanLeXunBaoProvider.Instance.Load(ReadTxtTable("Client/HuanLeXunBao.txt"));
			Tab_HunJiangShanghenParamProvider.Instance.Load(ReadTxtTable("Client/HunJiangShanghenParam.txt"));
			Tab_IapGiftUIProvider.Instance.Load(ReadTxtTable("Client/IapGiftUI.txt"));
			Tab_ItemButtonLogicProvider.Instance.Load(ReadTxtTable("Client/ItemButtonLogic.txt"));
			Tab_ItemCompoundTypeSettingProvider.Instance.Load(ReadTxtTable("Client/ItemCompoundTypeSetting.txt"));
			Tab_JiLingTreeBaseProvider.Instance.Load(ReadTxtTable("Client/JiLingTreeBase.txt"));
			Tab_JiYiCardProvider.Instance.Load(ReadTxtTable("Client/JiYiCard.txt"));
			Tab_KneadFaceFakeObjMovePosProvider.Instance.Load(ReadTxtTable("Client/KneadFaceFakeObjMovePos.txt"));
			Tab_KneadFaceOfEyeProvider.Instance.Load(ReadTxtTable("Client/KneadFaceOfEye.txt"));
			Tab_KneadFaceOfEyeBrowProvider.Instance.Load(ReadTxtTable("Client/KneadFaceOfEyeBrow.txt"));
			Tab_KneadFaceOfLipProvider.Instance.Load(ReadTxtTable("Client/KneadFaceOfLip.txt"));
			Tab_KneadFaceOfPrefabProvider.Instance.Load(ReadTxtTable("Client/KneadFaceOfPrefab.txt"));
			Tab_KneadFaceOfTattoProvider.Instance.Load(ReadTxtTable("Client/KneadFaceOfTatto.txt"));
			Tab_LingBaoTypeProvider.Instance.Load(ReadTxtTable("Client/LingBaoType.txt"));
			Tab_LocalNotificationProvider.Instance.Load(ReadTxtTable("Client/LocalNotification.txt"));
			Tab_MaiDianStarSoulModelProvider.Instance.Load(ReadTxtTable("Client/MaiDianStarSoulModel.txt"));
			Tab_MergeRankShowProvider.Instance.Load(ReadTxtTable("Client/MergeRankShow.txt"));
			Tab_MissionDictionaryProvider.Instance.Load(ReadTxtTable("Client/MissionDictionary.txt"));
			Tab_MissionSceneEffectProvider.Instance.Load(ReadTxtTable("Client/MissionSceneEffect.txt"));
			Tab_MountBindPointProvider.Instance.Load(ReadTxtTable("Client/MountBindPoint.txt"));
			Tab_NPCPaoPaoProvider.Instance.Load(ReadTxtTable("Client/NPCPaoPao.txt"));
			Tab_NPCSoundsProvider.Instance.Load(ReadTxtTable("Client/NPCSounds.txt"));
			Tab_OfflineCompetitionPlayerShowPostionProvider.Instance.Load(ReadTxtTable("Client/OfflineCompetitionPlayerShowPostion.txt"));
			Tab_OperateResultTipsProvider.Instance.Load(ReadTxtTable("Client/OperateResultTips.txt"));
			Tab_OptionTypeProvider.Instance.Load(ReadTxtTable("Client/OptionType.txt"));
			Tab_PhotoEffectProvider.Instance.Load(ReadTxtTable("Client/PhotoEffect.txt"));
			Tab_PhotoTabEffectProvider.Instance.Load(ReadTxtTable("Client/PhotoTabEffect.txt"));
			Tab_PicturePuzzleProvider.Instance.Load(ReadTxtTable("Client/PicturePuzzle.txt"));
			Tab_PlayerHeadInfoCfgProvider.Instance.Load(ReadTxtTable("Client/PlayerHeadInfoCfg.txt"));
			Tab_PlayMethodBroadcastProvider.Instance.Load(ReadTxtTable("Client/PlayMethodBroadcast.txt"));
			Tab_PreloadProvider.Instance.Load(ReadTxtTable("Client/Preload.txt"));
			Tab_PropertyIntroProvider.Instance.Load(ReadTxtTable("Client/PropertyIntro.txt"));
			Tab_RankTypeProvider.Instance.Load(ReadTxtTable("Client/RankType.txt"));
			Tab_RealTimeShadowConfigProvider.Instance.Load(ReadTxtTable("Client/RealTimeShadowConfig.txt"));
			Tab_RobotProvider.Instance.Load(ReadTxtTable("Client/Robot.txt"));
			Tab_RobotAppearanceProvider.Instance.Load(ReadTxtTable("Client/RobotAppearance.txt"));
			Tab_RoleNameProvider.Instance.Load(ReadTxtTable("Client/RoleName.txt"));
			Tab_SceneCullingParamProvider.Instance.Load(ReadTxtTable("Client/SceneCullingParam.txt"));
			Tab_SceneShaderParamProvider.Instance.Load(ReadTxtTable("Client/SceneShaderParam.txt"));
			Tab_SexDistinctionProvider.Instance.Load(ReadTxtTable("Client/SexDistinction.txt"));
			Tab_ShakeCameraProvider.Instance.Load(ReadTxtTable("Client/ShakeCamera.txt"));
			Tab_ShenWangYouLeChangProvider.Instance.Load(ReadTxtTable("Client/ShenWangYouLeChang.txt"));
			Tab_ShenWangZhanJiaCSChapterProvider.Instance.Load(ReadTxtTable("Client/ShenWangZhanJiaCSChapter.txt"));
			Tab_ShenYuRankBaseProvider.Instance.Load(ReadTxtTable("Client/ShenYuRankBase.txt"));
			Tab_ShieldingSymbolProvider.Instance.Load(ReadTxtTable("Client/ShieldingSymbol.txt"));
			Tab_ShieldStringProvider.Instance.Load(ReadTxtTable("Client/ShieldString.txt"));
			Tab_ShopClassProvider.Instance.Load(ReadTxtTable("Client/ShopClass.txt"));
			Tab_SkillCamAnimProvider.Instance.Load(ReadTxtTable("Client/SkillCamAnim.txt"));
			Tab_SkillDemonstrationProvider.Instance.Load(ReadTxtTable("Client/SkillDemonstration.txt"));
			Tab_SoundsProvider.Instance.Load(ReadTxtTable("Client/Sounds.txt"));
			Tab_StarSoulPaoPaoProvider.Instance.Load(ReadTxtTable("Client/StarSoulPaoPao.txt"));
			Tab_StarWishRewardShowProvider.Instance.Load(ReadTxtTable("Client/StarWishRewardShow.txt"));
			Tab_StoryAnimationProvider.Instance.Load(ReadTxtTable("Client/StoryAnimation.txt"));
			Tab_StoryPlayerEffectProvider.Instance.Load(ReadTxtTable("Client/StoryPlayerEffect.txt"));
			Tab_StrDictionaryProvider.Instance.Load(ReadTxtTable("Client/StrDictionary.txt"));
			Tab_StrengthenNeedEquipOrExpProvider.Instance.Load(ReadTxtTable("Client/StrengthenNeedEquipOrExp.txt"));
			Tab_StrengthenNeedResourceProvider.Instance.Load(ReadTxtTable("Client/StrengthenNeedResource.txt"));
			Tab_StrengthenRateProvider.Instance.Load(ReadTxtTable("Client/StrengthenRate.txt"));
			Tab_StrLoadingProvider.Instance.Load(ReadTxtTable("Client/StrLoading.txt"));
			Tab_SYHFestivalDicProvider.Instance.Load(ReadTxtTable("Client/SYHFestivalDic.txt"));
			Tab_SYHZaDanPingGuoShowProvider.Instance.Load(ReadTxtTable("Client/SYHZaDanPingGuoShow.txt"));
			Tab_TaoZhuangModelProvider.Instance.Load(ReadTxtTable("Client/TaoZhuangModel.txt"));
			Tab_TeamPostionProvider.Instance.Load(ReadTxtTable("Client/TeamPostion.txt"));
			Tab_TipsEquipListProvider.Instance.Load(ReadTxtTable("Client/TipsEquipList.txt"));
			Tab_TipsPreviewProvider.Instance.Load(ReadTxtTable("Client/TipsPreview.txt"));
			Tab_TopRightMenuProvider.Instance.Load(ReadTxtTable("Client/TopRightMenu.txt"));
			Tab_UIInfoProvider.Instance.Load(ReadTxtTable("Client/UIInfo.txt"));
			Tab_UIModelProvider.Instance.Load(ReadTxtTable("Client/UIModel.txt"));
			Tab_UISpecialHideProvider.Instance.Load(ReadTxtTable("Client/UISpecialHide.txt"));
			Tab_UISubPanelPathProvider.Instance.Load(ReadTxtTable("Client/UISubPanelPath.txt"));
			Tab_UITextProvider.Instance.Load(ReadTxtTable("Client/UIText.txt"));
			Tab_WarPetModelProvider.Instance.Load(ReadTxtTable("Client/WarPetModel.txt"));
			Tab_WeaponAnimationProvider.Instance.Load(ReadTxtTable("Client/WeaponAnimation.txt"));
			Tab_WeaponModelProvider.Instance.Load(ReadTxtTable("Client/WeaponModel.txt"));
			Tab_WeekPlanProvider.Instance.Load(ReadTxtTable("Client/WeekPlan.txt"));
			Tab_WingExtraModelPointProvider.Instance.Load(ReadTxtTable("Client/WingExtraModelPoint.txt"));
			Tab_WorldCupCountryProvider.Instance.Load(ReadTxtTable("Client/WorldCupCountry.txt"));
			Tab_YingYanItemProvider.Instance.Load(ReadTxtTable("Client/YingYanItem.txt"));
			Tab_AchievementBaseProvider.Instance.Load(ReadTxtTable("Public/AchievementBase.txt"));
			Tab_AchievementClassProvider.Instance.Load(ReadTxtTable("Public/AchievementClass.txt"));
			Tab_AchievementSubClassProvider.Instance.Load(ReadTxtTable("Public/AchievementSubClass.txt"));
			Tab_ActivityAncientSealProessRewardProvider.Instance.Load(ReadTxtTable("Public/ActivityAncientSealProessReward.txt"));
			Tab_ActivityAncientSealSearchProvider.Instance.Load(ReadTxtTable("Public/ActivityAncientSealSearch.txt"));
			Tab_ActivityBaseProvider.Instance.Load(ReadTxtTable("Public/ActivityBase.txt"));
			Tab_ActivityBonusProvider.Instance.Load(ReadTxtTable("Public/ActivityBonus.txt"));
			Tab_ActivityChickenBaseProvider.Instance.Load(ReadTxtTable("Public/ActivityChickenBase.txt"));
			Tab_ActivityChickenGiftProvider.Instance.Load(ReadTxtTable("Public/ActivityChickenGift.txt"));
			Tab_ActivityChickenMissionProvider.Instance.Load(ReadTxtTable("Public/ActivityChickenMission.txt"));
			Tab_ActivityChickenProessRewardProvider.Instance.Load(ReadTxtTable("Public/ActivityChickenProessReward.txt"));
			Tab_ActivityDaZhiGouRewardProvider.Instance.Load(ReadTxtTable("Public/ActivityDaZhiGouReward.txt"));
			Tab_ActivityObjectivesListProvider.Instance.Load(ReadTxtTable("Public/ActivityObjectivesList.txt"));
			Tab_ActivityPointProvider.Instance.Load(ReadTxtTable("Public/ActivityPoint.txt"));
			Tab_ActivityPrayProvider.Instance.Load(ReadTxtTable("Public/ActivityPray.txt"));
			Tab_ActivityPrayShopProvider.Instance.Load(ReadTxtTable("Public/ActivityPrayShop.txt"));
			Tab_ActivityQuestionBaseProvider.Instance.Load(ReadTxtTable("Public/ActivityQuestionBase.txt"));
			Tab_ActivityShowBaseProvider.Instance.Load(ReadTxtTable("Public/ActivityShowBase.txt"));
			Tab_ActivityShowLevelProvider.Instance.Load(ReadTxtTable("Public/ActivityShowLevel.txt"));
			Tab_ActWanGuConfigProvider.Instance.Load(ReadTxtTable("Public/ActWanGuConfig.txt"));
			Tab_ActWanGuMissionBaseProvider.Instance.Load(ReadTxtTable("Public/ActWanGuMissionBase.txt"));
			Tab_ActWanGuMissionClassProvider.Instance.Load(ReadTxtTable("Public/ActWanGuMissionClass.txt"));
			Tab_ActWanGuMissionSubClassProvider.Instance.Load(ReadTxtTable("Public/ActWanGuMissionSubClass.txt"));
			Tab_ActWanGuPropLevelBaseProvider.Instance.Load(ReadTxtTable("Public/ActWanGuPropLevelBase.txt"));
			Tab_ActWanGuPropLevelRewardProvider.Instance.Load(ReadTxtTable("Public/ActWanGuPropLevelReward.txt"));
			Tab_ActZhuTianBaoLunProvider.Instance.Load(ReadTxtTable("Public/ActZhuTianBaoLun.txt"));
			Tab_AdvancedBaseProvider.Instance.Load(ReadTxtTable("Public/AdvancedBase.txt"));
			Tab_AncientSealShopItemProvider.Instance.Load(ReadTxtTable("Public/AncientSealShopItem.txt"));
			Tab_ArenaRewardProvider.Instance.Load(ReadTxtTable("Public/ArenaReward.txt"));
			Tab_ArtifactBaseProvider.Instance.Load(ReadTxtTable("Public/ArtifactBase.txt"));
			Tab_ArtifactBaseLevelUpProvider.Instance.Load(ReadTxtTable("Public/ArtifactBaseLevelUp.txt"));
			Tab_ArtifactBaseLevelUpSpecialProvider.Instance.Load(ReadTxtTable("Public/ArtifactBaseLevelUpSpecial.txt"));
			Tab_AttrPowerBaseProvider.Instance.Load(ReadTxtTable("Public/AttrPowerBase.txt"));
			Tab_AuctionClassProvider.Instance.Load(ReadTxtTable("Public/AuctionClass.txt"));
			Tab_AuctionItemProvider.Instance.Load(ReadTxtTable("Public/AuctionItem.txt"));
			Tab_AuctionTypeProvider.Instance.Load(ReadTxtTable("Public/AuctionType.txt"));
			Tab_AutoBindBaseProvider.Instance.Load(ReadTxtTable("Public/AutoBindBase.txt"));
			Tab_BagTreasureProvider.Instance.Load(ReadTxtTable("Public/BagTreasure.txt"));
			Tab_baiwanjijieProvider.Instance.Load(ReadTxtTable("Public/baiwanjijie.txt"));
			Tab_baiwanjijie2Provider.Instance.Load(ReadTxtTable("Public/baiwanjijie2.txt"));
			Tab_BattlefieldCampLevelBuffProvider.Instance.Load(ReadTxtTable("Public/BattlefieldCampLevelBuff.txt"));
			Tab_BattlefieldCampRewProvider.Instance.Load(ReadTxtTable("Public/BattlefieldCampRew.txt"));
			Tab_BattlefieldCollectionRewProvider.Instance.Load(ReadTxtTable("Public/BattlefieldCollectionRew.txt"));
			Tab_BattlefieldRankRewProvider.Instance.Load(ReadTxtTable("Public/BattlefieldRankRew.txt"));
			Tab_BenYuanItemBaseProvider.Instance.Load(ReadTxtTable("Public/BenYuanItemBase.txt"));
			Tab_BenYuanItemLevelUpProvider.Instance.Load(ReadTxtTable("Public/BenYuanItemLevelUp.txt"));
			Tab_BlackCardSignInRewardProvider.Instance.Load(ReadTxtTable("Public/BlackCardSignInReward.txt"));
			Tab_BlackCardTickProvider.Instance.Load(ReadTxtTable("Public/BlackCardTick.txt"));
			Tab_BloodBaseProvider.Instance.Load(ReadTxtTable("Public/BloodBase.txt"));
			Tab_BloodMixProvider.Instance.Load(ReadTxtTable("Public/BloodMix.txt"));
			Tab_BloodMixLevelProvider.Instance.Load(ReadTxtTable("Public/BloodMixLevel.txt"));
			Tab_BloodPossessedProvider.Instance.Load(ReadTxtTable("Public/BloodPossessed.txt"));
			Tab_BloodPossessedModelProvider.Instance.Load(ReadTxtTable("Public/BloodPossessedModel.txt"));
			Tab_BossGongChengRewardProvider.Instance.Load(ReadTxtTable("Public/BossGongChengReward.txt"));
			Tab_BossInvestProvider.Instance.Load(ReadTxtTable("Public/BossInvest.txt"));
			Tab_BossInvestTypeProvider.Instance.Load(ReadTxtTable("Public/BossInvestType.txt"));
			Tab_CardBaseProvider.Instance.Load(ReadTxtTable("Public/CardBase.txt"));
			Tab_CardFlopBaseProvider.Instance.Load(ReadTxtTable("Public/CardFlopBase.txt"));
			Tab_CardJiBanActivateRewardProvider.Instance.Load(ReadTxtTable("Public/CardJiBanActivateReward.txt"));
			Tab_CardRankRewardBaseProvider.Instance.Load(ReadTxtTable("Public/CardRankRewardBase.txt"));
			Tab_CardShopProvider.Instance.Load(ReadTxtTable("Public/CardShop.txt"));
			Tab_CardXunBaoBaseProvider.Instance.Load(ReadTxtTable("Public/CardXunBaoBase.txt"));
			Tab_CardXunBaoShowProvider.Instance.Load(ReadTxtTable("Public/CardXunBaoShow.txt"));
			Tab_ChangeJob6ItemBaseProvider.Instance.Load(ReadTxtTable("Public/ChangeJob6ItemBase.txt"));
			Tab_ChangeJob8ComprehendUpProvider.Instance.Load(ReadTxtTable("Public/ChangeJob8ComprehendUp.txt"));
			Tab_ChangeJob8MissionProvider.Instance.Load(ReadTxtTable("Public/ChangeJob8Mission.txt"));
			Tab_ChangeJobBaseProvider.Instance.Load(ReadTxtTable("Public/ChangeJobBase.txt"));
			Tab_ChangeJobPhaseProvider.Instance.Load(ReadTxtTable("Public/ChangeJobPhase.txt"));
			Tab_ChangeMenPaiConditionProvider.Instance.Load(ReadTxtTable("Public/ChangeMenPaiCondition.txt"));
			Tab_ChapterCardBaseProvider.Instance.Load(ReadTxtTable("Public/ChapterCardBase.txt"));
			Tab_ChapterCardLevelUpProvider.Instance.Load(ReadTxtTable("Public/ChapterCardLevelUp.txt"));
			Tab_CharmLoveRankRewardBaseProvider.Instance.Load(ReadTxtTable("Public/CharmLoveRankRewardBase.txt"));
			Tab_ChatLimitProvider.Instance.Load(ReadTxtTable("Public/ChatLimit.txt"));
			Tab_ChiJiBaseProvider.Instance.Load(ReadTxtTable("Public/ChiJiBase.txt"));
			Tab_ChiJiRewardBaseProvider.Instance.Load(ReadTxtTable("Public/ChiJiRewardBase.txt"));
			Tab_ChongJiGiftProvider.Instance.Load(ReadTxtTable("Public/ChongJiGift.txt"));
			Tab_ClientConfigProvider.Instance.Load(ReadTxtTable("Public/ClientConfig.txt"));
			Tab_CollectActivityProvider.Instance.Load(ReadTxtTable("Public/CollectActivity.txt"));
			Tab_CombatPetBaseProvider.Instance.Load(ReadTxtTable("Public/CombatPetBase.txt"));
			Tab_CombatPetRewardProvider.Instance.Load(ReadTxtTable("Public/CombatPetReward.txt"));
			Tab_CommonItemProvider.Instance.Load(ReadTxtTable("Public/CommonItem.txt"));
			Tab_CoolDownTimeProvider.Instance.Load(ReadTxtTable("Public/CoolDownTime.txt"));
			Tab_CopySceneLimitProvider.Instance.Load(ReadTxtTable("Public/CopySceneLimit.txt"));
			Tab_CopySceneMoNengFeiXuProvider.Instance.Load(ReadTxtTable("Public/CopySceneMoNengFeiXu.txt"));
			Tab_CopySceneShopProvider.Instance.Load(ReadTxtTable("Public/CopySceneShop.txt"));
			Tab_CopySceneStageDicProvider.Instance.Load(ReadTxtTable("Public/CopySceneStageDic.txt"));
			Tab_CopySceneTowerProvider.Instance.Load(ReadTxtTable("Public/CopySceneTower.txt"));
			Tab_CopySceneTowerSkillProvider.Instance.Load(ReadTxtTable("Public/CopySceneTowerSkill.txt"));
			Tab_CreatePlayerProvider.Instance.Load(ReadTxtTable("Public/CreatePlayer.txt"));
			Tab_CSEvalueRewardProvider.Instance.Load(ReadTxtTable("Public/CSEvalueReward.txt"));
			Tab_CurrencyBaseProvider.Instance.Load(ReadTxtTable("Public/CurrencyBase.txt"));
			Tab_DailyRebateProvider.Instance.Load(ReadTxtTable("Public/DailyRebate.txt"));
			Tab_DailyRechargeProvider.Instance.Load(ReadTxtTable("Public/DailyRecharge.txt"));
			Tab_DestinyBaseProvider.Instance.Load(ReadTxtTable("Public/DestinyBase.txt"));
			Tab_DestinyBaseLevelUpProvider.Instance.Load(ReadTxtTable("Public/DestinyBaseLevelUp.txt"));
			Tab_DestinyBloodBaseProvider.Instance.Load(ReadTxtTable("Public/DestinyBloodBase.txt"));
			Tab_DestinyBloodItemProvider.Instance.Load(ReadTxtTable("Public/DestinyBloodItem.txt"));
			Tab_DestinyBloodLevelUpProvider.Instance.Load(ReadTxtTable("Public/DestinyBloodLevelUp.txt"));
			Tab_DestinyCultureLevelUpProvider.Instance.Load(ReadTxtTable("Public/DestinyCultureLevelUp.txt"));
			Tab_DestinySkillProvider.Instance.Load(ReadTxtTable("Public/DestinySkill.txt"));
			Tab_DestinyTemperBaseProvider.Instance.Load(ReadTxtTable("Public/DestinyTemperBase.txt"));
			Tab_DestinyTemperRateProvider.Instance.Load(ReadTxtTable("Public/DestinyTemperRate.txt"));
			Tab_DiamondAttributeProvider.Instance.Load(ReadTxtTable("Public/DiamondAttribute.txt"));
			Tab_DiamondBaseProvider.Instance.Load(ReadTxtTable("Public/DiamondBase.txt"));
			Tab_DiamondCuiLianProvider.Instance.Load(ReadTxtTable("Public/DiamondCuiLian.txt"));
			Tab_DiamondGongZhenProvider.Instance.Load(ReadTxtTable("Public/DiamondGongZhen.txt"));
			Tab_DiamondGongZhenAllProvider.Instance.Load(ReadTxtTable("Public/DiamondGongZhenAll.txt"));
			Tab_DiamondGongZhenEnumProvider.Instance.Load(ReadTxtTable("Public/DiamondGongZhenEnum.txt"));
			Tab_DiamondSetProvider.Instance.Load(ReadTxtTable("Public/DiamondSet.txt"));
			Tab_DiamondStrengthenProvider.Instance.Load(ReadTxtTable("Public/DiamondStrengthen.txt"));
			Tab_EmotionBaseProvider.Instance.Load(ReadTxtTable("Public/EmotionBase.txt"));
			Tab_EmotionClassProvider.Instance.Load(ReadTxtTable("Public/EmotionClass.txt"));
			Tab_EquipAttrProvider.Instance.Load(ReadTxtTable("Public/EquipAttr.txt"));
			Tab_EquipAttrRateProvider.Instance.Load(ReadTxtTable("Public/EquipAttrRate.txt"));
			Tab_EquipAttrValueProvider.Instance.Load(ReadTxtTable("Public/EquipAttrValue.txt"));
			Tab_EquipCompoundTypeProvider.Instance.Load(ReadTxtTable("Public/EquipCompoundType.txt"));
			Tab_EquipCompoundTypeShenZhuangProvider.Instance.Load(ReadTxtTable("Public/EquipCompoundTypeShenZhuang.txt"));
			Tab_EquipExchangeProvider.Instance.Load(ReadTxtTable("Public/EquipExchange.txt"));
			Tab_EquipExhibitionProvider.Instance.Load(ReadTxtTable("Public/EquipExhibition.txt"));
			Tab_EquipExtraAttrProvider.Instance.Load(ReadTxtTable("Public/EquipExtraAttr.txt"));
			Tab_EquipFavPointProvider.Instance.Load(ReadTxtTable("Public/EquipFavPoint.txt"));
			Tab_EquipFuLingAttrProvider.Instance.Load(ReadTxtTable("Public/EquipFuLingAttr.txt"));
			Tab_EquipFuLingLevelUpProvider.Instance.Load(ReadTxtTable("Public/EquipFuLingLevelUp.txt"));
			Tab_EquipFusionAttrProvider.Instance.Load(ReadTxtTable("Public/EquipFusionAttr.txt"));
			Tab_EquipFusionBaseProvider.Instance.Load(ReadTxtTable("Public/EquipFusionBase.txt"));
			Tab_EquipPartZhuHunProvider.Instance.Load(ReadTxtTable("Public/EquipPartZhuHun.txt"));
			Tab_EquipPartZhuHunBaoShiProvider.Instance.Load(ReadTxtTable("Public/EquipPartZhuHunBaoShi.txt"));
			Tab_EquipRandomAttrProvider.Instance.Load(ReadTxtTable("Public/EquipRandomAttr.txt"));
			Tab_EquipRecastProvider.Instance.Load(ReadTxtTable("Public/EquipRecast.txt"));
			Tab_EquipSetStoneProvider.Instance.Load(ReadTxtTable("Public/EquipSetStone.txt"));
			Tab_EquipSetStoneGroupAttrProvider.Instance.Load(ReadTxtTable("Public/EquipSetStoneGroupAttr.txt"));
			Tab_EquipSlotAttrProvider.Instance.Load(ReadTxtTable("Public/EquipSlotAttr.txt"));
			Tab_EquipSlotResonanceProvider.Instance.Load(ReadTxtTable("Public/EquipSlotResonance.txt"));
			Tab_EquipSlotStrengthenProvider.Instance.Load(ReadTxtTable("Public/EquipSlotStrengthen.txt"));
			Tab_EquipSourceProvider.Instance.Load(ReadTxtTable("Public/EquipSource.txt"));
			Tab_EquipStrengthenProvider.Instance.Load(ReadTxtTable("Public/EquipStrengthen.txt"));
			Tab_EquipZhuHunProvider.Instance.Load(ReadTxtTable("Public/EquipZhuHun.txt"));
			Tab_EternalTreasureProvider.Instance.Load(ReadTxtTable("Public/EternalTreasure.txt"));
			Tab_EternalTreasureRewardProvider.Instance.Load(ReadTxtTable("Public/EternalTreasureReward.txt"));
			Tab_FakeObjectProvider.Instance.Load(ReadTxtTable("Public/FakeObject.txt"));
			Tab_FindRewardBaseProvider.Instance.Load(ReadTxtTable("Public/FindRewardBase.txt"));
			Tab_FindRewardClassProvider.Instance.Load(ReadTxtTable("Public/FindRewardClass.txt"));
			Tab_FuLiDaTingProvider.Instance.Load(ReadTxtTable("Public/FuLiDaTing.txt"));
			Tab_FunctionBaseProvider.Instance.Load(ReadTxtTable("Public/FunctionBase.txt"));
			Tab_FunctionPrepareProvider.Instance.Load(ReadTxtTable("Public/FunctionPrepare.txt"));
			Tab_GodWeaponBaseProvider.Instance.Load(ReadTxtTable("Public/GodWeaponBase.txt"));
			Tab_GodWeaponLevelProvider.Instance.Load(ReadTxtTable("Public/GodWeaponLevel.txt"));
			Tab_GodWordBaseProvider.Instance.Load(ReadTxtTable("Public/GodWordBase.txt"));
			Tab_GodWordCharmProvider.Instance.Load(ReadTxtTable("Public/GodWordCharm.txt"));
			Tab_GoldCopyAwardProvider.Instance.Load(ReadTxtTable("Public/GoldCopyAward.txt"));
			Tab_GoldenBadgeBaseProvider.Instance.Load(ReadTxtTable("Public/GoldenBadgeBase.txt"));
			Tab_GoldenBadgeLevelUpProvider.Instance.Load(ReadTxtTable("Public/GoldenBadgeLevelUp.txt"));
			Tab_GreetingCardRewardProvider.Instance.Load(ReadTxtTable("Public/GreetingCardReward.txt"));
			Tab_GroupPointProvider.Instance.Load(ReadTxtTable("Public/GroupPoint.txt"));
			Tab_GrowUpBagProvider.Instance.Load(ReadTxtTable("Public/GrowUpBag.txt"));
			Tab_GuideCollectBaseProvider.Instance.Load(ReadTxtTable("Public/GuideCollectBase.txt"));
			Tab_GuideCollectBossTipsProvider.Instance.Load(ReadTxtTable("Public/GuideCollectBossTips.txt"));
			Tab_GuildActiveBaseProvider.Instance.Load(ReadTxtTable("Public/GuildActiveBase.txt"));
			Tab_GuildBaseProvider.Instance.Load(ReadTxtTable("Public/GuildBase.txt"));
			Tab_GuildBlessBaseProvider.Instance.Load(ReadTxtTable("Public/GuildBlessBase.txt"));
			Tab_GuildBossProvider.Instance.Load(ReadTxtTable("Public/GuildBoss.txt"));
			Tab_GuildFoodBoxProvider.Instance.Load(ReadTxtTable("Public/GuildFoodBox.txt"));
			Tab_GuildFormationBaseProvider.Instance.Load(ReadTxtTable("Public/GuildFormationBase.txt"));
			Tab_GuildFormationLevelProvider.Instance.Load(ReadTxtTable("Public/GuildFormationLevel.txt"));
			Tab_GuildFormationTypeNewProvider.Instance.Load(ReadTxtTable("Public/GuildFormationTypeNew.txt"));
			Tab_GuildPermissionProvider.Instance.Load(ReadTxtTable("Public/GuildPermission.txt"));
			Tab_GuildPresentProvider.Instance.Load(ReadTxtTable("Public/GuildPresent.txt"));
			Tab_GuildRedPacketProvider.Instance.Load(ReadTxtTable("Public/GuildRedPacket.txt"));
			Tab_GuildWelfareBaseProvider.Instance.Load(ReadTxtTable("Public/GuildWelfareBase.txt"));
			Tab_HuanJingBaseProvider.Instance.Load(ReadTxtTable("Public/HuanJingBase.txt"));
			Tab_HuanJingEquipProvider.Instance.Load(ReadTxtTable("Public/HuanJingEquip.txt"));
			Tab_HuanJingEquipSlotProvider.Instance.Load(ReadTxtTable("Public/HuanJingEquipSlot.txt"));
			Tab_HuanJingEquipStarProvider.Instance.Load(ReadTxtTable("Public/HuanJingEquipStar.txt"));
			Tab_HuanJingJiBanProvider.Instance.Load(ReadTxtTable("Public/HuanJingJiBan.txt"));
			Tab_HuanJingLevelProvider.Instance.Load(ReadTxtTable("Public/HuanJingLevel.txt"));
			Tab_HuanJingSkillProvider.Instance.Load(ReadTxtTable("Public/HuanJingSkill.txt"));
			Tab_HuanJingTypeProvider.Instance.Load(ReadTxtTable("Public/HuanJingType.txt"));
			Tab_HuLingBaseProvider.Instance.Load(ReadTxtTable("Public/HuLingBase.txt"));
			Tab_HunGeBaseProvider.Instance.Load(ReadTxtTable("Public/HunGeBase.txt"));
			Tab_HunJiangGongMingProvider.Instance.Load(ReadTxtTable("Public/HunJiangGongMing.txt"));
			Tab_HunJiangItemBaseProvider.Instance.Load(ReadTxtTable("Public/HunJiangItemBase.txt"));
			Tab_HunJiangItemLevelUpProvider.Instance.Load(ReadTxtTable("Public/HunJiangItemLevelUp.txt"));
			Tab_HunJiangJiBanBaseProvider.Instance.Load(ReadTxtTable("Public/HunJiangJiBanBase.txt"));
			Tab_HunJiangJiBanLevelUpProvider.Instance.Load(ReadTxtTable("Public/HunJiangJiBanLevelUp.txt"));
			Tab_HunJiangJiBanSkillProvider.Instance.Load(ReadTxtTable("Public/HunJiangJiBanSkill.txt"));
			Tab_HunJiangJuHunProvider.Instance.Load(ReadTxtTable("Public/HunJiangJuHun.txt"));
			Tab_HunJiangRongLianProvider.Instance.Load(ReadTxtTable("Public/HunJiangRongLian.txt"));
			Tab_HunJiangShangZhenProvider.Instance.Load(ReadTxtTable("Public/HunJiangShangZhen.txt"));
			Tab_HunJiangSkillBaseProvider.Instance.Load(ReadTxtTable("Public/HunJiangSkillBase.txt"));
			Tab_HunJiangSkillValueProvider.Instance.Load(ReadTxtTable("Public/HunJiangSkillValue.txt"));
			Tab_HunJiangXunBaoProvider.Instance.Load(ReadTxtTable("Public/HunJiangXunBao.txt"));
			Tab_IapGiftProvider.Instance.Load(ReadTxtTable("Public/IapGift.txt"));
			Tab_IapGift2Provider.Instance.Load(ReadTxtTable("Public/IapGift2.txt"));
			Tab_IapGiftRewardProvider.Instance.Load(ReadTxtTable("Public/IapGiftReward.txt"));
			Tab_IapGiftReward2Provider.Instance.Load(ReadTxtTable("Public/IapGiftReward2.txt"));
			Tab_ImpactProvider.Instance.Load(ReadTxtTable("Public/Impact.txt"));
			Tab_ItemCompoundBaseProvider.Instance.Load(ReadTxtTable("Public/ItemCompoundBase.txt"));
			Tab_ItemCompoundTypeProvider.Instance.Load(ReadTxtTable("Public/ItemCompoundType.txt"));
			Tab_ItemGiftBaseProvider.Instance.Load(ReadTxtTable("Public/ItemGiftBase.txt"));
			Tab_ItemLocationProvider.Instance.Load(ReadTxtTable("Public/ItemLocation.txt"));
			Tab_ItemStepUpBaseProvider.Instance.Load(ReadTxtTable("Public/ItemStepUpBase.txt"));
			Tab_JiBanAttrLevelUpProvider.Instance.Load(ReadTxtTable("Public/JiBanAttrLevelUp.txt"));
			Tab_JiBanBaseProvider.Instance.Load(ReadTxtTable("Public/JiBanBase.txt"));
			Tab_JieSoulStoneProvider.Instance.Load(ReadTxtTable("Public/JieSoulStone.txt"));
			Tab_JieYuanBaseProvider.Instance.Load(ReadTxtTable("Public/JieYuanBase.txt"));
			Tab_JieYuanLevelUpProvider.Instance.Load(ReadTxtTable("Public/JieYuanLevelUp.txt"));
			Tab_JieYuanSlotResonanceProvider.Instance.Load(ReadTxtTable("Public/JieYuanSlotResonance.txt"));
			Tab_JieYuanSuitProvider.Instance.Load(ReadTxtTable("Public/JieYuanSuit.txt"));
			Tab_JieYuanSuitInfoProvider.Instance.Load(ReadTxtTable("Public/JieYuanSuitInfo.txt"));
			Tab_JiLingAttrPercentLevelUpProvider.Instance.Load(ReadTxtTable("Public/JiLingAttrPercentLevelUp.txt"));
			Tab_JiLingDecomposeProvider.Instance.Load(ReadTxtTable("Public/JiLingDecompose.txt"));
			Tab_JiLingDestinyAddAttrProvider.Instance.Load(ReadTxtTable("Public/JiLingDestinyAddAttr.txt"));
			Tab_JiLingDestinyLevelUpProvider.Instance.Load(ReadTxtTable("Public/JiLingDestinyLevelUp.txt"));
			Tab_JiLingJingJieProvider.Instance.Load(ReadTxtTable("Public/JiLingJingJie.txt"));
			Tab_JiLingMapBaseProvider.Instance.Load(ReadTxtTable("Public/JiLingMapBase.txt"));
			Tab_JiLingQiLingBaseProvider.Instance.Load(ReadTxtTable("Public/JiLingQiLingBase.txt"));
			Tab_JiLingQiLingGongMingProvider.Instance.Load(ReadTxtTable("Public/JiLingQiLingGongMing.txt"));
			Tab_JiLingQiLingGongMingAddAttrProvider.Instance.Load(ReadTxtTable("Public/JiLingQiLingGongMingAddAttr.txt"));
			Tab_JiLingQiLingLevelUpProvider.Instance.Load(ReadTxtTable("Public/JiLingQiLingLevelUp.txt"));
			Tab_JiLingTransformationAttrProvider.Instance.Load(ReadTxtTable("Public/JiLingTransformationAttr.txt"));
			Tab_JiLingWuHunLevelUpProvider.Instance.Load(ReadTxtTable("Public/JiLingWuHunLevelUp.txt"));
			Tab_JiLingWuHunNingHunProvider.Instance.Load(ReadTxtTable("Public/JiLingWuHunNingHun.txt"));
			Tab_JiYiBaseProvider.Instance.Load(ReadTxtTable("Public/JiYiBase.txt"));
			Tab_JuBaoPenTreasureProvider.Instance.Load(ReadTxtTable("Public/JuBaoPenTreasure.txt"));
			Tab_JuHunAttrProvider.Instance.Load(ReadTxtTable("Public/JuHunAttr.txt"));
			Tab_JuhunBoxWeightProvider.Instance.Load(ReadTxtTable("Public/JuhunBoxWeight.txt"));
			Tab_JuHunLevelUpProvider.Instance.Load(ReadTxtTable("Public/JuHunLevelUp.txt"));
			Tab_JuLingCSbaseProvider.Instance.Load(ReadTxtTable("Public/JuLingCSbase.txt"));
			Tab_KaiFuPaiHangProvider.Instance.Load(ReadTxtTable("Public/KaiFuPaiHang.txt"));
			Tab_KaiFuPaiHangTypeProvider.Instance.Load(ReadTxtTable("Public/KaiFuPaiHangType.txt"));
			Tab_KneadFaceOClothingProvider.Instance.Load(ReadTxtTable("Public/KneadFaceOClothing.txt"));
			Tab_LadderProvider.Instance.Load(ReadTxtTable("Public/Ladder.txt"));
			Tab_LadderHonorProvider.Instance.Load(ReadTxtTable("Public/LadderHonor.txt"));
			Tab_LadderMissionProvider.Instance.Load(ReadTxtTable("Public/LadderMission.txt"));
			Tab_LevelCompensateProvider.Instance.Load(ReadTxtTable("Public/LevelCompensate.txt"));
			Tab_LevelExpProvider.Instance.Load(ReadTxtTable("Public/LevelExp.txt"));
			Tab_LevelSealAddExpRateProvider.Instance.Load(ReadTxtTable("Public/LevelSealAddExpRate.txt"));
			Tab_LevelSealAttrProvider.Instance.Load(ReadTxtTable("Public/LevelSealAttr.txt"));
			Tab_LevelSealBaseProvider.Instance.Load(ReadTxtTable("Public/LevelSealBase.txt"));
			Tab_LevelSealCopySceneProvider.Instance.Load(ReadTxtTable("Public/LevelSealCopyScene.txt"));
			Tab_LimitActivityBroadcastProvider.Instance.Load(ReadTxtTable("Public/LimitActivityBroadcast.txt"));
			Tab_LingBaoBaseProvider.Instance.Load(ReadTxtTable("Public/LingBaoBase.txt"));
			Tab_LingBaoLevelUpProvider.Instance.Load(ReadTxtTable("Public/LingBaoLevelUp.txt"));
			Tab_LingBaoQiLingProvider.Instance.Load(ReadTxtTable("Public/LingBaoQiLing.txt"));
			Tab_LingGangBaseProvider.Instance.Load(ReadTxtTable("Public/LingGangBase.txt"));
			Tab_LingGangLingWuLevelUpProvider.Instance.Load(ReadTxtTable("Public/LingGangLingWuLevelUp.txt"));
			Tab_LingGangSkillBaseProvider.Instance.Load(ReadTxtTable("Public/LingGangSkillBase.txt"));
			Tab_LingGangSkillLevelUpProvider.Instance.Load(ReadTxtTable("Public/LingGangSkillLevelUp.txt"));
			Tab_LingGangStepBaseProvider.Instance.Load(ReadTxtTable("Public/LingGangStepBase.txt"));
			Tab_LingGangXuLingProvider.Instance.Load(ReadTxtTable("Public/LingGangXuLing.txt"));
			Tab_LotteryMissionProvider.Instance.Load(ReadTxtTable("Public/LotteryMission.txt"));
			Tab_LuckyRollDailyMissionsProvider.Instance.Load(ReadTxtTable("Public/LuckyRollDailyMissions.txt"));
			Tab_LuckyRollMissionProvider.Instance.Load(ReadTxtTable("Public/LuckyRollMission.txt"));
			Tab_MaiDianPartProvider.Instance.Load(ReadTxtTable("Public/MaiDianPart.txt"));
			Tab_MaiDianSuitProvider.Instance.Load(ReadTxtTable("Public/MaiDianSuit.txt"));
			Tab_MarryActivityMissionProvider.Instance.Load(ReadTxtTable("Public/MarryActivityMission.txt"));
			Tab_MarryActivityMissionRewardProvider.Instance.Load(ReadTxtTable("Public/MarryActivityMissionReward.txt"));
			Tab_MarryBaseInfoProvider.Instance.Load(ReadTxtTable("Public/MarryBaseInfo.txt"));
			Tab_MarryGiftInfoProvider.Instance.Load(ReadTxtTable("Public/MarryGiftInfo.txt"));
			Tab_MarrySceneInfoProvider.Instance.Load(ReadTxtTable("Public/MarrySceneInfo.txt"));
			Tab_MarryShopItemProvider.Instance.Load(ReadTxtTable("Public/MarryShopItem.txt"));
			Tab_MarryShowItemProvider.Instance.Load(ReadTxtTable("Public/MarryShowItem.txt"));
			Tab_MarryTitleBaseProvider.Instance.Load(ReadTxtTable("Public/MarryTitleBase.txt"));
			Tab_MarryWuNvBaseProvider.Instance.Load(ReadTxtTable("Public/MarryWuNvBase.txt"));
			Tab_MarryXinWuBaseProvider.Instance.Load(ReadTxtTable("Public/MarryXinWuBase.txt"));
			Tab_MergeRankRewardProvider.Instance.Load(ReadTxtTable("Public/MergeRankReward.txt"));
			Tab_MergeRechargeProvider.Instance.Load(ReadTxtTable("Public/MergeRecharge.txt"));
			Tab_MergeTouZiProvider.Instance.Load(ReadTxtTable("Public/MergeTouZi.txt"));
			Tab_MergeTouZiTypeProvider.Instance.Load(ReadTxtTable("Public/MergeTouZiType.txt"));
			Tab_MingGeBaseProvider.Instance.Load(ReadTxtTable("Public/MingGeBase.txt"));
			Tab_MiniMapProvider.Instance.Load(ReadTxtTable("Public/MiniMap.txt"));
			Tab_MissionBaseProvider.Instance.Load(ReadTxtTable("Public/MissionBase.txt"));
			Tab_MissionBonusProvider.Instance.Load(ReadTxtTable("Public/MissionBonus.txt"));
			Tab_MissionCollectItemProvider.Instance.Load(ReadTxtTable("Public/MissionCollectItem.txt"));
			Tab_MissionCopySceneProvider.Instance.Load(ReadTxtTable("Public/MissionCopyScene.txt"));
			Tab_MissionEnterAreaProvider.Instance.Load(ReadTxtTable("Public/MissionEnterArea.txt"));
			Tab_MissionFailedBaseProvider.Instance.Load(ReadTxtTable("Public/MissionFailedBase.txt"));
			Tab_MissionFailedConditionProvider.Instance.Load(ReadTxtTable("Public/MissionFailedCondition.txt"));
			Tab_MissionGuideProvider.Instance.Load(ReadTxtTable("Public/MissionGuide.txt"));
			Tab_MissionKillMonsterProvider.Instance.Load(ReadTxtTable("Public/MissionKillMonster.txt"));
			Tab_MissionLimitProvider.Instance.Load(ReadTxtTable("Public/MissionLimit.txt"));
			Tab_MissionLootItemProvider.Instance.Load(ReadTxtTable("Public/MissionLootItem.txt"));
			Tab_MissionPuzzleProvider.Instance.Load(ReadTxtTable("Public/MissionPuzzle.txt"));
			Tab_MissionRoundProvider.Instance.Load(ReadTxtTable("Public/MissionRound.txt"));
			Tab_MissionRoundBonusProvider.Instance.Load(ReadTxtTable("Public/MissionRoundBonus.txt"));
			Tab_MissionRoundCommitProvider.Instance.Load(ReadTxtTable("Public/MissionRoundCommit.txt"));
			Tab_MissionRoundConfigProvider.Instance.Load(ReadTxtTable("Public/MissionRoundConfig.txt"));
			Tab_MissionRoundLevelProvider.Instance.Load(ReadTxtTable("Public/MissionRoundLevel.txt"));
			Tab_MissionSectionRewardProvider.Instance.Load(ReadTxtTable("Public/MissionSectionReward.txt"));
			Tab_MissionUseItemProvider.Instance.Load(ReadTxtTable("Public/MissionUseItem.txt"));
			Tab_MondayLuckDrawBaseProvider.Instance.Load(ReadTxtTable("Public/MondayLuckDrawBase.txt"));
			Tab_MondayLuckDrawItemProvider.Instance.Load(ReadTxtTable("Public/MondayLuckDrawItem.txt"));
			Tab_MondayLuckDrawMissionsProvider.Instance.Load(ReadTxtTable("Public/MondayLuckDrawMissions.txt"));
			Tab_MopUpBaseProvider.Instance.Load(ReadTxtTable("Public/MopUpBase.txt"));
			Tab_NpcDialogProvider.Instance.Load(ReadTxtTable("Public/NpcDialog.txt"));
			Tab_OccupationBaseProvider.Instance.Load(ReadTxtTable("Public/OccupationBase.txt"));
			Tab_OfflineRewardProvider.Instance.Load(ReadTxtTable("Public/OfflineReward.txt"));
			Tab_OldGodDiamondBaseProvider.Instance.Load(ReadTxtTable("Public/OldGodDiamondBase.txt"));
			Tab_OldGodDiamondLevelUpProvider.Instance.Load(ReadTxtTable("Public/OldGodDiamondLevelUp.txt"));
			Tab_OldGodItemBaseProvider.Instance.Load(ReadTxtTable("Public/OldGodItemBase.txt"));
			Tab_OldGodItemLevelUpProvider.Instance.Load(ReadTxtTable("Public/OldGodItemLevelUp.txt"));
			Tab_OldGodSuitAttrProvider.Instance.Load(ReadTxtTable("Public/OldGodSuitAttr.txt"));
			Tab_OldGodSuitBaseProvider.Instance.Load(ReadTxtTable("Public/OldGodSuitBase.txt"));
			Tab_OldGodUnitBaseProvider.Instance.Load(ReadTxtTable("Public/OldGodUnitBase.txt"));
			Tab_OperationActivityGiftProvider.Instance.Load(ReadTxtTable("Public/OperationActivityGift.txt"));
			Tab_OperationActivityListProvider.Instance.Load(ReadTxtTable("Public/OperationActivityList.txt"));
			Tab_OppoRewardProvider.Instance.Load(ReadTxtTable("Public/OppoReward.txt"));
			Tab_PackageUnlockProvider.Instance.Load(ReadTxtTable("Public/PackageUnlock.txt"));
			Tab_ParamCollectionPublicProvider.Instance.Load(ReadTxtTable("Public/ParamCollectionPublic.txt"));
			Tab_PassiveSkillBaseProvider.Instance.Load(ReadTxtTable("Public/PassiveSkillBase.txt"));
			Tab_PeiShiCompoundBaseProvider.Instance.Load(ReadTxtTable("Public/PeiShiCompoundBase.txt"));
			Tab_PeiShiCompoundTypeProvider.Instance.Load(ReadTxtTable("Public/PeiShiCompoundType.txt"));
			Tab_PetBaseProvider.Instance.Load(ReadTxtTable("Public/PetBase.txt"));
			Tab_PetBattleSkillProvider.Instance.Load(ReadTxtTable("Public/PetBattleSkill.txt"));
			Tab_PetMountProvider.Instance.Load(ReadTxtTable("Public/PetMount.txt"));
			Tab_PetSoulStoneProvider.Instance.Load(ReadTxtTable("Public/PetSoulStone.txt"));
			Tab_PlayerLevelAttrProvider.Instance.Load(ReadTxtTable("Public/PlayerLevelAttr.txt"));
			Tab_PlayerSkinBaseProvider.Instance.Load(ReadTxtTable("Public/PlayerSkinBase.txt"));
			Tab_PlayerSkinColorProvider.Instance.Load(ReadTxtTable("Public/PlayerSkinColor.txt"));
			Tab_PlayerSkinLevelUpProvider.Instance.Load(ReadTxtTable("Public/PlayerSkinLevelUp.txt"));
			Tab_PlayerSkinPartProvider.Instance.Load(ReadTxtTable("Public/PlayerSkinPart.txt"));
			Tab_PoseBaseProvider.Instance.Load(ReadTxtTable("Public/PoseBase.txt"));
			Tab_ProgressBaseProvider.Instance.Load(ReadTxtTable("Public/ProgressBase.txt"));
			Tab_PugongCutProvider.Instance.Load(ReadTxtTable("Public/PugongCut.txt"));
			Tab_PurchaseAndRestitutProvider.Instance.Load(ReadTxtTable("Public/PurchaseAndRestitut.txt"));
			Tab_QianKunDuoBaoBaseProvider.Instance.Load(ReadTxtTable("Public/QianKunDuoBaoBase.txt"));
			Tab_QianKunDuoBaoGetIntegralProvider.Instance.Load(ReadTxtTable("Public/QianKunDuoBaoGetIntegral.txt"));
			Tab_QuickChangeEquipProvider.Instance.Load(ReadTxtTable("Public/QuickChangeEquip.txt"));
			Tab_RankBaseProvider.Instance.Load(ReadTxtTable("Public/RankBase.txt"));
			Tab_RankBonusProvider.Instance.Load(ReadTxtTable("Public/RankBonus.txt"));
			Tab_RealmPracticeBaseProvider.Instance.Load(ReadTxtTable("Public/RealmPracticeBase.txt"));
			Tab_RealmPracticeLevelUpProvider.Instance.Load(ReadTxtTable("Public/RealmPracticeLevelUp.txt"));
			Tab_RebateRuleProvider.Instance.Load(ReadTxtTable("Public/RebateRule.txt"));
			Tab_RechargeAndConsumeBaseProvider.Instance.Load(ReadTxtTable("Public/RechargeAndConsumeBase.txt"));
			Tab_RechargeGiftProvider.Instance.Load(ReadTxtTable("Public/RechargeGift.txt"));
			Tab_RechargeNewProvider.Instance.Load(ReadTxtTable("Public/RechargeNew.txt"));
			Tab_RelationProvider.Instance.Load(ReadTxtTable("Public/Relation.txt"));
			Tab_RevivePriceProvider.Instance.Load(ReadTxtTable("Public/RevivePrice.txt"));
			Tab_RewardSurveyProvider.Instance.Load(ReadTxtTable("Public/RewardSurvey.txt"));
			Tab_RewardSurveyConfigProvider.Instance.Load(ReadTxtTable("Public/RewardSurveyConfig.txt"));
			Tab_RMBProvider.Instance.Load(ReadTxtTable("Public/RMB.txt"));
			Tab_RMBAttributeProvider.Instance.Load(ReadTxtTable("Public/RMBAttribute.txt"));
			Tab_RobotBaseProvider.Instance.Load(ReadTxtTable("Public/RobotBase.txt"));
			Tab_RoleBaseAttrProvider.Instance.Load(ReadTxtTable("Public/RoleBaseAttr.txt"));
			Tab_RongYaoCollectionAwakeProvider.Instance.Load(ReadTxtTable("Public/RongYaoCollectionAwake.txt"));
			Tab_RongYaoCollectionUpdateProvider.Instance.Load(ReadTxtTable("Public/RongYaoCollectionUpdate.txt"));
			Tab_RongYaoSuitProvider.Instance.Load(ReadTxtTable("Public/RongYaoSuit.txt"));
			Tab_RuneAttrProvider.Instance.Load(ReadTxtTable("Public/RuneAttr.txt"));
			Tab_RuneBoxWeightProvider.Instance.Load(ReadTxtTable("Public/RuneBoxWeight.txt"));
			Tab_RuneJieExpProvider.Instance.Load(ReadTxtTable("Public/RuneJieExp.txt"));
			Tab_RuneLevelExpProvider.Instance.Load(ReadTxtTable("Public/RuneLevelExp.txt"));
			Tab_RunesTreasureBaseProvider.Instance.Load(ReadTxtTable("Public/RunesTreasureBase.txt"));
			Tab_SceneClassProvider.Instance.Load(ReadTxtTable("Public/SceneClass.txt"));
			Tab_SceneGroupPointProvider.Instance.Load(ReadTxtTable("Public/SceneGroupPoint.txt"));
			Tab_SceneMirrorProvider.Instance.Load(ReadTxtTable("Public/SceneMirror.txt"));
			Tab_SceneNpcProvider.Instance.Load(ReadTxtTable("Public/SceneNpc.txt"));
			Tab_ServerLevelExpExtraProvider.Instance.Load(ReadTxtTable("Public/ServerLevelExpExtra.txt"));
			Tab_SevenStartBaseProvider.Instance.Load(ReadTxtTable("Public/SevenStartBase.txt"));
			Tab_SevenStartBaseLevelUpProvider.Instance.Load(ReadTxtTable("Public/SevenStartBaseLevelUp.txt"));
			Tab_ShengLingBaseProvider.Instance.Load(ReadTxtTable("Public/ShengLingBase.txt"));
			Tab_ShengLingCopySceneProvider.Instance.Load(ReadTxtTable("Public/ShengLingCopyScene.txt"));
			Tab_ShengLingCopySceneLimitProvider.Instance.Load(ReadTxtTable("Public/ShengLingCopySceneLimit.txt"));
			Tab_ShengLingCopySceneTypeProvider.Instance.Load(ReadTxtTable("Public/ShengLingCopySceneType.txt"));
			Tab_ShengLingLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShengLingLevelUp.txt"));
			Tab_ShengLingSkillProvider.Instance.Load(ReadTxtTable("Public/ShengLingSkill.txt"));
			Tab_ShenMoJiangYuBuyTimesCostProvider.Instance.Load(ReadTxtTable("Public/ShenMoJiangYuBuyTimesCost.txt"));
			Tab_ShenQiRenZhuClassProvider.Instance.Load(ReadTxtTable("Public/ShenQiRenZhuClass.txt"));
			Tab_ShenQiRenZhuTypeProvider.Instance.Load(ReadTxtTable("Public/ShenQiRenZhuType.txt"));
			Tab_ShenShiBaseProvider.Instance.Load(ReadTxtTable("Public/ShenShiBase.txt"));
			Tab_ShenShiMaxLevelProvider.Instance.Load(ReadTxtTable("Public/ShenShiMaxLevel.txt"));
			Tab_ShenShouBaseProvider.Instance.Load(ReadTxtTable("Public/ShenShouBase.txt"));
			Tab_ShenShouEquipBaseProvider.Instance.Load(ReadTxtTable("Public/ShenShouEquipBase.txt"));
			Tab_ShenShouEquipLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShenShouEquipLevelUp.txt"));
			Tab_ShenShouSkillProvider.Instance.Load(ReadTxtTable("Public/ShenShouSkill.txt"));
			Tab_ShenWangLiLianProvider.Instance.Load(ReadTxtTable("Public/ShenWangLiLian.txt"));
			Tab_ShenWangZhanJiaBaseProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaBase.txt"));
			Tab_ShenWangZhanJiaCsBaseProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaCsBase.txt"));
			Tab_ShenWangZhanJiaCsRewardProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaCsReward.txt"));
			Tab_ShenWangZhanJiaCsShopProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaCsShop.txt"));
			Tab_ShenWangZhanJiaEquipProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaEquip.txt"));
			Tab_ShenWangZhanJiaLegendAttrProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaLegendAttr.txt"));
			Tab_ShenWangZhanJiaMakeLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaMakeLevelUp.txt"));
			Tab_ShenWangZhanJiaPaintingMissProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaPaintingMiss.txt"));
			Tab_ShenWangZhanJiaPaintingPayProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaPaintingPay.txt"));
			Tab_ShenWangZhanJiaPaintingRewardProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaPaintingReward.txt"));
			Tab_ShenWangZhanJiaPracticeLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShenWangZhanJiaPracticeLevelUp.txt"));
			Tab_ShenYuFengHaoBaseProvider.Instance.Load(ReadTxtTable("Public/ShenYuFengHaoBase.txt"));
			Tab_ShenYuPointAdditionProvider.Instance.Load(ReadTxtTable("Public/ShenYuPointAddition.txt"));
			Tab_ShenZhiJingBaseProvider.Instance.Load(ReadTxtTable("Public/ShenZhiJingBase.txt"));
			Tab_ShenZhiJingItemLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShenZhiJingItemLevelUp.txt"));
			Tab_ShenZhuangLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShenZhuangLevelUp.txt"));
			Tab_ShiLianBossProvider.Instance.Load(ReadTxtTable("Public/ShiLianBoss.txt"));
			Tab_ShopItemProvider.Instance.Load(ReadTxtTable("Public/ShopItem.txt"));
			Tab_ShopTypeProvider.Instance.Load(ReadTxtTable("Public/ShopType.txt"));
			Tab_ShouHuangXiLevelUpProvider.Instance.Load(ReadTxtTable("Public/ShouHuangXiLevelUp.txt"));
			Tab_ShouHuangXiSkillProvider.Instance.Load(ReadTxtTable("Public/ShouHuangXiSkill.txt"));
			Tab_ShouHuBaseProvider.Instance.Load(ReadTxtTable("Public/ShouHuBase.txt"));
			Tab_SignInRewardProvider.Instance.Load(ReadTxtTable("Public/SignInReward.txt"));
			Tab_SignTotalRewardProvider.Instance.Load(ReadTxtTable("Public/SignTotalReward.txt"));
			Tab_SkillAddValueProvider.Instance.Load(ReadTxtTable("Public/SkillAddValue.txt"));
			Tab_SkillBaseProvider.Instance.Load(ReadTxtTable("Public/SkillBase.txt"));
			Tab_SkillCalculateProvider.Instance.Load(ReadTxtTable("Public/SkillCalculate.txt"));
			Tab_SkillDelayProvider.Instance.Load(ReadTxtTable("Public/SkillDelay.txt"));
			Tab_SkillExProvider.Instance.Load(ReadTxtTable("Public/SkillEx.txt"));
			Tab_SkillLevelProvider.Instance.Load(ReadTxtTable("Public/SkillLevel.txt"));
			Tab_SkillListProvider.Instance.Load(ReadTxtTable("Public/SkillList.txt"));
			Tab_SkillSkinBaseProvider.Instance.Load(ReadTxtTable("Public/SkillSkinBase.txt"));
			Tab_SoulPowerBaseProvider.Instance.Load(ReadTxtTable("Public/SoulPowerBase.txt"));
			Tab_SoulPowerDecomposeProvider.Instance.Load(ReadTxtTable("Public/SoulPowerDecompose.txt"));
			Tab_SoulPowerJieUpProvider.Instance.Load(ReadTxtTable("Public/SoulPowerJieUp.txt"));
			Tab_SoulPowerLevelUpProvider.Instance.Load(ReadTxtTable("Public/SoulPowerLevelUp.txt"));
			Tab_SpokesmanRewardProvider.Instance.Load(ReadTxtTable("Public/SpokesmanReward.txt"));
			Tab_StarAttributeProvider.Instance.Load(ReadTxtTable("Public/StarAttribute.txt"));
			Tab_StarCraftFightProvider.Instance.Load(ReadTxtTable("Public/StarCraftFight.txt"));
			Tab_StarCraftMapProvider.Instance.Load(ReadTxtTable("Public/StarCraftMap.txt"));
			Tab_StarCraftSetProvider.Instance.Load(ReadTxtTable("Public/StarCraftSet.txt"));
			Tab_StarCraftTicketProvider.Instance.Load(ReadTxtTable("Public/StarCraftTicket.txt"));
			Tab_StarmapBaseProvider.Instance.Load(ReadTxtTable("Public/StarmapBase.txt"));
			Tab_StarmapRandomProvider.Instance.Load(ReadTxtTable("Public/StarmapRandom.txt"));
			Tab_StarmapSectionProvider.Instance.Load(ReadTxtTable("Public/StarmapSection.txt"));
			Tab_StarSoulLevelProvider.Instance.Load(ReadTxtTable("Public/StarSoulLevel.txt"));
			Tab_StarSoulSkillProvider.Instance.Load(ReadTxtTable("Public/StarSoulSkill.txt"));
			Tab_StarSoulUnitBaseProvider.Instance.Load(ReadTxtTable("Public/StarSoulUnitBase.txt"));
			Tab_StarSoulUnitLevelProvider.Instance.Load(ReadTxtTable("Public/StarSoulUnitLevel.txt"));
			Tab_StarWishItemProvider.Instance.Load(ReadTxtTable("Public/StarWishItem.txt"));
			Tab_StrengthenBaseProvider.Instance.Load(ReadTxtTable("Public/StrengthenBase.txt"));
			Tab_StrengthenSubClassProvider.Instance.Load(ReadTxtTable("Public/StrengthenSubClass.txt"));
			Tab_SYHBonusByStageProvider.Instance.Load(ReadTxtTable("Public/SYHBonusByStage.txt"));
			Tab_SYHCangBaoHuiAwardProvider.Instance.Load(ReadTxtTable("Public/SYHCangBaoHuiAward.txt"));
			Tab_SYHCangBaoMissionProvider.Instance.Load(ReadTxtTable("Public/SYHCangBaoMission.txt"));
			Tab_SYHFestivalActivityListProvider.Instance.Load(ReadTxtTable("Public/SYHFestivalActivityList.txt"));
			Tab_SYHFestivalCarnivalMissionProvider.Instance.Load(ReadTxtTable("Public/SYHFestivalCarnivalMission.txt"));
			Tab_SYHFestivalCarnivalRewardProvider.Instance.Load(ReadTxtTable("Public/SYHFestivalCarnivalReward.txt"));
			Tab_SYHFestivalMonsterProvider.Instance.Load(ReadTxtTable("Public/SYHFestivalMonster.txt"));
			Tab_SYHJianBaoGeProvider.Instance.Load(ReadTxtTable("Public/SYHJianBaoGe.txt"));
			Tab_SYHJingXiXianGouBaseProvider.Instance.Load(ReadTxtTable("Public/SYHJingXiXianGouBase.txt"));
			Tab_SYHJuBaoFuDaiBaseProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoFuDaiBase.txt"));
			Tab_SYHJuBaoFuDaiItemProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoFuDaiItem.txt"));
			Tab_SYHJuBaoFuDaiRewardProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoFuDaiReward.txt"));
			Tab_SYHJuBaoPenProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoPen.txt"));
			Tab_SYHJuBaoPenPrizeProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoPenPrize.txt"));
			Tab_SYHJuBaoPenRankingProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoPenRanking.txt"));
			Tab_SYHJuBaoPenRewardProvider.Instance.Load(ReadTxtTable("Public/SYHJuBaoPenReward.txt"));
			Tab_SYHNiuDanJiProvider.Instance.Load(ReadTxtTable("Public/SYHNiuDanJi.txt"));
			Tab_SYHQiYuanBaoGeProvider.Instance.Load(ReadTxtTable("Public/SYHQiYuanBaoGe.txt"));
			Tab_SYHRechargeAndConsumeRewardProvider.Instance.Load(ReadTxtTable("Public/SYHRechargeAndConsumeReward.txt"));
			Tab_SYHTianXingBaoGeProvider.Instance.Load(ReadTxtTable("Public/SYHTianXingBaoGe.txt"));
			Tab_SYHXianShiBoxProvider.Instance.Load(ReadTxtTable("Public/SYHXianShiBox.txt"));
			Tab_SYHXianShiQiangGouProvider.Instance.Load(ReadTxtTable("Public/SYHXianShiQiangGou.txt"));
			Tab_SYHXianYuMissionProvider.Instance.Load(ReadTxtTable("Public/SYHXianYuMission.txt"));
			Tab_SYHXianYuQmlhProvider.Instance.Load(ReadTxtTable("Public/SYHXianYuQmlh.txt"));
			Tab_SYHXianYuShengHuiAwardProvider.Instance.Load(ReadTxtTable("Public/SYHXianYuShengHuiAward.txt"));
			Tab_SYHXianYuShengHuiBaseProvider.Instance.Load(ReadTxtTable("Public/SYHXianYuShengHuiBase.txt"));
			Tab_SYHYuanBaoInvestProvider.Instance.Load(ReadTxtTable("Public/SYHYuanBaoInvest.txt"));
			Tab_SYHYuanBaoInvestTypeProvider.Instance.Load(ReadTxtTable("Public/SYHYuanBaoInvestType.txt"));
			Tab_SYHZaDanPingGuoProvider.Instance.Load(ReadTxtTable("Public/SYHZaDanPingGuo.txt"));
			Tab_SYHZaDanPingGuoNumRewardProvider.Instance.Load(ReadTxtTable("Public/SYHZaDanPingGuoNumReward.txt"));
			Tab_TaiGuRelicBaseProvider.Instance.Load(ReadTxtTable("Public/TaiGuRelicBase.txt"));
			Tab_TaiGuRelicShopItemProvider.Instance.Load(ReadTxtTable("Public/TaiGuRelicShopItem.txt"));
			Tab_TaoZhuangAttrProvider.Instance.Load(ReadTxtTable("Public/TaoZhuangAttr.txt"));
			Tab_TaoZhuangBaseProvider.Instance.Load(ReadTxtTable("Public/TaoZhuangBase.txt"));
			Tab_TeamPlatformProvider.Instance.Load(ReadTxtTable("Public/TeamPlatform.txt"));
			Tab_TeamShipProvider.Instance.Load(ReadTxtTable("Public/TeamShip.txt"));
			Tab_teQuanEnumProvider.Instance.Load(ReadTxtTable("Public/teQuanEnum.txt"));
			Tab_teQuanGainProvider.Instance.Load(ReadTxtTable("Public/teQuanGain.txt"));
			Tab_TheInheritProvider.Instance.Load(ReadTxtTable("Public/TheInherit.txt"));
			Tab_TianCiHongFuBaseProvider.Instance.Load(ReadTxtTable("Public/TianCiHongFuBase.txt"));
			Tab_TianCiHongFuRewardProvider.Instance.Load(ReadTxtTable("Public/TianCiHongFuReward.txt"));
			Tab_TianDaoShengYuanProvider.Instance.Load(ReadTxtTable("Public/TianDaoShengYuan.txt"));
			Tab_TianDaoShengYuanRewardProvider.Instance.Load(ReadTxtTable("Public/TianDaoShengYuanReward.txt"));
			Tab_TianFuBaseProvider.Instance.Load(ReadTxtTable("Public/TianFuBase.txt"));
			Tab_TianJiBaoGeProvider.Instance.Load(ReadTxtTable("Public/TianJiBaoGe.txt"));
			Tab_TiKuanJiAwardProvider.Instance.Load(ReadTxtTable("Public/TiKuanJiAward.txt"));
			Tab_TimeLimitBagProvider.Instance.Load(ReadTxtTable("Public/TimeLimitBag.txt"));
			Tab_TimingBoxProvider.Instance.Load(ReadTxtTable("Public/TimingBox.txt"));
			Tab_TitleBaseProvider.Instance.Load(ReadTxtTable("Public/TitleBase.txt"));
			Tab_TitleClassProvider.Instance.Load(ReadTxtTable("Public/TitleClass.txt"));
			Tab_TreasureProvider.Instance.Load(ReadTxtTable("Public/Treasure.txt"));
			Tab_TreasureHuntMissionsProvider.Instance.Load(ReadTxtTable("Public/TreasureHuntMissions.txt"));
			Tab_TreasureHuntShopItemProvider.Instance.Load(ReadTxtTable("Public/TreasureHuntShopItem.txt"));
			Tab_TreasureShowProvider.Instance.Load(ReadTxtTable("Public/TreasureShow.txt"));
			Tab_VehicleProvider.Instance.Load(ReadTxtTable("Public/Vehicle.txt"));
			Tab_VipDayGiftProvider.Instance.Load(ReadTxtTable("Public/VipDayGift.txt"));
			Tab_VipEnjoyGiftProvider.Instance.Load(ReadTxtTable("Public/VipEnjoyGift.txt"));
			Tab_VipHaoLiProvider.Instance.Load(ReadTxtTable("Public/VipHaoLi.txt"));
			Tab_VIPInvestRewardProvider.Instance.Load(ReadTxtTable("Public/VIPInvestReward.txt"));
			Tab_VIPLimitProvider.Instance.Load(ReadTxtTable("Public/VIPLimit.txt"));
			Tab_VIPPowerProvider.Instance.Load(ReadTxtTable("Public/VIPPower.txt"));
			Tab_WarPetArrayEffectProvider.Instance.Load(ReadTxtTable("Public/WarPetArrayEffect.txt"));
			Tab_WarPetArrayTechniqueLevelUpProvider.Instance.Load(ReadTxtTable("Public/WarPetArrayTechniqueLevelUp.txt"));
			Tab_WarPetBaseProvider.Instance.Load(ReadTxtTable("Public/WarPetBase.txt"));
			Tab_WarPetCompoundProvider.Instance.Load(ReadTxtTable("Public/WarPetCompound.txt"));
			Tab_WarPetEquipProvider.Instance.Load(ReadTxtTable("Public/WarPetEquip.txt"));
			Tab_WarPetEquipLevelUpProvider.Instance.Load(ReadTxtTable("Public/WarPetEquipLevelUp.txt"));
			Tab_WarPetEquipStarLevelUpProvider.Instance.Load(ReadTxtTable("Public/WarPetEquipStarLevelUp.txt"));
			Tab_WarPetItemDecomposeProvider.Instance.Load(ReadTxtTable("Public/WarPetItemDecompose.txt"));
			Tab_WarPetLevelUpProvider.Instance.Load(ReadTxtTable("Public/WarPetLevelUp.txt"));
			Tab_WarPetRandomStarProvider.Instance.Load(ReadTxtTable("Public/WarPetRandomStar.txt"));
			Tab_WarPetSkillProvider.Instance.Load(ReadTxtTable("Public/WarPetSkill.txt"));
			Tab_WarPetSkillLevelUpProvider.Instance.Load(ReadTxtTable("Public/WarPetSkillLevelUp.txt"));
			Tab_WarPetSkillLimitProvider.Instance.Load(ReadTxtTable("Public/WarPetSkillLimit.txt"));
			Tab_WarPetStarProvider.Instance.Load(ReadTxtTable("Public/WarPetStar.txt"));
			Tab_WarPetTalentProvider.Instance.Load(ReadTxtTable("Public/WarPetTalent.txt"));
			Tab_WingBaseProvider.Instance.Load(ReadTxtTable("Public/WingBase.txt"));
			Tab_WingTransmogProvider.Instance.Load(ReadTxtTable("Public/WingTransmog.txt"));
			Tab_WishBaseProvider.Instance.Load(ReadTxtTable("Public/WishBase.txt"));
			Tab_WitCompeteProvider.Instance.Load(ReadTxtTable("Public/WitCompete.txt"));
			Tab_WorldBossProvider.Instance.Load(ReadTxtTable("Public/WorldBoss.txt"));
			Tab_WorldBossLikeProvider.Instance.Load(ReadTxtTable("Public/WorldBossLike.txt"));
			Tab_WuXingYuanLiProvider.Instance.Load(ReadTxtTable("Public/WuXingYuanLi.txt"));
			Tab_XianYuZhiYiBaseProvider.Instance.Load(ReadTxtTable("Public/XianYuZhiYiBase.txt"));
			Tab_XianYuZhiYiChapterBaseProvider.Instance.Load(ReadTxtTable("Public/XianYuZhiYiChapterBase.txt"));
			Tab_XianYuZhiYiLevelUpProvider.Instance.Load(ReadTxtTable("Public/XianYuZhiYiLevelUp.txt"));
			Tab_XianYuZhiYiUnlockLevelUpProvider.Instance.Load(ReadTxtTable("Public/XianYuZhiYiUnlockLevelUp.txt"));
			Tab_XingHunItemBaseProvider.Instance.Load(ReadTxtTable("Public/XingHunItemBase.txt"));
			Tab_XingHunLevelUpProvider.Instance.Load(ReadTxtTable("Public/XingHunLevelUp.txt"));
			Tab_XingHunTeZhiLevelUpProvider.Instance.Load(ReadTxtTable("Public/XingHunTeZhiLevelUp.txt"));
			Tab_XingHunTeZhiPassiveSkillProvider.Instance.Load(ReadTxtTable("Public/XingHunTeZhiPassiveSkill.txt"));
			Tab_XingHunUnitBaseProvider.Instance.Load(ReadTxtTable("Public/XingHunUnitBase.txt"));
			Tab_XingHunZhuanJingBaseProvider.Instance.Load(ReadTxtTable("Public/XingHunZhuanJingBase.txt"));
			Tab_XingHunZhuanJingEffectProvider.Instance.Load(ReadTxtTable("Public/XingHunZhuanJingEffect.txt"));
			Tab_XingHunZhuanJingLevelUpProvider.Instance.Load(ReadTxtTable("Public/XingHunZhuanJingLevelUp.txt"));
			Tab_XingYunBlessingProvider.Instance.Load(ReadTxtTable("Public/XingYunBlessing.txt"));
			Tab_XingYunExtractBaseProvider.Instance.Load(ReadTxtTable("Public/XingYunExtractBase.txt"));
			Tab_XingYunGuideEventProvider.Instance.Load(ReadTxtTable("Public/XingYunGuideEvent.txt"));
			Tab_XingYunMissionProvider.Instance.Load(ReadTxtTable("Public/XingYunMission.txt"));
			Tab_XingYuPaiHangProvider.Instance.Load(ReadTxtTable("Public/XingYuPaiHang.txt"));
			Tab_XingYuPingFenProvider.Instance.Load(ReadTxtTable("Public/XingYuPingFen.txt"));
			Tab_XingYuRewardProvider.Instance.Load(ReadTxtTable("Public/XingYuReward.txt"));
			Tab_XingYuTicketBonusProvider.Instance.Load(ReadTxtTable("Public/XingYuTicketBonus.txt"));
			Tab_XingYuTicketMissionProvider.Instance.Load(ReadTxtTable("Public/XingYuTicketMission.txt"));
			Tab_XueShiBaoKuProvider.Instance.Load(ReadTxtTable("Public/XueShiBaoKu.txt"));
			Tab_YingYanBaseProvider.Instance.Load(ReadTxtTable("Public/YingYanBase.txt"));
			Tab_YuanShenBaseProvider.Instance.Load(ReadTxtTable("Public/YuanShenBase.txt"));
			Tab_YuanShenShowExpProvider.Instance.Load(ReadTxtTable("Public/YuanShenShowExp.txt"));
			Tab_YueKaProvider.Instance.Load(ReadTxtTable("Public/YueKa.txt"));
			Tab_YunGouProvider.Instance.Load(ReadTxtTable("Public/YunGou.txt"));
			Tab_ZhanLingLibaoProvider.Instance.Load(ReadTxtTable("Public/ZhanLingLibao.txt"));
			Tab_ZheKouShangDianProvider.Instance.Load(ReadTxtTable("Public/ZheKouShangDian.txt"));
			Tab_ZhongShenDianProvider.Instance.Load(ReadTxtTable("Public/ZhongShenDian.txt"));
			Tab_ZhuangBeiXunBaoProvider.Instance.Load(ReadTxtTable("Public/ZhuangBeiXunBao.txt"));

            //Debug.Log("<color=green>LoadData End.</color>");
        }
        /// <summary>
        /// ����FlatBuffer�������ļ�
        /// </summary>
        /// <returns></returns>
        static public IEnumerator LoadFBDataFromFile()
        {
            //Debug.Log("<color=green>LoadFBDataFromFile Begin.</color>");
            FB_AchievementJumpProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/AchievementJump.txt"));
			FB_ActivityDaZhiGouShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ActivityDaZhiGouShow.txt"));
			FB_ActivityPrayShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ActivityPrayShow.txt"));
			FB_ActivityTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ActivityType.txt"));
			FB_AllActivityProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/AllActivity.txt"));
			yield return new WaitForEndOfFrame();
			FB_AnimationProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Animation.txt"));
			FB_AnimationCurveProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/AnimationCurve.txt"));
			FB_AreaCodeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/AreaCode.txt"));
			FB_AttributeLessProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/AttributeLess.txt"));
			FB_BottomRightMenuProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/BottomRightMenu.txt"));
			yield return new WaitForEndOfFrame();
			FB_BulletProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Bullet.txt"));
			FB_CameraEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CameraEffect.txt"));
			FB_CharAnimProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharAnim.txt"));
			FB_CharAnimEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharAnimEffect.txt"));
			FB_CharModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_CharMountProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharMount.txt"));
			FB_CharSoulProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharSoul.txt"));
			FB_CharWingProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharWing.txt"));
			FB_CharXingHunProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CharXingHun.txt"));
			FB_ChatExpressionProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ChatExpression.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChatRobotBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ChatRobotBase.txt"));
			FB_ChatRobotContentProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ChatRobotContent.txt"));
			FB_ChatWordExpressionProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ChatWordExpression.txt"));
			FB_ClientStoryTableProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ClientStoryTable.txt"));
			FB_CloseUpShotProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CloseUpShot.txt"));
			yield return new WaitForEndOfFrame();
			FB_CombatPetSceneProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CombatPetScene.txt"));
			FB_CommonItemDataAboutSexProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CommonItemDataAboutSex.txt"));
			FB_CommonItemParamTypeListProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CommonItemParamTypeList.txt"));
			FB_CopySceneLastShotProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CopySceneLastShot.txt"));
			FB_CSQXuanSNpcProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/CSQXuanSNpc.txt"));
			yield return new WaitForEndOfFrame();
			FB_DamageBoardTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/DamageBoardType.txt"));
			FB_DestinyBloodSkillDesProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/DestinyBloodSkillDes.txt"));
			FB_DestinyObjParamsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/DestinyObjParams.txt"));
			FB_DymaticSceneEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/DymaticSceneEffect.txt"));
			FB_EffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Effect.txt"));
			yield return new WaitForEndOfFrame();
			FB_EffectPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/EffectPoint.txt"));
			FB_EquipStarEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/EquipStarEffect.txt"));
			FB_EquipTipsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/EquipTips.txt"));
			FB_FittingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/FittingBase.txt"));
			FB_FlyCutterUIProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/FlyCutterUI.txt"));
			yield return new WaitForEndOfFrame();
			FB_fwqlistProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/fwqlist.txt"));
			FB_GetPathBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/GetPathBase.txt"));
			FB_GetPathInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/GetPathInfo.txt"));
			FB_gonggaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/gonggao.txt"));
			FB_GuideBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/GuideBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuideTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/GuideType.txt"));
			FB_GuildFormationTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/GuildFormationType.txt"));
			FB_HairModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/HairModel.txt"));
			FB_HuanJingObjParamsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/HuanJingObjParams.txt"));
			FB_HuanLeXunBaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/HuanLeXunBao.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangShanghenParamProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/HunJiangShanghenParam.txt"));
			FB_IapGiftUIProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/IapGiftUI.txt"));
			FB_ItemButtonLogicProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ItemButtonLogic.txt"));
			FB_ItemCompoundTypeSettingProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ItemCompoundTypeSetting.txt"));
			FB_JiLingTreeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/JiLingTreeBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiYiCardProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/JiYiCard.txt"));
			FB_KneadFaceFakeObjMovePosProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceFakeObjMovePos.txt"));
			FB_KneadFaceOfEyeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceOfEye.txt"));
			FB_KneadFaceOfEyeBrowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceOfEyeBrow.txt"));
			FB_KneadFaceOfLipProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceOfLip.txt"));
			yield return new WaitForEndOfFrame();
			FB_KneadFaceOfPrefabProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceOfPrefab.txt"));
			FB_KneadFaceOfTattoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/KneadFaceOfTatto.txt"));
			FB_LingBaoTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/LingBaoType.txt"));
			FB_LocalNotificationProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/LocalNotification.txt"));
			FB_MaiDianStarSoulModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/MaiDianStarSoulModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_MergeRankShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/MergeRankShow.txt"));
			FB_MissionDictionaryProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/MissionDictionary.txt"));
			FB_MissionSceneEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/MissionSceneEffect.txt"));
			FB_MountBindPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/MountBindPoint.txt"));
			FB_NPCPaoPaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/NPCPaoPao.txt"));
			yield return new WaitForEndOfFrame();
			FB_NPCSoundsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/NPCSounds.txt"));
			FB_OfflineCompetitionPlayerShowPostionProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/OfflineCompetitionPlayerShowPostion.txt"));
			FB_OperateResultTipsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/OperateResultTips.txt"));
			FB_OptionTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/OptionType.txt"));
			FB_PhotoEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PhotoEffect.txt"));
			yield return new WaitForEndOfFrame();
			FB_PhotoTabEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PhotoTabEffect.txt"));
			FB_PicturePuzzleProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PicturePuzzle.txt"));
			FB_PlayerHeadInfoCfgProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PlayerHeadInfoCfg.txt"));
			FB_PlayMethodBroadcastProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PlayMethodBroadcast.txt"));
			FB_PreloadProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Preload.txt"));
			yield return new WaitForEndOfFrame();
			FB_PropertyIntroProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/PropertyIntro.txt"));
			FB_RankTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/RankType.txt"));
			FB_RealTimeShadowConfigProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/RealTimeShadowConfig.txt"));
			FB_RobotProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Robot.txt"));
			FB_RobotAppearanceProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/RobotAppearance.txt"));
			yield return new WaitForEndOfFrame();
			FB_RoleNameProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/RoleName.txt"));
			FB_SceneCullingParamProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SceneCullingParam.txt"));
			FB_SceneShaderParamProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SceneShaderParam.txt"));
			FB_SexDistinctionProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SexDistinction.txt"));
			FB_ShakeCameraProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShakeCamera.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangYouLeChangProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShenWangYouLeChang.txt"));
			FB_ShenWangZhanJiaCSChapterProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShenWangZhanJiaCSChapter.txt"));
			FB_ShenYuRankBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShenYuRankBase.txt"));
			FB_ShieldingSymbolProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShieldingSymbol.txt"));
			FB_ShieldStringProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShieldString.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShopClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/ShopClass.txt"));
			FB_SkillCamAnimProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SkillCamAnim.txt"));
			FB_SkillDemonstrationProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SkillDemonstration.txt"));
			FB_SoundsProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/Sounds.txt"));
			FB_StarSoulPaoPaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StarSoulPaoPao.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarWishRewardShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StarWishRewardShow.txt"));
			FB_StoryAnimationProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StoryAnimation.txt"));
			FB_StoryPlayerEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StoryPlayerEffect.txt"));
			FB_StrDictionaryProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StrDictionary.txt"));
			FB_StrengthenNeedEquipOrExpProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StrengthenNeedEquipOrExp.txt"));
			yield return new WaitForEndOfFrame();
			FB_StrengthenNeedResourceProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StrengthenNeedResource.txt"));
			FB_StrengthenRateProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StrengthenRate.txt"));
			FB_StrLoadingProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/StrLoading.txt"));
			FB_SYHFestivalDicProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SYHFestivalDic.txt"));
			FB_SYHZaDanPingGuoShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/SYHZaDanPingGuoShow.txt"));
			yield return new WaitForEndOfFrame();
			FB_TaoZhuangModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/TaoZhuangModel.txt"));
			FB_TeamPostionProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/TeamPostion.txt"));
			FB_TipsEquipListProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/TipsEquipList.txt"));
			FB_TipsPreviewProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/TipsPreview.txt"));
			FB_TopRightMenuProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/TopRightMenu.txt"));
			yield return new WaitForEndOfFrame();
			FB_UIInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/UIInfo.txt"));
			FB_UIModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/UIModel.txt"));
			FB_UISpecialHideProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/UISpecialHide.txt"));
			FB_UISubPanelPathProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/UISubPanelPath.txt"));
			FB_UITextProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/UIText.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WarPetModel.txt"));
			FB_WeaponAnimationProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WeaponAnimation.txt"));
			FB_WeaponModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WeaponModel.txt"));
			FB_WeekPlanProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WeekPlan.txt"));
			FB_WingExtraModelPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WingExtraModelPoint.txt"));
			yield return new WaitForEndOfFrame();
			FB_WorldCupCountryProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/WorldCupCountry.txt"));
			FB_YingYanItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Client/YingYanItem.txt"));
			FB_AchievementBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AchievementBase.txt"));
			FB_AchievementClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AchievementClass.txt"));
			FB_AchievementSubClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AchievementSubClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityAncientSealProessRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityAncientSealProessReward.txt"));
			FB_ActivityAncientSealSearchProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityAncientSealSearch.txt"));
			FB_ActivityBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityBase.txt"));
			FB_ActivityBonusProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityBonus.txt"));
			FB_ActivityChickenBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityChickenBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityChickenGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityChickenGift.txt"));
			FB_ActivityChickenMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityChickenMission.txt"));
			FB_ActivityChickenProessRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityChickenProessReward.txt"));
			FB_ActivityDaZhiGouRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityDaZhiGouReward.txt"));
			FB_ActivityObjectivesListProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityObjectivesList.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityPoint.txt"));
			FB_ActivityPrayProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityPray.txt"));
			FB_ActivityPrayShopProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityPrayShop.txt"));
			FB_ActivityQuestionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityQuestionBase.txt"));
			FB_ActivityShowBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityShowBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityShowLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActivityShowLevel.txt"));
			FB_ActWanGuConfigProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuConfig.txt"));
			FB_ActWanGuMissionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuMissionBase.txt"));
			FB_ActWanGuMissionClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuMissionClass.txt"));
			FB_ActWanGuMissionSubClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuMissionSubClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActWanGuPropLevelBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuPropLevelBase.txt"));
			FB_ActWanGuPropLevelRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActWanGuPropLevelReward.txt"));
			FB_ActZhuTianBaoLunProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ActZhuTianBaoLun.txt"));
			FB_AdvancedBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AdvancedBase.txt"));
			FB_AncientSealShopItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AncientSealShopItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_ArenaRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ArenaReward.txt"));
			FB_ArtifactBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ArtifactBase.txt"));
			FB_ArtifactBaseLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ArtifactBaseLevelUp.txt"));
			FB_ArtifactBaseLevelUpSpecialProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ArtifactBaseLevelUpSpecial.txt"));
			FB_AttrPowerBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AttrPowerBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_AuctionClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AuctionClass.txt"));
			FB_AuctionItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AuctionItem.txt"));
			FB_AuctionTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AuctionType.txt"));
			FB_AutoBindBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/AutoBindBase.txt"));
			FB_BagTreasureProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BagTreasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_baiwanjijieProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/baiwanjijie.txt"));
			FB_baiwanjijie2Provider.Instance.LoadFromFile(GetFlatBufferPath("Public/baiwanjijie2.txt"));
			FB_BattlefieldCampLevelBuffProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BattlefieldCampLevelBuff.txt"));
			FB_BattlefieldCampRewProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BattlefieldCampRew.txt"));
			FB_BattlefieldCollectionRewProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BattlefieldCollectionRew.txt"));
			yield return new WaitForEndOfFrame();
			FB_BattlefieldRankRewProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BattlefieldRankRew.txt"));
			FB_BenYuanItemBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BenYuanItemBase.txt"));
			FB_BenYuanItemLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BenYuanItemLevelUp.txt"));
			FB_BlackCardSignInRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BlackCardSignInReward.txt"));
			FB_BlackCardTickProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BlackCardTick.txt"));
			yield return new WaitForEndOfFrame();
			FB_BloodBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BloodBase.txt"));
			FB_BloodMixProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BloodMix.txt"));
			FB_BloodMixLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BloodMixLevel.txt"));
			FB_BloodPossessedProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BloodPossessed.txt"));
			FB_BloodPossessedModelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BloodPossessedModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_BossGongChengRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BossGongChengReward.txt"));
			FB_BossInvestProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BossInvest.txt"));
			FB_BossInvestTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/BossInvestType.txt"));
			FB_CardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardBase.txt"));
			FB_CardFlopBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardFlopBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_CardJiBanActivateRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardJiBanActivateReward.txt"));
			FB_CardRankRewardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardRankRewardBase.txt"));
			FB_CardShopProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardShop.txt"));
			FB_CardXunBaoBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardXunBaoBase.txt"));
			FB_CardXunBaoShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CardXunBaoShow.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChangeJob6ItemBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeJob6ItemBase.txt"));
			FB_ChangeJob8ComprehendUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeJob8ComprehendUp.txt"));
			FB_ChangeJob8MissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeJob8Mission.txt"));
			FB_ChangeJobBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeJobBase.txt"));
			FB_ChangeJobPhaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeJobPhase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChangeMenPaiConditionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChangeMenPaiCondition.txt"));
			FB_ChapterCardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChapterCardBase.txt"));
			FB_ChapterCardLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChapterCardLevelUp.txt"));
			FB_CharmLoveRankRewardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CharmLoveRankRewardBase.txt"));
			FB_ChatLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChatLimit.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChiJiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChiJiBase.txt"));
			FB_ChiJiRewardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChiJiRewardBase.txt"));
			FB_ChongJiGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ChongJiGift.txt"));
			FB_ClientConfigProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ClientConfig.txt"));
			FB_CollectActivityProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CollectActivity.txt"));
			yield return new WaitForEndOfFrame();
			FB_CombatPetBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CombatPetBase.txt"));
			FB_CombatPetRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CombatPetReward.txt"));
			FB_CommonItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CommonItem.txt"));
			FB_CoolDownTimeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CoolDownTime.txt"));
			FB_CopySceneLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneLimit.txt"));
			yield return new WaitForEndOfFrame();
			FB_CopySceneMoNengFeiXuProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneMoNengFeiXu.txt"));
			FB_CopySceneShopProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneShop.txt"));
			FB_CopySceneStageDicProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneStageDic.txt"));
			FB_CopySceneTowerProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneTower.txt"));
			FB_CopySceneTowerSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CopySceneTowerSkill.txt"));
			yield return new WaitForEndOfFrame();
			FB_CreatePlayerProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CreatePlayer.txt"));
			FB_CSEvalueRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CSEvalueReward.txt"));
			FB_CurrencyBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/CurrencyBase.txt"));
			FB_DailyRebateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DailyRebate.txt"));
			FB_DailyRechargeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DailyRecharge.txt"));
			yield return new WaitForEndOfFrame();
			FB_DestinyBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyBase.txt"));
			FB_DestinyBaseLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyBaseLevelUp.txt"));
			FB_DestinyBloodBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyBloodBase.txt"));
			FB_DestinyBloodItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyBloodItem.txt"));
			FB_DestinyBloodLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyBloodLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_DestinyCultureLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyCultureLevelUp.txt"));
			FB_DestinySkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinySkill.txt"));
			FB_DestinyTemperBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyTemperBase.txt"));
			FB_DestinyTemperRateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DestinyTemperRate.txt"));
			FB_DiamondAttributeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondAttribute.txt"));
			yield return new WaitForEndOfFrame();
			FB_DiamondBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondBase.txt"));
			FB_DiamondCuiLianProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondCuiLian.txt"));
			FB_DiamondGongZhenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondGongZhen.txt"));
			FB_DiamondGongZhenAllProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondGongZhenAll.txt"));
			FB_DiamondGongZhenEnumProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondGongZhenEnum.txt"));
			yield return new WaitForEndOfFrame();
			FB_DiamondSetProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondSet.txt"));
			FB_DiamondStrengthenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/DiamondStrengthen.txt"));
			FB_EmotionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EmotionBase.txt"));
			FB_EmotionClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EmotionClass.txt"));
			FB_EquipAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipAttrRateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipAttrRate.txt"));
			FB_EquipAttrValueProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipAttrValue.txt"));
			FB_EquipCompoundTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipCompoundType.txt"));
			FB_EquipCompoundTypeShenZhuangProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipCompoundTypeShenZhuang.txt"));
			FB_EquipExchangeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipExchange.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipExhibitionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipExhibition.txt"));
			FB_EquipExtraAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipExtraAttr.txt"));
			FB_EquipFavPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipFavPoint.txt"));
			FB_EquipFuLingAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipFuLingAttr.txt"));
			FB_EquipFuLingLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipFuLingLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipFusionAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipFusionAttr.txt"));
			FB_EquipFusionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipFusionBase.txt"));
			FB_EquipPartZhuHunProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipPartZhuHun.txt"));
			FB_EquipPartZhuHunBaoShiProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipPartZhuHunBaoShi.txt"));
			FB_EquipRandomAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipRandomAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipRecastProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipRecast.txt"));
			FB_EquipSetStoneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSetStone.txt"));
			FB_EquipSetStoneGroupAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSetStoneGroupAttr.txt"));
			FB_EquipSlotAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSlotAttr.txt"));
			FB_EquipSlotResonanceProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSlotResonance.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipSlotStrengthenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSlotStrengthen.txt"));
			FB_EquipSourceProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipSource.txt"));
			FB_EquipStrengthenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipStrengthen.txt"));
			FB_EquipZhuHunProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EquipZhuHun.txt"));
			FB_EternalTreasureProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EternalTreasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_EternalTreasureRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/EternalTreasureReward.txt"));
			FB_FakeObjectProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FakeObject.txt"));
			FB_FindRewardBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FindRewardBase.txt"));
			FB_FindRewardClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FindRewardClass.txt"));
			FB_FuLiDaTingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FuLiDaTing.txt"));
			yield return new WaitForEndOfFrame();
			FB_FunctionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FunctionBase.txt"));
			FB_FunctionPrepareProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/FunctionPrepare.txt"));
			FB_GodWeaponBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GodWeaponBase.txt"));
			FB_GodWeaponLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GodWeaponLevel.txt"));
			FB_GodWordBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GodWordBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GodWordCharmProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GodWordCharm.txt"));
			FB_GoldCopyAwardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GoldCopyAward.txt"));
			FB_GoldenBadgeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GoldenBadgeBase.txt"));
			FB_GoldenBadgeLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GoldenBadgeLevelUp.txt"));
			FB_GreetingCardRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GreetingCardReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_GroupPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GroupPoint.txt"));
			FB_GrowUpBagProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GrowUpBag.txt"));
			FB_GuideCollectBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuideCollectBase.txt"));
			FB_GuideCollectBossTipsProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuideCollectBossTips.txt"));
			FB_GuildActiveBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildActiveBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildBase.txt"));
			FB_GuildBlessBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildBlessBase.txt"));
			FB_GuildBossProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildBoss.txt"));
			FB_GuildFoodBoxProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildFoodBox.txt"));
			FB_GuildFormationBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildFormationBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildFormationLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildFormationLevel.txt"));
			FB_GuildFormationTypeNewProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildFormationTypeNew.txt"));
			FB_GuildPermissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildPermission.txt"));
			FB_GuildPresentProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildPresent.txt"));
			FB_GuildRedPacketProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildRedPacket.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildWelfareBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/GuildWelfareBase.txt"));
			FB_HuanJingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingBase.txt"));
			FB_HuanJingEquipProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingEquip.txt"));
			FB_HuanJingEquipSlotProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingEquipSlot.txt"));
			FB_HuanJingEquipStarProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingEquipStar.txt"));
			yield return new WaitForEndOfFrame();
			FB_HuanJingJiBanProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingJiBan.txt"));
			FB_HuanJingLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingLevel.txt"));
			FB_HuanJingSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingSkill.txt"));
			FB_HuanJingTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuanJingType.txt"));
			FB_HuLingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HuLingBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunGeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunGeBase.txt"));
			FB_HunJiangGongMingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangGongMing.txt"));
			FB_HunJiangItemBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangItemBase.txt"));
			FB_HunJiangItemLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangItemLevelUp.txt"));
			FB_HunJiangJiBanBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangJiBanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangJiBanLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangJiBanLevelUp.txt"));
			FB_HunJiangJiBanSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangJiBanSkill.txt"));
			FB_HunJiangJuHunProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangJuHun.txt"));
			FB_HunJiangRongLianProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangRongLian.txt"));
			FB_HunJiangShangZhenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangShangZhen.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangSkillBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangSkillBase.txt"));
			FB_HunJiangSkillValueProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangSkillValue.txt"));
			FB_HunJiangXunBaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/HunJiangXunBao.txt"));
			FB_IapGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/IapGift.txt"));
			FB_IapGift2Provider.Instance.LoadFromFile(GetFlatBufferPath("Public/IapGift2.txt"));
			yield return new WaitForEndOfFrame();
			FB_IapGiftRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/IapGiftReward.txt"));
			FB_IapGiftReward2Provider.Instance.LoadFromFile(GetFlatBufferPath("Public/IapGiftReward2.txt"));
			FB_ImpactProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/Impact.txt"));
			FB_ItemCompoundBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ItemCompoundBase.txt"));
			FB_ItemCompoundTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ItemCompoundType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ItemGiftBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ItemGiftBase.txt"));
			FB_ItemLocationProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ItemLocation.txt"));
			FB_ItemStepUpBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ItemStepUpBase.txt"));
			FB_JiBanAttrLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiBanAttrLevelUp.txt"));
			FB_JiBanBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiBanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JieSoulStoneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieSoulStone.txt"));
			FB_JieYuanBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieYuanBase.txt"));
			FB_JieYuanLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieYuanLevelUp.txt"));
			FB_JieYuanSlotResonanceProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieYuanSlotResonance.txt"));
			FB_JieYuanSuitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieYuanSuit.txt"));
			yield return new WaitForEndOfFrame();
			FB_JieYuanSuitInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JieYuanSuitInfo.txt"));
			FB_JiLingAttrPercentLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingAttrPercentLevelUp.txt"));
			FB_JiLingDecomposeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingDecompose.txt"));
			FB_JiLingDestinyAddAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingDestinyAddAttr.txt"));
			FB_JiLingDestinyLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingDestinyLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiLingJingJieProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingJingJie.txt"));
			FB_JiLingMapBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingMapBase.txt"));
			FB_JiLingQiLingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingQiLingBase.txt"));
			FB_JiLingQiLingGongMingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingQiLingGongMing.txt"));
			FB_JiLingQiLingGongMingAddAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingQiLingGongMingAddAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiLingQiLingLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingQiLingLevelUp.txt"));
			FB_JiLingTransformationAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingTransformationAttr.txt"));
			FB_JiLingWuHunLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingWuHunLevelUp.txt"));
			FB_JiLingWuHunNingHunProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiLingWuHunNingHun.txt"));
			FB_JiYiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JiYiBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JuBaoPenTreasureProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JuBaoPenTreasure.txt"));
			FB_JuHunAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JuHunAttr.txt"));
			FB_JuhunBoxWeightProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JuhunBoxWeight.txt"));
			FB_JuHunLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JuHunLevelUp.txt"));
			FB_JuLingCSbaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/JuLingCSbase.txt"));
			yield return new WaitForEndOfFrame();
			FB_KaiFuPaiHangProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/KaiFuPaiHang.txt"));
			FB_KaiFuPaiHangTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/KaiFuPaiHangType.txt"));
			FB_KneadFaceOClothingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/KneadFaceOClothing.txt"));
			FB_LadderProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/Ladder.txt"));
			FB_LadderHonorProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LadderHonor.txt"));
			yield return new WaitForEndOfFrame();
			FB_LadderMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LadderMission.txt"));
			FB_LevelCompensateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelCompensate.txt"));
			FB_LevelExpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelExp.txt"));
			FB_LevelSealAddExpRateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelSealAddExpRate.txt"));
			FB_LevelSealAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelSealAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_LevelSealBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelSealBase.txt"));
			FB_LevelSealCopySceneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LevelSealCopyScene.txt"));
			FB_LimitActivityBroadcastProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LimitActivityBroadcast.txt"));
			FB_LingBaoBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingBaoBase.txt"));
			FB_LingBaoLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingBaoLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_LingBaoQiLingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingBaoQiLing.txt"));
			FB_LingGangBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangBase.txt"));
			FB_LingGangLingWuLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangLingWuLevelUp.txt"));
			FB_LingGangSkillBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangSkillBase.txt"));
			FB_LingGangSkillLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangSkillLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_LingGangStepBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangStepBase.txt"));
			FB_LingGangXuLingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LingGangXuLing.txt"));
			FB_LotteryMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LotteryMission.txt"));
			FB_LuckyRollDailyMissionsProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LuckyRollDailyMissions.txt"));
			FB_LuckyRollMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/LuckyRollMission.txt"));
			yield return new WaitForEndOfFrame();
			FB_MaiDianPartProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MaiDianPart.txt"));
			FB_MaiDianSuitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MaiDianSuit.txt"));
			FB_MarryActivityMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryActivityMission.txt"));
			FB_MarryActivityMissionRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryActivityMissionReward.txt"));
			FB_MarryBaseInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryBaseInfo.txt"));
			yield return new WaitForEndOfFrame();
			FB_MarryGiftInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryGiftInfo.txt"));
			FB_MarrySceneInfoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarrySceneInfo.txt"));
			FB_MarryShopItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryShopItem.txt"));
			FB_MarryShowItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryShowItem.txt"));
			FB_MarryTitleBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryTitleBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_MarryWuNvBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryWuNvBase.txt"));
			FB_MarryXinWuBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MarryXinWuBase.txt"));
			FB_MergeRankRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MergeRankReward.txt"));
			FB_MergeRechargeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MergeRecharge.txt"));
			FB_MergeTouZiProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MergeTouZi.txt"));
			yield return new WaitForEndOfFrame();
			FB_MergeTouZiTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MergeTouZiType.txt"));
			FB_MingGeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MingGeBase.txt"));
			FB_MiniMapProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MiniMap.txt"));
			FB_MissionBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionBase.txt"));
			FB_MissionBonusProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionBonus.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionCollectItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionCollectItem.txt"));
			FB_MissionCopySceneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionCopyScene.txt"));
			FB_MissionEnterAreaProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionEnterArea.txt"));
			FB_MissionFailedBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionFailedBase.txt"));
			FB_MissionFailedConditionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionFailedCondition.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionGuideProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionGuide.txt"));
			FB_MissionKillMonsterProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionKillMonster.txt"));
			FB_MissionLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionLimit.txt"));
			FB_MissionLootItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionLootItem.txt"));
			FB_MissionPuzzleProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionPuzzle.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionRoundProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionRound.txt"));
			FB_MissionRoundBonusProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionRoundBonus.txt"));
			FB_MissionRoundCommitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionRoundCommit.txt"));
			FB_MissionRoundConfigProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionRoundConfig.txt"));
			FB_MissionRoundLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionRoundLevel.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionSectionRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionSectionReward.txt"));
			FB_MissionUseItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MissionUseItem.txt"));
			FB_MondayLuckDrawBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MondayLuckDrawBase.txt"));
			FB_MondayLuckDrawItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MondayLuckDrawItem.txt"));
			FB_MondayLuckDrawMissionsProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MondayLuckDrawMissions.txt"));
			yield return new WaitForEndOfFrame();
			FB_MopUpBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/MopUpBase.txt"));
			FB_NpcDialogProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/NpcDialog.txt"));
			FB_OccupationBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OccupationBase.txt"));
			FB_OfflineRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OfflineReward.txt"));
			FB_OldGodDiamondBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodDiamondBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_OldGodDiamondLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodDiamondLevelUp.txt"));
			FB_OldGodItemBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodItemBase.txt"));
			FB_OldGodItemLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodItemLevelUp.txt"));
			FB_OldGodSuitAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodSuitAttr.txt"));
			FB_OldGodSuitBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodSuitBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_OldGodUnitBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OldGodUnitBase.txt"));
			FB_OperationActivityGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OperationActivityGift.txt"));
			FB_OperationActivityListProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OperationActivityList.txt"));
			FB_OppoRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/OppoReward.txt"));
			FB_PackageUnlockProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PackageUnlock.txt"));
			yield return new WaitForEndOfFrame();
			FB_ParamCollectionPublicProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ParamCollectionPublic.txt"));
			FB_PassiveSkillBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PassiveSkillBase.txt"));
			FB_PeiShiCompoundBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PeiShiCompoundBase.txt"));
			FB_PeiShiCompoundTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PeiShiCompoundType.txt"));
			FB_PetBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PetBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PetBattleSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PetBattleSkill.txt"));
			FB_PetMountProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PetMount.txt"));
			FB_PetSoulStoneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PetSoulStone.txt"));
			FB_PlayerLevelAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PlayerLevelAttr.txt"));
			FB_PlayerSkinBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PlayerSkinBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PlayerSkinColorProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PlayerSkinColor.txt"));
			FB_PlayerSkinLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PlayerSkinLevelUp.txt"));
			FB_PlayerSkinPartProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PlayerSkinPart.txt"));
			FB_PoseBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PoseBase.txt"));
			FB_ProgressBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ProgressBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PugongCutProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PugongCut.txt"));
			FB_PurchaseAndRestitutProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/PurchaseAndRestitut.txt"));
			FB_QianKunDuoBaoBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/QianKunDuoBaoBase.txt"));
			FB_QianKunDuoBaoGetIntegralProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/QianKunDuoBaoGetIntegral.txt"));
			FB_QuickChangeEquipProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/QuickChangeEquip.txt"));
			yield return new WaitForEndOfFrame();
			FB_RankBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RankBase.txt"));
			FB_RankBonusProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RankBonus.txt"));
			FB_RealmPracticeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RealmPracticeBase.txt"));
			FB_RealmPracticeLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RealmPracticeLevelUp.txt"));
			FB_RebateRuleProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RebateRule.txt"));
			yield return new WaitForEndOfFrame();
			FB_RechargeAndConsumeBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RechargeAndConsumeBase.txt"));
			FB_RechargeGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RechargeGift.txt"));
			FB_RechargeNewProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RechargeNew.txt"));
			FB_RelationProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/Relation.txt"));
			FB_RevivePriceProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RevivePrice.txt"));
			yield return new WaitForEndOfFrame();
			FB_RewardSurveyProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RewardSurvey.txt"));
			FB_RewardSurveyConfigProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RewardSurveyConfig.txt"));
			FB_RMBProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RMB.txt"));
			FB_RMBAttributeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RMBAttribute.txt"));
			FB_RobotBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RobotBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_RoleBaseAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RoleBaseAttr.txt"));
			FB_RongYaoCollectionAwakeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RongYaoCollectionAwake.txt"));
			FB_RongYaoCollectionUpdateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RongYaoCollectionUpdate.txt"));
			FB_RongYaoSuitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RongYaoSuit.txt"));
			FB_RuneAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RuneAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_RuneBoxWeightProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RuneBoxWeight.txt"));
			FB_RuneJieExpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RuneJieExp.txt"));
			FB_RuneLevelExpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RuneLevelExp.txt"));
			FB_RunesTreasureBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/RunesTreasureBase.txt"));
			FB_SceneClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SceneClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_SceneGroupPointProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SceneGroupPoint.txt"));
			FB_SceneMirrorProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SceneMirror.txt"));
			FB_SceneNpcProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SceneNpc.txt"));
			FB_ServerLevelExpExtraProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ServerLevelExpExtra.txt"));
			FB_SevenStartBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SevenStartBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SevenStartBaseLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SevenStartBaseLevelUp.txt"));
			FB_ShengLingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingBase.txt"));
			FB_ShengLingCopySceneProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingCopyScene.txt"));
			FB_ShengLingCopySceneLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingCopySceneLimit.txt"));
			FB_ShengLingCopySceneTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingCopySceneType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShengLingLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingLevelUp.txt"));
			FB_ShengLingSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShengLingSkill.txt"));
			FB_ShenMoJiangYuBuyTimesCostProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenMoJiangYuBuyTimesCost.txt"));
			FB_ShenQiRenZhuClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenQiRenZhuClass.txt"));
			FB_ShenQiRenZhuTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenQiRenZhuType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenShiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShiBase.txt"));
			FB_ShenShiMaxLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShiMaxLevel.txt"));
			FB_ShenShouBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShouBase.txt"));
			FB_ShenShouEquipBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShouEquipBase.txt"));
			FB_ShenShouEquipLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShouEquipLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenShouSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenShouSkill.txt"));
			FB_ShenWangLiLianProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangLiLian.txt"));
			FB_ShenWangZhanJiaBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaBase.txt"));
			FB_ShenWangZhanJiaCsBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaCsBase.txt"));
			FB_ShenWangZhanJiaCsRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaCsReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangZhanJiaCsShopProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaCsShop.txt"));
			FB_ShenWangZhanJiaEquipProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaEquip.txt"));
			FB_ShenWangZhanJiaLegendAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaLegendAttr.txt"));
			FB_ShenWangZhanJiaMakeLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaMakeLevelUp.txt"));
			FB_ShenWangZhanJiaPaintingMissProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaPaintingMiss.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangZhanJiaPaintingPayProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaPaintingPay.txt"));
			FB_ShenWangZhanJiaPaintingRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaPaintingReward.txt"));
			FB_ShenWangZhanJiaPracticeLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenWangZhanJiaPracticeLevelUp.txt"));
			FB_ShenYuFengHaoBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenYuFengHaoBase.txt"));
			FB_ShenYuPointAdditionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenYuPointAddition.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenZhiJingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenZhiJingBase.txt"));
			FB_ShenZhiJingItemLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenZhiJingItemLevelUp.txt"));
			FB_ShenZhuangLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShenZhuangLevelUp.txt"));
			FB_ShiLianBossProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShiLianBoss.txt"));
			FB_ShopItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShopItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShopTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShopType.txt"));
			FB_ShouHuangXiLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShouHuangXiLevelUp.txt"));
			FB_ShouHuangXiSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShouHuangXiSkill.txt"));
			FB_ShouHuBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ShouHuBase.txt"));
			FB_SignInRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SignInReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SignTotalRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SignTotalReward.txt"));
			FB_SkillAddValueProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillAddValue.txt"));
			FB_SkillBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillBase.txt"));
			FB_SkillCalculateProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillCalculate.txt"));
			FB_SkillDelayProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillDelay.txt"));
			yield return new WaitForEndOfFrame();
			FB_SkillExProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillEx.txt"));
			FB_SkillLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillLevel.txt"));
			FB_SkillListProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillList.txt"));
			FB_SkillSkinBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SkillSkinBase.txt"));
			FB_SoulPowerBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SoulPowerBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SoulPowerDecomposeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SoulPowerDecompose.txt"));
			FB_SoulPowerJieUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SoulPowerJieUp.txt"));
			FB_SoulPowerLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SoulPowerLevelUp.txt"));
			FB_SpokesmanRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SpokesmanReward.txt"));
			FB_StarAttributeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarAttribute.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarCraftFightProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarCraftFight.txt"));
			FB_StarCraftMapProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarCraftMap.txt"));
			FB_StarCraftSetProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarCraftSet.txt"));
			FB_StarCraftTicketProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarCraftTicket.txt"));
			FB_StarmapBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarmapBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarmapRandomProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarmapRandom.txt"));
			FB_StarmapSectionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarmapSection.txt"));
			FB_StarSoulLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarSoulLevel.txt"));
			FB_StarSoulSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarSoulSkill.txt"));
			FB_StarSoulUnitBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarSoulUnitBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarSoulUnitLevelProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarSoulUnitLevel.txt"));
			FB_StarWishItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StarWishItem.txt"));
			FB_StrengthenBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StrengthenBase.txt"));
			FB_StrengthenSubClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/StrengthenSubClass.txt"));
			FB_SYHBonusByStageProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHBonusByStage.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHCangBaoHuiAwardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHCangBaoHuiAward.txt"));
			FB_SYHCangBaoMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHCangBaoMission.txt"));
			FB_SYHFestivalActivityListProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHFestivalActivityList.txt"));
			FB_SYHFestivalCarnivalMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHFestivalCarnivalMission.txt"));
			FB_SYHFestivalCarnivalRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHFestivalCarnivalReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHFestivalMonsterProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHFestivalMonster.txt"));
			FB_SYHJianBaoGeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJianBaoGe.txt"));
			FB_SYHJingXiXianGouBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJingXiXianGouBase.txt"));
			FB_SYHJuBaoFuDaiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoFuDaiBase.txt"));
			FB_SYHJuBaoFuDaiItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoFuDaiItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHJuBaoFuDaiRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoFuDaiReward.txt"));
			FB_SYHJuBaoPenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoPen.txt"));
			FB_SYHJuBaoPenPrizeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoPenPrize.txt"));
			FB_SYHJuBaoPenRankingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoPenRanking.txt"));
			FB_SYHJuBaoPenRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHJuBaoPenReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHNiuDanJiProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHNiuDanJi.txt"));
			FB_SYHQiYuanBaoGeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHQiYuanBaoGe.txt"));
			FB_SYHRechargeAndConsumeRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHRechargeAndConsumeReward.txt"));
			FB_SYHTianXingBaoGeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHTianXingBaoGe.txt"));
			FB_SYHXianShiBoxProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianShiBox.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHXianShiQiangGouProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianShiQiangGou.txt"));
			FB_SYHXianYuMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianYuMission.txt"));
			FB_SYHXianYuQmlhProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianYuQmlh.txt"));
			FB_SYHXianYuShengHuiAwardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianYuShengHuiAward.txt"));
			FB_SYHXianYuShengHuiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHXianYuShengHuiBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHYuanBaoInvestProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHYuanBaoInvest.txt"));
			FB_SYHYuanBaoInvestTypeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHYuanBaoInvestType.txt"));
			FB_SYHZaDanPingGuoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHZaDanPingGuo.txt"));
			FB_SYHZaDanPingGuoNumRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/SYHZaDanPingGuoNumReward.txt"));
			FB_TaiGuRelicBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TaiGuRelicBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_TaiGuRelicShopItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TaiGuRelicShopItem.txt"));
			FB_TaoZhuangAttrProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TaoZhuangAttr.txt"));
			FB_TaoZhuangBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TaoZhuangBase.txt"));
			FB_TeamPlatformProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TeamPlatform.txt"));
			FB_TeamShipProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TeamShip.txt"));
			yield return new WaitForEndOfFrame();
			FB_teQuanEnumProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/teQuanEnum.txt"));
			FB_teQuanGainProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/teQuanGain.txt"));
			FB_TheInheritProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TheInherit.txt"));
			FB_TianCiHongFuBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianCiHongFuBase.txt"));
			FB_TianCiHongFuRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianCiHongFuReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_TianDaoShengYuanProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianDaoShengYuan.txt"));
			FB_TianDaoShengYuanRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianDaoShengYuanReward.txt"));
			FB_TianFuBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianFuBase.txt"));
			FB_TianJiBaoGeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TianJiBaoGe.txt"));
			FB_TiKuanJiAwardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TiKuanJiAward.txt"));
			yield return new WaitForEndOfFrame();
			FB_TimeLimitBagProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TimeLimitBag.txt"));
			FB_TimingBoxProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TimingBox.txt"));
			FB_TitleBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TitleBase.txt"));
			FB_TitleClassProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TitleClass.txt"));
			FB_TreasureProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/Treasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_TreasureHuntMissionsProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TreasureHuntMissions.txt"));
			FB_TreasureHuntShopItemProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TreasureHuntShopItem.txt"));
			FB_TreasureShowProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/TreasureShow.txt"));
			FB_VehicleProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/Vehicle.txt"));
			FB_VipDayGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VipDayGift.txt"));
			yield return new WaitForEndOfFrame();
			FB_VipEnjoyGiftProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VipEnjoyGift.txt"));
			FB_VipHaoLiProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VipHaoLi.txt"));
			FB_VIPInvestRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VIPInvestReward.txt"));
			FB_VIPLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VIPLimit.txt"));
			FB_VIPPowerProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/VIPPower.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetArrayEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetArrayEffect.txt"));
			FB_WarPetArrayTechniqueLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetArrayTechniqueLevelUp.txt"));
			FB_WarPetBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetBase.txt"));
			FB_WarPetCompoundProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetCompound.txt"));
			FB_WarPetEquipProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetEquip.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetEquipLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetEquipLevelUp.txt"));
			FB_WarPetEquipStarLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetEquipStarLevelUp.txt"));
			FB_WarPetItemDecomposeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetItemDecompose.txt"));
			FB_WarPetLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetLevelUp.txt"));
			FB_WarPetRandomStarProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetRandomStar.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetSkill.txt"));
			FB_WarPetSkillLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetSkillLevelUp.txt"));
			FB_WarPetSkillLimitProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetSkillLimit.txt"));
			FB_WarPetStarProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetStar.txt"));
			FB_WarPetTalentProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WarPetTalent.txt"));
			yield return new WaitForEndOfFrame();
			FB_WingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WingBase.txt"));
			FB_WingTransmogProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WingTransmog.txt"));
			FB_WishBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WishBase.txt"));
			FB_WitCompeteProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WitCompete.txt"));
			FB_WorldBossProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WorldBoss.txt"));
			yield return new WaitForEndOfFrame();
			FB_WorldBossLikeProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WorldBossLike.txt"));
			FB_WuXingYuanLiProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/WuXingYuanLi.txt"));
			FB_XianYuZhiYiBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XianYuZhiYiBase.txt"));
			FB_XianYuZhiYiChapterBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XianYuZhiYiChapterBase.txt"));
			FB_XianYuZhiYiLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XianYuZhiYiLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_XianYuZhiYiUnlockLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XianYuZhiYiUnlockLevelUp.txt"));
			FB_XingHunItemBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunItemBase.txt"));
			FB_XingHunLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunLevelUp.txt"));
			FB_XingHunTeZhiLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunTeZhiLevelUp.txt"));
			FB_XingHunTeZhiPassiveSkillProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunTeZhiPassiveSkill.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingHunUnitBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunUnitBase.txt"));
			FB_XingHunZhuanJingBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunZhuanJingBase.txt"));
			FB_XingHunZhuanJingEffectProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunZhuanJingEffect.txt"));
			FB_XingHunZhuanJingLevelUpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingHunZhuanJingLevelUp.txt"));
			FB_XingYunBlessingProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYunBlessing.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingYunExtractBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYunExtractBase.txt"));
			FB_XingYunGuideEventProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYunGuideEvent.txt"));
			FB_XingYunMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYunMission.txt"));
			FB_XingYuPaiHangProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYuPaiHang.txt"));
			FB_XingYuPingFenProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYuPingFen.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingYuRewardProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYuReward.txt"));
			FB_XingYuTicketBonusProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYuTicketBonus.txt"));
			FB_XingYuTicketMissionProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XingYuTicketMission.txt"));
			FB_XueShiBaoKuProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/XueShiBaoKu.txt"));
			FB_YingYanBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/YingYanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_YuanShenBaseProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/YuanShenBase.txt"));
			FB_YuanShenShowExpProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/YuanShenShowExp.txt"));
			FB_YueKaProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/YueKa.txt"));
			FB_YunGouProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/YunGou.txt"));
			FB_ZhanLingLibaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ZhanLingLibao.txt"));
			yield return new WaitForEndOfFrame();
			FB_ZheKouShangDianProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ZheKouShangDian.txt"));
			FB_ZhongShenDianProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ZhongShenDian.txt"));
			FB_ZhuangBeiXunBaoProvider.Instance.LoadFromFile(GetFlatBufferPath("Public/ZhuangBeiXunBao.txt"));

            //Debug.Log("<color=green>LoadFBDataFromFile End.</color>");
            if (null != OnLoadFBTableFinish)
            {
                OnLoadFBTableFinish();
            }
        }
        /// <summary>
        /// ����FlatBuffer�������ļ�
        /// </summary>
        /// <returns></returns>
        static public IEnumerator LoadFBDataFromMemory()
        {
            //Debug.Log("<color=green>LoadFBDataFromMemory Begin.</color>");
            FB_AchievementJumpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/AchievementJump.txt"));
			FB_ActivityDaZhiGouShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ActivityDaZhiGouShow.txt"));
			FB_ActivityPrayShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ActivityPrayShow.txt"));
			FB_ActivityTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ActivityType.txt"));
			FB_AllActivityProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/AllActivity.txt"));
			yield return new WaitForEndOfFrame();
			FB_AnimationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Animation.txt"));
			FB_AnimationCurveProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/AnimationCurve.txt"));
			FB_AreaCodeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/AreaCode.txt"));
			FB_AttributeLessProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/AttributeLess.txt"));
			FB_BottomRightMenuProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/BottomRightMenu.txt"));
			yield return new WaitForEndOfFrame();
			FB_BulletProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Bullet.txt"));
			FB_CameraEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CameraEffect.txt"));
			FB_CharAnimProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharAnim.txt"));
			FB_CharAnimEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharAnimEffect.txt"));
			FB_CharModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_CharMountProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharMount.txt"));
			FB_CharSoulProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharSoul.txt"));
			FB_CharWingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharWing.txt"));
			FB_CharXingHunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CharXingHun.txt"));
			FB_ChatExpressionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ChatExpression.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChatRobotBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ChatRobotBase.txt"));
			FB_ChatRobotContentProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ChatRobotContent.txt"));
			FB_ChatWordExpressionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ChatWordExpression.txt"));
			FB_ClientStoryTableProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ClientStoryTable.txt"));
			FB_CloseUpShotProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CloseUpShot.txt"));
			yield return new WaitForEndOfFrame();
			FB_CombatPetSceneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CombatPetScene.txt"));
			FB_CommonItemDataAboutSexProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CommonItemDataAboutSex.txt"));
			FB_CommonItemParamTypeListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CommonItemParamTypeList.txt"));
			FB_CopySceneLastShotProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CopySceneLastShot.txt"));
			FB_CSQXuanSNpcProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/CSQXuanSNpc.txt"));
			yield return new WaitForEndOfFrame();
			FB_DamageBoardTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/DamageBoardType.txt"));
			FB_DestinyBloodSkillDesProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/DestinyBloodSkillDes.txt"));
			FB_DestinyObjParamsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/DestinyObjParams.txt"));
			FB_DymaticSceneEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/DymaticSceneEffect.txt"));
			FB_EffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Effect.txt"));
			yield return new WaitForEndOfFrame();
			FB_EffectPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/EffectPoint.txt"));
			FB_EquipStarEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/EquipStarEffect.txt"));
			FB_EquipTipsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/EquipTips.txt"));
			FB_FittingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/FittingBase.txt"));
			FB_FlyCutterUIProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/FlyCutterUI.txt"));
			yield return new WaitForEndOfFrame();
			FB_fwqlistProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/fwqlist.txt"));
			FB_GetPathBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/GetPathBase.txt"));
			FB_GetPathInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/GetPathInfo.txt"));
			FB_gonggaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/gonggao.txt"));
			FB_GuideBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/GuideBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuideTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/GuideType.txt"));
			FB_GuildFormationTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/GuildFormationType.txt"));
			FB_HairModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/HairModel.txt"));
			FB_HuanJingObjParamsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/HuanJingObjParams.txt"));
			FB_HuanLeXunBaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/HuanLeXunBao.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangShanghenParamProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/HunJiangShanghenParam.txt"));
			FB_IapGiftUIProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/IapGiftUI.txt"));
			FB_ItemButtonLogicProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ItemButtonLogic.txt"));
			FB_ItemCompoundTypeSettingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ItemCompoundTypeSetting.txt"));
			FB_JiLingTreeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/JiLingTreeBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiYiCardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/JiYiCard.txt"));
			FB_KneadFaceFakeObjMovePosProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceFakeObjMovePos.txt"));
			FB_KneadFaceOfEyeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceOfEye.txt"));
			FB_KneadFaceOfEyeBrowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceOfEyeBrow.txt"));
			FB_KneadFaceOfLipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceOfLip.txt"));
			yield return new WaitForEndOfFrame();
			FB_KneadFaceOfPrefabProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceOfPrefab.txt"));
			FB_KneadFaceOfTattoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/KneadFaceOfTatto.txt"));
			FB_LingBaoTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/LingBaoType.txt"));
			FB_LocalNotificationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/LocalNotification.txt"));
			FB_MaiDianStarSoulModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/MaiDianStarSoulModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_MergeRankShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/MergeRankShow.txt"));
			FB_MissionDictionaryProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/MissionDictionary.txt"));
			FB_MissionSceneEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/MissionSceneEffect.txt"));
			FB_MountBindPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/MountBindPoint.txt"));
			FB_NPCPaoPaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/NPCPaoPao.txt"));
			yield return new WaitForEndOfFrame();
			FB_NPCSoundsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/NPCSounds.txt"));
			FB_OfflineCompetitionPlayerShowPostionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/OfflineCompetitionPlayerShowPostion.txt"));
			FB_OperateResultTipsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/OperateResultTips.txt"));
			FB_OptionTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/OptionType.txt"));
			FB_PhotoEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PhotoEffect.txt"));
			yield return new WaitForEndOfFrame();
			FB_PhotoTabEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PhotoTabEffect.txt"));
			FB_PicturePuzzleProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PicturePuzzle.txt"));
			FB_PlayerHeadInfoCfgProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PlayerHeadInfoCfg.txt"));
			FB_PlayMethodBroadcastProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PlayMethodBroadcast.txt"));
			FB_PreloadProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Preload.txt"));
			yield return new WaitForEndOfFrame();
			FB_PropertyIntroProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/PropertyIntro.txt"));
			FB_RankTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/RankType.txt"));
			FB_RealTimeShadowConfigProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/RealTimeShadowConfig.txt"));
			FB_RobotProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Robot.txt"));
			FB_RobotAppearanceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/RobotAppearance.txt"));
			yield return new WaitForEndOfFrame();
			FB_RoleNameProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/RoleName.txt"));
			FB_SceneCullingParamProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SceneCullingParam.txt"));
			FB_SceneShaderParamProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SceneShaderParam.txt"));
			FB_SexDistinctionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SexDistinction.txt"));
			FB_ShakeCameraProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShakeCamera.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangYouLeChangProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShenWangYouLeChang.txt"));
			FB_ShenWangZhanJiaCSChapterProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShenWangZhanJiaCSChapter.txt"));
			FB_ShenYuRankBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShenYuRankBase.txt"));
			FB_ShieldingSymbolProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShieldingSymbol.txt"));
			FB_ShieldStringProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShieldString.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShopClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/ShopClass.txt"));
			FB_SkillCamAnimProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SkillCamAnim.txt"));
			FB_SkillDemonstrationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SkillDemonstration.txt"));
			FB_SoundsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/Sounds.txt"));
			FB_StarSoulPaoPaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StarSoulPaoPao.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarWishRewardShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StarWishRewardShow.txt"));
			FB_StoryAnimationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StoryAnimation.txt"));
			FB_StoryPlayerEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StoryPlayerEffect.txt"));
			FB_StrDictionaryProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StrDictionary.txt"));
			FB_StrengthenNeedEquipOrExpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StrengthenNeedEquipOrExp.txt"));
			yield return new WaitForEndOfFrame();
			FB_StrengthenNeedResourceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StrengthenNeedResource.txt"));
			FB_StrengthenRateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StrengthenRate.txt"));
			FB_StrLoadingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/StrLoading.txt"));
			FB_SYHFestivalDicProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SYHFestivalDic.txt"));
			FB_SYHZaDanPingGuoShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/SYHZaDanPingGuoShow.txt"));
			yield return new WaitForEndOfFrame();
			FB_TaoZhuangModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/TaoZhuangModel.txt"));
			FB_TeamPostionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/TeamPostion.txt"));
			FB_TipsEquipListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/TipsEquipList.txt"));
			FB_TipsPreviewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/TipsPreview.txt"));
			FB_TopRightMenuProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/TopRightMenu.txt"));
			yield return new WaitForEndOfFrame();
			FB_UIInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/UIInfo.txt"));
			FB_UIModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/UIModel.txt"));
			FB_UISpecialHideProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/UISpecialHide.txt"));
			FB_UISubPanelPathProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/UISubPanelPath.txt"));
			FB_UITextProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/UIText.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WarPetModel.txt"));
			FB_WeaponAnimationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WeaponAnimation.txt"));
			FB_WeaponModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WeaponModel.txt"));
			FB_WeekPlanProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WeekPlan.txt"));
			FB_WingExtraModelPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WingExtraModelPoint.txt"));
			yield return new WaitForEndOfFrame();
			FB_WorldCupCountryProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/WorldCupCountry.txt"));
			FB_YingYanItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Client/YingYanItem.txt"));
			FB_AchievementBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AchievementBase.txt"));
			FB_AchievementClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AchievementClass.txt"));
			FB_AchievementSubClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AchievementSubClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityAncientSealProessRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityAncientSealProessReward.txt"));
			FB_ActivityAncientSealSearchProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityAncientSealSearch.txt"));
			FB_ActivityBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityBase.txt"));
			FB_ActivityBonusProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityBonus.txt"));
			FB_ActivityChickenBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityChickenBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityChickenGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityChickenGift.txt"));
			FB_ActivityChickenMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityChickenMission.txt"));
			FB_ActivityChickenProessRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityChickenProessReward.txt"));
			FB_ActivityDaZhiGouRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityDaZhiGouReward.txt"));
			FB_ActivityObjectivesListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityObjectivesList.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityPoint.txt"));
			FB_ActivityPrayProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityPray.txt"));
			FB_ActivityPrayShopProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityPrayShop.txt"));
			FB_ActivityQuestionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityQuestionBase.txt"));
			FB_ActivityShowBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityShowBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActivityShowLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActivityShowLevel.txt"));
			FB_ActWanGuConfigProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuConfig.txt"));
			FB_ActWanGuMissionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuMissionBase.txt"));
			FB_ActWanGuMissionClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuMissionClass.txt"));
			FB_ActWanGuMissionSubClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuMissionSubClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_ActWanGuPropLevelBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuPropLevelBase.txt"));
			FB_ActWanGuPropLevelRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActWanGuPropLevelReward.txt"));
			FB_ActZhuTianBaoLunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ActZhuTianBaoLun.txt"));
			FB_AdvancedBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AdvancedBase.txt"));
			FB_AncientSealShopItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AncientSealShopItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_ArenaRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ArenaReward.txt"));
			FB_ArtifactBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ArtifactBase.txt"));
			FB_ArtifactBaseLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ArtifactBaseLevelUp.txt"));
			FB_ArtifactBaseLevelUpSpecialProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ArtifactBaseLevelUpSpecial.txt"));
			FB_AttrPowerBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AttrPowerBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_AuctionClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AuctionClass.txt"));
			FB_AuctionItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AuctionItem.txt"));
			FB_AuctionTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AuctionType.txt"));
			FB_AutoBindBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/AutoBindBase.txt"));
			FB_BagTreasureProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BagTreasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_baiwanjijieProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/baiwanjijie.txt"));
			FB_baiwanjijie2Provider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/baiwanjijie2.txt"));
			FB_BattlefieldCampLevelBuffProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BattlefieldCampLevelBuff.txt"));
			FB_BattlefieldCampRewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BattlefieldCampRew.txt"));
			FB_BattlefieldCollectionRewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BattlefieldCollectionRew.txt"));
			yield return new WaitForEndOfFrame();
			FB_BattlefieldRankRewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BattlefieldRankRew.txt"));
			FB_BenYuanItemBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BenYuanItemBase.txt"));
			FB_BenYuanItemLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BenYuanItemLevelUp.txt"));
			FB_BlackCardSignInRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BlackCardSignInReward.txt"));
			FB_BlackCardTickProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BlackCardTick.txt"));
			yield return new WaitForEndOfFrame();
			FB_BloodBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BloodBase.txt"));
			FB_BloodMixProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BloodMix.txt"));
			FB_BloodMixLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BloodMixLevel.txt"));
			FB_BloodPossessedProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BloodPossessed.txt"));
			FB_BloodPossessedModelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BloodPossessedModel.txt"));
			yield return new WaitForEndOfFrame();
			FB_BossGongChengRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BossGongChengReward.txt"));
			FB_BossInvestProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BossInvest.txt"));
			FB_BossInvestTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/BossInvestType.txt"));
			FB_CardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardBase.txt"));
			FB_CardFlopBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardFlopBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_CardJiBanActivateRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardJiBanActivateReward.txt"));
			FB_CardRankRewardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardRankRewardBase.txt"));
			FB_CardShopProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardShop.txt"));
			FB_CardXunBaoBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardXunBaoBase.txt"));
			FB_CardXunBaoShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CardXunBaoShow.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChangeJob6ItemBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeJob6ItemBase.txt"));
			FB_ChangeJob8ComprehendUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeJob8ComprehendUp.txt"));
			FB_ChangeJob8MissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeJob8Mission.txt"));
			FB_ChangeJobBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeJobBase.txt"));
			FB_ChangeJobPhaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeJobPhase.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChangeMenPaiConditionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChangeMenPaiCondition.txt"));
			FB_ChapterCardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChapterCardBase.txt"));
			FB_ChapterCardLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChapterCardLevelUp.txt"));
			FB_CharmLoveRankRewardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CharmLoveRankRewardBase.txt"));
			FB_ChatLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChatLimit.txt"));
			yield return new WaitForEndOfFrame();
			FB_ChiJiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChiJiBase.txt"));
			FB_ChiJiRewardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChiJiRewardBase.txt"));
			FB_ChongJiGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ChongJiGift.txt"));
			FB_ClientConfigProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ClientConfig.txt"));
			FB_CollectActivityProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CollectActivity.txt"));
			yield return new WaitForEndOfFrame();
			FB_CombatPetBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CombatPetBase.txt"));
			FB_CombatPetRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CombatPetReward.txt"));
			FB_CommonItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CommonItem.txt"));
			FB_CoolDownTimeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CoolDownTime.txt"));
			FB_CopySceneLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneLimit.txt"));
			yield return new WaitForEndOfFrame();
			FB_CopySceneMoNengFeiXuProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneMoNengFeiXu.txt"));
			FB_CopySceneShopProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneShop.txt"));
			FB_CopySceneStageDicProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneStageDic.txt"));
			FB_CopySceneTowerProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneTower.txt"));
			FB_CopySceneTowerSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CopySceneTowerSkill.txt"));
			yield return new WaitForEndOfFrame();
			FB_CreatePlayerProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CreatePlayer.txt"));
			FB_CSEvalueRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CSEvalueReward.txt"));
			FB_CurrencyBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/CurrencyBase.txt"));
			FB_DailyRebateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DailyRebate.txt"));
			FB_DailyRechargeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DailyRecharge.txt"));
			yield return new WaitForEndOfFrame();
			FB_DestinyBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyBase.txt"));
			FB_DestinyBaseLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyBaseLevelUp.txt"));
			FB_DestinyBloodBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyBloodBase.txt"));
			FB_DestinyBloodItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyBloodItem.txt"));
			FB_DestinyBloodLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyBloodLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_DestinyCultureLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyCultureLevelUp.txt"));
			FB_DestinySkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinySkill.txt"));
			FB_DestinyTemperBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyTemperBase.txt"));
			FB_DestinyTemperRateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DestinyTemperRate.txt"));
			FB_DiamondAttributeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondAttribute.txt"));
			yield return new WaitForEndOfFrame();
			FB_DiamondBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondBase.txt"));
			FB_DiamondCuiLianProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondCuiLian.txt"));
			FB_DiamondGongZhenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondGongZhen.txt"));
			FB_DiamondGongZhenAllProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondGongZhenAll.txt"));
			FB_DiamondGongZhenEnumProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondGongZhenEnum.txt"));
			yield return new WaitForEndOfFrame();
			FB_DiamondSetProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondSet.txt"));
			FB_DiamondStrengthenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/DiamondStrengthen.txt"));
			FB_EmotionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EmotionBase.txt"));
			FB_EmotionClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EmotionClass.txt"));
			FB_EquipAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipAttrRateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipAttrRate.txt"));
			FB_EquipAttrValueProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipAttrValue.txt"));
			FB_EquipCompoundTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipCompoundType.txt"));
			FB_EquipCompoundTypeShenZhuangProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipCompoundTypeShenZhuang.txt"));
			FB_EquipExchangeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipExchange.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipExhibitionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipExhibition.txt"));
			FB_EquipExtraAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipExtraAttr.txt"));
			FB_EquipFavPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipFavPoint.txt"));
			FB_EquipFuLingAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipFuLingAttr.txt"));
			FB_EquipFuLingLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipFuLingLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipFusionAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipFusionAttr.txt"));
			FB_EquipFusionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipFusionBase.txt"));
			FB_EquipPartZhuHunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipPartZhuHun.txt"));
			FB_EquipPartZhuHunBaoShiProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipPartZhuHunBaoShi.txt"));
			FB_EquipRandomAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipRandomAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipRecastProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipRecast.txt"));
			FB_EquipSetStoneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSetStone.txt"));
			FB_EquipSetStoneGroupAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSetStoneGroupAttr.txt"));
			FB_EquipSlotAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSlotAttr.txt"));
			FB_EquipSlotResonanceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSlotResonance.txt"));
			yield return new WaitForEndOfFrame();
			FB_EquipSlotStrengthenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSlotStrengthen.txt"));
			FB_EquipSourceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipSource.txt"));
			FB_EquipStrengthenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipStrengthen.txt"));
			FB_EquipZhuHunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EquipZhuHun.txt"));
			FB_EternalTreasureProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EternalTreasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_EternalTreasureRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/EternalTreasureReward.txt"));
			FB_FakeObjectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FakeObject.txt"));
			FB_FindRewardBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FindRewardBase.txt"));
			FB_FindRewardClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FindRewardClass.txt"));
			FB_FuLiDaTingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FuLiDaTing.txt"));
			yield return new WaitForEndOfFrame();
			FB_FunctionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FunctionBase.txt"));
			FB_FunctionPrepareProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/FunctionPrepare.txt"));
			FB_GodWeaponBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GodWeaponBase.txt"));
			FB_GodWeaponLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GodWeaponLevel.txt"));
			FB_GodWordBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GodWordBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GodWordCharmProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GodWordCharm.txt"));
			FB_GoldCopyAwardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GoldCopyAward.txt"));
			FB_GoldenBadgeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GoldenBadgeBase.txt"));
			FB_GoldenBadgeLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GoldenBadgeLevelUp.txt"));
			FB_GreetingCardRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GreetingCardReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_GroupPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GroupPoint.txt"));
			FB_GrowUpBagProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GrowUpBag.txt"));
			FB_GuideCollectBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuideCollectBase.txt"));
			FB_GuideCollectBossTipsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuideCollectBossTips.txt"));
			FB_GuildActiveBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildActiveBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildBase.txt"));
			FB_GuildBlessBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildBlessBase.txt"));
			FB_GuildBossProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildBoss.txt"));
			FB_GuildFoodBoxProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildFoodBox.txt"));
			FB_GuildFormationBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildFormationBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildFormationLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildFormationLevel.txt"));
			FB_GuildFormationTypeNewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildFormationTypeNew.txt"));
			FB_GuildPermissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildPermission.txt"));
			FB_GuildPresentProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildPresent.txt"));
			FB_GuildRedPacketProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildRedPacket.txt"));
			yield return new WaitForEndOfFrame();
			FB_GuildWelfareBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/GuildWelfareBase.txt"));
			FB_HuanJingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingBase.txt"));
			FB_HuanJingEquipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingEquip.txt"));
			FB_HuanJingEquipSlotProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingEquipSlot.txt"));
			FB_HuanJingEquipStarProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingEquipStar.txt"));
			yield return new WaitForEndOfFrame();
			FB_HuanJingJiBanProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingJiBan.txt"));
			FB_HuanJingLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingLevel.txt"));
			FB_HuanJingSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingSkill.txt"));
			FB_HuanJingTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuanJingType.txt"));
			FB_HuLingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HuLingBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunGeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunGeBase.txt"));
			FB_HunJiangGongMingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangGongMing.txt"));
			FB_HunJiangItemBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangItemBase.txt"));
			FB_HunJiangItemLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangItemLevelUp.txt"));
			FB_HunJiangJiBanBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangJiBanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangJiBanLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangJiBanLevelUp.txt"));
			FB_HunJiangJiBanSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangJiBanSkill.txt"));
			FB_HunJiangJuHunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangJuHun.txt"));
			FB_HunJiangRongLianProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangRongLian.txt"));
			FB_HunJiangShangZhenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangShangZhen.txt"));
			yield return new WaitForEndOfFrame();
			FB_HunJiangSkillBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangSkillBase.txt"));
			FB_HunJiangSkillValueProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangSkillValue.txt"));
			FB_HunJiangXunBaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/HunJiangXunBao.txt"));
			FB_IapGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/IapGift.txt"));
			FB_IapGift2Provider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/IapGift2.txt"));
			yield return new WaitForEndOfFrame();
			FB_IapGiftRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/IapGiftReward.txt"));
			FB_IapGiftReward2Provider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/IapGiftReward2.txt"));
			FB_ImpactProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/Impact.txt"));
			FB_ItemCompoundBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ItemCompoundBase.txt"));
			FB_ItemCompoundTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ItemCompoundType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ItemGiftBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ItemGiftBase.txt"));
			FB_ItemLocationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ItemLocation.txt"));
			FB_ItemStepUpBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ItemStepUpBase.txt"));
			FB_JiBanAttrLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiBanAttrLevelUp.txt"));
			FB_JiBanBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiBanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JieSoulStoneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieSoulStone.txt"));
			FB_JieYuanBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieYuanBase.txt"));
			FB_JieYuanLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieYuanLevelUp.txt"));
			FB_JieYuanSlotResonanceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieYuanSlotResonance.txt"));
			FB_JieYuanSuitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieYuanSuit.txt"));
			yield return new WaitForEndOfFrame();
			FB_JieYuanSuitInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JieYuanSuitInfo.txt"));
			FB_JiLingAttrPercentLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingAttrPercentLevelUp.txt"));
			FB_JiLingDecomposeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingDecompose.txt"));
			FB_JiLingDestinyAddAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingDestinyAddAttr.txt"));
			FB_JiLingDestinyLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingDestinyLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiLingJingJieProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingJingJie.txt"));
			FB_JiLingMapBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingMapBase.txt"));
			FB_JiLingQiLingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingQiLingBase.txt"));
			FB_JiLingQiLingGongMingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingQiLingGongMing.txt"));
			FB_JiLingQiLingGongMingAddAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingQiLingGongMingAddAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_JiLingQiLingLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingQiLingLevelUp.txt"));
			FB_JiLingTransformationAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingTransformationAttr.txt"));
			FB_JiLingWuHunLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingWuHunLevelUp.txt"));
			FB_JiLingWuHunNingHunProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiLingWuHunNingHun.txt"));
			FB_JiYiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JiYiBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_JuBaoPenTreasureProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JuBaoPenTreasure.txt"));
			FB_JuHunAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JuHunAttr.txt"));
			FB_JuhunBoxWeightProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JuhunBoxWeight.txt"));
			FB_JuHunLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JuHunLevelUp.txt"));
			FB_JuLingCSbaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/JuLingCSbase.txt"));
			yield return new WaitForEndOfFrame();
			FB_KaiFuPaiHangProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/KaiFuPaiHang.txt"));
			FB_KaiFuPaiHangTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/KaiFuPaiHangType.txt"));
			FB_KneadFaceOClothingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/KneadFaceOClothing.txt"));
			FB_LadderProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/Ladder.txt"));
			FB_LadderHonorProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LadderHonor.txt"));
			yield return new WaitForEndOfFrame();
			FB_LadderMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LadderMission.txt"));
			FB_LevelCompensateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelCompensate.txt"));
			FB_LevelExpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelExp.txt"));
			FB_LevelSealAddExpRateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelSealAddExpRate.txt"));
			FB_LevelSealAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelSealAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_LevelSealBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelSealBase.txt"));
			FB_LevelSealCopySceneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LevelSealCopyScene.txt"));
			FB_LimitActivityBroadcastProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LimitActivityBroadcast.txt"));
			FB_LingBaoBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingBaoBase.txt"));
			FB_LingBaoLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingBaoLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_LingBaoQiLingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingBaoQiLing.txt"));
			FB_LingGangBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangBase.txt"));
			FB_LingGangLingWuLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangLingWuLevelUp.txt"));
			FB_LingGangSkillBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangSkillBase.txt"));
			FB_LingGangSkillLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangSkillLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_LingGangStepBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangStepBase.txt"));
			FB_LingGangXuLingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LingGangXuLing.txt"));
			FB_LotteryMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LotteryMission.txt"));
			FB_LuckyRollDailyMissionsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LuckyRollDailyMissions.txt"));
			FB_LuckyRollMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/LuckyRollMission.txt"));
			yield return new WaitForEndOfFrame();
			FB_MaiDianPartProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MaiDianPart.txt"));
			FB_MaiDianSuitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MaiDianSuit.txt"));
			FB_MarryActivityMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryActivityMission.txt"));
			FB_MarryActivityMissionRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryActivityMissionReward.txt"));
			FB_MarryBaseInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryBaseInfo.txt"));
			yield return new WaitForEndOfFrame();
			FB_MarryGiftInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryGiftInfo.txt"));
			FB_MarrySceneInfoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarrySceneInfo.txt"));
			FB_MarryShopItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryShopItem.txt"));
			FB_MarryShowItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryShowItem.txt"));
			FB_MarryTitleBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryTitleBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_MarryWuNvBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryWuNvBase.txt"));
			FB_MarryXinWuBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MarryXinWuBase.txt"));
			FB_MergeRankRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MergeRankReward.txt"));
			FB_MergeRechargeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MergeRecharge.txt"));
			FB_MergeTouZiProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MergeTouZi.txt"));
			yield return new WaitForEndOfFrame();
			FB_MergeTouZiTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MergeTouZiType.txt"));
			FB_MingGeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MingGeBase.txt"));
			FB_MiniMapProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MiniMap.txt"));
			FB_MissionBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionBase.txt"));
			FB_MissionBonusProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionBonus.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionCollectItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionCollectItem.txt"));
			FB_MissionCopySceneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionCopyScene.txt"));
			FB_MissionEnterAreaProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionEnterArea.txt"));
			FB_MissionFailedBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionFailedBase.txt"));
			FB_MissionFailedConditionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionFailedCondition.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionGuideProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionGuide.txt"));
			FB_MissionKillMonsterProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionKillMonster.txt"));
			FB_MissionLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionLimit.txt"));
			FB_MissionLootItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionLootItem.txt"));
			FB_MissionPuzzleProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionPuzzle.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionRoundProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionRound.txt"));
			FB_MissionRoundBonusProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionRoundBonus.txt"));
			FB_MissionRoundCommitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionRoundCommit.txt"));
			FB_MissionRoundConfigProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionRoundConfig.txt"));
			FB_MissionRoundLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionRoundLevel.txt"));
			yield return new WaitForEndOfFrame();
			FB_MissionSectionRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionSectionReward.txt"));
			FB_MissionUseItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MissionUseItem.txt"));
			FB_MondayLuckDrawBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MondayLuckDrawBase.txt"));
			FB_MondayLuckDrawItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MondayLuckDrawItem.txt"));
			FB_MondayLuckDrawMissionsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MondayLuckDrawMissions.txt"));
			yield return new WaitForEndOfFrame();
			FB_MopUpBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/MopUpBase.txt"));
			FB_NpcDialogProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/NpcDialog.txt"));
			FB_OccupationBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OccupationBase.txt"));
			FB_OfflineRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OfflineReward.txt"));
			FB_OldGodDiamondBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodDiamondBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_OldGodDiamondLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodDiamondLevelUp.txt"));
			FB_OldGodItemBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodItemBase.txt"));
			FB_OldGodItemLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodItemLevelUp.txt"));
			FB_OldGodSuitAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodSuitAttr.txt"));
			FB_OldGodSuitBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodSuitBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_OldGodUnitBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OldGodUnitBase.txt"));
			FB_OperationActivityGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OperationActivityGift.txt"));
			FB_OperationActivityListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OperationActivityList.txt"));
			FB_OppoRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/OppoReward.txt"));
			FB_PackageUnlockProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PackageUnlock.txt"));
			yield return new WaitForEndOfFrame();
			FB_ParamCollectionPublicProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ParamCollectionPublic.txt"));
			FB_PassiveSkillBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PassiveSkillBase.txt"));
			FB_PeiShiCompoundBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PeiShiCompoundBase.txt"));
			FB_PeiShiCompoundTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PeiShiCompoundType.txt"));
			FB_PetBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PetBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PetBattleSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PetBattleSkill.txt"));
			FB_PetMountProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PetMount.txt"));
			FB_PetSoulStoneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PetSoulStone.txt"));
			FB_PlayerLevelAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PlayerLevelAttr.txt"));
			FB_PlayerSkinBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PlayerSkinBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PlayerSkinColorProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PlayerSkinColor.txt"));
			FB_PlayerSkinLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PlayerSkinLevelUp.txt"));
			FB_PlayerSkinPartProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PlayerSkinPart.txt"));
			FB_PoseBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PoseBase.txt"));
			FB_ProgressBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ProgressBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_PugongCutProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PugongCut.txt"));
			FB_PurchaseAndRestitutProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/PurchaseAndRestitut.txt"));
			FB_QianKunDuoBaoBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/QianKunDuoBaoBase.txt"));
			FB_QianKunDuoBaoGetIntegralProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/QianKunDuoBaoGetIntegral.txt"));
			FB_QuickChangeEquipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/QuickChangeEquip.txt"));
			yield return new WaitForEndOfFrame();
			FB_RankBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RankBase.txt"));
			FB_RankBonusProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RankBonus.txt"));
			FB_RealmPracticeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RealmPracticeBase.txt"));
			FB_RealmPracticeLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RealmPracticeLevelUp.txt"));
			FB_RebateRuleProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RebateRule.txt"));
			yield return new WaitForEndOfFrame();
			FB_RechargeAndConsumeBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RechargeAndConsumeBase.txt"));
			FB_RechargeGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RechargeGift.txt"));
			FB_RechargeNewProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RechargeNew.txt"));
			FB_RelationProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/Relation.txt"));
			FB_RevivePriceProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RevivePrice.txt"));
			yield return new WaitForEndOfFrame();
			FB_RewardSurveyProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RewardSurvey.txt"));
			FB_RewardSurveyConfigProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RewardSurveyConfig.txt"));
			FB_RMBProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RMB.txt"));
			FB_RMBAttributeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RMBAttribute.txt"));
			FB_RobotBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RobotBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_RoleBaseAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RoleBaseAttr.txt"));
			FB_RongYaoCollectionAwakeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RongYaoCollectionAwake.txt"));
			FB_RongYaoCollectionUpdateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RongYaoCollectionUpdate.txt"));
			FB_RongYaoSuitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RongYaoSuit.txt"));
			FB_RuneAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RuneAttr.txt"));
			yield return new WaitForEndOfFrame();
			FB_RuneBoxWeightProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RuneBoxWeight.txt"));
			FB_RuneJieExpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RuneJieExp.txt"));
			FB_RuneLevelExpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RuneLevelExp.txt"));
			FB_RunesTreasureBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/RunesTreasureBase.txt"));
			FB_SceneClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SceneClass.txt"));
			yield return new WaitForEndOfFrame();
			FB_SceneGroupPointProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SceneGroupPoint.txt"));
			FB_SceneMirrorProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SceneMirror.txt"));
			FB_SceneNpcProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SceneNpc.txt"));
			FB_ServerLevelExpExtraProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ServerLevelExpExtra.txt"));
			FB_SevenStartBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SevenStartBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SevenStartBaseLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SevenStartBaseLevelUp.txt"));
			FB_ShengLingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingBase.txt"));
			FB_ShengLingCopySceneProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingCopyScene.txt"));
			FB_ShengLingCopySceneLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingCopySceneLimit.txt"));
			FB_ShengLingCopySceneTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingCopySceneType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShengLingLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingLevelUp.txt"));
			FB_ShengLingSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShengLingSkill.txt"));
			FB_ShenMoJiangYuBuyTimesCostProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenMoJiangYuBuyTimesCost.txt"));
			FB_ShenQiRenZhuClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenQiRenZhuClass.txt"));
			FB_ShenQiRenZhuTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenQiRenZhuType.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenShiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShiBase.txt"));
			FB_ShenShiMaxLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShiMaxLevel.txt"));
			FB_ShenShouBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShouBase.txt"));
			FB_ShenShouEquipBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShouEquipBase.txt"));
			FB_ShenShouEquipLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShouEquipLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenShouSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenShouSkill.txt"));
			FB_ShenWangLiLianProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangLiLian.txt"));
			FB_ShenWangZhanJiaBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaBase.txt"));
			FB_ShenWangZhanJiaCsBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaCsBase.txt"));
			FB_ShenWangZhanJiaCsRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaCsReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangZhanJiaCsShopProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaCsShop.txt"));
			FB_ShenWangZhanJiaEquipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaEquip.txt"));
			FB_ShenWangZhanJiaLegendAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaLegendAttr.txt"));
			FB_ShenWangZhanJiaMakeLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaMakeLevelUp.txt"));
			FB_ShenWangZhanJiaPaintingMissProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaPaintingMiss.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenWangZhanJiaPaintingPayProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaPaintingPay.txt"));
			FB_ShenWangZhanJiaPaintingRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaPaintingReward.txt"));
			FB_ShenWangZhanJiaPracticeLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenWangZhanJiaPracticeLevelUp.txt"));
			FB_ShenYuFengHaoBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenYuFengHaoBase.txt"));
			FB_ShenYuPointAdditionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenYuPointAddition.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShenZhiJingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenZhiJingBase.txt"));
			FB_ShenZhiJingItemLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenZhiJingItemLevelUp.txt"));
			FB_ShenZhuangLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShenZhuangLevelUp.txt"));
			FB_ShiLianBossProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShiLianBoss.txt"));
			FB_ShopItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShopItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_ShopTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShopType.txt"));
			FB_ShouHuangXiLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShouHuangXiLevelUp.txt"));
			FB_ShouHuangXiSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShouHuangXiSkill.txt"));
			FB_ShouHuBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ShouHuBase.txt"));
			FB_SignInRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SignInReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SignTotalRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SignTotalReward.txt"));
			FB_SkillAddValueProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillAddValue.txt"));
			FB_SkillBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillBase.txt"));
			FB_SkillCalculateProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillCalculate.txt"));
			FB_SkillDelayProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillDelay.txt"));
			yield return new WaitForEndOfFrame();
			FB_SkillExProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillEx.txt"));
			FB_SkillLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillLevel.txt"));
			FB_SkillListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillList.txt"));
			FB_SkillSkinBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SkillSkinBase.txt"));
			FB_SoulPowerBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SoulPowerBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SoulPowerDecomposeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SoulPowerDecompose.txt"));
			FB_SoulPowerJieUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SoulPowerJieUp.txt"));
			FB_SoulPowerLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SoulPowerLevelUp.txt"));
			FB_SpokesmanRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SpokesmanReward.txt"));
			FB_StarAttributeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarAttribute.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarCraftFightProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarCraftFight.txt"));
			FB_StarCraftMapProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarCraftMap.txt"));
			FB_StarCraftSetProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarCraftSet.txt"));
			FB_StarCraftTicketProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarCraftTicket.txt"));
			FB_StarmapBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarmapBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarmapRandomProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarmapRandom.txt"));
			FB_StarmapSectionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarmapSection.txt"));
			FB_StarSoulLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarSoulLevel.txt"));
			FB_StarSoulSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarSoulSkill.txt"));
			FB_StarSoulUnitBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarSoulUnitBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_StarSoulUnitLevelProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarSoulUnitLevel.txt"));
			FB_StarWishItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StarWishItem.txt"));
			FB_StrengthenBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StrengthenBase.txt"));
			FB_StrengthenSubClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/StrengthenSubClass.txt"));
			FB_SYHBonusByStageProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHBonusByStage.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHCangBaoHuiAwardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHCangBaoHuiAward.txt"));
			FB_SYHCangBaoMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHCangBaoMission.txt"));
			FB_SYHFestivalActivityListProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHFestivalActivityList.txt"));
			FB_SYHFestivalCarnivalMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHFestivalCarnivalMission.txt"));
			FB_SYHFestivalCarnivalRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHFestivalCarnivalReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHFestivalMonsterProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHFestivalMonster.txt"));
			FB_SYHJianBaoGeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJianBaoGe.txt"));
			FB_SYHJingXiXianGouBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJingXiXianGouBase.txt"));
			FB_SYHJuBaoFuDaiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoFuDaiBase.txt"));
			FB_SYHJuBaoFuDaiItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoFuDaiItem.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHJuBaoFuDaiRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoFuDaiReward.txt"));
			FB_SYHJuBaoPenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoPen.txt"));
			FB_SYHJuBaoPenPrizeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoPenPrize.txt"));
			FB_SYHJuBaoPenRankingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoPenRanking.txt"));
			FB_SYHJuBaoPenRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHJuBaoPenReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHNiuDanJiProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHNiuDanJi.txt"));
			FB_SYHQiYuanBaoGeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHQiYuanBaoGe.txt"));
			FB_SYHRechargeAndConsumeRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHRechargeAndConsumeReward.txt"));
			FB_SYHTianXingBaoGeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHTianXingBaoGe.txt"));
			FB_SYHXianShiBoxProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianShiBox.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHXianShiQiangGouProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianShiQiangGou.txt"));
			FB_SYHXianYuMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianYuMission.txt"));
			FB_SYHXianYuQmlhProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianYuQmlh.txt"));
			FB_SYHXianYuShengHuiAwardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianYuShengHuiAward.txt"));
			FB_SYHXianYuShengHuiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHXianYuShengHuiBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_SYHYuanBaoInvestProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHYuanBaoInvest.txt"));
			FB_SYHYuanBaoInvestTypeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHYuanBaoInvestType.txt"));
			FB_SYHZaDanPingGuoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHZaDanPingGuo.txt"));
			FB_SYHZaDanPingGuoNumRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/SYHZaDanPingGuoNumReward.txt"));
			FB_TaiGuRelicBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TaiGuRelicBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_TaiGuRelicShopItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TaiGuRelicShopItem.txt"));
			FB_TaoZhuangAttrProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TaoZhuangAttr.txt"));
			FB_TaoZhuangBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TaoZhuangBase.txt"));
			FB_TeamPlatformProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TeamPlatform.txt"));
			FB_TeamShipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TeamShip.txt"));
			yield return new WaitForEndOfFrame();
			FB_teQuanEnumProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/teQuanEnum.txt"));
			FB_teQuanGainProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/teQuanGain.txt"));
			FB_TheInheritProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TheInherit.txt"));
			FB_TianCiHongFuBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianCiHongFuBase.txt"));
			FB_TianCiHongFuRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianCiHongFuReward.txt"));
			yield return new WaitForEndOfFrame();
			FB_TianDaoShengYuanProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianDaoShengYuan.txt"));
			FB_TianDaoShengYuanRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianDaoShengYuanReward.txt"));
			FB_TianFuBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianFuBase.txt"));
			FB_TianJiBaoGeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TianJiBaoGe.txt"));
			FB_TiKuanJiAwardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TiKuanJiAward.txt"));
			yield return new WaitForEndOfFrame();
			FB_TimeLimitBagProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TimeLimitBag.txt"));
			FB_TimingBoxProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TimingBox.txt"));
			FB_TitleBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TitleBase.txt"));
			FB_TitleClassProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TitleClass.txt"));
			FB_TreasureProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/Treasure.txt"));
			yield return new WaitForEndOfFrame();
			FB_TreasureHuntMissionsProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TreasureHuntMissions.txt"));
			FB_TreasureHuntShopItemProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TreasureHuntShopItem.txt"));
			FB_TreasureShowProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/TreasureShow.txt"));
			FB_VehicleProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/Vehicle.txt"));
			FB_VipDayGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VipDayGift.txt"));
			yield return new WaitForEndOfFrame();
			FB_VipEnjoyGiftProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VipEnjoyGift.txt"));
			FB_VipHaoLiProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VipHaoLi.txt"));
			FB_VIPInvestRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VIPInvestReward.txt"));
			FB_VIPLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VIPLimit.txt"));
			FB_VIPPowerProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/VIPPower.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetArrayEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetArrayEffect.txt"));
			FB_WarPetArrayTechniqueLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetArrayTechniqueLevelUp.txt"));
			FB_WarPetBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetBase.txt"));
			FB_WarPetCompoundProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetCompound.txt"));
			FB_WarPetEquipProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetEquip.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetEquipLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetEquipLevelUp.txt"));
			FB_WarPetEquipStarLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetEquipStarLevelUp.txt"));
			FB_WarPetItemDecomposeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetItemDecompose.txt"));
			FB_WarPetLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetLevelUp.txt"));
			FB_WarPetRandomStarProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetRandomStar.txt"));
			yield return new WaitForEndOfFrame();
			FB_WarPetSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetSkill.txt"));
			FB_WarPetSkillLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetSkillLevelUp.txt"));
			FB_WarPetSkillLimitProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetSkillLimit.txt"));
			FB_WarPetStarProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetStar.txt"));
			FB_WarPetTalentProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WarPetTalent.txt"));
			yield return new WaitForEndOfFrame();
			FB_WingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WingBase.txt"));
			FB_WingTransmogProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WingTransmog.txt"));
			FB_WishBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WishBase.txt"));
			FB_WitCompeteProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WitCompete.txt"));
			FB_WorldBossProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WorldBoss.txt"));
			yield return new WaitForEndOfFrame();
			FB_WorldBossLikeProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WorldBossLike.txt"));
			FB_WuXingYuanLiProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/WuXingYuanLi.txt"));
			FB_XianYuZhiYiBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XianYuZhiYiBase.txt"));
			FB_XianYuZhiYiChapterBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XianYuZhiYiChapterBase.txt"));
			FB_XianYuZhiYiLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XianYuZhiYiLevelUp.txt"));
			yield return new WaitForEndOfFrame();
			FB_XianYuZhiYiUnlockLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XianYuZhiYiUnlockLevelUp.txt"));
			FB_XingHunItemBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunItemBase.txt"));
			FB_XingHunLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunLevelUp.txt"));
			FB_XingHunTeZhiLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunTeZhiLevelUp.txt"));
			FB_XingHunTeZhiPassiveSkillProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunTeZhiPassiveSkill.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingHunUnitBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunUnitBase.txt"));
			FB_XingHunZhuanJingBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunZhuanJingBase.txt"));
			FB_XingHunZhuanJingEffectProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunZhuanJingEffect.txt"));
			FB_XingHunZhuanJingLevelUpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingHunZhuanJingLevelUp.txt"));
			FB_XingYunBlessingProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYunBlessing.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingYunExtractBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYunExtractBase.txt"));
			FB_XingYunGuideEventProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYunGuideEvent.txt"));
			FB_XingYunMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYunMission.txt"));
			FB_XingYuPaiHangProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYuPaiHang.txt"));
			FB_XingYuPingFenProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYuPingFen.txt"));
			yield return new WaitForEndOfFrame();
			FB_XingYuRewardProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYuReward.txt"));
			FB_XingYuTicketBonusProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYuTicketBonus.txt"));
			FB_XingYuTicketMissionProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XingYuTicketMission.txt"));
			FB_XueShiBaoKuProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/XueShiBaoKu.txt"));
			FB_YingYanBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/YingYanBase.txt"));
			yield return new WaitForEndOfFrame();
			FB_YuanShenBaseProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/YuanShenBase.txt"));
			FB_YuanShenShowExpProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/YuanShenShowExp.txt"));
			FB_YueKaProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/YueKa.txt"));
			FB_YunGouProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/YunGou.txt"));
			FB_ZhanLingLibaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ZhanLingLibao.txt"));
			yield return new WaitForEndOfFrame();
			FB_ZheKouShangDianProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ZheKouShangDian.txt"));
			FB_ZhongShenDianProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ZhongShenDian.txt"));
			FB_ZhuangBeiXunBaoProvider.Instance.LoadFromMemory(ReadFlatBufferDTBytes("Public/ZhuangBeiXunBao.txt"));

            //Debug.Log("<color=green>LoadFBDataFromMemory End.</color>");
            if (null != OnLoadFBTableFinish)
            {
                OnLoadFBTableFinish();
            }
        }
        /// <summary>
        /// ���FlatBuffer��
        /// </summary>
        /// <returns></returns>
        static public void ClearFBData()
        {
            //Debug.Log("<color=green>ClearFBData Begin.</color>");
            FB_AchievementJumpProvider.Instance.Clear();
			FB_ActivityDaZhiGouShowProvider.Instance.Clear();
			FB_ActivityPrayShowProvider.Instance.Clear();
			FB_ActivityTypeProvider.Instance.Clear();
			FB_AllActivityProvider.Instance.Clear();
			FB_AnimationProvider.Instance.Clear();
			FB_AnimationCurveProvider.Instance.Clear();
			FB_AreaCodeProvider.Instance.Clear();
			FB_AttributeLessProvider.Instance.Clear();
			FB_BottomRightMenuProvider.Instance.Clear();
			FB_BulletProvider.Instance.Clear();
			FB_CameraEffectProvider.Instance.Clear();
			FB_CharAnimProvider.Instance.Clear();
			FB_CharAnimEffectProvider.Instance.Clear();
			FB_CharModelProvider.Instance.Clear();
			FB_CharMountProvider.Instance.Clear();
			FB_CharSoulProvider.Instance.Clear();
			FB_CharWingProvider.Instance.Clear();
			FB_CharXingHunProvider.Instance.Clear();
			FB_ChatExpressionProvider.Instance.Clear();
			FB_ChatRobotBaseProvider.Instance.Clear();
			FB_ChatRobotContentProvider.Instance.Clear();
			FB_ChatWordExpressionProvider.Instance.Clear();
			FB_ClientStoryTableProvider.Instance.Clear();
			FB_CloseUpShotProvider.Instance.Clear();
			FB_CombatPetSceneProvider.Instance.Clear();
			FB_CommonItemDataAboutSexProvider.Instance.Clear();
			FB_CommonItemParamTypeListProvider.Instance.Clear();
			FB_CopySceneLastShotProvider.Instance.Clear();
			FB_CSQXuanSNpcProvider.Instance.Clear();
			FB_DamageBoardTypeProvider.Instance.Clear();
			FB_DestinyBloodSkillDesProvider.Instance.Clear();
			FB_DestinyObjParamsProvider.Instance.Clear();
			FB_DymaticSceneEffectProvider.Instance.Clear();
			FB_EffectProvider.Instance.Clear();
			FB_EffectPointProvider.Instance.Clear();
			FB_EquipStarEffectProvider.Instance.Clear();
			FB_EquipTipsProvider.Instance.Clear();
			FB_FittingBaseProvider.Instance.Clear();
			FB_FlyCutterUIProvider.Instance.Clear();
			FB_fwqlistProvider.Instance.Clear();
			FB_GetPathBaseProvider.Instance.Clear();
			FB_GetPathInfoProvider.Instance.Clear();
			FB_gonggaoProvider.Instance.Clear();
			FB_GuideBaseProvider.Instance.Clear();
			FB_GuideTypeProvider.Instance.Clear();
			FB_GuildFormationTypeProvider.Instance.Clear();
			FB_HairModelProvider.Instance.Clear();
			FB_HuanJingObjParamsProvider.Instance.Clear();
			FB_HuanLeXunBaoProvider.Instance.Clear();
			FB_HunJiangShanghenParamProvider.Instance.Clear();
			FB_IapGiftUIProvider.Instance.Clear();
			FB_ItemButtonLogicProvider.Instance.Clear();
			FB_ItemCompoundTypeSettingProvider.Instance.Clear();
			FB_JiLingTreeBaseProvider.Instance.Clear();
			FB_JiYiCardProvider.Instance.Clear();
			FB_KneadFaceFakeObjMovePosProvider.Instance.Clear();
			FB_KneadFaceOfEyeProvider.Instance.Clear();
			FB_KneadFaceOfEyeBrowProvider.Instance.Clear();
			FB_KneadFaceOfLipProvider.Instance.Clear();
			FB_KneadFaceOfPrefabProvider.Instance.Clear();
			FB_KneadFaceOfTattoProvider.Instance.Clear();
			FB_LingBaoTypeProvider.Instance.Clear();
			FB_LocalNotificationProvider.Instance.Clear();
			FB_MaiDianStarSoulModelProvider.Instance.Clear();
			FB_MergeRankShowProvider.Instance.Clear();
			FB_MissionDictionaryProvider.Instance.Clear();
			FB_MissionSceneEffectProvider.Instance.Clear();
			FB_MountBindPointProvider.Instance.Clear();
			FB_NPCPaoPaoProvider.Instance.Clear();
			FB_NPCSoundsProvider.Instance.Clear();
			FB_OfflineCompetitionPlayerShowPostionProvider.Instance.Clear();
			FB_OperateResultTipsProvider.Instance.Clear();
			FB_OptionTypeProvider.Instance.Clear();
			FB_PhotoEffectProvider.Instance.Clear();
			FB_PhotoTabEffectProvider.Instance.Clear();
			FB_PicturePuzzleProvider.Instance.Clear();
			FB_PlayerHeadInfoCfgProvider.Instance.Clear();
			FB_PlayMethodBroadcastProvider.Instance.Clear();
			FB_PreloadProvider.Instance.Clear();
			FB_PropertyIntroProvider.Instance.Clear();
			FB_RankTypeProvider.Instance.Clear();
			FB_RealTimeShadowConfigProvider.Instance.Clear();
			FB_RobotProvider.Instance.Clear();
			FB_RobotAppearanceProvider.Instance.Clear();
			FB_RoleNameProvider.Instance.Clear();
			FB_SceneCullingParamProvider.Instance.Clear();
			FB_SceneShaderParamProvider.Instance.Clear();
			FB_SexDistinctionProvider.Instance.Clear();
			FB_ShakeCameraProvider.Instance.Clear();
			FB_ShenWangYouLeChangProvider.Instance.Clear();
			FB_ShenWangZhanJiaCSChapterProvider.Instance.Clear();
			FB_ShenYuRankBaseProvider.Instance.Clear();
			FB_ShieldingSymbolProvider.Instance.Clear();
			FB_ShieldStringProvider.Instance.Clear();
			FB_ShopClassProvider.Instance.Clear();
			FB_SkillCamAnimProvider.Instance.Clear();
			FB_SkillDemonstrationProvider.Instance.Clear();
			FB_SoundsProvider.Instance.Clear();
			FB_StarSoulPaoPaoProvider.Instance.Clear();
			FB_StarWishRewardShowProvider.Instance.Clear();
			FB_StoryAnimationProvider.Instance.Clear();
			FB_StoryPlayerEffectProvider.Instance.Clear();
			FB_StrDictionaryProvider.Instance.Clear();
			FB_StrengthenNeedEquipOrExpProvider.Instance.Clear();
			FB_StrengthenNeedResourceProvider.Instance.Clear();
			FB_StrengthenRateProvider.Instance.Clear();
			FB_StrLoadingProvider.Instance.Clear();
			FB_SYHFestivalDicProvider.Instance.Clear();
			FB_SYHZaDanPingGuoShowProvider.Instance.Clear();
			FB_TaoZhuangModelProvider.Instance.Clear();
			FB_TeamPostionProvider.Instance.Clear();
			FB_TipsEquipListProvider.Instance.Clear();
			FB_TipsPreviewProvider.Instance.Clear();
			FB_TopRightMenuProvider.Instance.Clear();
			FB_UIInfoProvider.Instance.Clear();
			FB_UIModelProvider.Instance.Clear();
			FB_UISpecialHideProvider.Instance.Clear();
			FB_UISubPanelPathProvider.Instance.Clear();
			FB_UITextProvider.Instance.Clear();
			FB_WarPetModelProvider.Instance.Clear();
			FB_WeaponAnimationProvider.Instance.Clear();
			FB_WeaponModelProvider.Instance.Clear();
			FB_WeekPlanProvider.Instance.Clear();
			FB_WingExtraModelPointProvider.Instance.Clear();
			FB_WorldCupCountryProvider.Instance.Clear();
			FB_YingYanItemProvider.Instance.Clear();
			FB_AchievementBaseProvider.Instance.Clear();
			FB_AchievementClassProvider.Instance.Clear();
			FB_AchievementSubClassProvider.Instance.Clear();
			FB_ActivityAncientSealProessRewardProvider.Instance.Clear();
			FB_ActivityAncientSealSearchProvider.Instance.Clear();
			FB_ActivityBaseProvider.Instance.Clear();
			FB_ActivityBonusProvider.Instance.Clear();
			FB_ActivityChickenBaseProvider.Instance.Clear();
			FB_ActivityChickenGiftProvider.Instance.Clear();
			FB_ActivityChickenMissionProvider.Instance.Clear();
			FB_ActivityChickenProessRewardProvider.Instance.Clear();
			FB_ActivityDaZhiGouRewardProvider.Instance.Clear();
			FB_ActivityObjectivesListProvider.Instance.Clear();
			FB_ActivityPointProvider.Instance.Clear();
			FB_ActivityPrayProvider.Instance.Clear();
			FB_ActivityPrayShopProvider.Instance.Clear();
			FB_ActivityQuestionBaseProvider.Instance.Clear();
			FB_ActivityShowBaseProvider.Instance.Clear();
			FB_ActivityShowLevelProvider.Instance.Clear();
			FB_ActWanGuConfigProvider.Instance.Clear();
			FB_ActWanGuMissionBaseProvider.Instance.Clear();
			FB_ActWanGuMissionClassProvider.Instance.Clear();
			FB_ActWanGuMissionSubClassProvider.Instance.Clear();
			FB_ActWanGuPropLevelBaseProvider.Instance.Clear();
			FB_ActWanGuPropLevelRewardProvider.Instance.Clear();
			FB_ActZhuTianBaoLunProvider.Instance.Clear();
			FB_AdvancedBaseProvider.Instance.Clear();
			FB_AncientSealShopItemProvider.Instance.Clear();
			FB_ArenaRewardProvider.Instance.Clear();
			FB_ArtifactBaseProvider.Instance.Clear();
			FB_ArtifactBaseLevelUpProvider.Instance.Clear();
			FB_ArtifactBaseLevelUpSpecialProvider.Instance.Clear();
			FB_AttrPowerBaseProvider.Instance.Clear();
			FB_AuctionClassProvider.Instance.Clear();
			FB_AuctionItemProvider.Instance.Clear();
			FB_AuctionTypeProvider.Instance.Clear();
			FB_AutoBindBaseProvider.Instance.Clear();
			FB_BagTreasureProvider.Instance.Clear();
			FB_baiwanjijieProvider.Instance.Clear();
			FB_baiwanjijie2Provider.Instance.Clear();
			FB_BattlefieldCampLevelBuffProvider.Instance.Clear();
			FB_BattlefieldCampRewProvider.Instance.Clear();
			FB_BattlefieldCollectionRewProvider.Instance.Clear();
			FB_BattlefieldRankRewProvider.Instance.Clear();
			FB_BenYuanItemBaseProvider.Instance.Clear();
			FB_BenYuanItemLevelUpProvider.Instance.Clear();
			FB_BlackCardSignInRewardProvider.Instance.Clear();
			FB_BlackCardTickProvider.Instance.Clear();
			FB_BloodBaseProvider.Instance.Clear();
			FB_BloodMixProvider.Instance.Clear();
			FB_BloodMixLevelProvider.Instance.Clear();
			FB_BloodPossessedProvider.Instance.Clear();
			FB_BloodPossessedModelProvider.Instance.Clear();
			FB_BossGongChengRewardProvider.Instance.Clear();
			FB_BossInvestProvider.Instance.Clear();
			FB_BossInvestTypeProvider.Instance.Clear();
			FB_CardBaseProvider.Instance.Clear();
			FB_CardFlopBaseProvider.Instance.Clear();
			FB_CardJiBanActivateRewardProvider.Instance.Clear();
			FB_CardRankRewardBaseProvider.Instance.Clear();
			FB_CardShopProvider.Instance.Clear();
			FB_CardXunBaoBaseProvider.Instance.Clear();
			FB_CardXunBaoShowProvider.Instance.Clear();
			FB_ChangeJob6ItemBaseProvider.Instance.Clear();
			FB_ChangeJob8ComprehendUpProvider.Instance.Clear();
			FB_ChangeJob8MissionProvider.Instance.Clear();
			FB_ChangeJobBaseProvider.Instance.Clear();
			FB_ChangeJobPhaseProvider.Instance.Clear();
			FB_ChangeMenPaiConditionProvider.Instance.Clear();
			FB_ChapterCardBaseProvider.Instance.Clear();
			FB_ChapterCardLevelUpProvider.Instance.Clear();
			FB_CharmLoveRankRewardBaseProvider.Instance.Clear();
			FB_ChatLimitProvider.Instance.Clear();
			FB_ChiJiBaseProvider.Instance.Clear();
			FB_ChiJiRewardBaseProvider.Instance.Clear();
			FB_ChongJiGiftProvider.Instance.Clear();
			FB_ClientConfigProvider.Instance.Clear();
			FB_CollectActivityProvider.Instance.Clear();
			FB_CombatPetBaseProvider.Instance.Clear();
			FB_CombatPetRewardProvider.Instance.Clear();
			FB_CommonItemProvider.Instance.Clear();
			FB_CoolDownTimeProvider.Instance.Clear();
			FB_CopySceneLimitProvider.Instance.Clear();
			FB_CopySceneMoNengFeiXuProvider.Instance.Clear();
			FB_CopySceneShopProvider.Instance.Clear();
			FB_CopySceneStageDicProvider.Instance.Clear();
			FB_CopySceneTowerProvider.Instance.Clear();
			FB_CopySceneTowerSkillProvider.Instance.Clear();
			FB_CreatePlayerProvider.Instance.Clear();
			FB_CSEvalueRewardProvider.Instance.Clear();
			FB_CurrencyBaseProvider.Instance.Clear();
			FB_DailyRebateProvider.Instance.Clear();
			FB_DailyRechargeProvider.Instance.Clear();
			FB_DestinyBaseProvider.Instance.Clear();
			FB_DestinyBaseLevelUpProvider.Instance.Clear();
			FB_DestinyBloodBaseProvider.Instance.Clear();
			FB_DestinyBloodItemProvider.Instance.Clear();
			FB_DestinyBloodLevelUpProvider.Instance.Clear();
			FB_DestinyCultureLevelUpProvider.Instance.Clear();
			FB_DestinySkillProvider.Instance.Clear();
			FB_DestinyTemperBaseProvider.Instance.Clear();
			FB_DestinyTemperRateProvider.Instance.Clear();
			FB_DiamondAttributeProvider.Instance.Clear();
			FB_DiamondBaseProvider.Instance.Clear();
			FB_DiamondCuiLianProvider.Instance.Clear();
			FB_DiamondGongZhenProvider.Instance.Clear();
			FB_DiamondGongZhenAllProvider.Instance.Clear();
			FB_DiamondGongZhenEnumProvider.Instance.Clear();
			FB_DiamondSetProvider.Instance.Clear();
			FB_DiamondStrengthenProvider.Instance.Clear();
			FB_EmotionBaseProvider.Instance.Clear();
			FB_EmotionClassProvider.Instance.Clear();
			FB_EquipAttrProvider.Instance.Clear();
			FB_EquipAttrRateProvider.Instance.Clear();
			FB_EquipAttrValueProvider.Instance.Clear();
			FB_EquipCompoundTypeProvider.Instance.Clear();
			FB_EquipCompoundTypeShenZhuangProvider.Instance.Clear();
			FB_EquipExchangeProvider.Instance.Clear();
			FB_EquipExhibitionProvider.Instance.Clear();
			FB_EquipExtraAttrProvider.Instance.Clear();
			FB_EquipFavPointProvider.Instance.Clear();
			FB_EquipFuLingAttrProvider.Instance.Clear();
			FB_EquipFuLingLevelUpProvider.Instance.Clear();
			FB_EquipFusionAttrProvider.Instance.Clear();
			FB_EquipFusionBaseProvider.Instance.Clear();
			FB_EquipPartZhuHunProvider.Instance.Clear();
			FB_EquipPartZhuHunBaoShiProvider.Instance.Clear();
			FB_EquipRandomAttrProvider.Instance.Clear();
			FB_EquipRecastProvider.Instance.Clear();
			FB_EquipSetStoneProvider.Instance.Clear();
			FB_EquipSetStoneGroupAttrProvider.Instance.Clear();
			FB_EquipSlotAttrProvider.Instance.Clear();
			FB_EquipSlotResonanceProvider.Instance.Clear();
			FB_EquipSlotStrengthenProvider.Instance.Clear();
			FB_EquipSourceProvider.Instance.Clear();
			FB_EquipStrengthenProvider.Instance.Clear();
			FB_EquipZhuHunProvider.Instance.Clear();
			FB_EternalTreasureProvider.Instance.Clear();
			FB_EternalTreasureRewardProvider.Instance.Clear();
			FB_FakeObjectProvider.Instance.Clear();
			FB_FindRewardBaseProvider.Instance.Clear();
			FB_FindRewardClassProvider.Instance.Clear();
			FB_FuLiDaTingProvider.Instance.Clear();
			FB_FunctionBaseProvider.Instance.Clear();
			FB_FunctionPrepareProvider.Instance.Clear();
			FB_GodWeaponBaseProvider.Instance.Clear();
			FB_GodWeaponLevelProvider.Instance.Clear();
			FB_GodWordBaseProvider.Instance.Clear();
			FB_GodWordCharmProvider.Instance.Clear();
			FB_GoldCopyAwardProvider.Instance.Clear();
			FB_GoldenBadgeBaseProvider.Instance.Clear();
			FB_GoldenBadgeLevelUpProvider.Instance.Clear();
			FB_GreetingCardRewardProvider.Instance.Clear();
			FB_GroupPointProvider.Instance.Clear();
			FB_GrowUpBagProvider.Instance.Clear();
			FB_GuideCollectBaseProvider.Instance.Clear();
			FB_GuideCollectBossTipsProvider.Instance.Clear();
			FB_GuildActiveBaseProvider.Instance.Clear();
			FB_GuildBaseProvider.Instance.Clear();
			FB_GuildBlessBaseProvider.Instance.Clear();
			FB_GuildBossProvider.Instance.Clear();
			FB_GuildFoodBoxProvider.Instance.Clear();
			FB_GuildFormationBaseProvider.Instance.Clear();
			FB_GuildFormationLevelProvider.Instance.Clear();
			FB_GuildFormationTypeNewProvider.Instance.Clear();
			FB_GuildPermissionProvider.Instance.Clear();
			FB_GuildPresentProvider.Instance.Clear();
			FB_GuildRedPacketProvider.Instance.Clear();
			FB_GuildWelfareBaseProvider.Instance.Clear();
			FB_HuanJingBaseProvider.Instance.Clear();
			FB_HuanJingEquipProvider.Instance.Clear();
			FB_HuanJingEquipSlotProvider.Instance.Clear();
			FB_HuanJingEquipStarProvider.Instance.Clear();
			FB_HuanJingJiBanProvider.Instance.Clear();
			FB_HuanJingLevelProvider.Instance.Clear();
			FB_HuanJingSkillProvider.Instance.Clear();
			FB_HuanJingTypeProvider.Instance.Clear();
			FB_HuLingBaseProvider.Instance.Clear();
			FB_HunGeBaseProvider.Instance.Clear();
			FB_HunJiangGongMingProvider.Instance.Clear();
			FB_HunJiangItemBaseProvider.Instance.Clear();
			FB_HunJiangItemLevelUpProvider.Instance.Clear();
			FB_HunJiangJiBanBaseProvider.Instance.Clear();
			FB_HunJiangJiBanLevelUpProvider.Instance.Clear();
			FB_HunJiangJiBanSkillProvider.Instance.Clear();
			FB_HunJiangJuHunProvider.Instance.Clear();
			FB_HunJiangRongLianProvider.Instance.Clear();
			FB_HunJiangShangZhenProvider.Instance.Clear();
			FB_HunJiangSkillBaseProvider.Instance.Clear();
			FB_HunJiangSkillValueProvider.Instance.Clear();
			FB_HunJiangXunBaoProvider.Instance.Clear();
			FB_IapGiftProvider.Instance.Clear();
			FB_IapGift2Provider.Instance.Clear();
			FB_IapGiftRewardProvider.Instance.Clear();
			FB_IapGiftReward2Provider.Instance.Clear();
			FB_ImpactProvider.Instance.Clear();
			FB_ItemCompoundBaseProvider.Instance.Clear();
			FB_ItemCompoundTypeProvider.Instance.Clear();
			FB_ItemGiftBaseProvider.Instance.Clear();
			FB_ItemLocationProvider.Instance.Clear();
			FB_ItemStepUpBaseProvider.Instance.Clear();
			FB_JiBanAttrLevelUpProvider.Instance.Clear();
			FB_JiBanBaseProvider.Instance.Clear();
			FB_JieSoulStoneProvider.Instance.Clear();
			FB_JieYuanBaseProvider.Instance.Clear();
			FB_JieYuanLevelUpProvider.Instance.Clear();
			FB_JieYuanSlotResonanceProvider.Instance.Clear();
			FB_JieYuanSuitProvider.Instance.Clear();
			FB_JieYuanSuitInfoProvider.Instance.Clear();
			FB_JiLingAttrPercentLevelUpProvider.Instance.Clear();
			FB_JiLingDecomposeProvider.Instance.Clear();
			FB_JiLingDestinyAddAttrProvider.Instance.Clear();
			FB_JiLingDestinyLevelUpProvider.Instance.Clear();
			FB_JiLingJingJieProvider.Instance.Clear();
			FB_JiLingMapBaseProvider.Instance.Clear();
			FB_JiLingQiLingBaseProvider.Instance.Clear();
			FB_JiLingQiLingGongMingProvider.Instance.Clear();
			FB_JiLingQiLingGongMingAddAttrProvider.Instance.Clear();
			FB_JiLingQiLingLevelUpProvider.Instance.Clear();
			FB_JiLingTransformationAttrProvider.Instance.Clear();
			FB_JiLingWuHunLevelUpProvider.Instance.Clear();
			FB_JiLingWuHunNingHunProvider.Instance.Clear();
			FB_JiYiBaseProvider.Instance.Clear();
			FB_JuBaoPenTreasureProvider.Instance.Clear();
			FB_JuHunAttrProvider.Instance.Clear();
			FB_JuhunBoxWeightProvider.Instance.Clear();
			FB_JuHunLevelUpProvider.Instance.Clear();
			FB_JuLingCSbaseProvider.Instance.Clear();
			FB_KaiFuPaiHangProvider.Instance.Clear();
			FB_KaiFuPaiHangTypeProvider.Instance.Clear();
			FB_KneadFaceOClothingProvider.Instance.Clear();
			FB_LadderProvider.Instance.Clear();
			FB_LadderHonorProvider.Instance.Clear();
			FB_LadderMissionProvider.Instance.Clear();
			FB_LevelCompensateProvider.Instance.Clear();
			FB_LevelExpProvider.Instance.Clear();
			FB_LevelSealAddExpRateProvider.Instance.Clear();
			FB_LevelSealAttrProvider.Instance.Clear();
			FB_LevelSealBaseProvider.Instance.Clear();
			FB_LevelSealCopySceneProvider.Instance.Clear();
			FB_LimitActivityBroadcastProvider.Instance.Clear();
			FB_LingBaoBaseProvider.Instance.Clear();
			FB_LingBaoLevelUpProvider.Instance.Clear();
			FB_LingBaoQiLingProvider.Instance.Clear();
			FB_LingGangBaseProvider.Instance.Clear();
			FB_LingGangLingWuLevelUpProvider.Instance.Clear();
			FB_LingGangSkillBaseProvider.Instance.Clear();
			FB_LingGangSkillLevelUpProvider.Instance.Clear();
			FB_LingGangStepBaseProvider.Instance.Clear();
			FB_LingGangXuLingProvider.Instance.Clear();
			FB_LotteryMissionProvider.Instance.Clear();
			FB_LuckyRollDailyMissionsProvider.Instance.Clear();
			FB_LuckyRollMissionProvider.Instance.Clear();
			FB_MaiDianPartProvider.Instance.Clear();
			FB_MaiDianSuitProvider.Instance.Clear();
			FB_MarryActivityMissionProvider.Instance.Clear();
			FB_MarryActivityMissionRewardProvider.Instance.Clear();
			FB_MarryBaseInfoProvider.Instance.Clear();
			FB_MarryGiftInfoProvider.Instance.Clear();
			FB_MarrySceneInfoProvider.Instance.Clear();
			FB_MarryShopItemProvider.Instance.Clear();
			FB_MarryShowItemProvider.Instance.Clear();
			FB_MarryTitleBaseProvider.Instance.Clear();
			FB_MarryWuNvBaseProvider.Instance.Clear();
			FB_MarryXinWuBaseProvider.Instance.Clear();
			FB_MergeRankRewardProvider.Instance.Clear();
			FB_MergeRechargeProvider.Instance.Clear();
			FB_MergeTouZiProvider.Instance.Clear();
			FB_MergeTouZiTypeProvider.Instance.Clear();
			FB_MingGeBaseProvider.Instance.Clear();
			FB_MiniMapProvider.Instance.Clear();
			FB_MissionBaseProvider.Instance.Clear();
			FB_MissionBonusProvider.Instance.Clear();
			FB_MissionCollectItemProvider.Instance.Clear();
			FB_MissionCopySceneProvider.Instance.Clear();
			FB_MissionEnterAreaProvider.Instance.Clear();
			FB_MissionFailedBaseProvider.Instance.Clear();
			FB_MissionFailedConditionProvider.Instance.Clear();
			FB_MissionGuideProvider.Instance.Clear();
			FB_MissionKillMonsterProvider.Instance.Clear();
			FB_MissionLimitProvider.Instance.Clear();
			FB_MissionLootItemProvider.Instance.Clear();
			FB_MissionPuzzleProvider.Instance.Clear();
			FB_MissionRoundProvider.Instance.Clear();
			FB_MissionRoundBonusProvider.Instance.Clear();
			FB_MissionRoundCommitProvider.Instance.Clear();
			FB_MissionRoundConfigProvider.Instance.Clear();
			FB_MissionRoundLevelProvider.Instance.Clear();
			FB_MissionSectionRewardProvider.Instance.Clear();
			FB_MissionUseItemProvider.Instance.Clear();
			FB_MondayLuckDrawBaseProvider.Instance.Clear();
			FB_MondayLuckDrawItemProvider.Instance.Clear();
			FB_MondayLuckDrawMissionsProvider.Instance.Clear();
			FB_MopUpBaseProvider.Instance.Clear();
			FB_NpcDialogProvider.Instance.Clear();
			FB_OccupationBaseProvider.Instance.Clear();
			FB_OfflineRewardProvider.Instance.Clear();
			FB_OldGodDiamondBaseProvider.Instance.Clear();
			FB_OldGodDiamondLevelUpProvider.Instance.Clear();
			FB_OldGodItemBaseProvider.Instance.Clear();
			FB_OldGodItemLevelUpProvider.Instance.Clear();
			FB_OldGodSuitAttrProvider.Instance.Clear();
			FB_OldGodSuitBaseProvider.Instance.Clear();
			FB_OldGodUnitBaseProvider.Instance.Clear();
			FB_OperationActivityGiftProvider.Instance.Clear();
			FB_OperationActivityListProvider.Instance.Clear();
			FB_OppoRewardProvider.Instance.Clear();
			FB_PackageUnlockProvider.Instance.Clear();
			FB_ParamCollectionPublicProvider.Instance.Clear();
			FB_PassiveSkillBaseProvider.Instance.Clear();
			FB_PeiShiCompoundBaseProvider.Instance.Clear();
			FB_PeiShiCompoundTypeProvider.Instance.Clear();
			FB_PetBaseProvider.Instance.Clear();
			FB_PetBattleSkillProvider.Instance.Clear();
			FB_PetMountProvider.Instance.Clear();
			FB_PetSoulStoneProvider.Instance.Clear();
			FB_PlayerLevelAttrProvider.Instance.Clear();
			FB_PlayerSkinBaseProvider.Instance.Clear();
			FB_PlayerSkinColorProvider.Instance.Clear();
			FB_PlayerSkinLevelUpProvider.Instance.Clear();
			FB_PlayerSkinPartProvider.Instance.Clear();
			FB_PoseBaseProvider.Instance.Clear();
			FB_ProgressBaseProvider.Instance.Clear();
			FB_PugongCutProvider.Instance.Clear();
			FB_PurchaseAndRestitutProvider.Instance.Clear();
			FB_QianKunDuoBaoBaseProvider.Instance.Clear();
			FB_QianKunDuoBaoGetIntegralProvider.Instance.Clear();
			FB_QuickChangeEquipProvider.Instance.Clear();
			FB_RankBaseProvider.Instance.Clear();
			FB_RankBonusProvider.Instance.Clear();
			FB_RealmPracticeBaseProvider.Instance.Clear();
			FB_RealmPracticeLevelUpProvider.Instance.Clear();
			FB_RebateRuleProvider.Instance.Clear();
			FB_RechargeAndConsumeBaseProvider.Instance.Clear();
			FB_RechargeGiftProvider.Instance.Clear();
			FB_RechargeNewProvider.Instance.Clear();
			FB_RelationProvider.Instance.Clear();
			FB_RevivePriceProvider.Instance.Clear();
			FB_RewardSurveyProvider.Instance.Clear();
			FB_RewardSurveyConfigProvider.Instance.Clear();
			FB_RMBProvider.Instance.Clear();
			FB_RMBAttributeProvider.Instance.Clear();
			FB_RobotBaseProvider.Instance.Clear();
			FB_RoleBaseAttrProvider.Instance.Clear();
			FB_RongYaoCollectionAwakeProvider.Instance.Clear();
			FB_RongYaoCollectionUpdateProvider.Instance.Clear();
			FB_RongYaoSuitProvider.Instance.Clear();
			FB_RuneAttrProvider.Instance.Clear();
			FB_RuneBoxWeightProvider.Instance.Clear();
			FB_RuneJieExpProvider.Instance.Clear();
			FB_RuneLevelExpProvider.Instance.Clear();
			FB_RunesTreasureBaseProvider.Instance.Clear();
			FB_SceneClassProvider.Instance.Clear();
			FB_SceneGroupPointProvider.Instance.Clear();
			FB_SceneMirrorProvider.Instance.Clear();
			FB_SceneNpcProvider.Instance.Clear();
			FB_ServerLevelExpExtraProvider.Instance.Clear();
			FB_SevenStartBaseProvider.Instance.Clear();
			FB_SevenStartBaseLevelUpProvider.Instance.Clear();
			FB_ShengLingBaseProvider.Instance.Clear();
			FB_ShengLingCopySceneProvider.Instance.Clear();
			FB_ShengLingCopySceneLimitProvider.Instance.Clear();
			FB_ShengLingCopySceneTypeProvider.Instance.Clear();
			FB_ShengLingLevelUpProvider.Instance.Clear();
			FB_ShengLingSkillProvider.Instance.Clear();
			FB_ShenMoJiangYuBuyTimesCostProvider.Instance.Clear();
			FB_ShenQiRenZhuClassProvider.Instance.Clear();
			FB_ShenQiRenZhuTypeProvider.Instance.Clear();
			FB_ShenShiBaseProvider.Instance.Clear();
			FB_ShenShiMaxLevelProvider.Instance.Clear();
			FB_ShenShouBaseProvider.Instance.Clear();
			FB_ShenShouEquipBaseProvider.Instance.Clear();
			FB_ShenShouEquipLevelUpProvider.Instance.Clear();
			FB_ShenShouSkillProvider.Instance.Clear();
			FB_ShenWangLiLianProvider.Instance.Clear();
			FB_ShenWangZhanJiaBaseProvider.Instance.Clear();
			FB_ShenWangZhanJiaCsBaseProvider.Instance.Clear();
			FB_ShenWangZhanJiaCsRewardProvider.Instance.Clear();
			FB_ShenWangZhanJiaCsShopProvider.Instance.Clear();
			FB_ShenWangZhanJiaEquipProvider.Instance.Clear();
			FB_ShenWangZhanJiaLegendAttrProvider.Instance.Clear();
			FB_ShenWangZhanJiaMakeLevelUpProvider.Instance.Clear();
			FB_ShenWangZhanJiaPaintingMissProvider.Instance.Clear();
			FB_ShenWangZhanJiaPaintingPayProvider.Instance.Clear();
			FB_ShenWangZhanJiaPaintingRewardProvider.Instance.Clear();
			FB_ShenWangZhanJiaPracticeLevelUpProvider.Instance.Clear();
			FB_ShenYuFengHaoBaseProvider.Instance.Clear();
			FB_ShenYuPointAdditionProvider.Instance.Clear();
			FB_ShenZhiJingBaseProvider.Instance.Clear();
			FB_ShenZhiJingItemLevelUpProvider.Instance.Clear();
			FB_ShenZhuangLevelUpProvider.Instance.Clear();
			FB_ShiLianBossProvider.Instance.Clear();
			FB_ShopItemProvider.Instance.Clear();
			FB_ShopTypeProvider.Instance.Clear();
			FB_ShouHuangXiLevelUpProvider.Instance.Clear();
			FB_ShouHuangXiSkillProvider.Instance.Clear();
			FB_ShouHuBaseProvider.Instance.Clear();
			FB_SignInRewardProvider.Instance.Clear();
			FB_SignTotalRewardProvider.Instance.Clear();
			FB_SkillAddValueProvider.Instance.Clear();
			FB_SkillBaseProvider.Instance.Clear();
			FB_SkillCalculateProvider.Instance.Clear();
			FB_SkillDelayProvider.Instance.Clear();
			FB_SkillExProvider.Instance.Clear();
			FB_SkillLevelProvider.Instance.Clear();
			FB_SkillListProvider.Instance.Clear();
			FB_SkillSkinBaseProvider.Instance.Clear();
			FB_SoulPowerBaseProvider.Instance.Clear();
			FB_SoulPowerDecomposeProvider.Instance.Clear();
			FB_SoulPowerJieUpProvider.Instance.Clear();
			FB_SoulPowerLevelUpProvider.Instance.Clear();
			FB_SpokesmanRewardProvider.Instance.Clear();
			FB_StarAttributeProvider.Instance.Clear();
			FB_StarCraftFightProvider.Instance.Clear();
			FB_StarCraftMapProvider.Instance.Clear();
			FB_StarCraftSetProvider.Instance.Clear();
			FB_StarCraftTicketProvider.Instance.Clear();
			FB_StarmapBaseProvider.Instance.Clear();
			FB_StarmapRandomProvider.Instance.Clear();
			FB_StarmapSectionProvider.Instance.Clear();
			FB_StarSoulLevelProvider.Instance.Clear();
			FB_StarSoulSkillProvider.Instance.Clear();
			FB_StarSoulUnitBaseProvider.Instance.Clear();
			FB_StarSoulUnitLevelProvider.Instance.Clear();
			FB_StarWishItemProvider.Instance.Clear();
			FB_StrengthenBaseProvider.Instance.Clear();
			FB_StrengthenSubClassProvider.Instance.Clear();
			FB_SYHBonusByStageProvider.Instance.Clear();
			FB_SYHCangBaoHuiAwardProvider.Instance.Clear();
			FB_SYHCangBaoMissionProvider.Instance.Clear();
			FB_SYHFestivalActivityListProvider.Instance.Clear();
			FB_SYHFestivalCarnivalMissionProvider.Instance.Clear();
			FB_SYHFestivalCarnivalRewardProvider.Instance.Clear();
			FB_SYHFestivalMonsterProvider.Instance.Clear();
			FB_SYHJianBaoGeProvider.Instance.Clear();
			FB_SYHJingXiXianGouBaseProvider.Instance.Clear();
			FB_SYHJuBaoFuDaiBaseProvider.Instance.Clear();
			FB_SYHJuBaoFuDaiItemProvider.Instance.Clear();
			FB_SYHJuBaoFuDaiRewardProvider.Instance.Clear();
			FB_SYHJuBaoPenProvider.Instance.Clear();
			FB_SYHJuBaoPenPrizeProvider.Instance.Clear();
			FB_SYHJuBaoPenRankingProvider.Instance.Clear();
			FB_SYHJuBaoPenRewardProvider.Instance.Clear();
			FB_SYHNiuDanJiProvider.Instance.Clear();
			FB_SYHQiYuanBaoGeProvider.Instance.Clear();
			FB_SYHRechargeAndConsumeRewardProvider.Instance.Clear();
			FB_SYHTianXingBaoGeProvider.Instance.Clear();
			FB_SYHXianShiBoxProvider.Instance.Clear();
			FB_SYHXianShiQiangGouProvider.Instance.Clear();
			FB_SYHXianYuMissionProvider.Instance.Clear();
			FB_SYHXianYuQmlhProvider.Instance.Clear();
			FB_SYHXianYuShengHuiAwardProvider.Instance.Clear();
			FB_SYHXianYuShengHuiBaseProvider.Instance.Clear();
			FB_SYHYuanBaoInvestProvider.Instance.Clear();
			FB_SYHYuanBaoInvestTypeProvider.Instance.Clear();
			FB_SYHZaDanPingGuoProvider.Instance.Clear();
			FB_SYHZaDanPingGuoNumRewardProvider.Instance.Clear();
			FB_TaiGuRelicBaseProvider.Instance.Clear();
			FB_TaiGuRelicShopItemProvider.Instance.Clear();
			FB_TaoZhuangAttrProvider.Instance.Clear();
			FB_TaoZhuangBaseProvider.Instance.Clear();
			FB_TeamPlatformProvider.Instance.Clear();
			FB_TeamShipProvider.Instance.Clear();
			FB_teQuanEnumProvider.Instance.Clear();
			FB_teQuanGainProvider.Instance.Clear();
			FB_TheInheritProvider.Instance.Clear();
			FB_TianCiHongFuBaseProvider.Instance.Clear();
			FB_TianCiHongFuRewardProvider.Instance.Clear();
			FB_TianDaoShengYuanProvider.Instance.Clear();
			FB_TianDaoShengYuanRewardProvider.Instance.Clear();
			FB_TianFuBaseProvider.Instance.Clear();
			FB_TianJiBaoGeProvider.Instance.Clear();
			FB_TiKuanJiAwardProvider.Instance.Clear();
			FB_TimeLimitBagProvider.Instance.Clear();
			FB_TimingBoxProvider.Instance.Clear();
			FB_TitleBaseProvider.Instance.Clear();
			FB_TitleClassProvider.Instance.Clear();
			FB_TreasureProvider.Instance.Clear();
			FB_TreasureHuntMissionsProvider.Instance.Clear();
			FB_TreasureHuntShopItemProvider.Instance.Clear();
			FB_TreasureShowProvider.Instance.Clear();
			FB_VehicleProvider.Instance.Clear();
			FB_VipDayGiftProvider.Instance.Clear();
			FB_VipEnjoyGiftProvider.Instance.Clear();
			FB_VipHaoLiProvider.Instance.Clear();
			FB_VIPInvestRewardProvider.Instance.Clear();
			FB_VIPLimitProvider.Instance.Clear();
			FB_VIPPowerProvider.Instance.Clear();
			FB_WarPetArrayEffectProvider.Instance.Clear();
			FB_WarPetArrayTechniqueLevelUpProvider.Instance.Clear();
			FB_WarPetBaseProvider.Instance.Clear();
			FB_WarPetCompoundProvider.Instance.Clear();
			FB_WarPetEquipProvider.Instance.Clear();
			FB_WarPetEquipLevelUpProvider.Instance.Clear();
			FB_WarPetEquipStarLevelUpProvider.Instance.Clear();
			FB_WarPetItemDecomposeProvider.Instance.Clear();
			FB_WarPetLevelUpProvider.Instance.Clear();
			FB_WarPetRandomStarProvider.Instance.Clear();
			FB_WarPetSkillProvider.Instance.Clear();
			FB_WarPetSkillLevelUpProvider.Instance.Clear();
			FB_WarPetSkillLimitProvider.Instance.Clear();
			FB_WarPetStarProvider.Instance.Clear();
			FB_WarPetTalentProvider.Instance.Clear();
			FB_WingBaseProvider.Instance.Clear();
			FB_WingTransmogProvider.Instance.Clear();
			FB_WishBaseProvider.Instance.Clear();
			FB_WitCompeteProvider.Instance.Clear();
			FB_WorldBossProvider.Instance.Clear();
			FB_WorldBossLikeProvider.Instance.Clear();
			FB_WuXingYuanLiProvider.Instance.Clear();
			FB_XianYuZhiYiBaseProvider.Instance.Clear();
			FB_XianYuZhiYiChapterBaseProvider.Instance.Clear();
			FB_XianYuZhiYiLevelUpProvider.Instance.Clear();
			FB_XianYuZhiYiUnlockLevelUpProvider.Instance.Clear();
			FB_XingHunItemBaseProvider.Instance.Clear();
			FB_XingHunLevelUpProvider.Instance.Clear();
			FB_XingHunTeZhiLevelUpProvider.Instance.Clear();
			FB_XingHunTeZhiPassiveSkillProvider.Instance.Clear();
			FB_XingHunUnitBaseProvider.Instance.Clear();
			FB_XingHunZhuanJingBaseProvider.Instance.Clear();
			FB_XingHunZhuanJingEffectProvider.Instance.Clear();
			FB_XingHunZhuanJingLevelUpProvider.Instance.Clear();
			FB_XingYunBlessingProvider.Instance.Clear();
			FB_XingYunExtractBaseProvider.Instance.Clear();
			FB_XingYunGuideEventProvider.Instance.Clear();
			FB_XingYunMissionProvider.Instance.Clear();
			FB_XingYuPaiHangProvider.Instance.Clear();
			FB_XingYuPingFenProvider.Instance.Clear();
			FB_XingYuRewardProvider.Instance.Clear();
			FB_XingYuTicketBonusProvider.Instance.Clear();
			FB_XingYuTicketMissionProvider.Instance.Clear();
			FB_XueShiBaoKuProvider.Instance.Clear();
			FB_YingYanBaseProvider.Instance.Clear();
			FB_YuanShenBaseProvider.Instance.Clear();
			FB_YuanShenShowExpProvider.Instance.Clear();
			FB_YueKaProvider.Instance.Clear();
			FB_YunGouProvider.Instance.Clear();
			FB_ZhanLingLibaoProvider.Instance.Clear();
			FB_ZheKouShangDianProvider.Instance.Clear();
			FB_ZhongShenDianProvider.Instance.Clear();
			FB_ZhuangBeiXunBaoProvider.Instance.Clear();

            //Debug.Log("<color=green>ClearFBData End.</color>");
        }
        /// <summary>
		/// ���ڴ�ű�����idӳ��
		/// </summary>
		private static Dictionary<Type, Dictionary<int,int>> stypeMapDict= new Dictionary<Type, Dictionary<int, int>>();
        public static void ExportMapDict()
        {
            if (string.IsNullOrEmpty(FBBinaryExport.csSavePath))
                return;
            StringBuilder builder = new StringBuilder();
            foreach (var kv in stypeMapDict)
            {
                builder.AppendLine($"public partial class {kv.Key}"+ "{");
				builder.AppendLine($"\tstatic {kv.Key}()\n" + "\t{");
				builder.Append("\t\t");
				foreach (var ki in kv.Value)
                {
					builder.Append($"mKeyMapDIct.Add({ki.Key},{ki.Value});");
				}
				builder.AppendLine();
                builder.AppendLine("\t}");
                builder.AppendLine("}");
            }
			File.WriteAllText($"{FBBinaryExport.csSavePath}\\PBProvider_Mapping.cs", builder.ToString(), Encoding.UTF8);
        }
        /// <summary>
        /// ʹ��FlatBuffet��TXT�����ɶ������ļ�
        /// </summary>
        /// <returns></returns>
        static public void ExportBinaryData()
        {
            //Debug.Log("<color=green>ExportBinaryData Begin.</color>");
            ExprotAchievementJump();
			ExprotActivityDaZhiGouShow();
			ExprotActivityPrayShow();
			ExprotActivityType();
			ExprotAllActivity();
			ExprotAnimation();
			ExprotAnimationCurve();
			ExprotAreaCode();
			ExprotAttributeLess();
			ExprotBottomRightMenu();
			ExprotBullet();
			ExprotCameraEffect();
			ExprotCharAnim();
			ExprotCharAnimEffect();
			ExprotCharModel();
			ExprotCharMount();
			ExprotCharSoul();
			ExprotCharWing();
			ExprotCharXingHun();
			ExprotChatExpression();
			ExprotChatRobotBase();
			ExprotChatRobotContent();
			ExprotChatWordExpression();
			ExprotClientStoryTable();
			ExprotCloseUpShot();
			ExprotCombatPetScene();
			ExprotCommonItemDataAboutSex();
			ExprotCommonItemParamTypeList();
			ExprotCopySceneLastShot();
			ExprotCSQXuanSNpc();
			ExprotDamageBoardType();
			ExprotDestinyBloodSkillDes();
			ExprotDestinyObjParams();
			ExprotDymaticSceneEffect();
			ExprotEffect();
			ExprotEffectPoint();
			ExprotEquipStarEffect();
			ExprotEquipTips();
			ExprotFittingBase();
			ExprotFlyCutterUI();
			Exprotfwqlist();
			ExprotGetPathBase();
			ExprotGetPathInfo();
			Exprotgonggao();
			ExprotGuideBase();
			ExprotGuideType();
			ExprotGuildFormationType();
			ExprotHairModel();
			ExprotHuanJingObjParams();
			ExprotHuanLeXunBao();
			ExprotHunJiangShanghenParam();
			ExprotIapGiftUI();
			ExprotItemButtonLogic();
			ExprotItemCompoundTypeSetting();
			ExprotJiLingTreeBase();
			ExprotJiYiCard();
			ExprotKneadFaceFakeObjMovePos();
			ExprotKneadFaceOfEye();
			ExprotKneadFaceOfEyeBrow();
			ExprotKneadFaceOfLip();
			ExprotKneadFaceOfPrefab();
			ExprotKneadFaceOfTatto();
			ExprotLingBaoType();
			ExprotLocalNotification();
			ExprotMaiDianStarSoulModel();
			ExprotMergeRankShow();
			ExprotMissionDictionary();
			ExprotMissionSceneEffect();
			ExprotMountBindPoint();
			ExprotNPCPaoPao();
			ExprotNPCSounds();
			ExprotOfflineCompetitionPlayerShowPostion();
			ExprotOperateResultTips();
			ExprotOptionType();
			ExprotPhotoEffect();
			ExprotPhotoTabEffect();
			ExprotPicturePuzzle();
			ExprotPlayerHeadInfoCfg();
			ExprotPlayMethodBroadcast();
			ExprotPreload();
			ExprotPropertyIntro();
			ExprotRankType();
			ExprotRealTimeShadowConfig();
			ExprotRobot();
			ExprotRobotAppearance();
			ExprotRoleName();
			ExprotSceneCullingParam();
			ExprotSceneShaderParam();
			ExprotSexDistinction();
			ExprotShakeCamera();
			ExprotShenWangYouLeChang();
			ExprotShenWangZhanJiaCSChapter();
			ExprotShenYuRankBase();
			ExprotShieldingSymbol();
			ExprotShieldString();
			ExprotShopClass();
			ExprotSkillCamAnim();
			ExprotSkillDemonstration();
			ExprotSounds();
			ExprotStarSoulPaoPao();
			ExprotStarWishRewardShow();
			ExprotStoryAnimation();
			ExprotStoryPlayerEffect();
			ExprotStrDictionary();
			ExprotStrengthenNeedEquipOrExp();
			ExprotStrengthenNeedResource();
			ExprotStrengthenRate();
			ExprotStrLoading();
			ExprotSYHFestivalDic();
			ExprotSYHZaDanPingGuoShow();
			ExprotTaoZhuangModel();
			ExprotTeamPostion();
			ExprotTipsEquipList();
			ExprotTipsPreview();
			ExprotTopRightMenu();
			ExprotUIInfo();
			ExprotUIModel();
			ExprotUISpecialHide();
			ExprotUISubPanelPath();
			ExprotUIText();
			ExprotWarPetModel();
			ExprotWeaponAnimation();
			ExprotWeaponModel();
			ExprotWeekPlan();
			ExprotWingExtraModelPoint();
			ExprotWorldCupCountry();
			ExprotYingYanItem();
			ExprotAchievementBase();
			ExprotAchievementClass();
			ExprotAchievementSubClass();
			ExprotActivityAncientSealProessReward();
			ExprotActivityAncientSealSearch();
			ExprotActivityBase();
			ExprotActivityBonus();
			ExprotActivityChickenBase();
			ExprotActivityChickenGift();
			ExprotActivityChickenMission();
			ExprotActivityChickenProessReward();
			ExprotActivityDaZhiGouReward();
			ExprotActivityObjectivesList();
			ExprotActivityPoint();
			ExprotActivityPray();
			ExprotActivityPrayShop();
			ExprotActivityQuestionBase();
			ExprotActivityShowBase();
			ExprotActivityShowLevel();
			ExprotActWanGuConfig();
			ExprotActWanGuMissionBase();
			ExprotActWanGuMissionClass();
			ExprotActWanGuMissionSubClass();
			ExprotActWanGuPropLevelBase();
			ExprotActWanGuPropLevelReward();
			ExprotActZhuTianBaoLun();
			ExprotAdvancedBase();
			ExprotAncientSealShopItem();
			ExprotArenaReward();
			ExprotArtifactBase();
			ExprotArtifactBaseLevelUp();
			ExprotArtifactBaseLevelUpSpecial();
			ExprotAttrPowerBase();
			ExprotAuctionClass();
			ExprotAuctionItem();
			ExprotAuctionType();
			ExprotAutoBindBase();
			ExprotBagTreasure();
			Exprotbaiwanjijie();
			Exprotbaiwanjijie2();
			ExprotBattlefieldCampLevelBuff();
			ExprotBattlefieldCampRew();
			ExprotBattlefieldCollectionRew();
			ExprotBattlefieldRankRew();
			ExprotBenYuanItemBase();
			ExprotBenYuanItemLevelUp();
			ExprotBlackCardSignInReward();
			ExprotBlackCardTick();
			ExprotBloodBase();
			ExprotBloodMix();
			ExprotBloodMixLevel();
			ExprotBloodPossessed();
			ExprotBloodPossessedModel();
			ExprotBossGongChengReward();
			ExprotBossInvest();
			ExprotBossInvestType();
			ExprotCardBase();
			ExprotCardFlopBase();
			ExprotCardJiBanActivateReward();
			ExprotCardRankRewardBase();
			ExprotCardShop();
			ExprotCardXunBaoBase();
			ExprotCardXunBaoShow();
			ExprotChangeJob6ItemBase();
			ExprotChangeJob8ComprehendUp();
			ExprotChangeJob8Mission();
			ExprotChangeJobBase();
			ExprotChangeJobPhase();
			ExprotChangeMenPaiCondition();
			ExprotChapterCardBase();
			ExprotChapterCardLevelUp();
			ExprotCharmLoveRankRewardBase();
			ExprotChatLimit();
			ExprotChiJiBase();
			ExprotChiJiRewardBase();
			ExprotChongJiGift();
			ExprotClientConfig();
			ExprotCollectActivity();
			ExprotCombatPetBase();
			ExprotCombatPetReward();
			ExprotCommonItem();
			ExprotCoolDownTime();
			ExprotCopySceneLimit();
			ExprotCopySceneMoNengFeiXu();
			ExprotCopySceneShop();
			ExprotCopySceneStageDic();
			ExprotCopySceneTower();
			ExprotCopySceneTowerSkill();
			ExprotCreatePlayer();
			ExprotCSEvalueReward();
			ExprotCurrencyBase();
			ExprotDailyRebate();
			ExprotDailyRecharge();
			ExprotDestinyBase();
			ExprotDestinyBaseLevelUp();
			ExprotDestinyBloodBase();
			ExprotDestinyBloodItem();
			ExprotDestinyBloodLevelUp();
			ExprotDestinyCultureLevelUp();
			ExprotDestinySkill();
			ExprotDestinyTemperBase();
			ExprotDestinyTemperRate();
			ExprotDiamondAttribute();
			ExprotDiamondBase();
			ExprotDiamondCuiLian();
			ExprotDiamondGongZhen();
			ExprotDiamondGongZhenAll();
			ExprotDiamondGongZhenEnum();
			ExprotDiamondSet();
			ExprotDiamondStrengthen();
			ExprotEmotionBase();
			ExprotEmotionClass();
			ExprotEquipAttr();
			ExprotEquipAttrRate();
			ExprotEquipAttrValue();
			ExprotEquipCompoundType();
			ExprotEquipCompoundTypeShenZhuang();
			ExprotEquipExchange();
			ExprotEquipExhibition();
			ExprotEquipExtraAttr();
			ExprotEquipFavPoint();
			ExprotEquipFuLingAttr();
			ExprotEquipFuLingLevelUp();
			ExprotEquipFusionAttr();
			ExprotEquipFusionBase();
			ExprotEquipPartZhuHun();
			ExprotEquipPartZhuHunBaoShi();
			ExprotEquipRandomAttr();
			ExprotEquipRecast();
			ExprotEquipSetStone();
			ExprotEquipSetStoneGroupAttr();
			ExprotEquipSlotAttr();
			ExprotEquipSlotResonance();
			ExprotEquipSlotStrengthen();
			ExprotEquipSource();
			ExprotEquipStrengthen();
			ExprotEquipZhuHun();
			ExprotEternalTreasure();
			ExprotEternalTreasureReward();
			ExprotFakeObject();
			ExprotFindRewardBase();
			ExprotFindRewardClass();
			ExprotFuLiDaTing();
			ExprotFunctionBase();
			ExprotFunctionPrepare();
			ExprotGodWeaponBase();
			ExprotGodWeaponLevel();
			ExprotGodWordBase();
			ExprotGodWordCharm();
			ExprotGoldCopyAward();
			ExprotGoldenBadgeBase();
			ExprotGoldenBadgeLevelUp();
			ExprotGreetingCardReward();
			ExprotGroupPoint();
			ExprotGrowUpBag();
			ExprotGuideCollectBase();
			ExprotGuideCollectBossTips();
			ExprotGuildActiveBase();
			ExprotGuildBase();
			ExprotGuildBlessBase();
			ExprotGuildBoss();
			ExprotGuildFoodBox();
			ExprotGuildFormationBase();
			ExprotGuildFormationLevel();
			ExprotGuildFormationTypeNew();
			ExprotGuildPermission();
			ExprotGuildPresent();
			ExprotGuildRedPacket();
			ExprotGuildWelfareBase();
			ExprotHuanJingBase();
			ExprotHuanJingEquip();
			ExprotHuanJingEquipSlot();
			ExprotHuanJingEquipStar();
			ExprotHuanJingJiBan();
			ExprotHuanJingLevel();
			ExprotHuanJingSkill();
			ExprotHuanJingType();
			ExprotHuLingBase();
			ExprotHunGeBase();
			ExprotHunJiangGongMing();
			ExprotHunJiangItemBase();
			ExprotHunJiangItemLevelUp();
			ExprotHunJiangJiBanBase();
			ExprotHunJiangJiBanLevelUp();
			ExprotHunJiangJiBanSkill();
			ExprotHunJiangJuHun();
			ExprotHunJiangRongLian();
			ExprotHunJiangShangZhen();
			ExprotHunJiangSkillBase();
			ExprotHunJiangSkillValue();
			ExprotHunJiangXunBao();
			ExprotIapGift();
			ExprotIapGift2();
			ExprotIapGiftReward();
			ExprotIapGiftReward2();
			ExprotImpact();
			ExprotItemCompoundBase();
			ExprotItemCompoundType();
			ExprotItemGiftBase();
			ExprotItemLocation();
			ExprotItemStepUpBase();
			ExprotJiBanAttrLevelUp();
			ExprotJiBanBase();
			ExprotJieSoulStone();
			ExprotJieYuanBase();
			ExprotJieYuanLevelUp();
			ExprotJieYuanSlotResonance();
			ExprotJieYuanSuit();
			ExprotJieYuanSuitInfo();
			ExprotJiLingAttrPercentLevelUp();
			ExprotJiLingDecompose();
			ExprotJiLingDestinyAddAttr();
			ExprotJiLingDestinyLevelUp();
			ExprotJiLingJingJie();
			ExprotJiLingMapBase();
			ExprotJiLingQiLingBase();
			ExprotJiLingQiLingGongMing();
			ExprotJiLingQiLingGongMingAddAttr();
			ExprotJiLingQiLingLevelUp();
			ExprotJiLingTransformationAttr();
			ExprotJiLingWuHunLevelUp();
			ExprotJiLingWuHunNingHun();
			ExprotJiYiBase();
			ExprotJuBaoPenTreasure();
			ExprotJuHunAttr();
			ExprotJuhunBoxWeight();
			ExprotJuHunLevelUp();
			ExprotJuLingCSbase();
			ExprotKaiFuPaiHang();
			ExprotKaiFuPaiHangType();
			ExprotKneadFaceOClothing();
			ExprotLadder();
			ExprotLadderHonor();
			ExprotLadderMission();
			ExprotLevelCompensate();
			ExprotLevelExp();
			ExprotLevelSealAddExpRate();
			ExprotLevelSealAttr();
			ExprotLevelSealBase();
			ExprotLevelSealCopyScene();
			ExprotLimitActivityBroadcast();
			ExprotLingBaoBase();
			ExprotLingBaoLevelUp();
			ExprotLingBaoQiLing();
			ExprotLingGangBase();
			ExprotLingGangLingWuLevelUp();
			ExprotLingGangSkillBase();
			ExprotLingGangSkillLevelUp();
			ExprotLingGangStepBase();
			ExprotLingGangXuLing();
			ExprotLotteryMission();
			ExprotLuckyRollDailyMissions();
			ExprotLuckyRollMission();
			ExprotMaiDianPart();
			ExprotMaiDianSuit();
			ExprotMarryActivityMission();
			ExprotMarryActivityMissionReward();
			ExprotMarryBaseInfo();
			ExprotMarryGiftInfo();
			ExprotMarrySceneInfo();
			ExprotMarryShopItem();
			ExprotMarryShowItem();
			ExprotMarryTitleBase();
			ExprotMarryWuNvBase();
			ExprotMarryXinWuBase();
			ExprotMergeRankReward();
			ExprotMergeRecharge();
			ExprotMergeTouZi();
			ExprotMergeTouZiType();
			ExprotMingGeBase();
			ExprotMiniMap();
			ExprotMissionBase();
			ExprotMissionBonus();
			ExprotMissionCollectItem();
			ExprotMissionCopyScene();
			ExprotMissionEnterArea();
			ExprotMissionFailedBase();
			ExprotMissionFailedCondition();
			ExprotMissionGuide();
			ExprotMissionKillMonster();
			ExprotMissionLimit();
			ExprotMissionLootItem();
			ExprotMissionPuzzle();
			ExprotMissionRound();
			ExprotMissionRoundBonus();
			ExprotMissionRoundCommit();
			ExprotMissionRoundConfig();
			ExprotMissionRoundLevel();
			ExprotMissionSectionReward();
			ExprotMissionUseItem();
			ExprotMondayLuckDrawBase();
			ExprotMondayLuckDrawItem();
			ExprotMondayLuckDrawMissions();
			ExprotMopUpBase();
			ExprotNpcDialog();
			ExprotOccupationBase();
			ExprotOfflineReward();
			ExprotOldGodDiamondBase();
			ExprotOldGodDiamondLevelUp();
			ExprotOldGodItemBase();
			ExprotOldGodItemLevelUp();
			ExprotOldGodSuitAttr();
			ExprotOldGodSuitBase();
			ExprotOldGodUnitBase();
			ExprotOperationActivityGift();
			ExprotOperationActivityList();
			ExprotOppoReward();
			ExprotPackageUnlock();
			ExprotParamCollectionPublic();
			ExprotPassiveSkillBase();
			ExprotPeiShiCompoundBase();
			ExprotPeiShiCompoundType();
			ExprotPetBase();
			ExprotPetBattleSkill();
			ExprotPetMount();
			ExprotPetSoulStone();
			ExprotPlayerLevelAttr();
			ExprotPlayerSkinBase();
			ExprotPlayerSkinColor();
			ExprotPlayerSkinLevelUp();
			ExprotPlayerSkinPart();
			ExprotPoseBase();
			ExprotProgressBase();
			ExprotPugongCut();
			ExprotPurchaseAndRestitut();
			ExprotQianKunDuoBaoBase();
			ExprotQianKunDuoBaoGetIntegral();
			ExprotQuickChangeEquip();
			ExprotRankBase();
			ExprotRankBonus();
			ExprotRealmPracticeBase();
			ExprotRealmPracticeLevelUp();
			ExprotRebateRule();
			ExprotRechargeAndConsumeBase();
			ExprotRechargeGift();
			ExprotRechargeNew();
			ExprotRelation();
			ExprotRevivePrice();
			ExprotRewardSurvey();
			ExprotRewardSurveyConfig();
			ExprotRMB();
			ExprotRMBAttribute();
			ExprotRobotBase();
			ExprotRoleBaseAttr();
			ExprotRongYaoCollectionAwake();
			ExprotRongYaoCollectionUpdate();
			ExprotRongYaoSuit();
			ExprotRuneAttr();
			ExprotRuneBoxWeight();
			ExprotRuneJieExp();
			ExprotRuneLevelExp();
			ExprotRunesTreasureBase();
			ExprotSceneClass();
			ExprotSceneGroupPoint();
			ExprotSceneMirror();
			ExprotSceneNpc();
			ExprotServerLevelExpExtra();
			ExprotSevenStartBase();
			ExprotSevenStartBaseLevelUp();
			ExprotShengLingBase();
			ExprotShengLingCopyScene();
			ExprotShengLingCopySceneLimit();
			ExprotShengLingCopySceneType();
			ExprotShengLingLevelUp();
			ExprotShengLingSkill();
			ExprotShenMoJiangYuBuyTimesCost();
			ExprotShenQiRenZhuClass();
			ExprotShenQiRenZhuType();
			ExprotShenShiBase();
			ExprotShenShiMaxLevel();
			ExprotShenShouBase();
			ExprotShenShouEquipBase();
			ExprotShenShouEquipLevelUp();
			ExprotShenShouSkill();
			ExprotShenWangLiLian();
			ExprotShenWangZhanJiaBase();
			ExprotShenWangZhanJiaCsBase();
			ExprotShenWangZhanJiaCsReward();
			ExprotShenWangZhanJiaCsShop();
			ExprotShenWangZhanJiaEquip();
			ExprotShenWangZhanJiaLegendAttr();
			ExprotShenWangZhanJiaMakeLevelUp();
			ExprotShenWangZhanJiaPaintingMiss();
			ExprotShenWangZhanJiaPaintingPay();
			ExprotShenWangZhanJiaPaintingReward();
			ExprotShenWangZhanJiaPracticeLevelUp();
			ExprotShenYuFengHaoBase();
			ExprotShenYuPointAddition();
			ExprotShenZhiJingBase();
			ExprotShenZhiJingItemLevelUp();
			ExprotShenZhuangLevelUp();
			ExprotShiLianBoss();
			ExprotShopItem();
			ExprotShopType();
			ExprotShouHuangXiLevelUp();
			ExprotShouHuangXiSkill();
			ExprotShouHuBase();
			ExprotSignInReward();
			ExprotSignTotalReward();
			ExprotSkillAddValue();
			ExprotSkillBase();
			ExprotSkillCalculate();
			ExprotSkillDelay();
			ExprotSkillEx();
			ExprotSkillLevel();
			ExprotSkillList();
			ExprotSkillSkinBase();
			ExprotSoulPowerBase();
			ExprotSoulPowerDecompose();
			ExprotSoulPowerJieUp();
			ExprotSoulPowerLevelUp();
			ExprotSpokesmanReward();
			ExprotStarAttribute();
			ExprotStarCraftFight();
			ExprotStarCraftMap();
			ExprotStarCraftSet();
			ExprotStarCraftTicket();
			ExprotStarmapBase();
			ExprotStarmapRandom();
			ExprotStarmapSection();
			ExprotStarSoulLevel();
			ExprotStarSoulSkill();
			ExprotStarSoulUnitBase();
			ExprotStarSoulUnitLevel();
			ExprotStarWishItem();
			ExprotStrengthenBase();
			ExprotStrengthenSubClass();
			ExprotSYHBonusByStage();
			ExprotSYHCangBaoHuiAward();
			ExprotSYHCangBaoMission();
			ExprotSYHFestivalActivityList();
			ExprotSYHFestivalCarnivalMission();
			ExprotSYHFestivalCarnivalReward();
			ExprotSYHFestivalMonster();
			ExprotSYHJianBaoGe();
			ExprotSYHJingXiXianGouBase();
			ExprotSYHJuBaoFuDaiBase();
			ExprotSYHJuBaoFuDaiItem();
			ExprotSYHJuBaoFuDaiReward();
			ExprotSYHJuBaoPen();
			ExprotSYHJuBaoPenPrize();
			ExprotSYHJuBaoPenRanking();
			ExprotSYHJuBaoPenReward();
			ExprotSYHNiuDanJi();
			ExprotSYHQiYuanBaoGe();
			ExprotSYHRechargeAndConsumeReward();
			ExprotSYHTianXingBaoGe();
			ExprotSYHXianShiBox();
			ExprotSYHXianShiQiangGou();
			ExprotSYHXianYuMission();
			ExprotSYHXianYuQmlh();
			ExprotSYHXianYuShengHuiAward();
			ExprotSYHXianYuShengHuiBase();
			ExprotSYHYuanBaoInvest();
			ExprotSYHYuanBaoInvestType();
			ExprotSYHZaDanPingGuo();
			ExprotSYHZaDanPingGuoNumReward();
			ExprotTaiGuRelicBase();
			ExprotTaiGuRelicShopItem();
			ExprotTaoZhuangAttr();
			ExprotTaoZhuangBase();
			ExprotTeamPlatform();
			ExprotTeamShip();
			ExprotteQuanEnum();
			ExprotteQuanGain();
			ExprotTheInherit();
			ExprotTianCiHongFuBase();
			ExprotTianCiHongFuReward();
			ExprotTianDaoShengYuan();
			ExprotTianDaoShengYuanReward();
			ExprotTianFuBase();
			ExprotTianJiBaoGe();
			ExprotTiKuanJiAward();
			ExprotTimeLimitBag();
			ExprotTimingBox();
			ExprotTitleBase();
			ExprotTitleClass();
			ExprotTreasure();
			ExprotTreasureHuntMissions();
			ExprotTreasureHuntShopItem();
			ExprotTreasureShow();
			ExprotVehicle();
			ExprotVipDayGift();
			ExprotVipEnjoyGift();
			ExprotVipHaoLi();
			ExprotVIPInvestReward();
			ExprotVIPLimit();
			ExprotVIPPower();
			ExprotWarPetArrayEffect();
			ExprotWarPetArrayTechniqueLevelUp();
			ExprotWarPetBase();
			ExprotWarPetCompound();
			ExprotWarPetEquip();
			ExprotWarPetEquipLevelUp();
			ExprotWarPetEquipStarLevelUp();
			ExprotWarPetItemDecompose();
			ExprotWarPetLevelUp();
			ExprotWarPetRandomStar();
			ExprotWarPetSkill();
			ExprotWarPetSkillLevelUp();
			ExprotWarPetSkillLimit();
			ExprotWarPetStar();
			ExprotWarPetTalent();
			ExprotWingBase();
			ExprotWingTransmog();
			ExprotWishBase();
			ExprotWitCompete();
			ExprotWorldBoss();
			ExprotWorldBossLike();
			ExprotWuXingYuanLi();
			ExprotXianYuZhiYiBase();
			ExprotXianYuZhiYiChapterBase();
			ExprotXianYuZhiYiLevelUp();
			ExprotXianYuZhiYiUnlockLevelUp();
			ExprotXingHunItemBase();
			ExprotXingHunLevelUp();
			ExprotXingHunTeZhiLevelUp();
			ExprotXingHunTeZhiPassiveSkill();
			ExprotXingHunUnitBase();
			ExprotXingHunZhuanJingBase();
			ExprotXingHunZhuanJingEffect();
			ExprotXingHunZhuanJingLevelUp();
			ExprotXingYunBlessing();
			ExprotXingYunExtractBase();
			ExprotXingYunGuideEvent();
			ExprotXingYunMission();
			ExprotXingYuPaiHang();
			ExprotXingYuPingFen();
			ExprotXingYuReward();
			ExprotXingYuTicketBonus();
			ExprotXingYuTicketMission();
			ExprotXueShiBaoKu();
			ExprotYingYanBase();
			ExprotYuanShenBase();
			ExprotYuanShenShowExp();
			ExprotYueKa();
			ExprotYunGou();
			ExprotZhanLingLibao();
			ExprotZheKouShangDian();
			ExprotZhongShenDian();
			ExprotZhuangBeiXunBao();

            //Debug.Log("<color=green>ExportBinaryData End.</color>");
        }
        #region load flatbuffer binary data
        
		static void ExprotAchievementJump()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AchievementJumpProvider.Instance.ListData;
			
			Offset<FB_AchievementJump>[] offsetArray = new Offset<FB_AchievementJump>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AchievementJumpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AchievementJump.CreateFB_AchievementJump(fbb, curData.ID,curData.GetPathBaseId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AchievementJumpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AchievementJumpContainer.StartFB_AchievementJumpContainer(fbb);
			FB_AchievementJumpContainer.AddItems(fbb, dataVector);
			var provider = FB_AchievementJumpContainer.EndFB_AchievementJumpContainer(fbb);
			FB_AchievementJumpContainer.FinishFB_AchievementJumpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/AchievementJump.txt", ms.ToArray());
			}
		}

		static void ExprotActivityDaZhiGouShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityDaZhiGouShowProvider.Instance.ListData;
			
			Offset<FB_ActivityDaZhiGouShow>[] offsetArray = new Offset<FB_ActivityDaZhiGouShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityDaZhiGouShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityDaZhiGouShow.CreateFB_ActivityDaZhiGouShow(fbb, curData.ID,curData.Type,fbb.CreateString(curData.Texture),fbb.CreateString(curData.DesSprite),fbb.CreateString(curData.RewardBG),fbb.CreateString(curData.CloseSpr),curData.SkillID,FB_ActivityDaZhiGouShow.CreateFakeObjIDListVector(fbb,curData.FakeObjIDList.ToArray()),curData.Combat,fbb.CreateString(curData.TopDesSprite));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityDaZhiGouShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityDaZhiGouShowContainer.StartFB_ActivityDaZhiGouShowContainer(fbb);
			FB_ActivityDaZhiGouShowContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityDaZhiGouShowContainer.EndFB_ActivityDaZhiGouShowContainer(fbb);
			FB_ActivityDaZhiGouShowContainer.FinishFB_ActivityDaZhiGouShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ActivityDaZhiGouShow.txt", ms.ToArray());
			}
		}

		static void ExprotActivityPrayShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityPrayShowProvider.Instance.ListData;
			
			Offset<FB_ActivityPrayShow>[] offsetArray = new Offset<FB_ActivityPrayShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityPrayShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityPrayShow.CreateFB_ActivityPrayShow(fbb, curData.ID,FB_ActivityPrayShow.CreateFirstRowIDListVector(fbb,curData.FirstRowIDList.ToArray()),FB_ActivityPrayShow.CreateFirstRowNumListVector(fbb,curData.FirstRowNumList.ToArray()),FB_ActivityPrayShow.CreateSecondRowIDListVector(fbb,curData.SecondRowIDList.ToArray()),FB_ActivityPrayShow.CreateSecondRowNumListVector(fbb,curData.SecondRowNumList.ToArray()),FB_ActivityPrayShow.CreateThirdRowIDListVector(fbb,curData.ThirdRowIDList.ToArray()),FB_ActivityPrayShow.CreateThirdRowNumListVector(fbb,curData.ThirdRowNumList.ToArray()),FB_ActivityPrayShow.CreateFourRowIDListVector(fbb,curData.FourRowIDList.ToArray()),FB_ActivityPrayShow.CreateFourRowNumListVector(fbb,curData.FourRowNumList.ToArray()),FB_ActivityPrayShow.CreateFiveRowIDListVector(fbb,curData.FiveRowIDList.ToArray()),FB_ActivityPrayShow.CreateFiveRowNumListVector(fbb,curData.FiveRowNumList.ToArray()),FB_ActivityPrayShow.CreateSixRowIDListVector(fbb,curData.SixRowIDList.ToArray()),FB_ActivityPrayShow.CreateSixRowNumListVector(fbb,curData.SixRowNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityPrayShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityPrayShowContainer.StartFB_ActivityPrayShowContainer(fbb);
			FB_ActivityPrayShowContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityPrayShowContainer.EndFB_ActivityPrayShowContainer(fbb);
			FB_ActivityPrayShowContainer.FinishFB_ActivityPrayShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ActivityPrayShow.txt", ms.ToArray());
			}
		}

		static void ExprotActivityType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityTypeProvider.Instance.ListData;
			
			Offset<FB_ActivityType>[] offsetArray = new Offset<FB_ActivityType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityType.CreateFB_ActivityType(fbb, curData.Id,fbb.CreateString(curData.Name),FB_ActivityType.CreateActiveIDListVector(fbb,curData.ActiveIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActivityTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityTypeContainer.StartFB_ActivityTypeContainer(fbb);
			FB_ActivityTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityTypeContainer.EndFB_ActivityTypeContainer(fbb);
			FB_ActivityTypeContainer.FinishFB_ActivityTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ActivityType.txt", ms.ToArray());
			}
		}

		static void ExprotAllActivity()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AllActivityProvider.Instance.ListData;
			
			Offset<FB_AllActivity>[] offsetArray = new Offset<FB_AllActivity>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AllActivityProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AllActivity.CreateFB_AllActivity(fbb, curData.Id,fbb.CreateString(curData.Name),curData.UIID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_AllActivityContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AllActivityContainer.StartFB_AllActivityContainer(fbb);
			FB_AllActivityContainer.AddItems(fbb, dataVector);
			var provider = FB_AllActivityContainer.EndFB_AllActivityContainer(fbb);
			FB_AllActivityContainer.FinishFB_AllActivityContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/AllActivity.txt", ms.ToArray());
			}
		}

		static void ExprotAnimation()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AnimationProvider.Instance.ListData;
			
			Offset<FB_Animation>[] offsetArray = new Offset<FB_Animation>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AnimationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Animation.CreateFB_Animation(fbb, curData.AnimID,fbb.CreateString(curData.AinmName),curData.Layer,curData.WrapMode,curData.ShakeId,curData.TransitTime,curData.IsCanBreak,FB_Animation.CreateStartEffectListVector(fbb,curData.StartEffectList.ToArray()),curData.IsCallEnd,curData.NextAnimId,curData.SoundID,curData.IdCameraAnimCurve,curData.CloseUpShot,curData.WeaponTransformationId,curData.UISpecialHideId,curData.SkillCamAnimId);
				KeyMaping[curData.AnimID] = index;
			}
			var dataVector = FB_AnimationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AnimationContainer.StartFB_AnimationContainer(fbb);
			FB_AnimationContainer.AddItems(fbb, dataVector);
			var provider = FB_AnimationContainer.EndFB_AnimationContainer(fbb);
			FB_AnimationContainer.FinishFB_AnimationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Animation.txt", ms.ToArray());
			}
		}

		static void ExprotAnimationCurve()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AnimationCurveProvider.Instance.ListData;
			
			Offset<FB_AnimationCurve>[] offsetArray = new Offset<FB_AnimationCurve>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AnimationCurveProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AnimationCurve.CreateFB_AnimationCurve(fbb, curData.Id,FB_AnimationCurve.CreateTimeListVector(fbb,curData.TimeList.ToArray()),FB_AnimationCurve.CreateSpeedXListVector(fbb,curData.SpeedXList.ToArray()),FB_AnimationCurve.CreateSpeedYListVector(fbb,curData.SpeedYList.ToArray()),FB_AnimationCurve.CreateSpeedZListVector(fbb,curData.SpeedZList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_AnimationCurveContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AnimationCurveContainer.StartFB_AnimationCurveContainer(fbb);
			FB_AnimationCurveContainer.AddItems(fbb, dataVector);
			var provider = FB_AnimationCurveContainer.EndFB_AnimationCurveContainer(fbb);
			FB_AnimationCurveContainer.FinishFB_AnimationCurveContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/AnimationCurve.txt", ms.ToArray());
			}
		}

		static void ExprotAreaCode()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AreaCodeProvider.Instance.ListData;
			
			Offset<FB_AreaCode>[] offsetArray = new Offset<FB_AreaCode>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AreaCodeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AreaCode.CreateFB_AreaCode(fbb, curData.Id,fbb.CreateString(curData.Name),curData.FrontNumber);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_AreaCodeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AreaCodeContainer.StartFB_AreaCodeContainer(fbb);
			FB_AreaCodeContainer.AddItems(fbb, dataVector);
			var provider = FB_AreaCodeContainer.EndFB_AreaCodeContainer(fbb);
			FB_AreaCodeContainer.FinishFB_AreaCodeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/AreaCode.txt", ms.ToArray());
			}
		}

		static void ExprotAttributeLess()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AttributeLessProvider.Instance.ListData;
			
			Offset<FB_AttributeLess>[] offsetArray = new Offset<FB_AttributeLess>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AttributeLessProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AttributeLess.CreateFB_AttributeLess(fbb, curData.Id,curData.CombatPower,curData.Attack,curData.Defence);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_AttributeLessContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AttributeLessContainer.StartFB_AttributeLessContainer(fbb);
			FB_AttributeLessContainer.AddItems(fbb, dataVector);
			var provider = FB_AttributeLessContainer.EndFB_AttributeLessContainer(fbb);
			FB_AttributeLessContainer.FinishFB_AttributeLessContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/AttributeLess.txt", ms.ToArray());
			}
		}

		static void ExprotBottomRightMenu()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BottomRightMenuProvider.Instance.ListData;
			
			Offset<FB_BottomRightMenu>[] offsetArray = new Offset<FB_BottomRightMenu>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BottomRightMenuProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BottomRightMenu.CreateFB_BottomRightMenu(fbb, curData.ID,fbb.CreateString(curData.NameLabel),fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.FunctionBaseID,curData.SortId,curData.UIInfo);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BottomRightMenuContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BottomRightMenuContainer.StartFB_BottomRightMenuContainer(fbb);
			FB_BottomRightMenuContainer.AddItems(fbb, dataVector);
			var provider = FB_BottomRightMenuContainer.EndFB_BottomRightMenuContainer(fbb);
			FB_BottomRightMenuContainer.FinishFB_BottomRightMenuContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/BottomRightMenu.txt", ms.ToArray());
			}
		}

		static void ExprotBullet()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BulletProvider.Instance.ListData;
			
			Offset<FB_Bullet>[] offsetArray = new Offset<FB_Bullet>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BulletProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Bullet.CreateFB_Bullet(fbb, curData.Id,curData.EffectId,curData.Duration,curData.Delay,curData.HeightRefix);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_BulletContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BulletContainer.StartFB_BulletContainer(fbb);
			FB_BulletContainer.AddItems(fbb, dataVector);
			var provider = FB_BulletContainer.EndFB_BulletContainer(fbb);
			FB_BulletContainer.FinishFB_BulletContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Bullet.txt", ms.ToArray());
			}
		}

		static void ExprotCameraEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CameraEffectProvider.Instance.ListData;
			
			Offset<FB_CameraEffect>[] offsetArray = new Offset<FB_CameraEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CameraEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CameraEffect.CreateFB_CameraEffect(fbb, curData.Id,curData.Type,FB_CameraEffect.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CameraEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CameraEffectContainer.StartFB_CameraEffectContainer(fbb);
			FB_CameraEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_CameraEffectContainer.EndFB_CameraEffectContainer(fbb);
			FB_CameraEffectContainer.FinishFB_CameraEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CameraEffect.txt", ms.ToArray());
			}
		}

		static void ExprotCharAnim()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharAnimProvider.Instance.ListData;
			
			Offset<FB_CharAnim>[] offsetArray = new Offset<FB_CharAnim>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharAnimProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharAnim.CreateFB_CharAnim(fbb, curData.Id,curData.Idle,curData.Run,curData.CombatIdle,curData.CombatRun,curData.Xiuxian,curData.FlyIdle,FB_CharAnim.CreateFlyLandListVector(fbb,curData.FlyLandList.ToArray()),FB_CharAnim.CreateFlyTakeOffListVector(fbb,curData.FlyTakeOffList.ToArray()),curData.FlyUp,curData.FlyDown,curData.PreFlySpeedUp,curData.FlySpeedUp,FB_CharAnim.CreateFlyMoveListVector(fbb,curData.FlyMoveList.ToArray()),FB_CharAnim.CreateFlyXiuXianListVector(fbb,curData.FlyXiuXianList.ToArray()),curData.CaiJi);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharAnimContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharAnimContainer.StartFB_CharAnimContainer(fbb);
			FB_CharAnimContainer.AddItems(fbb, dataVector);
			var provider = FB_CharAnimContainer.EndFB_CharAnimContainer(fbb);
			FB_CharAnimContainer.FinishFB_CharAnimContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharAnim.txt", ms.ToArray());
			}
		}

		static void ExprotCharAnimEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharAnimEffectProvider.Instance.ListData;
			
			Offset<FB_CharAnimEffect>[] offsetArray = new Offset<FB_CharAnimEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharAnimEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharAnimEffect.CreateFB_CharAnimEffect(fbb, curData.Id,curData.AnimiD,FB_CharAnimEffect.CreateEffectIDListVector(fbb,curData.EffectIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharAnimEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharAnimEffectContainer.StartFB_CharAnimEffectContainer(fbb);
			FB_CharAnimEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_CharAnimEffectContainer.EndFB_CharAnimEffectContainer(fbb);
			FB_CharAnimEffectContainer.FinishFB_CharAnimEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharAnimEffect.txt", ms.ToArray());
			}
		}

		static void ExprotCharModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharModelProvider.Instance.ListData;
			
			Offset<FB_CharModel>[] offsetArray = new Offset<FB_CharModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharModel.CreateFB_CharModel(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Title),fbb.CreateString(curData.ResPath),fbb.CreateString(curData.AnimPath),fbb.CreateString(curData.HeadPic),curData.ModelRadius,curData.ModelHeight,curData.HeadInfoHeight,curData.DamageInfoHeight,curData.Scale,curData.ModelType,FB_CharModel.CreateDeyColorListVector(fbb,curData.DeyColorList.ToArray()),curData.FresnelPower,curData.FresnelSize,curData.FakeObjId,curData.CamZDis,curData.CamYDis,curData.CamYRota,FB_CharModel.CreateCharAnimEffectIdListVector(fbb,curData.CharAnimEffectIdList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharModelContainer.StartFB_CharModelContainer(fbb);
			FB_CharModelContainer.AddItems(fbb, dataVector);
			var provider = FB_CharModelContainer.EndFB_CharModelContainer(fbb);
			FB_CharModelContainer.FinishFB_CharModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharModel.txt", ms.ToArray());
			}
		}

		static void ExprotCharMount()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharMountProvider.Instance.ListData;
			
			Offset<FB_CharMount>[] offsetArray = new Offset<FB_CharMount>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharMountProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharMount.CreateFB_CharMount(fbb, curData.Id,curData.ModelId,curData.SoundID,fbb.CreateString(curData.BindPoint),curData.FakeObjID,FB_CharMount.CreateHeadInfoAddHeightListVector(fbb,curData.HeadInfoAddHeightList.ToArray()),FB_CharMount.CreateFemaleHeadInfoAddHeightListVector(fbb,curData.FemaleHeadInfoAddHeightList.ToArray()),curData.FlyAddHeight,curData.Scale,curData.IdleAnimId,curData.RunAnimId,curData.XiuXianAnimId,curData.SoulStarOffsetY,curData.BindID,curData.IsTeamShip,curData.UIModelId,curData.EffectOffsetX,curData.EffectOffsetY,curData.EffectOffsetZ,curData.CameraDis,curData.PlayerScale,FB_CharMount.CreateEffecOffsetYListVector(fbb,curData.EffecOffsetYList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharMountContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharMountContainer.StartFB_CharMountContainer(fbb);
			FB_CharMountContainer.AddItems(fbb, dataVector);
			var provider = FB_CharMountContainer.EndFB_CharMountContainer(fbb);
			FB_CharMountContainer.FinishFB_CharMountContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharMount.txt", ms.ToArray());
			}
		}

		static void ExprotCharSoul()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharSoulProvider.Instance.ListData;
			
			Offset<FB_CharSoul>[] offsetArray = new Offset<FB_CharSoul>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharSoulProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharSoul.CreateFB_CharSoul(fbb, curData.Id,fbb.CreateString(curData.Name),curData.CharModelId,curData.AttackAnimaId,curData.Interval,curData.AppearEffectId,curData.DisappearEffectId,curData.UIModel,curData.PaoPaoHeight);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharSoulContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharSoulContainer.StartFB_CharSoulContainer(fbb);
			FB_CharSoulContainer.AddItems(fbb, dataVector);
			var provider = FB_CharSoulContainer.EndFB_CharSoulContainer(fbb);
			FB_CharSoulContainer.FinishFB_CharSoulContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharSoul.txt", ms.ToArray());
			}
		}

		static void ExprotCharWing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharWingProvider.Instance.ListData;
			
			Offset<FB_CharWing>[] offsetArray = new Offset<FB_CharWing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharWingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharWing.CreateFB_CharWing(fbb, curData.Id,fbb.CreateString(curData.MountModel),fbb.CreateString(curData.BindPoint),fbb.CreateString(curData.AnimPath),curData.FakeObjID,fbb.CreateString(curData.Dummy),curData.ScaleX,curData.ScaleY,curData.ScaleZ,curData.UIModel,curData.EffectWingScale);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharWingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharWingContainer.StartFB_CharWingContainer(fbb);
			FB_CharWingContainer.AddItems(fbb, dataVector);
			var provider = FB_CharWingContainer.EndFB_CharWingContainer(fbb);
			FB_CharWingContainer.FinishFB_CharWingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharWing.txt", ms.ToArray());
			}
		}

		static void ExprotCharXingHun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharXingHunProvider.Instance.ListData;
			
			Offset<FB_CharXingHun>[] offsetArray = new Offset<FB_CharXingHun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharXingHunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CharXingHun.CreateFB_CharXingHun(fbb, curData.Id,fbb.CreateString(curData.Name),curData.CharModelId,curData.UIModel,curData.AttackAnimaId,curData.Interval,curData.AppearEffectId,curData.DisappearEffectId,curData.ModelOffsetY,curData.FlyOffsetY,curData.EffectOffsetY,curData.Scale);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CharXingHunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharXingHunContainer.StartFB_CharXingHunContainer(fbb);
			FB_CharXingHunContainer.AddItems(fbb, dataVector);
			var provider = FB_CharXingHunContainer.EndFB_CharXingHunContainer(fbb);
			FB_CharXingHunContainer.FinishFB_CharXingHunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CharXingHun.txt", ms.ToArray());
			}
		}

		static void ExprotChatExpression()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChatExpressionProvider.Instance.ListData;
			
			Offset<FB_ChatExpression>[] offsetArray = new Offset<FB_ChatExpression>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChatExpressionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChatExpression.CreateFB_ChatExpression(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Frames,curData.Class);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChatExpressionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChatExpressionContainer.StartFB_ChatExpressionContainer(fbb);
			FB_ChatExpressionContainer.AddItems(fbb, dataVector);
			var provider = FB_ChatExpressionContainer.EndFB_ChatExpressionContainer(fbb);
			FB_ChatExpressionContainer.FinishFB_ChatExpressionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ChatExpression.txt", ms.ToArray());
			}
		}

		static void ExprotChatRobotBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChatRobotBaseProvider.Instance.ListData;
			
			Offset<FB_ChatRobotBase>[] offsetArray = new Offset<FB_ChatRobotBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChatRobotBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChatRobotBase.CreateFB_ChatRobotBase(fbb, curData.Id,curData.LimitLevel,curData.LimitMissionID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChatRobotBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChatRobotBaseContainer.StartFB_ChatRobotBaseContainer(fbb);
			FB_ChatRobotBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChatRobotBaseContainer.EndFB_ChatRobotBaseContainer(fbb);
			FB_ChatRobotBaseContainer.FinishFB_ChatRobotBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ChatRobotBase.txt", ms.ToArray());
			}
		}

		static void ExprotChatRobotContent()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChatRobotContentProvider.Instance.ListData;
			
			Offset<FB_ChatRobotContent>[] offsetArray = new Offset<FB_ChatRobotContent>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChatRobotContentProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChatRobotContent.CreateFB_ChatRobotContent(fbb, curData.Id,fbb.CreateString(curData.Name),curData.MenPai,curData.Sex,curData.Level,curData.Vip,fbb.CreateString(curData.ChatContent),curData.ChatDistance,curData.ChatGroupID,curData.HeadPeiShiID,curData.ChatPeiShiID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChatRobotContentContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChatRobotContentContainer.StartFB_ChatRobotContentContainer(fbb);
			FB_ChatRobotContentContainer.AddItems(fbb, dataVector);
			var provider = FB_ChatRobotContentContainer.EndFB_ChatRobotContentContainer(fbb);
			FB_ChatRobotContentContainer.FinishFB_ChatRobotContentContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ChatRobotContent.txt", ms.ToArray());
			}
		}

		static void ExprotChatWordExpression()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChatWordExpressionProvider.Instance.ListData;
			
			Offset<FB_ChatWordExpression>[] offsetArray = new Offset<FB_ChatWordExpression>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChatWordExpressionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] ContentListoffSet = new StringOffset[curData.ContentList.Count];
				for (var i = 0; i < curData.ContentList.Count; i++)
				{
					ContentListoffSet[i] = fbb.CreateString(curData.ContentList[i]);
				}

				offsetArray[index] = FB_ChatWordExpression.CreateFB_ChatWordExpression(fbb, curData.Id,fbb.CreateString(curData.Name),FB_ChatWordExpression.CreateContentListVector(fbb,ContentListoffSet));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChatWordExpressionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChatWordExpressionContainer.StartFB_ChatWordExpressionContainer(fbb);
			FB_ChatWordExpressionContainer.AddItems(fbb, dataVector);
			var provider = FB_ChatWordExpressionContainer.EndFB_ChatWordExpressionContainer(fbb);
			FB_ChatWordExpressionContainer.FinishFB_ChatWordExpressionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ChatWordExpression.txt", ms.ToArray());
			}
		}

		static void ExprotClientStoryTable()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ClientStoryTableProvider.Instance.ListData;
			
			Offset<FB_ClientStoryTable>[] offsetArray = new Offset<FB_ClientStoryTable>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ClientStoryTableProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ClientStoryTable.CreateFB_ClientStoryTable(fbb, curData.Id,curData.TargetPosX,curData.TargetPosY,curData.TargetPosZ,curData.TargetPosRadius,curData.SpeakerID,curData.AnimationID,fbb.CreateString(curData.SpriteName),fbb.CreateString(curData.Story),curData.NextPageTime,curData.SoundID,curData.NextId,fbb.CreateString(curData.RoleName),curData.IsShowFakeObj);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ClientStoryTableContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ClientStoryTableContainer.StartFB_ClientStoryTableContainer(fbb);
			FB_ClientStoryTableContainer.AddItems(fbb, dataVector);
			var provider = FB_ClientStoryTableContainer.EndFB_ClientStoryTableContainer(fbb);
			FB_ClientStoryTableContainer.FinishFB_ClientStoryTableContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ClientStoryTable.txt", ms.ToArray());
			}
		}

		static void ExprotCloseUpShot()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CloseUpShotProvider.Instance.ListData;
			
			Offset<FB_CloseUpShot>[] offsetArray = new Offset<FB_CloseUpShot>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CloseUpShotProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CloseUpShot.CreateFB_CloseUpShot(fbb, curData.Id,curData.AnimationID,curData.Time,curData.PosX,curData.PosY,curData.PosZ,curData.RotX,curData.RotY,curData.RotZ,curData.Distance,curData.FOV);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CloseUpShotContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CloseUpShotContainer.StartFB_CloseUpShotContainer(fbb);
			FB_CloseUpShotContainer.AddItems(fbb, dataVector);
			var provider = FB_CloseUpShotContainer.EndFB_CloseUpShotContainer(fbb);
			FB_CloseUpShotContainer.FinishFB_CloseUpShotContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CloseUpShot.txt", ms.ToArray());
			}
		}

		static void ExprotCombatPetScene()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CombatPetSceneProvider.Instance.ListData;
			
			Offset<FB_CombatPetScene>[] offsetArray = new Offset<FB_CombatPetScene>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CombatPetSceneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] SceneDescListoffSet = new StringOffset[curData.SceneDescList.Count];
				for (var i = 0; i < curData.SceneDescList.Count; i++)
				{
					SceneDescListoffSet[i] = fbb.CreateString(curData.SceneDescList[i]);
				}
StringOffset[] SceneInfoListoffSet = new StringOffset[curData.SceneInfoList.Count];
				for (var i = 0; i < curData.SceneInfoList.Count; i++)
				{
					SceneInfoListoffSet[i] = fbb.CreateString(curData.SceneInfoList[i]);
				}

				offsetArray[index] = FB_CombatPetScene.CreateFB_CombatPetScene(fbb, curData.Id,fbb.CreateString(curData.StageName),curData.StageType,curData.CombatPetBaseId,FB_CombatPetScene.CreateItemListListVector(fbb,curData.ItemListList.ToArray()),FB_CombatPetScene.CreateSceneDescListVector(fbb,SceneDescListoffSet),FB_CombatPetScene.CreateSceneInfoListVector(fbb,SceneInfoListoffSet));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CombatPetSceneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CombatPetSceneContainer.StartFB_CombatPetSceneContainer(fbb);
			FB_CombatPetSceneContainer.AddItems(fbb, dataVector);
			var provider = FB_CombatPetSceneContainer.EndFB_CombatPetSceneContainer(fbb);
			FB_CombatPetSceneContainer.FinishFB_CombatPetSceneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CombatPetScene.txt", ms.ToArray());
			}
		}

		static void ExprotCommonItemDataAboutSex()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CommonItemDataAboutSexProvider.Instance.ListData;
			
			Offset<FB_CommonItemDataAboutSex>[] offsetArray = new Offset<FB_CommonItemDataAboutSex>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CommonItemDataAboutSexProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CommonItemDataAboutSex.CreateFB_CommonItemDataAboutSex(fbb, curData.Id,curData.MenAtlasName,fbb.CreateString(curData.MenIcon),curData.WomenAtlasName,fbb.CreateString(curData.WomenIcon));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CommonItemDataAboutSexContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CommonItemDataAboutSexContainer.StartFB_CommonItemDataAboutSexContainer(fbb);
			FB_CommonItemDataAboutSexContainer.AddItems(fbb, dataVector);
			var provider = FB_CommonItemDataAboutSexContainer.EndFB_CommonItemDataAboutSexContainer(fbb);
			FB_CommonItemDataAboutSexContainer.FinishFB_CommonItemDataAboutSexContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CommonItemDataAboutSex.txt", ms.ToArray());
			}
		}

		static void ExprotCommonItemParamTypeList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CommonItemParamTypeListProvider.Instance.ListData;
			
			Offset<FB_CommonItemParamTypeList>[] offsetArray = new Offset<FB_CommonItemParamTypeList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CommonItemParamTypeListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CommonItemParamTypeList.CreateFB_CommonItemParamTypeList(fbb, curData.Id,FB_CommonItemParamTypeList.CreateParamTypeListVector(fbb,curData.ParamTypeList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CommonItemParamTypeListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CommonItemParamTypeListContainer.StartFB_CommonItemParamTypeListContainer(fbb);
			FB_CommonItemParamTypeListContainer.AddItems(fbb, dataVector);
			var provider = FB_CommonItemParamTypeListContainer.EndFB_CommonItemParamTypeListContainer(fbb);
			FB_CommonItemParamTypeListContainer.FinishFB_CommonItemParamTypeListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CommonItemParamTypeList.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneLastShot()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneLastShotProvider.Instance.ListData;
			
			Offset<FB_CopySceneLastShot>[] offsetArray = new Offset<FB_CopySceneLastShot>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneLastShotProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneLastShot.CreateFB_CopySceneLastShot(fbb, curData.ID,curData.RoleBaseID,curData.SceneID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CopySceneLastShotContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneLastShotContainer.StartFB_CopySceneLastShotContainer(fbb);
			FB_CopySceneLastShotContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneLastShotContainer.EndFB_CopySceneLastShotContainer(fbb);
			FB_CopySceneLastShotContainer.FinishFB_CopySceneLastShotContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CopySceneLastShot.txt", ms.ToArray());
			}
		}

		static void ExprotCSQXuanSNpc()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CSQXuanSNpcProvider.Instance.ListData;
			
			Offset<FB_CSQXuanSNpc>[] offsetArray = new Offset<FB_CSQXuanSNpc>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CSQXuanSNpcProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CSQXuanSNpc.CreateFB_CSQXuanSNpc(fbb, curData.Id,fbb.CreateString(curData.Name),curData.SceneID,curData.DataID,curData.PosX,curData.PosY,curData.PosZ,curData.FaceDirection,curData.GroupID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CSQXuanSNpcContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CSQXuanSNpcContainer.StartFB_CSQXuanSNpcContainer(fbb);
			FB_CSQXuanSNpcContainer.AddItems(fbb, dataVector);
			var provider = FB_CSQXuanSNpcContainer.EndFB_CSQXuanSNpcContainer(fbb);
			FB_CSQXuanSNpcContainer.FinishFB_CSQXuanSNpcContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/CSQXuanSNpc.txt", ms.ToArray());
			}
		}

		static void ExprotDamageBoardType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DamageBoardTypeProvider.Instance.ListData;
			
			Offset<FB_DamageBoardType>[] offsetArray = new Offset<FB_DamageBoardType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DamageBoardTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DamageBoardType.CreateFB_DamageBoardType(fbb, curData.DamageBoardTypeID,curData.OriginX,curData.OriginY,curData.FadeStartTime,curData.FadeDurationTime,fbb.CreateString(curData.TextColor),fbb.CreateString(curData.OutlineColor),curData.TextSize,curData.MaxNum,fbb.CreateString(curData.AnimaName),fbb.CreateString(curData.GradientTop),fbb.CreateString(curData.GradientBottom),curData.NeedShow);
				KeyMaping[curData.DamageBoardTypeID] = index;
			}
			var dataVector = FB_DamageBoardTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DamageBoardTypeContainer.StartFB_DamageBoardTypeContainer(fbb);
			FB_DamageBoardTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_DamageBoardTypeContainer.EndFB_DamageBoardTypeContainer(fbb);
			FB_DamageBoardTypeContainer.FinishFB_DamageBoardTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/DamageBoardType.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBloodSkillDes()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBloodSkillDesProvider.Instance.ListData;
			
			Offset<FB_DestinyBloodSkillDes>[] offsetArray = new Offset<FB_DestinyBloodSkillDes>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBloodSkillDesProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBloodSkillDes.CreateFB_DestinyBloodSkillDes(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.MaxLevel,curData.StrDicID,FB_DestinyBloodSkillDes.CreateBasicValueListVector(fbb,curData.BasicValueList.ToArray()),FB_DestinyBloodSkillDes.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyBloodSkillDesContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBloodSkillDesContainer.StartFB_DestinyBloodSkillDesContainer(fbb);
			FB_DestinyBloodSkillDesContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBloodSkillDesContainer.EndFB_DestinyBloodSkillDesContainer(fbb);
			FB_DestinyBloodSkillDesContainer.FinishFB_DestinyBloodSkillDesContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/DestinyBloodSkillDes.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyObjParams()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyObjParamsProvider.Instance.ListData;
			
			Offset<FB_DestinyObjParams>[] offsetArray = new Offset<FB_DestinyObjParams>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyObjParamsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyObjParams.CreateFB_DestinyObjParams(fbb, curData.Id,curData.FreeOrFixed,curData.DefaultFOV,fbb.CreateString(curData.Path),fbb.CreateString(curData.ModelPath));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyObjParamsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyObjParamsContainer.StartFB_DestinyObjParamsContainer(fbb);
			FB_DestinyObjParamsContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyObjParamsContainer.EndFB_DestinyObjParamsContainer(fbb);
			FB_DestinyObjParamsContainer.FinishFB_DestinyObjParamsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/DestinyObjParams.txt", ms.ToArray());
			}
		}

		static void ExprotDymaticSceneEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DymaticSceneEffectProvider.Instance.ListData;
			
			Offset<FB_DymaticSceneEffect>[] offsetArray = new Offset<FB_DymaticSceneEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DymaticSceneEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DymaticSceneEffect.CreateFB_DymaticSceneEffect(fbb, curData.Id,fbb.CreateString(curData.Path),curData.Distance,curData.Rate,curData.WSSceneID,curData.PosX,curData.PosY,curData.PosZ,curData.FaceDir,curData.UpOrDownAngle,curData.Scale,curData.IsDefaultShow);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DymaticSceneEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DymaticSceneEffectContainer.StartFB_DymaticSceneEffectContainer(fbb);
			FB_DymaticSceneEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_DymaticSceneEffectContainer.EndFB_DymaticSceneEffectContainer(fbb);
			FB_DymaticSceneEffectContainer.FinishFB_DymaticSceneEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/DymaticSceneEffect.txt", ms.ToArray());
			}
		}

		static void ExprotEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EffectProvider.Instance.ListData;
			
			Offset<FB_Effect>[] offsetArray = new Offset<FB_Effect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Effect.CreateFB_Effect(fbb, curData.EffectID,fbb.CreateString(curData.Path),curData.DelayTime,curData.IsDestroy,fbb.CreateString(curData.ParentName),curData.IsFellowOwner,curData.PosX,curData.PosY,curData.PosZ,curData.RotationX,curData.RotationY,curData.RotationZ,curData.Scale,curData.Duration,curData.NextID,curData.BreakEffect,curData.IsRotateOwner,curData.IsRefCount,curData.DestroyOnBlood,curData.IsNeedMountOffset,curData.Sound);
				KeyMaping[curData.EffectID] = index;
			}
			var dataVector = FB_EffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EffectContainer.StartFB_EffectContainer(fbb);
			FB_EffectContainer.AddItems(fbb, dataVector);
			var provider = FB_EffectContainer.EndFB_EffectContainer(fbb);
			FB_EffectContainer.FinishFB_EffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Effect.txt", ms.ToArray());
			}
		}

		static void ExprotEffectPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EffectPointProvider.Instance.ListData;
			
			Offset<FB_EffectPoint>[] offsetArray = new Offset<FB_EffectPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EffectPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EffectPoint.CreateFB_EffectPoint(fbb, curData.ModelTypeId,fbb.CreateString(curData.CenterPointPath),fbb.CreateString(curData.HeadPointPath),fbb.CreateString(curData.LHandPointPath),fbb.CreateString(curData.RHandPointPath),fbb.CreateString(curData.LFootPointPath),fbb.CreateString(curData.RFootPointPath),fbb.CreateString(curData.LUpperArmPointPath),fbb.CreateString(curData.WingPointPath),fbb.CreateString(curData.ShenQiPointPath),fbb.CreateString(curData.WeaponPointPath));
				KeyMaping[curData.ModelTypeId] = index;
			}
			var dataVector = FB_EffectPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EffectPointContainer.StartFB_EffectPointContainer(fbb);
			FB_EffectPointContainer.AddItems(fbb, dataVector);
			var provider = FB_EffectPointContainer.EndFB_EffectPointContainer(fbb);
			FB_EffectPointContainer.FinishFB_EffectPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/EffectPoint.txt", ms.ToArray());
			}
		}

		static void ExprotEquipStarEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipStarEffectProvider.Instance.ListData;
			
			Offset<FB_EquipStarEffect>[] offsetArray = new Offset<FB_EquipStarEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipStarEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] EffectPathListoffSet = new StringOffset[curData.EffectPathList.Count];
				for (var i = 0; i < curData.EffectPathList.Count; i++)
				{
					EffectPathListoffSet[i] = fbb.CreateString(curData.EffectPathList[i]);
				}
StringOffset[] LightColorListoffSet = new StringOffset[curData.LightColorList.Count];
				for (var i = 0; i < curData.LightColorList.Count; i++)
				{
					LightColorListoffSet[i] = fbb.CreateString(curData.LightColorList[i]);
				}
StringOffset[] RimbColorListoffSet = new StringOffset[curData.RimbColorList.Count];
				for (var i = 0; i < curData.RimbColorList.Count; i++)
				{
					RimbColorListoffSet[i] = fbb.CreateString(curData.RimbColorList[i]);
				}

				offsetArray[index] = FB_EquipStarEffect.CreateFB_EquipStarEffect(fbb, curData.ID,FB_EquipStarEffect.CreateEffectPathListVector(fbb,EffectPathListoffSet),curData.StarCount,fbb.CreateString(curData.MountPoint),curData.ExclusionId,FB_EquipStarEffect.CreateLightColorListVector(fbb,LightColorListoffSet),FB_EquipStarEffect.CreateLightPowerListVector(fbb,curData.LightPowerList.ToArray()),FB_EquipStarEffect.CreateRimbColorListVector(fbb,RimbColorListoffSet),FB_EquipStarEffect.CreateRimbPowerListVector(fbb,curData.RimbPowerList.ToArray()),FB_EquipStarEffect.CreateRimbWidthListVector(fbb,curData.RimbWidthList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipStarEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipStarEffectContainer.StartFB_EquipStarEffectContainer(fbb);
			FB_EquipStarEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipStarEffectContainer.EndFB_EquipStarEffectContainer(fbb);
			FB_EquipStarEffectContainer.FinishFB_EquipStarEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/EquipStarEffect.txt", ms.ToArray());
			}
		}

		static void ExprotEquipTips()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipTipsProvider.Instance.ListData;
			
			Offset<FB_EquipTips>[] offsetArray = new Offset<FB_EquipTips>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipTipsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipTips.CreateFB_EquipTips(fbb, curData.Id,FB_EquipTips.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.DiamondSet,curData.DiamondVIPSet);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipTipsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipTipsContainer.StartFB_EquipTipsContainer(fbb);
			FB_EquipTipsContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipTipsContainer.EndFB_EquipTipsContainer(fbb);
			FB_EquipTipsContainer.FinishFB_EquipTipsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/EquipTips.txt", ms.ToArray());
			}
		}

		static void ExprotFittingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FittingBaseProvider.Instance.ListData;
			
			Offset<FB_FittingBase>[] offsetArray = new Offset<FB_FittingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FittingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FittingBase.CreateFB_FittingBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Type,curData.TypeID,curData.Unlock,curData.UnlockParam,curData.ItemID,curData.Distance,curData.Down,curData.Xangle,curData.Yangle,curData.DescId,curData.SortId,curData.Appearance);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_FittingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FittingBaseContainer.StartFB_FittingBaseContainer(fbb);
			FB_FittingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_FittingBaseContainer.EndFB_FittingBaseContainer(fbb);
			FB_FittingBaseContainer.FinishFB_FittingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/FittingBase.txt", ms.ToArray());
			}
		}

		static void ExprotFlyCutterUI()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FlyCutterUIProvider.Instance.ListData;
			
			Offset<FB_FlyCutterUI>[] offsetArray = new Offset<FB_FlyCutterUI>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FlyCutterUIProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] BombAniNameListoffSet = new StringOffset[curData.BombAniNameList.Count];
				for (var i = 0; i < curData.BombAniNameList.Count; i++)
				{
					BombAniNameListoffSet[i] = fbb.CreateString(curData.BombAniNameList[i]);
				}
StringOffset[] MosterAniNameListoffSet = new StringOffset[curData.MosterAniNameList.Count];
				for (var i = 0; i < curData.MosterAniNameList.Count; i++)
				{
					MosterAniNameListoffSet[i] = fbb.CreateString(curData.MosterAniNameList[i]);
				}
StringOffset[] BombSpriteNameListoffSet = new StringOffset[curData.BombSpriteNameList.Count];
				for (var i = 0; i < curData.BombSpriteNameList.Count; i++)
				{
					BombSpriteNameListoffSet[i] = fbb.CreateString(curData.BombSpriteNameList[i]);
				}
StringOffset[] MosterSpriteNameListoffSet = new StringOffset[curData.MosterSpriteNameList.Count];
				for (var i = 0; i < curData.MosterSpriteNameList.Count; i++)
				{
					MosterSpriteNameListoffSet[i] = fbb.CreateString(curData.MosterSpriteNameList[i]);
				}

				offsetArray[index] = FB_FlyCutterUI.CreateFB_FlyCutterUI(fbb, curData.Level,curData.TimeLinit,curData.KnifeNum,curData.KnifeFlyTime,FB_FlyCutterUI.CreateBombAniNameListVector(fbb,BombAniNameListoffSet),FB_FlyCutterUI.CreateMosterAniNameListVector(fbb,MosterAniNameListoffSet),FB_FlyCutterUI.CreateBombSpriteNameListVector(fbb,BombSpriteNameListoffSet),FB_FlyCutterUI.CreateMosterSpriteNameListVector(fbb,MosterSpriteNameListoffSet));
				KeyMaping[curData.Level] = index;
			}
			var dataVector = FB_FlyCutterUIContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FlyCutterUIContainer.StartFB_FlyCutterUIContainer(fbb);
			FB_FlyCutterUIContainer.AddItems(fbb, dataVector);
			var provider = FB_FlyCutterUIContainer.EndFB_FlyCutterUIContainer(fbb);
			FB_FlyCutterUIContainer.FinishFB_FlyCutterUIContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/FlyCutterUI.txt", ms.ToArray());
			}
		}

		static void Exprotfwqlist()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_fwqlistProvider.Instance.ListData;
			
			Offset<FB_fwqlist>[] offsetArray = new Offset<FB_fwqlist>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_fwqlistProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_fwqlist.CreateFB_fwqlist(fbb, curData.Id,fbb.CreateString(curData.ServerName),fbb.CreateString(curData.Ip),curData.Port,curData.ServerStartTime,curData.WorldId,curData.ServerState,curData.IsTuiJian,curData.Weight);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_fwqlistContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_fwqlistContainer.StartFB_fwqlistContainer(fbb);
			FB_fwqlistContainer.AddItems(fbb, dataVector);
			var provider = FB_fwqlistContainer.EndFB_fwqlistContainer(fbb);
			FB_fwqlistContainer.FinishFB_fwqlistContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/fwqlist.txt", ms.ToArray());
			}
		}

		static void ExprotGetPathBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GetPathBaseProvider.Instance.ListData;
			
			Offset<FB_GetPathBase>[] offsetArray = new Offset<FB_GetPathBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GetPathBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GetPathBase.CreateFB_GetPathBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.BtnDesc),fbb.CreateString(curData.Icon),curData.type,FB_GetPathBase.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.FuncBaseID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GetPathBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GetPathBaseContainer.StartFB_GetPathBaseContainer(fbb);
			FB_GetPathBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GetPathBaseContainer.EndFB_GetPathBaseContainer(fbb);
			FB_GetPathBaseContainer.FinishFB_GetPathBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/GetPathBase.txt", ms.ToArray());
			}
		}

		static void ExprotGetPathInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GetPathInfoProvider.Instance.ListData;
			
			Offset<FB_GetPathInfo>[] offsetArray = new Offset<FB_GetPathInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GetPathInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GetPathInfo.CreateFB_GetPathInfo(fbb, curData.Id,FB_GetPathInfo.CreateGetPathInfoIDListVector(fbb,curData.GetPathInfoIDList.ToArray()),curData.NoPathID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GetPathInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GetPathInfoContainer.StartFB_GetPathInfoContainer(fbb);
			FB_GetPathInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_GetPathInfoContainer.EndFB_GetPathInfoContainer(fbb);
			FB_GetPathInfoContainer.FinishFB_GetPathInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/GetPathInfo.txt", ms.ToArray());
			}
		}

		static void Exprotgonggao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_gonggaoProvider.Instance.ListData;
			
			Offset<FB_gonggao>[] offsetArray = new Offset<FB_gonggao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_gonggaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_gonggao.CreateFB_gonggao(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.RightTitle),fbb.CreateString(curData.Content),fbb.CreateString(curData.SignatureName),fbb.CreateString(curData.SignatureDate),curData.SignatureVisible);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_gonggaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_gonggaoContainer.StartFB_gonggaoContainer(fbb);
			FB_gonggaoContainer.AddItems(fbb, dataVector);
			var provider = FB_gonggaoContainer.EndFB_gonggaoContainer(fbb);
			FB_gonggaoContainer.FinishFB_gonggaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/gonggao.txt", ms.ToArray());
			}
		}

		static void ExprotGuideBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuideBaseProvider.Instance.ListData;
			
			Offset<FB_GuideBase>[] offsetArray = new Offset<FB_GuideBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuideBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] ParamListoffSet = new StringOffset[curData.ParamList.Count];
				for (var i = 0; i < curData.ParamList.Count; i++)
				{
					ParamListoffSet[i] = fbb.CreateString(curData.ParamList[i]);
				}

				offsetArray[index] = FB_GuideBase.CreateFB_GuideBase(fbb, curData.Id,curData.NextID,fbb.CreateString(curData.UIName),curData.BgAlpha,curData.IsShowArrow,curData.ArrowPosX,curData.ArrowPosY,curData.ArrowRotate,curData.ArrowMirror,curData.IsShowDialog,curData.DialogMirror,curData.DialogPosX,curData.DialogPosY,curData.FakeObjectID,curData.FakeMirror,curData.FakePosX,curData.FakePosY,fbb.CreateString(curData.MissionHelpMsg),curData.TextID,curData.SoundID,curData.CanSkip,curData.LiveTime,curData.FinishOnSkip,curData.IsInfoGuide,curData.UIType,FB_GuideBase.CreateParamListVector(fbb,ParamListoffSet),curData.MaskOffX,curData.MaskOffY,curData.MaskOffWidth,curData.MaskOffHeight,curData.FinishGuide,curData.NeedRetry,curData.ShowMask,curData.MaskPlayTween,curData.MaskMaxScale,curData.MaskChangeTime);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuideBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuideBaseContainer.StartFB_GuideBaseContainer(fbb);
			FB_GuideBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuideBaseContainer.EndFB_GuideBaseContainer(fbb);
			FB_GuideBaseContainer.FinishFB_GuideBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/GuideBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuideType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuideTypeProvider.Instance.ListData;
			
			Offset<FB_GuideType>[] offsetArray = new Offset<FB_GuideType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuideTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuideType.CreateFB_GuideType(fbb, curData.Id,curData.GuideID,curData.GuideType,curData.Param,curData.OpenDepUI,curData.FuncId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuideTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuideTypeContainer.StartFB_GuideTypeContainer(fbb);
			FB_GuideTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_GuideTypeContainer.EndFB_GuideTypeContainer(fbb);
			FB_GuideTypeContainer.FinishFB_GuideTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/GuideType.txt", ms.ToArray());
			}
		}

		static void ExprotGuildFormationType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildFormationTypeProvider.Instance.ListData;
			
			Offset<FB_GuildFormationType>[] offsetArray = new Offset<FB_GuildFormationType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildFormationTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildFormationType.CreateFB_GuildFormationType(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.FormationDesc,curData.AttrDesc);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildFormationTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildFormationTypeContainer.StartFB_GuildFormationTypeContainer(fbb);
			FB_GuildFormationTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildFormationTypeContainer.EndFB_GuildFormationTypeContainer(fbb);
			FB_GuildFormationTypeContainer.FinishFB_GuildFormationTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/GuildFormationType.txt", ms.ToArray());
			}
		}

		static void ExprotHairModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HairModelProvider.Instance.ListData;
			
			Offset<FB_HairModel>[] offsetArray = new Offset<FB_HairModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HairModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HairModel.CreateFB_HairModel(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.ResPath),curData.Scale,curData.ModelType,FB_HairModel.CreateDeyColorListVector(fbb,curData.DeyColorList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HairModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HairModelContainer.StartFB_HairModelContainer(fbb);
			FB_HairModelContainer.AddItems(fbb, dataVector);
			var provider = FB_HairModelContainer.EndFB_HairModelContainer(fbb);
			FB_HairModelContainer.FinishFB_HairModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/HairModel.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingObjParams()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingObjParamsProvider.Instance.ListData;
			
			Offset<FB_HuanJingObjParams>[] offsetArray = new Offset<FB_HuanJingObjParams>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingObjParamsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingObjParams.CreateFB_HuanJingObjParams(fbb, curData.Id,curData.Type,curData.FreeOrFixed,curData.DefaultFOV,fbb.CreateString(curData.ResPath),fbb.CreateString(curData.ModelPath));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HuanJingObjParamsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingObjParamsContainer.StartFB_HuanJingObjParamsContainer(fbb);
			FB_HuanJingObjParamsContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingObjParamsContainer.EndFB_HuanJingObjParamsContainer(fbb);
			FB_HuanJingObjParamsContainer.FinishFB_HuanJingObjParamsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/HuanJingObjParams.txt", ms.ToArray());
			}
		}

		static void ExprotHuanLeXunBao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanLeXunBaoProvider.Instance.ListData;
			
			Offset<FB_HuanLeXunBao>[] offsetArray = new Offset<FB_HuanLeXunBao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanLeXunBaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanLeXunBao.CreateFB_HuanLeXunBao(fbb, curData.ModelTypeId,FB_HuanLeXunBao.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_HuanLeXunBao.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ModelTypeId] = index;
			}
			var dataVector = FB_HuanLeXunBaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanLeXunBaoContainer.StartFB_HuanLeXunBaoContainer(fbb);
			FB_HuanLeXunBaoContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanLeXunBaoContainer.EndFB_HuanLeXunBaoContainer(fbb);
			FB_HuanLeXunBaoContainer.FinishFB_HuanLeXunBaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/HuanLeXunBao.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangShanghenParam()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangShanghenParamProvider.Instance.ListData;
			
			Offset<FB_HunJiangShanghenParam>[] offsetArray = new Offset<FB_HunJiangShanghenParam>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangShanghenParamProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangShanghenParam.CreateFB_HunJiangShanghenParam(fbb, curData.Id,curData.ShangZhenID,curData.HunJIangID,curData.PosX,curData.PosY,curData.PosZ,curData.ScaleX,curData.ScaleY,curData.ScaleZ);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangShanghenParamContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangShanghenParamContainer.StartFB_HunJiangShanghenParamContainer(fbb);
			FB_HunJiangShanghenParamContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangShanghenParamContainer.EndFB_HunJiangShanghenParamContainer(fbb);
			FB_HunJiangShanghenParamContainer.FinishFB_HunJiangShanghenParamContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/HunJiangShanghenParam.txt", ms.ToArray());
			}
		}

		static void ExprotIapGiftUI()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_IapGiftUIProvider.Instance.ListData;
			
			Offset<FB_IapGiftUI>[] offsetArray = new Offset<FB_IapGiftUI>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_IapGiftUIProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] PicBackListoffSet = new StringOffset[curData.PicBackList.Count];
				for (var i = 0; i < curData.PicBackList.Count; i++)
				{
					PicBackListoffSet[i] = fbb.CreateString(curData.PicBackList[i]);
				}
StringOffset[] PicPriceListoffSet = new StringOffset[curData.PicPriceList.Count];
				for (var i = 0; i < curData.PicPriceList.Count; i++)
				{
					PicPriceListoffSet[i] = fbb.CreateString(curData.PicPriceList[i]);
				}
StringOffset[] GifeNameListoffSet = new StringOffset[curData.GifeNameList.Count];
				for (var i = 0; i < curData.GifeNameList.Count; i++)
				{
					GifeNameListoffSet[i] = fbb.CreateString(curData.GifeNameList[i]);
				}

				offsetArray[index] = FB_IapGiftUI.CreateFB_IapGiftUI(fbb, curData.Id,fbb.CreateString(curData.PicTitle),fbb.CreateString(curData.PicSlogan),FB_IapGiftUI.CreatePicBackListVector(fbb,PicBackListoffSet),FB_IapGiftUI.CreatePicPriceListVector(fbb,PicPriceListoffSet),FB_IapGiftUI.CreateGifeNameListVector(fbb,GifeNameListoffSet),curData.Help);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_IapGiftUIContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_IapGiftUIContainer.StartFB_IapGiftUIContainer(fbb);
			FB_IapGiftUIContainer.AddItems(fbb, dataVector);
			var provider = FB_IapGiftUIContainer.EndFB_IapGiftUIContainer(fbb);
			FB_IapGiftUIContainer.FinishFB_IapGiftUIContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/IapGiftUI.txt", ms.ToArray());
			}
		}

		static void ExprotItemButtonLogic()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemButtonLogicProvider.Instance.ListData;
			
			Offset<FB_ItemButtonLogic>[] offsetArray = new Offset<FB_ItemButtonLogic>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemButtonLogicProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemButtonLogic.CreateFB_ItemButtonLogic(fbb, curData.Id,FB_ItemButtonLogic.CreateUseParamListVector(fbb,curData.UseParamList.ToArray()),curData.FuntionOpenID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ItemButtonLogicContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemButtonLogicContainer.StartFB_ItemButtonLogicContainer(fbb);
			FB_ItemButtonLogicContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemButtonLogicContainer.EndFB_ItemButtonLogicContainer(fbb);
			FB_ItemButtonLogicContainer.FinishFB_ItemButtonLogicContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ItemButtonLogic.txt", ms.ToArray());
			}
		}

		static void ExprotItemCompoundTypeSetting()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemCompoundTypeSettingProvider.Instance.ListData;
			
			Offset<FB_ItemCompoundTypeSetting>[] offsetArray = new Offset<FB_ItemCompoundTypeSetting>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemCompoundTypeSettingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemCompoundTypeSetting.CreateFB_ItemCompoundTypeSetting(fbb, curData.ID,fbb.CreateString(curData.Name),curData.FunctionOpenID,fbb.CreateString(curData.DefaultIcon),fbb.CreateString(curData.SelectIcon));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ItemCompoundTypeSettingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemCompoundTypeSettingContainer.StartFB_ItemCompoundTypeSettingContainer(fbb);
			FB_ItemCompoundTypeSettingContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemCompoundTypeSettingContainer.EndFB_ItemCompoundTypeSettingContainer(fbb);
			FB_ItemCompoundTypeSettingContainer.FinishFB_ItemCompoundTypeSettingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ItemCompoundTypeSetting.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingTreeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingTreeBaseProvider.Instance.ListData;
			
			Offset<FB_JiLingTreeBase>[] offsetArray = new Offset<FB_JiLingTreeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingTreeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingTreeBase.CreateFB_JiLingTreeBase(fbb, curData.ID,curData.IsOpen);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JiLingTreeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingTreeBaseContainer.StartFB_JiLingTreeBaseContainer(fbb);
			FB_JiLingTreeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingTreeBaseContainer.EndFB_JiLingTreeBaseContainer(fbb);
			FB_JiLingTreeBaseContainer.FinishFB_JiLingTreeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/JiLingTreeBase.txt", ms.ToArray());
			}
		}

		static void ExprotJiYiCard()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiYiCardProvider.Instance.ListData;
			
			Offset<FB_JiYiCard>[] offsetArray = new Offset<FB_JiYiCard>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiYiCardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] IconListoffSet = new StringOffset[curData.IconList.Count];
				for (var i = 0; i < curData.IconList.Count; i++)
				{
					IconListoffSet[i] = fbb.CreateString(curData.IconList[i]);
				}

				offsetArray[index] = FB_JiYiCard.CreateFB_JiYiCard(fbb, curData.Id,curData.Round,curData.IconNum,FB_JiYiCard.CreateIconListVector(fbb,IconListoffSet));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiYiCardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiYiCardContainer.StartFB_JiYiCardContainer(fbb);
			FB_JiYiCardContainer.AddItems(fbb, dataVector);
			var provider = FB_JiYiCardContainer.EndFB_JiYiCardContainer(fbb);
			FB_JiYiCardContainer.FinishFB_JiYiCardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/JiYiCard.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceFakeObjMovePos()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceFakeObjMovePosProvider.Instance.ListData;
			
			Offset<FB_KneadFaceFakeObjMovePos>[] offsetArray = new Offset<FB_KneadFaceFakeObjMovePos>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceFakeObjMovePosProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceFakeObjMovePos.CreateFB_KneadFaceFakeObjMovePos(fbb, curData.Id,curData.NearPosX,curData.NearPosY,curData.NearPosZ,curData.NearRotateX,curData.NearRotateY,curData.NearRotateZ,curData.FarPosX,curData.FarPosY,curData.FarPosZ,curData.FarRotateX,curData.FarRotateY,curData.FarRotateZ);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceFakeObjMovePosContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceFakeObjMovePosContainer.StartFB_KneadFaceFakeObjMovePosContainer(fbb);
			FB_KneadFaceFakeObjMovePosContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceFakeObjMovePosContainer.EndFB_KneadFaceFakeObjMovePosContainer(fbb);
			FB_KneadFaceFakeObjMovePosContainer.FinishFB_KneadFaceFakeObjMovePosContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceFakeObjMovePos.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOfEye()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOfEyeProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOfEye>[] offsetArray = new Offset<FB_KneadFaceOfEye>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOfEyeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOfEye.CreateFB_KneadFaceOfEye(fbb, curData.Id,curData.MenPai,curData.Sex,curData.EyeOffX,curData.EyeOffY,curData.EyeScaleX,curData.EyeScaleY,curData.EyeXLimitMin,curData.EyeXLimitMax,curData.EyeYLimitMin,curData.EyeYLimitMax,fbb.CreateString(curData.EyeResPath),fbb.CreateString(curData.EyeIcon));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOfEyeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOfEyeContainer.StartFB_KneadFaceOfEyeContainer(fbb);
			FB_KneadFaceOfEyeContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOfEyeContainer.EndFB_KneadFaceOfEyeContainer(fbb);
			FB_KneadFaceOfEyeContainer.FinishFB_KneadFaceOfEyeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceOfEye.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOfEyeBrow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOfEyeBrowProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOfEyeBrow>[] offsetArray = new Offset<FB_KneadFaceOfEyeBrow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOfEyeBrowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOfEyeBrow.CreateFB_KneadFaceOfEyeBrow(fbb, curData.Id,curData.MenPai,curData.Sex,curData.EyeBrowOffX,curData.EyeBrowOffY,curData.EyeBrowScaleX,curData.EyeBrowScaleY,curData.EyeBrowXLimitMin,curData.EyeBrowXLimitMax,curData.EyeBrowYLimitMin,curData.EyeBrowYLimitMax,fbb.CreateString(curData.EyeBrowResPath),fbb.CreateString(curData.EyeBrowIcon));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOfEyeBrowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOfEyeBrowContainer.StartFB_KneadFaceOfEyeBrowContainer(fbb);
			FB_KneadFaceOfEyeBrowContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOfEyeBrowContainer.EndFB_KneadFaceOfEyeBrowContainer(fbb);
			FB_KneadFaceOfEyeBrowContainer.FinishFB_KneadFaceOfEyeBrowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceOfEyeBrow.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOfLip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOfLipProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOfLip>[] offsetArray = new Offset<FB_KneadFaceOfLip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOfLipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOfLip.CreateFB_KneadFaceOfLip(fbb, curData.Id,curData.MenPai,curData.Sex,curData.LipOffX,curData.LipOffY,curData.LipXLimitMin,curData.LipXLimitMax,curData.LipYLimitMin,curData.LipYLimitMax,fbb.CreateString(curData.LipResPath),fbb.CreateString(curData.LipIcon));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOfLipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOfLipContainer.StartFB_KneadFaceOfLipContainer(fbb);
			FB_KneadFaceOfLipContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOfLipContainer.EndFB_KneadFaceOfLipContainer(fbb);
			FB_KneadFaceOfLipContainer.FinishFB_KneadFaceOfLipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceOfLip.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOfPrefab()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOfPrefabProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOfPrefab>[] offsetArray = new Offset<FB_KneadFaceOfPrefab>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOfPrefabProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOfPrefab.CreateFB_KneadFaceOfPrefab(fbb, curData.Id,curData.MenPai,curData.Sex,fbb.CreateString(curData.FacePath),curData.FaceType,FB_KneadFaceOfPrefab.CreateFaceValueListVector(fbb,curData.FaceValueList.ToArray()),curData.HairValue,FB_KneadFaceOfPrefab.CreateMakeUpValueListVector(fbb,curData.MakeUpValueList.ToArray()),fbb.CreateString(curData.PrefabIcon),fbb.CreateString(curData.DescStr),fbb.CreateString(curData.SecondDescStr));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOfPrefabContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOfPrefabContainer.StartFB_KneadFaceOfPrefabContainer(fbb);
			FB_KneadFaceOfPrefabContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOfPrefabContainer.EndFB_KneadFaceOfPrefabContainer(fbb);
			FB_KneadFaceOfPrefabContainer.FinishFB_KneadFaceOfPrefabContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceOfPrefab.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOfTatto()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOfTattoProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOfTatto>[] offsetArray = new Offset<FB_KneadFaceOfTatto>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOfTattoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOfTatto.CreateFB_KneadFaceOfTatto(fbb, curData.Id,curData.MenPai,curData.Sex,fbb.CreateString(curData.TattoResPath),curData.TattoOffX,curData.TattoOffY,curData.TattoXLimitMin,curData.TattoXLimitMax,curData.TattoYLimitMin,curData.TattoYLimitMax,curData.TattoScaleX,curData.TattoScaleY,fbb.CreateString(curData.TattoIcon));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOfTattoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOfTattoContainer.StartFB_KneadFaceOfTattoContainer(fbb);
			FB_KneadFaceOfTattoContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOfTattoContainer.EndFB_KneadFaceOfTattoContainer(fbb);
			FB_KneadFaceOfTattoContainer.FinishFB_KneadFaceOfTattoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/KneadFaceOfTatto.txt", ms.ToArray());
			}
		}

		static void ExprotLingBaoType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingBaoTypeProvider.Instance.ListData;
			
			Offset<FB_LingBaoType>[] offsetArray = new Offset<FB_LingBaoType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingBaoTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingBaoType.CreateFB_LingBaoType(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.BgSpriteName));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingBaoTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingBaoTypeContainer.StartFB_LingBaoTypeContainer(fbb);
			FB_LingBaoTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_LingBaoTypeContainer.EndFB_LingBaoTypeContainer(fbb);
			FB_LingBaoTypeContainer.FinishFB_LingBaoTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/LingBaoType.txt", ms.ToArray());
			}
		}

		static void ExprotLocalNotification()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LocalNotificationProvider.Instance.ListData;
			
			Offset<FB_LocalNotification>[] offsetArray = new Offset<FB_LocalNotification>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LocalNotificationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LocalNotification.CreateFB_LocalNotification(fbb, curData.Id,fbb.CreateString(curData.Indentifier),curData.TimeType,curData.TimeValue,fbb.CreateString(curData.Notification));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LocalNotificationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LocalNotificationContainer.StartFB_LocalNotificationContainer(fbb);
			FB_LocalNotificationContainer.AddItems(fbb, dataVector);
			var provider = FB_LocalNotificationContainer.EndFB_LocalNotificationContainer(fbb);
			FB_LocalNotificationContainer.FinishFB_LocalNotificationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/LocalNotification.txt", ms.ToArray());
			}
		}

		static void ExprotMaiDianStarSoulModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MaiDianStarSoulModelProvider.Instance.ListData;
			
			Offset<FB_MaiDianStarSoulModel>[] offsetArray = new Offset<FB_MaiDianStarSoulModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MaiDianStarSoulModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MaiDianStarSoulModel.CreateFB_MaiDianStarSoulModel(fbb, curData.ID,curData.ModelId,curData.AttrAckAction,curData.leisureTime,curData.BornEffctID,curData.DisappearEffctID,curData.UIModelTabId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MaiDianStarSoulModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MaiDianStarSoulModelContainer.StartFB_MaiDianStarSoulModelContainer(fbb);
			FB_MaiDianStarSoulModelContainer.AddItems(fbb, dataVector);
			var provider = FB_MaiDianStarSoulModelContainer.EndFB_MaiDianStarSoulModelContainer(fbb);
			FB_MaiDianStarSoulModelContainer.FinishFB_MaiDianStarSoulModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/MaiDianStarSoulModel.txt", ms.ToArray());
			}
		}

		static void ExprotMergeRankShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MergeRankShowProvider.Instance.ListData;
			
			Offset<FB_MergeRankShow>[] offsetArray = new Offset<FB_MergeRankShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MergeRankShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MergeRankShow.CreateFB_MergeRankShow(fbb, curData.ID,fbb.CreateString(curData.Title),curData.TabText,curData.ConsumeDes,curData.RewardItemDes,curData.TipTitleText,fbb.CreateString(curData.JumpBtnIcon),curData.JumpBtnIconName);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MergeRankShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MergeRankShowContainer.StartFB_MergeRankShowContainer(fbb);
			FB_MergeRankShowContainer.AddItems(fbb, dataVector);
			var provider = FB_MergeRankShowContainer.EndFB_MergeRankShowContainer(fbb);
			FB_MergeRankShowContainer.FinishFB_MergeRankShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/MergeRankShow.txt", ms.ToArray());
			}
		}

		static void ExprotMissionDictionary()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionDictionaryProvider.Instance.ListData;
			
			Offset<FB_MissionDictionary>[] offsetArray = new Offset<FB_MissionDictionary>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionDictionaryProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionDictionary.CreateFB_MissionDictionary(fbb, curData.Id,fbb.CreateString(curData.MissionName),fbb.CreateString(curData.MissionAcceptDesc),fbb.CreateString(curData.MissionDoneDesc),fbb.CreateString(curData.MissionDoneText),fbb.CreateString(curData.MissionDesc),fbb.CreateString(curData.FollowText),curData.IsAutoFindPath,curData.IsCanFindPath,curData.SceneEffectIdApt,curData.EftTypeApt,curData.SceneEffectIdCpt,curData.EftTypeCpt,curData.IsCAutoFindPath,curData.GuideText,curData.DialogGuide,curData.DialogArrow,curData.BottomDict,curData.BottomDelay,fbb.CreateString(curData.BtnAText),fbb.CreateString(curData.BtnBText));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionDictionaryContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionDictionaryContainer.StartFB_MissionDictionaryContainer(fbb);
			FB_MissionDictionaryContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionDictionaryContainer.EndFB_MissionDictionaryContainer(fbb);
			FB_MissionDictionaryContainer.FinishFB_MissionDictionaryContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/MissionDictionary.txt", ms.ToArray());
			}
		}

		static void ExprotMissionSceneEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionSceneEffectProvider.Instance.ListData;
			
			Offset<FB_MissionSceneEffect>[] offsetArray = new Offset<FB_MissionSceneEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionSceneEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionSceneEffect.CreateFB_MissionSceneEffect(fbb, curData.Id,fbb.CreateString(curData.Name),curData.SceneID,curData.EffectId,curData.PosX,curData.PosZ,curData.PosY);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionSceneEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionSceneEffectContainer.StartFB_MissionSceneEffectContainer(fbb);
			FB_MissionSceneEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionSceneEffectContainer.EndFB_MissionSceneEffectContainer(fbb);
			FB_MissionSceneEffectContainer.FinishFB_MissionSceneEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/MissionSceneEffect.txt", ms.ToArray());
			}
		}

		static void ExprotMountBindPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MountBindPointProvider.Instance.ListData;
			
			Offset<FB_MountBindPoint>[] offsetArray = new Offset<FB_MountBindPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MountBindPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] BindPointListoffSet = new StringOffset[curData.BindPointList.Count];
				for (var i = 0; i < curData.BindPointList.Count; i++)
				{
					BindPointListoffSet[i] = fbb.CreateString(curData.BindPointList[i]);
				}

				offsetArray[index] = FB_MountBindPoint.CreateFB_MountBindPoint(fbb, curData.Id,FB_MountBindPoint.CreateBindPointListVector(fbb,BindPointListoffSet),FB_MountBindPoint.CreateBindPointAniIDListVector(fbb,curData.BindPointAniIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MountBindPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MountBindPointContainer.StartFB_MountBindPointContainer(fbb);
			FB_MountBindPointContainer.AddItems(fbb, dataVector);
			var provider = FB_MountBindPointContainer.EndFB_MountBindPointContainer(fbb);
			FB_MountBindPointContainer.FinishFB_MountBindPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/MountBindPoint.txt", ms.ToArray());
			}
		}

		static void ExprotNPCPaoPao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_NPCPaoPaoProvider.Instance.ListData;
			
			Offset<FB_NPCPaoPao>[] offsetArray = new Offset<FB_NPCPaoPao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_NPCPaoPaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_NPCPaoPao.CreateFB_NPCPaoPao(fbb, curData.Id,FB_NPCPaoPao.CreateStrDescIdListVector(fbb,curData.StrDescIdList.ToArray()),curData.LeftTime);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_NPCPaoPaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_NPCPaoPaoContainer.StartFB_NPCPaoPaoContainer(fbb);
			FB_NPCPaoPaoContainer.AddItems(fbb, dataVector);
			var provider = FB_NPCPaoPaoContainer.EndFB_NPCPaoPaoContainer(fbb);
			FB_NPCPaoPaoContainer.FinishFB_NPCPaoPaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/NPCPaoPao.txt", ms.ToArray());
			}
		}

		static void ExprotNPCSounds()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_NPCSoundsProvider.Instance.ListData;
			
			Offset<FB_NPCSounds>[] offsetArray = new Offset<FB_NPCSounds>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_NPCSoundsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_NPCSounds.CreateFB_NPCSounds(fbb, curData.ID,curData.SoundID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_NPCSoundsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_NPCSoundsContainer.StartFB_NPCSoundsContainer(fbb);
			FB_NPCSoundsContainer.AddItems(fbb, dataVector);
			var provider = FB_NPCSoundsContainer.EndFB_NPCSoundsContainer(fbb);
			FB_NPCSoundsContainer.FinishFB_NPCSoundsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/NPCSounds.txt", ms.ToArray());
			}
		}

		static void ExprotOfflineCompetitionPlayerShowPostion()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OfflineCompetitionPlayerShowPostionProvider.Instance.ListData;
			
			Offset<FB_OfflineCompetitionPlayerShowPostion>[] offsetArray = new Offset<FB_OfflineCompetitionPlayerShowPostion>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OfflineCompetitionPlayerShowPostionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OfflineCompetitionPlayerShowPostion.CreateFB_OfflineCompetitionPlayerShowPostion(fbb, curData.Id,curData.PosX,curData.PosY,curData.PosZ,curData.XRotation,curData.YRotation,curData.ZRotation,curData.Scale,curData.AnimationID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OfflineCompetitionPlayerShowPostionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OfflineCompetitionPlayerShowPostionContainer.StartFB_OfflineCompetitionPlayerShowPostionContainer(fbb);
			FB_OfflineCompetitionPlayerShowPostionContainer.AddItems(fbb, dataVector);
			var provider = FB_OfflineCompetitionPlayerShowPostionContainer.EndFB_OfflineCompetitionPlayerShowPostionContainer(fbb);
			FB_OfflineCompetitionPlayerShowPostionContainer.FinishFB_OfflineCompetitionPlayerShowPostionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/OfflineCompetitionPlayerShowPostion.txt", ms.ToArray());
			}
		}

		static void ExprotOperateResultTips()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OperateResultTipsProvider.Instance.ListData;
			
			Offset<FB_OperateResultTips>[] offsetArray = new Offset<FB_OperateResultTips>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OperateResultTipsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OperateResultTips.CreateFB_OperateResultTips(fbb, curData.Id,fbb.CreateString(curData.Tips));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OperateResultTipsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OperateResultTipsContainer.StartFB_OperateResultTipsContainer(fbb);
			FB_OperateResultTipsContainer.AddItems(fbb, dataVector);
			var provider = FB_OperateResultTipsContainer.EndFB_OperateResultTipsContainer(fbb);
			FB_OperateResultTipsContainer.FinishFB_OperateResultTipsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/OperateResultTips.txt", ms.ToArray());
			}
		}

		static void ExprotOptionType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OptionTypeProvider.Instance.ListData;
			
			Offset<FB_OptionType>[] offsetArray = new Offset<FB_OptionType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OptionTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OptionType.CreateFB_OptionType(fbb, curData.Id,fbb.CreateString(curData.Name),FB_OptionType.CreateOptionListVector(fbb,curData.OptionList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OptionTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OptionTypeContainer.StartFB_OptionTypeContainer(fbb);
			FB_OptionTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_OptionTypeContainer.EndFB_OptionTypeContainer(fbb);
			FB_OptionTypeContainer.FinishFB_OptionTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/OptionType.txt", ms.ToArray());
			}
		}

		static void ExprotPhotoEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PhotoEffectProvider.Instance.ListData;
			
			Offset<FB_PhotoEffect>[] offsetArray = new Offset<FB_PhotoEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PhotoEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PhotoEffect.CreateFB_PhotoEffect(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.IconPath),curData.EffectID,fbb.CreateString(curData.BtnBgIconName),fbb.CreateString(curData.PhotoEffectName),fbb.CreateString(curData.BtnLabelColor),curData.Temperature,curData.Tint,curData.HueShift,curData.Saturation,curData.Brightness,curData.Contrast,curData.SortId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PhotoEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PhotoEffectContainer.StartFB_PhotoEffectContainer(fbb);
			FB_PhotoEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_PhotoEffectContainer.EndFB_PhotoEffectContainer(fbb);
			FB_PhotoEffectContainer.FinishFB_PhotoEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PhotoEffect.txt", ms.ToArray());
			}
		}

		static void ExprotPhotoTabEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PhotoTabEffectProvider.Instance.ListData;
			
			Offset<FB_PhotoTabEffect>[] offsetArray = new Offset<FB_PhotoTabEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PhotoTabEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PhotoTabEffect.CreateFB_PhotoTabEffect(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Type,FB_PhotoTabEffect.CreatePhotoEffectIdListVector(fbb,curData.PhotoEffectIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PhotoTabEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PhotoTabEffectContainer.StartFB_PhotoTabEffectContainer(fbb);
			FB_PhotoTabEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_PhotoTabEffectContainer.EndFB_PhotoTabEffectContainer(fbb);
			FB_PhotoTabEffectContainer.FinishFB_PhotoTabEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PhotoTabEffect.txt", ms.ToArray());
			}
		}

		static void ExprotPicturePuzzle()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PicturePuzzleProvider.Instance.ListData;
			
			Offset<FB_PicturePuzzle>[] offsetArray = new Offset<FB_PicturePuzzle>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PicturePuzzleProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] PictureListoffSet = new StringOffset[curData.PictureList.Count];
				for (var i = 0; i < curData.PictureList.Count; i++)
				{
					PictureListoffSet[i] = fbb.CreateString(curData.PictureList[i]);
				}

				offsetArray[index] = FB_PicturePuzzle.CreateFB_PicturePuzzle(fbb, curData.Level,curData.TimeLinit,curData.ViewLimit,curData.ViewLimitRate,FB_PicturePuzzle.CreatePictureListVector(fbb,PictureListoffSet),FB_PicturePuzzle.CreatePictureWidthListVector(fbb,curData.PictureWidthList.ToArray()),FB_PicturePuzzle.CreatePictureHeightListVector(fbb,curData.PictureHeightList.ToArray()));
				KeyMaping[curData.Level] = index;
			}
			var dataVector = FB_PicturePuzzleContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PicturePuzzleContainer.StartFB_PicturePuzzleContainer(fbb);
			FB_PicturePuzzleContainer.AddItems(fbb, dataVector);
			var provider = FB_PicturePuzzleContainer.EndFB_PicturePuzzleContainer(fbb);
			FB_PicturePuzzleContainer.FinishFB_PicturePuzzleContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PicturePuzzle.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerHeadInfoCfg()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerHeadInfoCfgProvider.Instance.ListData;
			
			Offset<FB_PlayerHeadInfoCfg>[] offsetArray = new Offset<FB_PlayerHeadInfoCfg>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerHeadInfoCfgProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerHeadInfoCfg.CreateFB_PlayerHeadInfoCfg(fbb, curData.Id,curData.Height);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PlayerHeadInfoCfgContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerHeadInfoCfgContainer.StartFB_PlayerHeadInfoCfgContainer(fbb);
			FB_PlayerHeadInfoCfgContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerHeadInfoCfgContainer.EndFB_PlayerHeadInfoCfgContainer(fbb);
			FB_PlayerHeadInfoCfgContainer.FinishFB_PlayerHeadInfoCfgContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PlayerHeadInfoCfg.txt", ms.ToArray());
			}
		}

		static void ExprotPlayMethodBroadcast()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayMethodBroadcastProvider.Instance.ListData;
			
			Offset<FB_PlayMethodBroadcast>[] offsetArray = new Offset<FB_PlayMethodBroadcast>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayMethodBroadcastProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayMethodBroadcast.CreateFB_PlayMethodBroadcast(fbb, curData.ID,curData.StrDic,curData.MinLvl,curData.MaxLvl);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PlayMethodBroadcastContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayMethodBroadcastContainer.StartFB_PlayMethodBroadcastContainer(fbb);
			FB_PlayMethodBroadcastContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayMethodBroadcastContainer.EndFB_PlayMethodBroadcastContainer(fbb);
			FB_PlayMethodBroadcastContainer.FinishFB_PlayMethodBroadcastContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PlayMethodBroadcast.txt", ms.ToArray());
			}
		}

		static void ExprotPreload()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PreloadProvider.Instance.ListData;
			
			Offset<FB_Preload>[] offsetArray = new Offset<FB_Preload>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PreloadProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Preload.CreateFB_Preload(fbb, curData.Id,fbb.CreateString(curData.Path),curData.MenPaiId,curData.IsNewborn);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PreloadContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PreloadContainer.StartFB_PreloadContainer(fbb);
			FB_PreloadContainer.AddItems(fbb, dataVector);
			var provider = FB_PreloadContainer.EndFB_PreloadContainer(fbb);
			FB_PreloadContainer.FinishFB_PreloadContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Preload.txt", ms.ToArray());
			}
		}

		static void ExprotPropertyIntro()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PropertyIntroProvider.Instance.ListData;
			
			Offset<FB_PropertyIntro>[] offsetArray = new Offset<FB_PropertyIntro>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PropertyIntroProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PropertyIntro.CreateFB_PropertyIntro(fbb, curData.ID,curData.Type,fbb.CreateString(curData.Intro));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PropertyIntroContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PropertyIntroContainer.StartFB_PropertyIntroContainer(fbb);
			FB_PropertyIntroContainer.AddItems(fbb, dataVector);
			var provider = FB_PropertyIntroContainer.EndFB_PropertyIntroContainer(fbb);
			FB_PropertyIntroContainer.FinishFB_PropertyIntroContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/PropertyIntro.txt", ms.ToArray());
			}
		}

		static void ExprotRankType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RankTypeProvider.Instance.ListData;
			
			Offset<FB_RankType>[] offsetArray = new Offset<FB_RankType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RankTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RankType.CreateFB_RankType(fbb, curData.ID,fbb.CreateString(curData.Name),FB_RankType.CreateRankIDListVector(fbb,curData.RankIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RankTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RankTypeContainer.StartFB_RankTypeContainer(fbb);
			FB_RankTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_RankTypeContainer.EndFB_RankTypeContainer(fbb);
			FB_RankTypeContainer.FinishFB_RankTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/RankType.txt", ms.ToArray());
			}
		}

		static void ExprotRealTimeShadowConfig()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RealTimeShadowConfigProvider.Instance.ListData;
			
			Offset<FB_RealTimeShadowConfig>[] offsetArray = new Offset<FB_RealTimeShadowConfig>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RealTimeShadowConfigProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RealTimeShadowConfig.CreateFB_RealTimeShadowConfig(fbb, curData.Id,curData.Size,curData.RenderTextureSize,curData.AntiAliasing,fbb.CreateString(curData.ShadowColor),curData.Alpha);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RealTimeShadowConfigContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RealTimeShadowConfigContainer.StartFB_RealTimeShadowConfigContainer(fbb);
			FB_RealTimeShadowConfigContainer.AddItems(fbb, dataVector);
			var provider = FB_RealTimeShadowConfigContainer.EndFB_RealTimeShadowConfigContainer(fbb);
			FB_RealTimeShadowConfigContainer.FinishFB_RealTimeShadowConfigContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/RealTimeShadowConfig.txt", ms.ToArray());
			}
		}

		static void ExprotRobot()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RobotProvider.Instance.ListData;
			
			Offset<FB_Robot>[] offsetArray = new Offset<FB_Robot>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RobotProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Robot.CreateFB_Robot(fbb, curData.Id,curData.FaceId,curData.HairModelId,curData.DefultCharModel);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RobotContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RobotContainer.StartFB_RobotContainer(fbb);
			FB_RobotContainer.AddItems(fbb, dataVector);
			var provider = FB_RobotContainer.EndFB_RobotContainer(fbb);
			FB_RobotContainer.FinishFB_RobotContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Robot.txt", ms.ToArray());
			}
		}

		static void ExprotRobotAppearance()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RobotAppearanceProvider.Instance.ListData;
			
			Offset<FB_RobotAppearance>[] offsetArray = new Offset<FB_RobotAppearance>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RobotAppearanceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RobotAppearance.CreateFB_RobotAppearance(fbb, curData.ID,curData.MenPai,curData.sex,curData.charModelID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RobotAppearanceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RobotAppearanceContainer.StartFB_RobotAppearanceContainer(fbb);
			FB_RobotAppearanceContainer.AddItems(fbb, dataVector);
			var provider = FB_RobotAppearanceContainer.EndFB_RobotAppearanceContainer(fbb);
			FB_RobotAppearanceContainer.FinishFB_RobotAppearanceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/RobotAppearance.txt", ms.ToArray());
			}
		}

		static void ExprotRoleName()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RoleNameProvider.Instance.ListData;
			
			Offset<FB_RoleName>[] offsetArray = new Offset<FB_RoleName>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RoleNameProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RoleName.CreateFB_RoleName(fbb, curData.Id,fbb.CreateString(curData.Surnname),fbb.CreateString(curData.MaleName),fbb.CreateString(curData.FemaleName),fbb.CreateString(curData.PreSymbol),fbb.CreateString(curData.MidSymbol),fbb.CreateString(curData.PostSymbol),curData.SurnnameNum,curData.MaleNameNum,curData.FemaleNameNum,curData.PreSymbolNum,curData.MidSymbolNum,curData.PostSymbolNum);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RoleNameContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RoleNameContainer.StartFB_RoleNameContainer(fbb);
			FB_RoleNameContainer.AddItems(fbb, dataVector);
			var provider = FB_RoleNameContainer.EndFB_RoleNameContainer(fbb);
			FB_RoleNameContainer.FinishFB_RoleNameContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/RoleName.txt", ms.ToArray());
			}
		}

		static void ExprotSceneCullingParam()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneCullingParamProvider.Instance.ListData;
			
			Offset<FB_SceneCullingParam>[] offsetArray = new Offset<FB_SceneCullingParam>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneCullingParamProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneCullingParam.CreateFB_SceneCullingParam(fbb, curData.ID,curData.LowestLOD,FB_SceneCullingParam.CreateLowestRangeListVector(fbb,curData.LowestRangeList.ToArray()),FB_SceneCullingParam.CreateLowestFogListVector(fbb,curData.LowestFogList.ToArray()),curData.LowLOD,FB_SceneCullingParam.CreateLowRangeListVector(fbb,curData.LowRangeList.ToArray()),FB_SceneCullingParam.CreateLowFogListVector(fbb,curData.LowFogList.ToArray()),curData.MidLOD,FB_SceneCullingParam.CreateMidRangeListVector(fbb,curData.MidRangeList.ToArray()),FB_SceneCullingParam.CreateMidFogListVector(fbb,curData.MidFogList.ToArray()),curData.HighLOD,FB_SceneCullingParam.CreateHighRangeListVector(fbb,curData.HighRangeList.ToArray()),FB_SceneCullingParam.CreateHighFogListVector(fbb,curData.HighFogList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SceneCullingParamContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneCullingParamContainer.StartFB_SceneCullingParamContainer(fbb);
			FB_SceneCullingParamContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneCullingParamContainer.EndFB_SceneCullingParamContainer(fbb);
			FB_SceneCullingParamContainer.FinishFB_SceneCullingParamContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SceneCullingParam.txt", ms.ToArray());
			}
		}

		static void ExprotSceneShaderParam()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneShaderParamProvider.Instance.ListData;
			
			Offset<FB_SceneShaderParam>[] offsetArray = new Offset<FB_SceneShaderParam>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneShaderParamProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneShaderParam.CreateFB_SceneShaderParam(fbb, curData.ID,curData.FirstDiffusePower,curData.SecondDiffusePower,curData.FirstFinalPower,curData.SecondFinalPower,curData.FirstShadowFactor,curData.SecondShadowFactor,curData.FogStart,curData.FogEnd,curData.FogHightPower,curData.FakeLightDirX,curData.FakeLightDirY,curData.FakeLightDirZ,curData.Ambient,curData.FogLowLimit,curData.FogPowerLimit,curData.IsWeather,curData.PBRAmbientColorDay,curData.PBRLightColorDay,curData.PBRBackLightColorDay,curData.PBRAmbientColorNight,curData.PBRLightColorNight,curData.PBRBackLightColorNight);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SceneShaderParamContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneShaderParamContainer.StartFB_SceneShaderParamContainer(fbb);
			FB_SceneShaderParamContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneShaderParamContainer.EndFB_SceneShaderParamContainer(fbb);
			FB_SceneShaderParamContainer.FinishFB_SceneShaderParamContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SceneShaderParam.txt", ms.ToArray());
			}
		}

		static void ExprotSexDistinction()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SexDistinctionProvider.Instance.ListData;
			
			Offset<FB_SexDistinction>[] offsetArray = new Offset<FB_SexDistinction>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SexDistinctionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SexDistinction.CreateFB_SexDistinction(fbb, curData.ID,FB_SexDistinction.CreateMaleStartEffectListVector(fbb,curData.MaleStartEffectList.ToArray()),FB_SexDistinction.CreateFemaleStartEffectListVector(fbb,curData.FemaleStartEffectList.ToArray()),curData.MaleSoundID,curData.FemaleSoundID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SexDistinctionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SexDistinctionContainer.StartFB_SexDistinctionContainer(fbb);
			FB_SexDistinctionContainer.AddItems(fbb, dataVector);
			var provider = FB_SexDistinctionContainer.EndFB_SexDistinctionContainer(fbb);
			FB_SexDistinctionContainer.FinishFB_SexDistinctionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SexDistinction.txt", ms.ToArray());
			}
		}

		static void ExprotShakeCamera()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShakeCameraProvider.Instance.ListData;
			
			Offset<FB_ShakeCamera>[] offsetArray = new Offset<FB_ShakeCamera>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShakeCameraProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShakeCamera.CreateFB_ShakeCamera(fbb, curData.Id,curData.ShakeCount,curData.ShakeInterval,curData.ShakePower,curData.ShakeMode,curData.ReduceFactor,curData.Delay,curData.HpShakeRate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShakeCameraContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShakeCameraContainer.StartFB_ShakeCameraContainer(fbb);
			FB_ShakeCameraContainer.AddItems(fbb, dataVector);
			var provider = FB_ShakeCameraContainer.EndFB_ShakeCameraContainer(fbb);
			FB_ShakeCameraContainer.FinishFB_ShakeCameraContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShakeCamera.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangYouLeChang()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangYouLeChangProvider.Instance.ListData;
			
			Offset<FB_ShenWangYouLeChang>[] offsetArray = new Offset<FB_ShenWangYouLeChang>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangYouLeChangProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangYouLeChang.CreateFB_ShenWangYouLeChang(fbb, curData.Id,fbb.CreateString(curData.MonsterName),curData.PosX,curData.PosZ,FB_ShenWangYouLeChang.CreateRoleBaseIDListVector(fbb,curData.RoleBaseIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShenWangYouLeChangContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangYouLeChangContainer.StartFB_ShenWangYouLeChangContainer(fbb);
			FB_ShenWangYouLeChangContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangYouLeChangContainer.EndFB_ShenWangYouLeChangContainer(fbb);
			FB_ShenWangYouLeChangContainer.FinishFB_ShenWangYouLeChangContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShenWangYouLeChang.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaCSChapter()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaCSChapterProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaCSChapter>[] offsetArray = new Offset<FB_ShenWangZhanJiaCSChapter>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaCSChapterProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaCSChapter.CreateFB_ShenWangZhanJiaCSChapter(fbb, curData.Id,fbb.CreateString(curData.ChapterStr),fbb.CreateString(curData.ChapterName),fbb.CreateString(curData.ChapterType),FB_ShenWangZhanJiaCSChapter.CreateItemListListVector(fbb,curData.ItemListList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShenWangZhanJiaCSChapterContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaCSChapterContainer.StartFB_ShenWangZhanJiaCSChapterContainer(fbb);
			FB_ShenWangZhanJiaCSChapterContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaCSChapterContainer.EndFB_ShenWangZhanJiaCSChapterContainer(fbb);
			FB_ShenWangZhanJiaCSChapterContainer.FinishFB_ShenWangZhanJiaCSChapterContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShenWangZhanJiaCSChapter.txt", ms.ToArray());
			}
		}

		static void ExprotShenYuRankBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenYuRankBaseProvider.Instance.ListData;
			
			Offset<FB_ShenYuRankBase>[] offsetArray = new Offset<FB_ShenYuRankBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenYuRankBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] TitleListoffSet = new StringOffset[curData.TitleList.Count];
				for (var i = 0; i < curData.TitleList.Count; i++)
				{
					TitleListoffSet[i] = fbb.CreateString(curData.TitleList[i]);
				}

				offsetArray[index] = FB_ShenYuRankBase.CreateFB_ShenYuRankBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_ShenYuRankBase.CreateTitleListVector(fbb,TitleListoffSet),curData.ShowNum,curData.RankPage);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenYuRankBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenYuRankBaseContainer.StartFB_ShenYuRankBaseContainer(fbb);
			FB_ShenYuRankBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenYuRankBaseContainer.EndFB_ShenYuRankBaseContainer(fbb);
			FB_ShenYuRankBaseContainer.FinishFB_ShenYuRankBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShenYuRankBase.txt", ms.ToArray());
			}
		}

		static void ExprotShieldingSymbol()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShieldingSymbolProvider.Instance.ListData;
			
			Offset<FB_ShieldingSymbol>[] offsetArray = new Offset<FB_ShieldingSymbol>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShieldingSymbolProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShieldingSymbol.CreateFB_ShieldingSymbol(fbb, curData.Id,fbb.CreateString(curData.StrSymbol));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShieldingSymbolContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShieldingSymbolContainer.StartFB_ShieldingSymbolContainer(fbb);
			FB_ShieldingSymbolContainer.AddItems(fbb, dataVector);
			var provider = FB_ShieldingSymbolContainer.EndFB_ShieldingSymbolContainer(fbb);
			FB_ShieldingSymbolContainer.FinishFB_ShieldingSymbolContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShieldingSymbol.txt", ms.ToArray());
			}
		}

		static void ExprotShieldString()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShieldStringProvider.Instance.ListData;
			
			Offset<FB_ShieldString>[] offsetArray = new Offset<FB_ShieldString>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShieldStringProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShieldString.CreateFB_ShieldString(fbb, curData.Id,fbb.CreateString(curData.ShieldStr));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShieldStringContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShieldStringContainer.StartFB_ShieldStringContainer(fbb);
			FB_ShieldStringContainer.AddItems(fbb, dataVector);
			var provider = FB_ShieldStringContainer.EndFB_ShieldStringContainer(fbb);
			FB_ShieldStringContainer.FinishFB_ShieldStringContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShieldString.txt", ms.ToArray());
			}
		}

		static void ExprotShopClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShopClassProvider.Instance.ListData;
			
			Offset<FB_ShopClass>[] offsetArray = new Offset<FB_ShopClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShopClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShopClass.CreateFB_ShopClass(fbb, curData.Id,fbb.CreateString(curData.Name),FB_ShopClass.CreateTypeIDListVector(fbb,curData.TypeIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShopClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShopClassContainer.StartFB_ShopClassContainer(fbb);
			FB_ShopClassContainer.AddItems(fbb, dataVector);
			var provider = FB_ShopClassContainer.EndFB_ShopClassContainer(fbb);
			FB_ShopClassContainer.FinishFB_ShopClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/ShopClass.txt", ms.ToArray());
			}
		}

		static void ExprotSkillCamAnim()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillCamAnimProvider.Instance.ListData;
			
			Offset<FB_SkillCamAnim>[] offsetArray = new Offset<FB_SkillCamAnim>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillCamAnimProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillCamAnim.CreateFB_SkillCamAnim(fbb, curData.Id,curData.TotalTime,curData.DelayTime);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SkillCamAnimContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillCamAnimContainer.StartFB_SkillCamAnimContainer(fbb);
			FB_SkillCamAnimContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillCamAnimContainer.EndFB_SkillCamAnimContainer(fbb);
			FB_SkillCamAnimContainer.FinishFB_SkillCamAnimContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SkillCamAnim.txt", ms.ToArray());
			}
		}

		static void ExprotSkillDemonstration()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillDemonstrationProvider.Instance.ListData;
			
			Offset<FB_SkillDemonstration>[] offsetArray = new Offset<FB_SkillDemonstration>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillDemonstrationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] SkillListoffSet = new StringOffset[curData.SkillList.Count];
				for (var i = 0; i < curData.SkillList.Count; i++)
				{
					SkillListoffSet[i] = fbb.CreateString(curData.SkillList[i]);
				}

				offsetArray[index] = FB_SkillDemonstration.CreateFB_SkillDemonstration(fbb, curData.ID,curData.EffectId,FB_SkillDemonstration.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),FB_SkillDemonstration.CreateSkillListVector(fbb,SkillListoffSet),curData.CharModelId,curData.PosX,curData.PosY,curData.PosZ);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SkillDemonstrationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillDemonstrationContainer.StartFB_SkillDemonstrationContainer(fbb);
			FB_SkillDemonstrationContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillDemonstrationContainer.EndFB_SkillDemonstrationContainer(fbb);
			FB_SkillDemonstrationContainer.FinishFB_SkillDemonstrationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SkillDemonstration.txt", ms.ToArray());
			}
		}

		static void ExprotSounds()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SoundsProvider.Instance.ListData;
			
			Offset<FB_Sounds>[] offsetArray = new Offset<FB_Sounds>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SoundsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Sounds.CreateFB_Sounds(fbb, curData.Id,fbb.CreateString(curData.FullPathName),curData.PanLevel,curData.Volume,curData.MinDistance,curData.IsLoop,curData.Delay,curData.FadeInTime,curData.FadeOutTime,curData.NextSoundId,curData.WaitTime,curData.IsSceneBGM);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SoundsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SoundsContainer.StartFB_SoundsContainer(fbb);
			FB_SoundsContainer.AddItems(fbb, dataVector);
			var provider = FB_SoundsContainer.EndFB_SoundsContainer(fbb);
			FB_SoundsContainer.FinishFB_SoundsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/Sounds.txt", ms.ToArray());
			}
		}

		static void ExprotStarSoulPaoPao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarSoulPaoPaoProvider.Instance.ListData;
			
			Offset<FB_StarSoulPaoPao>[] offsetArray = new Offset<FB_StarSoulPaoPao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarSoulPaoPaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarSoulPaoPao.CreateFB_StarSoulPaoPao(fbb, curData.ID,fbb.CreateString(curData.Text),curData.SceneID,curData.Weight,curData.LvlMin,curData.LvlMax);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarSoulPaoPaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarSoulPaoPaoContainer.StartFB_StarSoulPaoPaoContainer(fbb);
			FB_StarSoulPaoPaoContainer.AddItems(fbb, dataVector);
			var provider = FB_StarSoulPaoPaoContainer.EndFB_StarSoulPaoPaoContainer(fbb);
			FB_StarSoulPaoPaoContainer.FinishFB_StarSoulPaoPaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StarSoulPaoPao.txt", ms.ToArray());
			}
		}

		static void ExprotStarWishRewardShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarWishRewardShowProvider.Instance.ListData;
			
			Offset<FB_StarWishRewardShow>[] offsetArray = new Offset<FB_StarWishRewardShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarWishRewardShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarWishRewardShow.CreateFB_StarWishRewardShow(fbb, curData.ModelTypeId,FB_StarWishRewardShow.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_StarWishRewardShow.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.paramSec);
				KeyMaping[curData.ModelTypeId] = index;
			}
			var dataVector = FB_StarWishRewardShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarWishRewardShowContainer.StartFB_StarWishRewardShowContainer(fbb);
			FB_StarWishRewardShowContainer.AddItems(fbb, dataVector);
			var provider = FB_StarWishRewardShowContainer.EndFB_StarWishRewardShowContainer(fbb);
			FB_StarWishRewardShowContainer.FinishFB_StarWishRewardShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StarWishRewardShow.txt", ms.ToArray());
			}
		}

		static void ExprotStoryAnimation()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StoryAnimationProvider.Instance.ListData;
			
			Offset<FB_StoryAnimation>[] offsetArray = new Offset<FB_StoryAnimation>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StoryAnimationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StoryAnimation.CreateFB_StoryAnimation(fbb, curData.Id,curData.IsCanSkip,curData.Delay,curData.IsReplay,curData.IsOccupationDiff,curData.IsEndBlood);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_StoryAnimationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StoryAnimationContainer.StartFB_StoryAnimationContainer(fbb);
			FB_StoryAnimationContainer.AddItems(fbb, dataVector);
			var provider = FB_StoryAnimationContainer.EndFB_StoryAnimationContainer(fbb);
			FB_StoryAnimationContainer.FinishFB_StoryAnimationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StoryAnimation.txt", ms.ToArray());
			}
		}

		static void ExprotStoryPlayerEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StoryPlayerEffectProvider.Instance.ListData;
			
			Offset<FB_StoryPlayerEffect>[] offsetArray = new Offset<FB_StoryPlayerEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StoryPlayerEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StoryPlayerEffect.CreateFB_StoryPlayerEffect(fbb, curData.Id,FB_StoryPlayerEffect.CreateEffectIdListVector(fbb,curData.EffectIdList.ToArray()),fbb.CreateString(curData.NameLabel));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_StoryPlayerEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StoryPlayerEffectContainer.StartFB_StoryPlayerEffectContainer(fbb);
			FB_StoryPlayerEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_StoryPlayerEffectContainer.EndFB_StoryPlayerEffectContainer(fbb);
			FB_StoryPlayerEffectContainer.FinishFB_StoryPlayerEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StoryPlayerEffect.txt", ms.ToArray());
			}
		}

		static void ExprotStrDictionary()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrDictionaryProvider.Instance.ListData;
			
			Offset<FB_StrDictionary>[] offsetArray = new Offset<FB_StrDictionary>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrDictionaryProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrDictionary.CreateFB_StrDictionary(fbb, curData.Id,fbb.CreateString(curData.StrDictionary));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_StrDictionaryContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrDictionaryContainer.StartFB_StrDictionaryContainer(fbb);
			FB_StrDictionaryContainer.AddItems(fbb, dataVector);
			var provider = FB_StrDictionaryContainer.EndFB_StrDictionaryContainer(fbb);
			FB_StrDictionaryContainer.FinishFB_StrDictionaryContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StrDictionary.txt", ms.ToArray());
			}
		}

		static void ExprotStrengthenNeedEquipOrExp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrengthenNeedEquipOrExpProvider.Instance.ListData;
			
			Offset<FB_StrengthenNeedEquipOrExp>[] offsetArray = new Offset<FB_StrengthenNeedEquipOrExp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrengthenNeedEquipOrExpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrengthenNeedEquipOrExp.CreateFB_StrengthenNeedEquipOrExp(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Icon,curData.Type,curData.StrID,curData.UIID,curData.ActivityID,curData.Param,curData.EventID,curData.FuncBaseID,curData.SortId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrengthenNeedEquipOrExpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrengthenNeedEquipOrExpContainer.StartFB_StrengthenNeedEquipOrExpContainer(fbb);
			FB_StrengthenNeedEquipOrExpContainer.AddItems(fbb, dataVector);
			var provider = FB_StrengthenNeedEquipOrExpContainer.EndFB_StrengthenNeedEquipOrExpContainer(fbb);
			FB_StrengthenNeedEquipOrExpContainer.FinishFB_StrengthenNeedEquipOrExpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StrengthenNeedEquipOrExp.txt", ms.ToArray());
			}
		}

		static void ExprotStrengthenNeedResource()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrengthenNeedResourceProvider.Instance.ListData;
			
			Offset<FB_StrengthenNeedResource>[] offsetArray = new Offset<FB_StrengthenNeedResource>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrengthenNeedResourceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrengthenNeedResource.CreateFB_StrengthenNeedResource(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Icon,FB_StrengthenNeedResource.CreateDescribeListVector(fbb,curData.DescribeList.ToArray()),curData.FuncBaseID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrengthenNeedResourceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrengthenNeedResourceContainer.StartFB_StrengthenNeedResourceContainer(fbb);
			FB_StrengthenNeedResourceContainer.AddItems(fbb, dataVector);
			var provider = FB_StrengthenNeedResourceContainer.EndFB_StrengthenNeedResourceContainer(fbb);
			FB_StrengthenNeedResourceContainer.FinishFB_StrengthenNeedResourceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StrengthenNeedResource.txt", ms.ToArray());
			}
		}

		static void ExprotStrengthenRate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrengthenRateProvider.Instance.ListData;
			
			Offset<FB_StrengthenRate>[] offsetArray = new Offset<FB_StrengthenRate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrengthenRateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrengthenRate.CreateFB_StrengthenRate(fbb, curData.ID,curData.Level,FB_StrengthenRate.CreateRateListVector(fbb,curData.RateList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrengthenRateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrengthenRateContainer.StartFB_StrengthenRateContainer(fbb);
			FB_StrengthenRateContainer.AddItems(fbb, dataVector);
			var provider = FB_StrengthenRateContainer.EndFB_StrengthenRateContainer(fbb);
			FB_StrengthenRateContainer.FinishFB_StrengthenRateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StrengthenRate.txt", ms.ToArray());
			}
		}

		static void ExprotStrLoading()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrLoadingProvider.Instance.ListData;
			
			Offset<FB_StrLoading>[] offsetArray = new Offset<FB_StrLoading>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrLoadingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrLoading.CreateFB_StrLoading(fbb, curData.ID,fbb.CreateString(curData.Text),curData.SceneID,curData.Weight,curData.LvlMin,curData.LvlMax,curData.AdvanceMin,curData.AdvanceMax,curData.VIPMin,curData.VIPMax);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrLoadingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrLoadingContainer.StartFB_StrLoadingContainer(fbb);
			FB_StrLoadingContainer.AddItems(fbb, dataVector);
			var provider = FB_StrLoadingContainer.EndFB_StrLoadingContainer(fbb);
			FB_StrLoadingContainer.FinishFB_StrLoadingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/StrLoading.txt", ms.ToArray());
			}
		}

		static void ExprotSYHFestivalDic()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHFestivalDicProvider.Instance.ListData;
			
			Offset<FB_SYHFestivalDic>[] offsetArray = new Offset<FB_SYHFestivalDic>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHFestivalDicProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHFestivalDic.CreateFB_SYHFestivalDic(fbb, curData.ID,fbb.CreateString(curData.ActivityIcon),fbb.CreateString(curData.ActivityDic));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHFestivalDicContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHFestivalDicContainer.StartFB_SYHFestivalDicContainer(fbb);
			FB_SYHFestivalDicContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHFestivalDicContainer.EndFB_SYHFestivalDicContainer(fbb);
			FB_SYHFestivalDicContainer.FinishFB_SYHFestivalDicContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SYHFestivalDic.txt", ms.ToArray());
			}
		}

		static void ExprotSYHZaDanPingGuoShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHZaDanPingGuoShowProvider.Instance.ListData;
			
			Offset<FB_SYHZaDanPingGuoShow>[] offsetArray = new Offset<FB_SYHZaDanPingGuoShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHZaDanPingGuoShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHZaDanPingGuoShow.CreateFB_SYHZaDanPingGuoShow(fbb, curData.ID,FB_SYHZaDanPingGuoShow.CreateFirstRowIDListVector(fbb,curData.FirstRowIDList.ToArray()),FB_SYHZaDanPingGuoShow.CreateFirstRowNumListVector(fbb,curData.FirstRowNumList.ToArray()),FB_SYHZaDanPingGuoShow.CreateSecondRowIDListVector(fbb,curData.SecondRowIDList.ToArray()),FB_SYHZaDanPingGuoShow.CreateSecondRowNumListVector(fbb,curData.SecondRowNumList.ToArray()),FB_SYHZaDanPingGuoShow.CreateThirdRowIDListVector(fbb,curData.ThirdRowIDList.ToArray()),FB_SYHZaDanPingGuoShow.CreateThirdRowNumListVector(fbb,curData.ThirdRowNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHZaDanPingGuoShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHZaDanPingGuoShowContainer.StartFB_SYHZaDanPingGuoShowContainer(fbb);
			FB_SYHZaDanPingGuoShowContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHZaDanPingGuoShowContainer.EndFB_SYHZaDanPingGuoShowContainer(fbb);
			FB_SYHZaDanPingGuoShowContainer.FinishFB_SYHZaDanPingGuoShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/SYHZaDanPingGuoShow.txt", ms.ToArray());
			}
		}

		static void ExprotTaoZhuangModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TaoZhuangModelProvider.Instance.ListData;
			
			Offset<FB_TaoZhuangModel>[] offsetArray = new Offset<FB_TaoZhuangModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TaoZhuangModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TaoZhuangModel.CreateFB_TaoZhuangModel(fbb, curData.ID,FB_TaoZhuangModel.CreateHairModelIDListVector(fbb,curData.HairModelIDList.ToArray()),FB_TaoZhuangModel.CreateWeaponModelIDListVector(fbb,curData.WeaponModelIDList.ToArray()),FB_TaoZhuangModel.CreateCharModelIDListVector(fbb,curData.CharModelIDList.ToArray()),curData.WingID,curData.MountID,FB_TaoZhuangModel.CreatePeiShiListVector(fbb,curData.PeiShiList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TaoZhuangModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TaoZhuangModelContainer.StartFB_TaoZhuangModelContainer(fbb);
			FB_TaoZhuangModelContainer.AddItems(fbb, dataVector);
			var provider = FB_TaoZhuangModelContainer.EndFB_TaoZhuangModelContainer(fbb);
			FB_TaoZhuangModelContainer.FinishFB_TaoZhuangModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/TaoZhuangModel.txt", ms.ToArray());
			}
		}

		static void ExprotTeamPostion()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TeamPostionProvider.Instance.ListData;
			
			Offset<FB_TeamPostion>[] offsetArray = new Offset<FB_TeamPostion>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TeamPostionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TeamPostion.CreateFB_TeamPostion(fbb, curData.Id,curData.PosX,curData.PosY,curData.PosZ,curData.XRotation,curData.YRotation,curData.ZRotation,curData.Scale,curData.AnimationID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TeamPostionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TeamPostionContainer.StartFB_TeamPostionContainer(fbb);
			FB_TeamPostionContainer.AddItems(fbb, dataVector);
			var provider = FB_TeamPostionContainer.EndFB_TeamPostionContainer(fbb);
			FB_TeamPostionContainer.FinishFB_TeamPostionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/TeamPostion.txt", ms.ToArray());
			}
		}

		static void ExprotTipsEquipList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TipsEquipListProvider.Instance.ListData;
			
			Offset<FB_TipsEquipList>[] offsetArray = new Offset<FB_TipsEquipList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TipsEquipListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TipsEquipList.CreateFB_TipsEquipList(fbb, curData.Id,FB_TipsEquipList.CreateUseParamListVector(fbb,curData.UseParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TipsEquipListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TipsEquipListContainer.StartFB_TipsEquipListContainer(fbb);
			FB_TipsEquipListContainer.AddItems(fbb, dataVector);
			var provider = FB_TipsEquipListContainer.EndFB_TipsEquipListContainer(fbb);
			FB_TipsEquipListContainer.FinishFB_TipsEquipListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/TipsEquipList.txt", ms.ToArray());
			}
		}

		static void ExprotTipsPreview()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TipsPreviewProvider.Instance.ListData;
			
			Offset<FB_TipsPreview>[] offsetArray = new Offset<FB_TipsPreview>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TipsPreviewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TipsPreview.CreateFB_TipsPreview(fbb, curData.Id,curData.Type,curData.UIModelId,curData.CharModelId,curData.WomanUIModelId,curData.WomanCharModelId,curData.PlayTweenAnim);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TipsPreviewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TipsPreviewContainer.StartFB_TipsPreviewContainer(fbb);
			FB_TipsPreviewContainer.AddItems(fbb, dataVector);
			var provider = FB_TipsPreviewContainer.EndFB_TipsPreviewContainer(fbb);
			FB_TipsPreviewContainer.FinishFB_TipsPreviewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/TipsPreview.txt", ms.ToArray());
			}
		}

		static void ExprotTopRightMenu()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TopRightMenuProvider.Instance.ListData;
			
			Offset<FB_TopRightMenu>[] offsetArray = new Offset<FB_TopRightMenu>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TopRightMenuProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TopRightMenu.CreateFB_TopRightMenu(fbb, curData.ID,fbb.CreateString(curData.NameLabel),fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.IsStillShow,curData.RowNum,curData.FunctionBaseID,curData.SortId,curData.Type,FB_TopRightMenu.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.UIInfo);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TopRightMenuContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TopRightMenuContainer.StartFB_TopRightMenuContainer(fbb);
			FB_TopRightMenuContainer.AddItems(fbb, dataVector);
			var provider = FB_TopRightMenuContainer.EndFB_TopRightMenuContainer(fbb);
			FB_TopRightMenuContainer.FinishFB_TopRightMenuContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/TopRightMenu.txt", ms.ToArray());
			}
		}

		static void ExprotUIInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_UIInfoProvider.Instance.ListData;
			
			Offset<FB_UIInfo>[] offsetArray = new Offset<FB_UIInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_UIInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] DiamondTabDefaultSpriteListoffSet = new StringOffset[curData.DiamondTabDefaultSpriteList.Count];
				for (var i = 0; i < curData.DiamondTabDefaultSpriteList.Count; i++)
				{
					DiamondTabDefaultSpriteListoffSet[i] = fbb.CreateString(curData.DiamondTabDefaultSpriteList[i]);
				}
StringOffset[] DiamondTabSelectSpriteListoffSet = new StringOffset[curData.DiamondTabSelectSpriteList.Count];
				for (var i = 0; i < curData.DiamondTabSelectSpriteList.Count; i++)
				{
					DiamondTabSelectSpriteListoffSet[i] = fbb.CreateString(curData.DiamondTabSelectSpriteList[i]);
				}
StringOffset[] DimondTabLabelListoffSet = new StringOffset[curData.DimondTabLabelList.Count];
				for (var i = 0; i < curData.DimondTabLabelList.Count; i++)
				{
					DimondTabLabelListoffSet[i] = fbb.CreateString(curData.DimondTabLabelList[i]);
				}
StringOffset[] CommonTitleTextListoffSet = new StringOffset[curData.CommonTitleTextList.Count];
				for (var i = 0; i < curData.CommonTitleTextList.Count; i++)
				{
					CommonTitleTextListoffSet[i] = fbb.CreateString(curData.CommonTitleTextList[i]);
				}

				offsetArray[index] = FB_UIInfo.CreateFB_UIInfo(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Path),curData.Type,fbb.CreateString(curData.GroupName),curData.IsMainAsset,curData.DestroyOnUnload,curData.Layer,curData.BlurBg,curData.AnimationType,curData.IsShowJuHua,curData.NoShowSceneId,curData.DiamondTabCount,FB_UIInfo.CreateDiamondTabDefaultSpriteListVector(fbb,DiamondTabDefaultSpriteListoffSet),FB_UIInfo.CreateDiamondTabSelectSpriteListVector(fbb,DiamondTabSelectSpriteListoffSet),FB_UIInfo.CreateDimondTabLabelListVector(fbb,DimondTabLabelListoffSet),FB_UIInfo.CreateDimondTabFunctionIdListVector(fbb,curData.DimondTabFunctionIdList.ToArray()),FB_UIInfo.CreateCommonTitleTextListVector(fbb,CommonTitleTextListoffSet),FB_UIInfo.CreateMoreInfoTitleIdListVector(fbb,curData.MoreInfoTitleIdList.ToArray()),FB_UIInfo.CreateMoreInfoContentIdListVector(fbb,curData.MoreInfoContentIdList.ToArray()),curData.bFullPanel);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_UIInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_UIInfoContainer.StartFB_UIInfoContainer(fbb);
			FB_UIInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_UIInfoContainer.EndFB_UIInfoContainer(fbb);
			FB_UIInfoContainer.FinishFB_UIInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/UIInfo.txt", ms.ToArray());
			}
		}

		static void ExprotUIModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_UIModelProvider.Instance.ListData;
			
			Offset<FB_UIModel>[] offsetArray = new Offset<FB_UIModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_UIModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_UIModel.CreateFB_UIModel(fbb, curData.Id,curData.AnimaId,curData.XOffSet,curData.YOffSet,curData.ZOffset,curData.XRotation,curData.YRotation,curData.ZRotation,curData.Scale);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_UIModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_UIModelContainer.StartFB_UIModelContainer(fbb);
			FB_UIModelContainer.AddItems(fbb, dataVector);
			var provider = FB_UIModelContainer.EndFB_UIModelContainer(fbb);
			FB_UIModelContainer.FinishFB_UIModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/UIModel.txt", ms.ToArray());
			}
		}

		static void ExprotUISpecialHide()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_UISpecialHideProvider.Instance.ListData;
			
			Offset<FB_UISpecialHide>[] offsetArray = new Offset<FB_UISpecialHide>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_UISpecialHideProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_UISpecialHide.CreateFB_UISpecialHide(fbb, curData.Id,curData.HideTime,curData.ShowStartTime,curData.ShowTime);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_UISpecialHideContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_UISpecialHideContainer.StartFB_UISpecialHideContainer(fbb);
			FB_UISpecialHideContainer.AddItems(fbb, dataVector);
			var provider = FB_UISpecialHideContainer.EndFB_UISpecialHideContainer(fbb);
			FB_UISpecialHideContainer.FinishFB_UISpecialHideContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/UISpecialHide.txt", ms.ToArray());
			}
		}

		static void ExprotUISubPanelPath()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_UISubPanelPathProvider.Instance.ListData;
			
			Offset<FB_UISubPanelPath>[] offsetArray = new Offset<FB_UISubPanelPath>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_UISubPanelPathProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_UISubPanelPath.CreateFB_UISubPanelPath(fbb, curData.ID,fbb.CreateString(curData.Path));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_UISubPanelPathContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_UISubPanelPathContainer.StartFB_UISubPanelPathContainer(fbb);
			FB_UISubPanelPathContainer.AddItems(fbb, dataVector);
			var provider = FB_UISubPanelPathContainer.EndFB_UISubPanelPathContainer(fbb);
			FB_UISubPanelPathContainer.FinishFB_UISubPanelPathContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/UISubPanelPath.txt", ms.ToArray());
			}
		}

		static void ExprotUIText()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_UITextProvider.Instance.ListData;
			
			Offset<FB_UIText>[] offsetArray = new Offset<FB_UIText>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_UITextProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_UIText.CreateFB_UIText(fbb, curData.Id,fbb.CreateString(curData.Chinese),fbb.CreateString(curData.OldText),fbb.CreateString(curData.Thai));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_UITextContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_UITextContainer.StartFB_UITextContainer(fbb);
			FB_UITextContainer.AddItems(fbb, dataVector);
			var provider = FB_UITextContainer.EndFB_UITextContainer(fbb);
			FB_UITextContainer.FinishFB_UITextContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/UIText.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetModelProvider.Instance.ListData;
			
			Offset<FB_WarPetModel>[] offsetArray = new Offset<FB_WarPetModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetModel.CreateFB_WarPetModel(fbb, curData.ID,curData.ModelId,curData.AttrAckAction,curData.leisureTime,curData.BornEffctID,curData.DisappearEffctID,curData.UIModelTabId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetModelContainer.StartFB_WarPetModelContainer(fbb);
			FB_WarPetModelContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetModelContainer.EndFB_WarPetModelContainer(fbb);
			FB_WarPetModelContainer.FinishFB_WarPetModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WarPetModel.txt", ms.ToArray());
			}
		}

		static void ExprotWeaponAnimation()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WeaponAnimationProvider.Instance.ListData;
			
			Offset<FB_WeaponAnimation>[] offsetArray = new Offset<FB_WeaponAnimation>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WeaponAnimationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] AnimNameListoffSet = new StringOffset[curData.AnimNameList.Count];
				for (var i = 0; i < curData.AnimNameList.Count; i++)
				{
					AnimNameListoffSet[i] = fbb.CreateString(curData.AnimNameList[i]);
				}

				offsetArray[index] = FB_WeaponAnimation.CreateFB_WeaponAnimation(fbb, curData.AnimID,curData.AnimCount,FB_WeaponAnimation.CreateAnimNameListVector(fbb,AnimNameListoffSet),FB_WeaponAnimation.CreateAnimTimeListVector(fbb,curData.AnimTimeList.ToArray()));
				KeyMaping[curData.AnimID] = index;
			}
			var dataVector = FB_WeaponAnimationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WeaponAnimationContainer.StartFB_WeaponAnimationContainer(fbb);
			FB_WeaponAnimationContainer.AddItems(fbb, dataVector);
			var provider = FB_WeaponAnimationContainer.EndFB_WeaponAnimationContainer(fbb);
			FB_WeaponAnimationContainer.FinishFB_WeaponAnimationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WeaponAnimation.txt", ms.ToArray());
			}
		}

		static void ExprotWeaponModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WeaponModelProvider.Instance.ListData;
			
			Offset<FB_WeaponModel>[] offsetArray = new Offset<FB_WeaponModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WeaponModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] ResPathListoffSet = new StringOffset[curData.ResPathList.Count];
				for (var i = 0; i < curData.ResPathList.Count; i++)
				{
					ResPathListoffSet[i] = fbb.CreateString(curData.ResPathList[i]);
				}
StringOffset[] BindPointListoffSet = new StringOffset[curData.BindPointList.Count];
				for (var i = 0; i < curData.BindPointList.Count; i++)
				{
					BindPointListoffSet[i] = fbb.CreateString(curData.BindPointList[i]);
				}

				offsetArray[index] = FB_WeaponModel.CreateFB_WeaponModel(fbb, curData.Id,FB_WeaponModel.CreateResPathListVector(fbb,ResPathListoffSet),FB_WeaponModel.CreateBindPointListVector(fbb,BindPointListoffSet),curData.SoundId,curData.Scale);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WeaponModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WeaponModelContainer.StartFB_WeaponModelContainer(fbb);
			FB_WeaponModelContainer.AddItems(fbb, dataVector);
			var provider = FB_WeaponModelContainer.EndFB_WeaponModelContainer(fbb);
			FB_WeaponModelContainer.FinishFB_WeaponModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WeaponModel.txt", ms.ToArray());
			}
		}

		static void ExprotWeekPlan()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WeekPlanProvider.Instance.ListData;
			
			Offset<FB_WeekPlan>[] offsetArray = new Offset<FB_WeekPlan>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WeekPlanProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WeekPlan.CreateFB_WeekPlan(fbb, curData.Id,FB_WeekPlan.CreateTimeListVector(fbb,curData.TimeList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WeekPlanContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WeekPlanContainer.StartFB_WeekPlanContainer(fbb);
			FB_WeekPlanContainer.AddItems(fbb, dataVector);
			var provider = FB_WeekPlanContainer.EndFB_WeekPlanContainer(fbb);
			FB_WeekPlanContainer.FinishFB_WeekPlanContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WeekPlan.txt", ms.ToArray());
			}
		}

		static void ExprotWingExtraModelPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WingExtraModelPointProvider.Instance.ListData;
			
			Offset<FB_WingExtraModelPoint>[] offsetArray = new Offset<FB_WingExtraModelPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WingExtraModelPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WingExtraModelPoint.CreateFB_WingExtraModelPoint(fbb, curData.ID,fbb.CreateString(curData.MountModel),fbb.CreateString(curData.BindPoint),curData.PosX,curData.PosY,curData.PosZ,curData.RotaX,curData.RotaY,curData.RotaZ,curData.Scale);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WingExtraModelPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WingExtraModelPointContainer.StartFB_WingExtraModelPointContainer(fbb);
			FB_WingExtraModelPointContainer.AddItems(fbb, dataVector);
			var provider = FB_WingExtraModelPointContainer.EndFB_WingExtraModelPointContainer(fbb);
			FB_WingExtraModelPointContainer.FinishFB_WingExtraModelPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WingExtraModelPoint.txt", ms.ToArray());
			}
		}

		static void ExprotWorldCupCountry()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WorldCupCountryProvider.Instance.ListData;
			
			Offset<FB_WorldCupCountry>[] offsetArray = new Offset<FB_WorldCupCountry>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WorldCupCountryProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WorldCupCountry.CreateFB_WorldCupCountry(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WorldCupCountryContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WorldCupCountryContainer.StartFB_WorldCupCountryContainer(fbb);
			FB_WorldCupCountryContainer.AddItems(fbb, dataVector);
			var provider = FB_WorldCupCountryContainer.EndFB_WorldCupCountryContainer(fbb);
			FB_WorldCupCountryContainer.FinishFB_WorldCupCountryContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/WorldCupCountry.txt", ms.ToArray());
			}
		}

		static void ExprotYingYanItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YingYanItemProvider.Instance.ListData;
			
			Offset<FB_YingYanItem>[] offsetArray = new Offset<FB_YingYanItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YingYanItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YingYanItem.CreateFB_YingYanItem(fbb, curData.Id,curData.Type,curData.Width,curData.Height,fbb.CreateString(curData.Icon),FB_YingYanItem.CreateKeyListVector(fbb,curData.KeyList.ToArray()),curData.Scale);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_YingYanItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YingYanItemContainer.StartFB_YingYanItemContainer(fbb);
			FB_YingYanItemContainer.AddItems(fbb, dataVector);
			var provider = FB_YingYanItemContainer.EndFB_YingYanItemContainer(fbb);
			FB_YingYanItemContainer.FinishFB_YingYanItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Client/YingYanItem.txt", ms.ToArray());
			}
		}

		static void ExprotAchievementBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AchievementBaseProvider.Instance.ListData;
			
			Offset<FB_AchievementBase>[] offsetArray = new Offset<FB_AchievementBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AchievementBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AchievementBase.CreateFB_AchievementBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.StrDictID,fbb.CreateString(curData.Icon),curData.Type,curData.GoalNum,FB_AchievementBase.CreateParamListVector(fbb,curData.ParamList.ToArray()),FB_AchievementBase.CreateParamTypeListVector(fbb,curData.ParamTypeList.ToArray()),FB_AchievementBase.CreateBonusTypeListVector(fbb,curData.BonusTypeList.ToArray()),FB_AchievementBase.CreateBonusIDListVector(fbb,curData.BonusIDList.ToArray()),FB_AchievementBase.CreateBonusNumListVector(fbb,curData.BonusNumList.ToArray()),curData.AchievementPoint,curData.ClassID,curData.SubClassID,curData.ShowAtClient,curData.IsSendSystemShout,curData.ShowNearList);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AchievementBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AchievementBaseContainer.StartFB_AchievementBaseContainer(fbb);
			FB_AchievementBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_AchievementBaseContainer.EndFB_AchievementBaseContainer(fbb);
			FB_AchievementBaseContainer.FinishFB_AchievementBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AchievementBase.txt", ms.ToArray());
			}
		}

		static void ExprotAchievementClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AchievementClassProvider.Instance.ListData;
			
			Offset<FB_AchievementClass>[] offsetArray = new Offset<FB_AchievementClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AchievementClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AchievementClass.CreateFB_AchievementClass(fbb, curData.ID,curData.CountPoint,fbb.CreateString(curData.Name),FB_AchievementClass.CreateSubClassIDListVector(fbb,curData.SubClassIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AchievementClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AchievementClassContainer.StartFB_AchievementClassContainer(fbb);
			FB_AchievementClassContainer.AddItems(fbb, dataVector);
			var provider = FB_AchievementClassContainer.EndFB_AchievementClassContainer(fbb);
			FB_AchievementClassContainer.FinishFB_AchievementClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AchievementClass.txt", ms.ToArray());
			}
		}

		static void ExprotAchievementSubClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AchievementSubClassProvider.Instance.ListData;
			
			Offset<FB_AchievementSubClass>[] offsetArray = new Offset<FB_AchievementSubClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AchievementSubClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AchievementSubClass.CreateFB_AchievementSubClass(fbb, curData.ID,fbb.CreateString(curData.Name),FB_AchievementSubClass.CreateAchievementIDListVector(fbb,curData.AchievementIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AchievementSubClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AchievementSubClassContainer.StartFB_AchievementSubClassContainer(fbb);
			FB_AchievementSubClassContainer.AddItems(fbb, dataVector);
			var provider = FB_AchievementSubClassContainer.EndFB_AchievementSubClassContainer(fbb);
			FB_AchievementSubClassContainer.FinishFB_AchievementSubClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AchievementSubClass.txt", ms.ToArray());
			}
		}

		static void ExprotActivityAncientSealProessReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityAncientSealProessRewardProvider.Instance.ListData;
			
			Offset<FB_ActivityAncientSealProessReward>[] offsetArray = new Offset<FB_ActivityAncientSealProessReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityAncientSealProessRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityAncientSealProessReward.CreateFB_ActivityAncientSealProessReward(fbb, curData.ID,curData.ScoreLimit,curData.Level,curData.DicId,curData.BonusIndex,curData.ShowLimit,curData.Param);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityAncientSealProessRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityAncientSealProessRewardContainer.StartFB_ActivityAncientSealProessRewardContainer(fbb);
			FB_ActivityAncientSealProessRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityAncientSealProessRewardContainer.EndFB_ActivityAncientSealProessRewardContainer(fbb);
			FB_ActivityAncientSealProessRewardContainer.FinishFB_ActivityAncientSealProessRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityAncientSealProessReward.txt", ms.ToArray());
			}
		}

		static void ExprotActivityAncientSealSearch()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityAncientSealSearchProvider.Instance.ListData;
			
			Offset<FB_ActivityAncientSealSearch>[] offsetArray = new Offset<FB_ActivityAncientSealSearch>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityAncientSealSearchProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityAncientSealSearch.CreateFB_ActivityAncientSealSearch(fbb, curData.ID,curData.BaseCount,curData.CellsNum,curData.BackNum,curData.Probability,FB_ActivityAncientSealSearch.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_ActivityAncientSealSearch.CreateWeightListVector(fbb,curData.WeightList.ToArray()),FB_ActivityAncientSealSearch.CreateMaxItemsListVector(fbb,curData.MaxItemsList.ToArray()),FB_ActivityAncientSealSearch.CreateWeightMaxListVector(fbb,curData.WeightMaxList.ToArray()),fbb.CreateString(curData.SprEnterName),fbb.CreateString(curData.EnterName),fbb.CreateString(curData.SprHuntName),FB_ActivityAncientSealSearch.CreateHuntPosXListVector(fbb,curData.HuntPosXList.ToArray()),FB_ActivityAncientSealSearch.CreateHuntPosYListVector(fbb,curData.HuntPosYList.ToArray()),curData.MoneyType,curData.CcurPrice,curData.WorldLevel,curData.Param,curData.CostNum,curData.UnlcokMoneyType,curData.UnlcokMoneyNum,FB_ActivityAncientSealSearch.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),FB_ActivityAncientSealSearch.CreateItemMaxNumListVector(fbb,curData.ItemMaxNumList.ToArray()),curData.BaseProbability,curData.EAddProbability);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityAncientSealSearchContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityAncientSealSearchContainer.StartFB_ActivityAncientSealSearchContainer(fbb);
			FB_ActivityAncientSealSearchContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityAncientSealSearchContainer.EndFB_ActivityAncientSealSearchContainer(fbb);
			FB_ActivityAncientSealSearchContainer.FinishFB_ActivityAncientSealSearchContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityAncientSealSearch.txt", ms.ToArray());
			}
		}

		static void ExprotActivityBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityBaseProvider.Instance.ListData;
			
			Offset<FB_ActivityBase>[] offsetArray = new Offset<FB_ActivityBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityBase.CreateFB_ActivityBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.ActivityType,curData.InitLogic,curData.OpenType,curData.MinLvlLimit,curData.MaxLvlLimit,curData.SortWeight,curData.icon,curData.IntroduceId,curData.RefreshType,curData.Rounds,curData.JoinCountId,curData.AddActivityId,curData.ActivityPoint,curData.TotalPoint,curData.CanJoinAfterDone,curData.OpenTimeType,curData.PrepareTime,FB_ActivityBase.CreateOpenTimeListVector(fbb,curData.OpenTimeList.ToArray()),FB_ActivityBase.CreateEndTimeListVector(fbb,curData.EndTimeList.ToArray()),curData.JoinLimitType,curData.JoinLimit,FB_ActivityBase.CreateRewardIDListVector(fbb,curData.RewardIDList.ToArray()),curData.IsRecommond,curData.IsRedPoint,curData.ActivityRewardType,curData.ShowType,curData.ShowLevel,curData.SearchType,curData.TargetNpcPosX,curData.TargetNpcPosZ,curData.TargetNpcSceneID,curData.TargetNpcDataID,curData.MissionID,fbb.CreateString(curData.TxtTips),curData.UIID,curData.SubUIID,fbb.CreateString(curData.ActivityTxtType),fbb.CreateString(curData.TimeDesc),curData.CopySceneID,curData.MopUpID,curData.MopUpMDID,curData.TunSongIndex,fbb.CreateString(curData.MenuIcon),fbb.CreateString(curData.MenuIconName),curData.AfterSomeDayOpen,fbb.CreateString(curData.BtnName),curData.IsSupportOtherWorld,curData.FunctionBaseID,curData.IsStillShow,FB_ActivityBase.CreateDropBtnIDListVector(fbb,curData.DropBtnIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityBaseContainer.StartFB_ActivityBaseContainer(fbb);
			FB_ActivityBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityBaseContainer.EndFB_ActivityBaseContainer(fbb);
			FB_ActivityBaseContainer.FinishFB_ActivityBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityBase.txt", ms.ToArray());
			}
		}

		static void ExprotActivityBonus()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityBonusProvider.Instance.ListData;
			
			Offset<FB_ActivityBonus>[] offsetArray = new Offset<FB_ActivityBonus>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityBonusProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityBonus.CreateFB_ActivityBonus(fbb, curData.ID,FB_ActivityBonus.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityBonusContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityBonusContainer.StartFB_ActivityBonusContainer(fbb);
			FB_ActivityBonusContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityBonusContainer.EndFB_ActivityBonusContainer(fbb);
			FB_ActivityBonusContainer.FinishFB_ActivityBonusContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityBonus.txt", ms.ToArray());
			}
		}

		static void ExprotActivityChickenBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityChickenBaseProvider.Instance.ListData;
			
			Offset<FB_ActivityChickenBase>[] offsetArray = new Offset<FB_ActivityChickenBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityChickenBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityChickenBase.CreateFB_ActivityChickenBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.LevelLimit,curData.CopySceneID,curData.ActivityDesc,curData.ActivityId,curData.JoinCount,curData.OpenType,curData.OpenTime,curData.EndTime,curData.ChickenNum,curData.EagleNum,curData.VictoryMail,curData.FailMail,curData.DurationTime);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityChickenBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityChickenBaseContainer.StartFB_ActivityChickenBaseContainer(fbb);
			FB_ActivityChickenBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityChickenBaseContainer.EndFB_ActivityChickenBaseContainer(fbb);
			FB_ActivityChickenBaseContainer.FinishFB_ActivityChickenBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityChickenBase.txt", ms.ToArray());
			}
		}

		static void ExprotActivityChickenGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityChickenGiftProvider.Instance.ListData;
			
			Offset<FB_ActivityChickenGift>[] offsetArray = new Offset<FB_ActivityChickenGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityChickenGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityChickenGift.CreateFB_ActivityChickenGift(fbb, curData.ID,curData.DicId,curData.BonusIndex,curData.Score);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityChickenGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityChickenGiftContainer.StartFB_ActivityChickenGiftContainer(fbb);
			FB_ActivityChickenGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityChickenGiftContainer.EndFB_ActivityChickenGiftContainer(fbb);
			FB_ActivityChickenGiftContainer.FinishFB_ActivityChickenGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityChickenGift.txt", ms.ToArray());
			}
		}

		static void ExprotActivityChickenMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityChickenMissionProvider.Instance.ListData;
			
			Offset<FB_ActivityChickenMission>[] offsetArray = new Offset<FB_ActivityChickenMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityChickenMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityChickenMission.CreateFB_ActivityChickenMission(fbb, curData.ID,fbb.CreateString(curData.TaskName),curData.MissionType,curData.Score,curData.limitTimes,curData.DicId,curData.MissionLevel,curData.ItemId,curData.ItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityChickenMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityChickenMissionContainer.StartFB_ActivityChickenMissionContainer(fbb);
			FB_ActivityChickenMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityChickenMissionContainer.EndFB_ActivityChickenMissionContainer(fbb);
			FB_ActivityChickenMissionContainer.FinishFB_ActivityChickenMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityChickenMission.txt", ms.ToArray());
			}
		}

		static void ExprotActivityChickenProessReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityChickenProessRewardProvider.Instance.ListData;
			
			Offset<FB_ActivityChickenProessReward>[] offsetArray = new Offset<FB_ActivityChickenProessReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityChickenProessRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityChickenProessReward.CreateFB_ActivityChickenProessReward(fbb, curData.ID,curData.Level,curData.DicId,curData.BonusIndex,curData.Score);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityChickenProessRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityChickenProessRewardContainer.StartFB_ActivityChickenProessRewardContainer(fbb);
			FB_ActivityChickenProessRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityChickenProessRewardContainer.EndFB_ActivityChickenProessRewardContainer(fbb);
			FB_ActivityChickenProessRewardContainer.FinishFB_ActivityChickenProessRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityChickenProessReward.txt", ms.ToArray());
			}
		}

		static void ExprotActivityDaZhiGouReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityDaZhiGouRewardProvider.Instance.ListData;
			
			Offset<FB_ActivityDaZhiGouReward>[] offsetArray = new Offset<FB_ActivityDaZhiGouReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityDaZhiGouRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityDaZhiGouReward.CreateFB_ActivityDaZhiGouReward(fbb, curData.Id,curData.TriggerId,curData.MDIndex,curData.ShowId,FB_ActivityDaZhiGouReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_ActivityDaZhiGouReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.DailyDropID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActivityDaZhiGouRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityDaZhiGouRewardContainer.StartFB_ActivityDaZhiGouRewardContainer(fbb);
			FB_ActivityDaZhiGouRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityDaZhiGouRewardContainer.EndFB_ActivityDaZhiGouRewardContainer(fbb);
			FB_ActivityDaZhiGouRewardContainer.FinishFB_ActivityDaZhiGouRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityDaZhiGouReward.txt", ms.ToArray());
			}
		}

		static void ExprotActivityObjectivesList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityObjectivesListProvider.Instance.ListData;
			
			Offset<FB_ActivityObjectivesList>[] offsetArray = new Offset<FB_ActivityObjectivesList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityObjectivesListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityObjectivesList.CreateFB_ActivityObjectivesList(fbb, curData.ID,fbb.CreateString(curData.Name),curData.MaxObjectives,FB_ActivityObjectivesList.CreateObjIDListVector(fbb,curData.ObjIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityObjectivesListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityObjectivesListContainer.StartFB_ActivityObjectivesListContainer(fbb);
			FB_ActivityObjectivesListContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityObjectivesListContainer.EndFB_ActivityObjectivesListContainer(fbb);
			FB_ActivityObjectivesListContainer.FinishFB_ActivityObjectivesListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityObjectivesList.txt", ms.ToArray());
			}
		}

		static void ExprotActivityPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityPointProvider.Instance.ListData;
			
			Offset<FB_ActivityPoint>[] offsetArray = new Offset<FB_ActivityPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityPoint.CreateFB_ActivityPoint(fbb, curData.ID,curData.RewardPoint,fbb.CreateString(curData.Icon),curData.RewardID,curData.RewardCount,curData.MinLevel,curData.MaxLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityPointContainer.StartFB_ActivityPointContainer(fbb);
			FB_ActivityPointContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityPointContainer.EndFB_ActivityPointContainer(fbb);
			FB_ActivityPointContainer.FinishFB_ActivityPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityPoint.txt", ms.ToArray());
			}
		}

		static void ExprotActivityPray()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityPrayProvider.Instance.ListData;
			
			Offset<FB_ActivityPray>[] offsetArray = new Offset<FB_ActivityPray>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityPrayProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityPray.CreateFB_ActivityPray(fbb, curData.ID,curData.TriggerId,curData.WorldLvMin,curData.WorldLvMax,curData.PrayPrice,curData.PrayScore,curData.PrayManyTime,curData.RewardOnce,curData.RewardMany,curData.ButtonOnce,curData.ButtonMany,curData.ProbailityDisplay,curData.ShowItem,curData.CostItem);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityPrayContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityPrayContainer.StartFB_ActivityPrayContainer(fbb);
			FB_ActivityPrayContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityPrayContainer.EndFB_ActivityPrayContainer(fbb);
			FB_ActivityPrayContainer.FinishFB_ActivityPrayContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityPray.txt", ms.ToArray());
			}
		}

		static void ExprotActivityPrayShop()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityPrayShopProvider.Instance.ListData;
			
			Offset<FB_ActivityPrayShop>[] offsetArray = new Offset<FB_ActivityPrayShop>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityPrayShopProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityPrayShop.CreateFB_ActivityPrayShop(fbb, curData.Id,curData.TriggerId,curData.WorldLvMin,curData.WorldLvMax,FB_ActivityPrayShop.CreateChangeItemListVector(fbb,curData.ChangeItemList.ToArray()),FB_ActivityPrayShop.CreateCostNumListVector(fbb,curData.CostNumList.ToArray()),FB_ActivityPrayShop.CreateLimitListVector(fbb,curData.LimitList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActivityPrayShopContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityPrayShopContainer.StartFB_ActivityPrayShopContainer(fbb);
			FB_ActivityPrayShopContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityPrayShopContainer.EndFB_ActivityPrayShopContainer(fbb);
			FB_ActivityPrayShopContainer.FinishFB_ActivityPrayShopContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityPrayShop.txt", ms.ToArray());
			}
		}

		static void ExprotActivityQuestionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityQuestionBaseProvider.Instance.ListData;
			
			Offset<FB_ActivityQuestionBase>[] offsetArray = new Offset<FB_ActivityQuestionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityQuestionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityQuestionBase.CreateFB_ActivityQuestionBase(fbb, curData.ID,curData.QuestionDic,FB_ActivityQuestionBase.CreateAnswerListVector(fbb,curData.AnswerList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityQuestionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityQuestionBaseContainer.StartFB_ActivityQuestionBaseContainer(fbb);
			FB_ActivityQuestionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityQuestionBaseContainer.EndFB_ActivityQuestionBaseContainer(fbb);
			FB_ActivityQuestionBaseContainer.FinishFB_ActivityQuestionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityQuestionBase.txt", ms.ToArray());
			}
		}

		static void ExprotActivityShowBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityShowBaseProvider.Instance.ListData;
			
			Offset<FB_ActivityShowBase>[] offsetArray = new Offset<FB_ActivityShowBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityShowBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityShowBase.CreateFB_ActivityShowBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.UnLockLevel,FB_ActivityShowBase.CreateEffectIDListVector(fbb,curData.EffectIDList.ToArray()),curData.FakeObjShowId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActivityShowBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityShowBaseContainer.StartFB_ActivityShowBaseContainer(fbb);
			FB_ActivityShowBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityShowBaseContainer.EndFB_ActivityShowBaseContainer(fbb);
			FB_ActivityShowBaseContainer.FinishFB_ActivityShowBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityShowBase.txt", ms.ToArray());
			}
		}

		static void ExprotActivityShowLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActivityShowLevelProvider.Instance.ListData;
			
			Offset<FB_ActivityShowLevel>[] offsetArray = new Offset<FB_ActivityShowLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActivityShowLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActivityShowLevel.CreateFB_ActivityShowLevel(fbb, curData.Id,curData.Level,curData.Exp,curData.HpMax,curData.PMAttack,curData.PMDefence);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActivityShowLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActivityShowLevelContainer.StartFB_ActivityShowLevelContainer(fbb);
			FB_ActivityShowLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_ActivityShowLevelContainer.EndFB_ActivityShowLevelContainer(fbb);
			FB_ActivityShowLevelContainer.FinishFB_ActivityShowLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActivityShowLevel.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuConfig()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuConfigProvider.Instance.ListData;
			
			Offset<FB_ActWanGuConfig>[] offsetArray = new Offset<FB_ActWanGuConfig>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuConfigProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuConfig.CreateFB_ActWanGuConfig(fbb, curData.ID,curData.PropUnlockCost,curData.BaoXiangId,curData.PropRewardId,curData.PropRewardMaxId,curData.PropLevelCostItemId,curData.NameID,fbb.CreateString(curData.SprTitle),curData.DesID,curData.PropCostNum,curData.PropAddExp);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActWanGuConfigContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuConfigContainer.StartFB_ActWanGuConfigContainer(fbb);
			FB_ActWanGuConfigContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuConfigContainer.EndFB_ActWanGuConfigContainer(fbb);
			FB_ActWanGuConfigContainer.FinishFB_ActWanGuConfigContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuConfig.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuMissionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuMissionBaseProvider.Instance.ListData;
			
			Offset<FB_ActWanGuMissionBase>[] offsetArray = new Offset<FB_ActWanGuMissionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuMissionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuMissionBase.CreateFB_ActWanGuMissionBase(fbb, curData.ID,curData.StrDictID,curData.GoalNum,FB_ActWanGuMissionBase.CreateBonusIDListVector(fbb,curData.BonusIDList.ToArray()),FB_ActWanGuMissionBase.CreateBonusNumListVector(fbb,curData.BonusNumList.ToArray()),curData.RewardPoint,curData.ClassID,curData.SubClassID,curData.ActWanGuId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActWanGuMissionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuMissionBaseContainer.StartFB_ActWanGuMissionBaseContainer(fbb);
			FB_ActWanGuMissionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuMissionBaseContainer.EndFB_ActWanGuMissionBaseContainer(fbb);
			FB_ActWanGuMissionBaseContainer.FinishFB_ActWanGuMissionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuMissionBase.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuMissionClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuMissionClassProvider.Instance.ListData;
			
			Offset<FB_ActWanGuMissionClass>[] offsetArray = new Offset<FB_ActWanGuMissionClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuMissionClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuMissionClass.CreateFB_ActWanGuMissionClass(fbb, curData.ID,fbb.CreateString(curData.Name),FB_ActWanGuMissionClass.CreateSubClassIDListVector(fbb,curData.SubClassIDList.ToArray()),curData.ActWanGuId,curData.LimitDay);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActWanGuMissionClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuMissionClassContainer.StartFB_ActWanGuMissionClassContainer(fbb);
			FB_ActWanGuMissionClassContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuMissionClassContainer.EndFB_ActWanGuMissionClassContainer(fbb);
			FB_ActWanGuMissionClassContainer.FinishFB_ActWanGuMissionClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuMissionClass.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuMissionSubClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuMissionSubClassProvider.Instance.ListData;
			
			Offset<FB_ActWanGuMissionSubClass>[] offsetArray = new Offset<FB_ActWanGuMissionSubClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuMissionSubClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuMissionSubClass.CreateFB_ActWanGuMissionSubClass(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Type,FB_ActWanGuMissionSubClass.CreateMissionIDListVector(fbb,curData.MissionIDList.ToArray()),curData.ActWanGuId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ActWanGuMissionSubClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuMissionSubClassContainer.StartFB_ActWanGuMissionSubClassContainer(fbb);
			FB_ActWanGuMissionSubClassContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuMissionSubClassContainer.EndFB_ActWanGuMissionSubClassContainer(fbb);
			FB_ActWanGuMissionSubClassContainer.FinishFB_ActWanGuMissionSubClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuMissionSubClass.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuPropLevelBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuPropLevelBaseProvider.Instance.ListData;
			
			Offset<FB_ActWanGuPropLevelBase>[] offsetArray = new Offset<FB_ActWanGuPropLevelBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuPropLevelBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuPropLevelBase.CreateFB_ActWanGuPropLevelBase(fbb, curData.Id,curData.Level,curData.Exp,curData.QuickItemCount,curData.ActWanGuId,FB_ActWanGuPropLevelBase.CreateLevelLimitListVector(fbb,curData.LevelLimitList.ToArray()),FB_ActWanGuPropLevelBase.CreateLevelRewardListVector(fbb,curData.LevelRewardList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActWanGuPropLevelBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuPropLevelBaseContainer.StartFB_ActWanGuPropLevelBaseContainer(fbb);
			FB_ActWanGuPropLevelBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuPropLevelBaseContainer.EndFB_ActWanGuPropLevelBaseContainer(fbb);
			FB_ActWanGuPropLevelBaseContainer.FinishFB_ActWanGuPropLevelBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuPropLevelBase.txt", ms.ToArray());
			}
		}

		static void ExprotActWanGuPropLevelReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActWanGuPropLevelRewardProvider.Instance.ListData;
			
			Offset<FB_ActWanGuPropLevelReward>[] offsetArray = new Offset<FB_ActWanGuPropLevelReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActWanGuPropLevelRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActWanGuPropLevelReward.CreateFB_ActWanGuPropLevelReward(fbb, curData.Id,FB_ActWanGuPropLevelReward.CreateRewardIdListVector(fbb,curData.RewardIdList.ToArray()),FB_ActWanGuPropLevelReward.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()),FB_ActWanGuPropLevelReward.CreateRewardTypeListVector(fbb,curData.RewardTypeList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActWanGuPropLevelRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActWanGuPropLevelRewardContainer.StartFB_ActWanGuPropLevelRewardContainer(fbb);
			FB_ActWanGuPropLevelRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ActWanGuPropLevelRewardContainer.EndFB_ActWanGuPropLevelRewardContainer(fbb);
			FB_ActWanGuPropLevelRewardContainer.FinishFB_ActWanGuPropLevelRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActWanGuPropLevelReward.txt", ms.ToArray());
			}
		}

		static void ExprotActZhuTianBaoLun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ActZhuTianBaoLunProvider.Instance.ListData;
			
			Offset<FB_ActZhuTianBaoLun>[] offsetArray = new Offset<FB_ActZhuTianBaoLun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ActZhuTianBaoLunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ActZhuTianBaoLun.CreateFB_ActZhuTianBaoLun(fbb, curData.Id,curData.Type,curData.RewardNum,curData.Weight,curData.LuckyTrigger);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ActZhuTianBaoLunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ActZhuTianBaoLunContainer.StartFB_ActZhuTianBaoLunContainer(fbb);
			FB_ActZhuTianBaoLunContainer.AddItems(fbb, dataVector);
			var provider = FB_ActZhuTianBaoLunContainer.EndFB_ActZhuTianBaoLunContainer(fbb);
			FB_ActZhuTianBaoLunContainer.FinishFB_ActZhuTianBaoLunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ActZhuTianBaoLun.txt", ms.ToArray());
			}
		}

		static void ExprotAdvancedBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AdvancedBaseProvider.Instance.ListData;
			
			Offset<FB_AdvancedBase>[] offsetArray = new Offset<FB_AdvancedBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AdvancedBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] AdvancedDescIDListoffSet = new StringOffset[curData.AdvancedDescIDList.Count];
				for (var i = 0; i < curData.AdvancedDescIDList.Count; i++)
				{
					AdvancedDescIDListoffSet[i] = fbb.CreateString(curData.AdvancedDescIDList[i]);
				}
StringOffset[] LevelSpListoffSet = new StringOffset[curData.LevelSpList.Count];
				for (var i = 0; i < curData.LevelSpList.Count; i++)
				{
					LevelSpListoffSet[i] = fbb.CreateString(curData.LevelSpList[i]);
				}

				offsetArray[index] = FB_AdvancedBase.CreateFB_AdvancedBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.IconSpecial,curData.IconTipsDictID,curData.AdvancedLevel,curData.ItemID,curData.PayItem,curData.AdvanceDescCount,FB_AdvancedBase.CreateAdvancedDescIDListVector(fbb,AdvancedDescIDListoffSet),curData.LevelLimit,FB_AdvancedBase.CreateAddAttrTypeListVector(fbb,curData.AddAttrTypeList.ToArray()),FB_AdvancedBase.CreateAddAttrListVector(fbb,curData.AddAttrList.ToArray()),curData.PowerLimit,fbb.CreateString(curData.Icon),fbb.CreateString(curData.LableColor),curData.SectionID,FB_AdvancedBase.CreateLevelSpListVector(fbb,LevelSpListoffSet));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AdvancedBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AdvancedBaseContainer.StartFB_AdvancedBaseContainer(fbb);
			FB_AdvancedBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_AdvancedBaseContainer.EndFB_AdvancedBaseContainer(fbb);
			FB_AdvancedBaseContainer.FinishFB_AdvancedBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AdvancedBase.txt", ms.ToArray());
			}
		}

		static void ExprotAncientSealShopItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AncientSealShopItemProvider.Instance.ListData;
			
			Offset<FB_AncientSealShopItem>[] offsetArray = new Offset<FB_AncientSealShopItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AncientSealShopItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AncientSealShopItem.CreateFB_AncientSealShopItem(fbb, curData.ID,fbb.CreateString(curData.GiftName),curData.LimitItemNum,curData.MoneyType,curData.Price,curData.CcurPrice,curData.Discount,curData.ItemId,curData.ItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AncientSealShopItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AncientSealShopItemContainer.StartFB_AncientSealShopItemContainer(fbb);
			FB_AncientSealShopItemContainer.AddItems(fbb, dataVector);
			var provider = FB_AncientSealShopItemContainer.EndFB_AncientSealShopItemContainer(fbb);
			FB_AncientSealShopItemContainer.FinishFB_AncientSealShopItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AncientSealShopItem.txt", ms.ToArray());
			}
		}

		static void ExprotArenaReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ArenaRewardProvider.Instance.ListData;
			
			Offset<FB_ArenaReward>[] offsetArray = new Offset<FB_ArenaReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ArenaRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ArenaReward.CreateFB_ArenaReward(fbb, curData.ID,curData.infor,curData.RewardType,FB_ArenaReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_ArenaReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.RankMin,curData.RankMax);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ArenaRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ArenaRewardContainer.StartFB_ArenaRewardContainer(fbb);
			FB_ArenaRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ArenaRewardContainer.EndFB_ArenaRewardContainer(fbb);
			FB_ArenaRewardContainer.FinishFB_ArenaRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ArenaReward.txt", ms.ToArray());
			}
		}

		static void ExprotArtifactBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ArtifactBaseProvider.Instance.ListData;
			
			Offset<FB_ArtifactBase>[] offsetArray = new Offset<FB_ArtifactBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ArtifactBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ArtifactBase.CreateFB_ArtifactBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameSprite),fbb.CreateString(curData.Title),fbb.CreateString(curData.SubTitle),curData.DescId,fbb.CreateString(curData.Getpath),fbb.CreateString(curData.GetpathName),curData.FakeobjID,fbb.CreateString(curData.Icon),curData.Class,curData.Index,FB_ArtifactBase.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),curData.MissionID,curData.CopySceneID,curData.LevelLimit,curData.AttributeLessId,curData.SceneGroupPointId,curData.Scale,curData.RotateY,curData.OffsetY,curData.SystemBroadCastId,FB_ArtifactBase.CreateLevelAddPassiveSkillListVector(fbb,curData.LevelAddPassiveSkillList.ToArray()),FB_ArtifactBase.CreateLevelConditionListVector(fbb,curData.LevelConditionList.ToArray()),curData.DropBoxId,curData.LevelUpType,curData.GetExp);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ArtifactBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ArtifactBaseContainer.StartFB_ArtifactBaseContainer(fbb);
			FB_ArtifactBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ArtifactBaseContainer.EndFB_ArtifactBaseContainer(fbb);
			FB_ArtifactBaseContainer.FinishFB_ArtifactBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ArtifactBase.txt", ms.ToArray());
			}
		}

		static void ExprotArtifactBaseLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ArtifactBaseLevelUpProvider.Instance.ListData;
			
			Offset<FB_ArtifactBaseLevelUp>[] offsetArray = new Offset<FB_ArtifactBaseLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ArtifactBaseLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ArtifactBaseLevelUp.CreateFB_ArtifactBaseLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemCount,FB_ArtifactBaseLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ArtifactBaseLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ArtifactBaseLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ArtifactBaseLevelUpContainer.StartFB_ArtifactBaseLevelUpContainer(fbb);
			FB_ArtifactBaseLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ArtifactBaseLevelUpContainer.EndFB_ArtifactBaseLevelUpContainer(fbb);
			FB_ArtifactBaseLevelUpContainer.FinishFB_ArtifactBaseLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ArtifactBaseLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotArtifactBaseLevelUpSpecial()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ArtifactBaseLevelUpSpecialProvider.Instance.ListData;
			
			Offset<FB_ArtifactBaseLevelUpSpecial>[] offsetArray = new Offset<FB_ArtifactBaseLevelUpSpecial>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ArtifactBaseLevelUpSpecialProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ArtifactBaseLevelUpSpecial.CreateFB_ArtifactBaseLevelUpSpecial(fbb, curData.Id,curData.Exp,FB_ArtifactBaseLevelUpSpecial.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ArtifactBaseLevelUpSpecial.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ArtifactBaseLevelUpSpecialContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ArtifactBaseLevelUpSpecialContainer.StartFB_ArtifactBaseLevelUpSpecialContainer(fbb);
			FB_ArtifactBaseLevelUpSpecialContainer.AddItems(fbb, dataVector);
			var provider = FB_ArtifactBaseLevelUpSpecialContainer.EndFB_ArtifactBaseLevelUpSpecialContainer(fbb);
			FB_ArtifactBaseLevelUpSpecialContainer.FinishFB_ArtifactBaseLevelUpSpecialContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ArtifactBaseLevelUpSpecial.txt", ms.ToArray());
			}
		}

		static void ExprotAttrPowerBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AttrPowerBaseProvider.Instance.ListData;
			
			Offset<FB_AttrPowerBase>[] offsetArray = new Offset<FB_AttrPowerBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AttrPowerBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AttrPowerBase.CreateFB_AttrPowerBase(fbb, curData.ID,curData.Ratio,curData.Model,curData.IsBasePercentAdd,curData.PowerType,curData.InitialValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AttrPowerBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AttrPowerBaseContainer.StartFB_AttrPowerBaseContainer(fbb);
			FB_AttrPowerBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_AttrPowerBaseContainer.EndFB_AttrPowerBaseContainer(fbb);
			FB_AttrPowerBaseContainer.FinishFB_AttrPowerBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AttrPowerBase.txt", ms.ToArray());
			}
		}

		static void ExprotAuctionClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AuctionClassProvider.Instance.ListData;
			
			Offset<FB_AuctionClass>[] offsetArray = new Offset<FB_AuctionClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AuctionClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AuctionClass.CreateFB_AuctionClass(fbb, curData.ID,fbb.CreateString(curData.Name),curData.IsRare,FB_AuctionClass.CreateTypeListVector(fbb,curData.TypeList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AuctionClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AuctionClassContainer.StartFB_AuctionClassContainer(fbb);
			FB_AuctionClassContainer.AddItems(fbb, dataVector);
			var provider = FB_AuctionClassContainer.EndFB_AuctionClassContainer(fbb);
			FB_AuctionClassContainer.FinishFB_AuctionClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AuctionClass.txt", ms.ToArray());
			}
		}

		static void ExprotAuctionItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AuctionItemProvider.Instance.ListData;
			
			Offset<FB_AuctionItem>[] offsetArray = new Offset<FB_AuctionItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AuctionItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AuctionItem.CreateFB_AuctionItem(fbb, curData.ID,fbb.CreateString(curData.Name),curData.BasePrice,curData.LowPrice,curData.HighPrice,curData.AuctionClass,curData.AuctionType,curData.Cooldown);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AuctionItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AuctionItemContainer.StartFB_AuctionItemContainer(fbb);
			FB_AuctionItemContainer.AddItems(fbb, dataVector);
			var provider = FB_AuctionItemContainer.EndFB_AuctionItemContainer(fbb);
			FB_AuctionItemContainer.FinishFB_AuctionItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AuctionItem.txt", ms.ToArray());
			}
		}

		static void ExprotAuctionType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AuctionTypeProvider.Instance.ListData;
			
			Offset<FB_AuctionType>[] offsetArray = new Offset<FB_AuctionType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AuctionTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AuctionType.CreateFB_AuctionType(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Icon,curData.IsShowOrder,curData.Menpai,curData.Component,FB_AuctionType.CreateOrderListVector(fbb,curData.OrderList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_AuctionTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AuctionTypeContainer.StartFB_AuctionTypeContainer(fbb);
			FB_AuctionTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_AuctionTypeContainer.EndFB_AuctionTypeContainer(fbb);
			FB_AuctionTypeContainer.FinishFB_AuctionTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AuctionType.txt", ms.ToArray());
			}
		}

		static void ExprotAutoBindBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_AutoBindBaseProvider.Instance.ListData;
			
			Offset<FB_AutoBindBase>[] offsetArray = new Offset<FB_AutoBindBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_AutoBindBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_AutoBindBase.CreateFB_AutoBindBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Type,fbb.CreateString(curData.TypeName),curData.Class,fbb.CreateString(curData.ClassName));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_AutoBindBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_AutoBindBaseContainer.StartFB_AutoBindBaseContainer(fbb);
			FB_AutoBindBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_AutoBindBaseContainer.EndFB_AutoBindBaseContainer(fbb);
			FB_AutoBindBaseContainer.FinishFB_AutoBindBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/AutoBindBase.txt", ms.ToArray());
			}
		}

		static void ExprotBagTreasure()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BagTreasureProvider.Instance.ListData;
			
			Offset<FB_BagTreasure>[] offsetArray = new Offset<FB_BagTreasure>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BagTreasureProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BagTreasure.CreateFB_BagTreasure(fbb, curData.ID,curData.BagType,FB_BagTreasure.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.IsBanding,curData.LimitType,curData.VipLimit,curData.LevelLimit,FB_BagTreasure.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_BagTreasure.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BagTreasureContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BagTreasureContainer.StartFB_BagTreasureContainer(fbb);
			FB_BagTreasureContainer.AddItems(fbb, dataVector);
			var provider = FB_BagTreasureContainer.EndFB_BagTreasureContainer(fbb);
			FB_BagTreasureContainer.FinishFB_BagTreasureContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BagTreasure.txt", ms.ToArray());
			}
		}

		static void Exprotbaiwanjijie()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_baiwanjijieProvider.Instance.ListData;
			
			Offset<FB_baiwanjijie>[] offsetArray = new Offset<FB_baiwanjijie>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_baiwanjijieProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] NameIdListoffSet = new StringOffset[curData.NameIdList.Count];
				for (var i = 0; i < curData.NameIdList.Count; i++)
				{
					NameIdListoffSet[i] = fbb.CreateString(curData.NameIdList[i]);
				}

				offsetArray[index] = FB_baiwanjijie.CreateFB_baiwanjijie(fbb, curData.ID,curData.ResPath,FB_baiwanjijie.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_baiwanjijie.CreateMaxIiemListVector(fbb,curData.MaxIiemList.ToArray()),FB_baiwanjijie.CreateNameIdListVector(fbb,NameIdListoffSet),FB_baiwanjijie.CreateUiInfoIdListVector(fbb,curData.UiInfoIdList.ToArray()),FB_baiwanjijie.CreateParamIdListVector(fbb,curData.ParamIdList.ToArray()),curData.Combat,curData.ParmSec);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_baiwanjijieContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_baiwanjijieContainer.StartFB_baiwanjijieContainer(fbb);
			FB_baiwanjijieContainer.AddItems(fbb, dataVector);
			var provider = FB_baiwanjijieContainer.EndFB_baiwanjijieContainer(fbb);
			FB_baiwanjijieContainer.FinishFB_baiwanjijieContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/baiwanjijie.txt", ms.ToArray());
			}
		}

		static void Exprotbaiwanjijie2()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_baiwanjijie2Provider.Instance.ListData;
			
			Offset<FB_baiwanjijie2>[] offsetArray = new Offset<FB_baiwanjijie2>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_baiwanjijie2Provider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] NameIdListoffSet = new StringOffset[curData.NameIdList.Count];
				for (var i = 0; i < curData.NameIdList.Count; i++)
				{
					NameIdListoffSet[i] = fbb.CreateString(curData.NameIdList[i]);
				}

				offsetArray[index] = FB_baiwanjijie2.CreateFB_baiwanjijie2(fbb, curData.ID,curData.ResPath,FB_baiwanjijie2.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_baiwanjijie2.CreateMaxIiemListVector(fbb,curData.MaxIiemList.ToArray()),FB_baiwanjijie2.CreateNameIdListVector(fbb,NameIdListoffSet),FB_baiwanjijie2.CreateUiInfoIdListVector(fbb,curData.UiInfoIdList.ToArray()),FB_baiwanjijie2.CreateParamIdListVector(fbb,curData.ParamIdList.ToArray()),curData.Combat,curData.ParmSec);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_baiwanjijie2Container.CreateItemsVector(fbb, offsetArray);
	
			FB_baiwanjijie2Container.StartFB_baiwanjijie2Container(fbb);
			FB_baiwanjijie2Container.AddItems(fbb, dataVector);
			var provider = FB_baiwanjijie2Container.EndFB_baiwanjijie2Container(fbb);
			FB_baiwanjijie2Container.FinishFB_baiwanjijie2ContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/baiwanjijie2.txt", ms.ToArray());
			}
		}

		static void ExprotBattlefieldCampLevelBuff()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BattlefieldCampLevelBuffProvider.Instance.ListData;
			
			Offset<FB_BattlefieldCampLevelBuff>[] offsetArray = new Offset<FB_BattlefieldCampLevelBuff>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BattlefieldCampLevelBuffProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] BuffAddListoffSet = new StringOffset[curData.BuffAddList.Count];
				for (var i = 0; i < curData.BuffAddList.Count; i++)
				{
					BuffAddListoffSet[i] = fbb.CreateString(curData.BuffAddList[i]);
				}

				offsetArray[index] = FB_BattlefieldCampLevelBuff.CreateFB_BattlefieldCampLevelBuff(fbb, curData.ID,curData.BuildNum,FB_BattlefieldCampLevelBuff.CreateIncPercentBufListVector(fbb,curData.IncPercentBufList.ToArray()),FB_BattlefieldCampLevelBuff.CreateDelBufListVector(fbb,curData.DelBufList.ToArray()),FB_BattlefieldCampLevelBuff.CreateBuffAddListVector(fbb,BuffAddListoffSet));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BattlefieldCampLevelBuffContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BattlefieldCampLevelBuffContainer.StartFB_BattlefieldCampLevelBuffContainer(fbb);
			FB_BattlefieldCampLevelBuffContainer.AddItems(fbb, dataVector);
			var provider = FB_BattlefieldCampLevelBuffContainer.EndFB_BattlefieldCampLevelBuffContainer(fbb);
			FB_BattlefieldCampLevelBuffContainer.FinishFB_BattlefieldCampLevelBuffContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BattlefieldCampLevelBuff.txt", ms.ToArray());
			}
		}

		static void ExprotBattlefieldCampRew()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BattlefieldCampRewProvider.Instance.ListData;
			
			Offset<FB_BattlefieldCampRew>[] offsetArray = new Offset<FB_BattlefieldCampRew>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BattlefieldCampRewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BattlefieldCampRew.CreateFB_BattlefieldCampRew(fbb, curData.ID,FB_BattlefieldCampRew.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_BattlefieldCampRew.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.DropBoxId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BattlefieldCampRewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BattlefieldCampRewContainer.StartFB_BattlefieldCampRewContainer(fbb);
			FB_BattlefieldCampRewContainer.AddItems(fbb, dataVector);
			var provider = FB_BattlefieldCampRewContainer.EndFB_BattlefieldCampRewContainer(fbb);
			FB_BattlefieldCampRewContainer.FinishFB_BattlefieldCampRewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BattlefieldCampRew.txt", ms.ToArray());
			}
		}

		static void ExprotBattlefieldCollectionRew()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BattlefieldCollectionRewProvider.Instance.ListData;
			
			Offset<FB_BattlefieldCollectionRew>[] offsetArray = new Offset<FB_BattlefieldCollectionRew>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BattlefieldCollectionRewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BattlefieldCollectionRew.CreateFB_BattlefieldCollectionRew(fbb, curData.ID,FB_BattlefieldCollectionRew.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_BattlefieldCollectionRew.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.AddBuildNum,curData.DropBoxId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BattlefieldCollectionRewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BattlefieldCollectionRewContainer.StartFB_BattlefieldCollectionRewContainer(fbb);
			FB_BattlefieldCollectionRewContainer.AddItems(fbb, dataVector);
			var provider = FB_BattlefieldCollectionRewContainer.EndFB_BattlefieldCollectionRewContainer(fbb);
			FB_BattlefieldCollectionRewContainer.FinishFB_BattlefieldCollectionRewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BattlefieldCollectionRew.txt", ms.ToArray());
			}
		}

		static void ExprotBattlefieldRankRew()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BattlefieldRankRewProvider.Instance.ListData;
			
			Offset<FB_BattlefieldRankRew>[] offsetArray = new Offset<FB_BattlefieldRankRew>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BattlefieldRankRewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BattlefieldRankRew.CreateFB_BattlefieldRankRew(fbb, curData.ID,FB_BattlefieldRankRew.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_BattlefieldRankRew.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.DropBoxId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BattlefieldRankRewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BattlefieldRankRewContainer.StartFB_BattlefieldRankRewContainer(fbb);
			FB_BattlefieldRankRewContainer.AddItems(fbb, dataVector);
			var provider = FB_BattlefieldRankRewContainer.EndFB_BattlefieldRankRewContainer(fbb);
			FB_BattlefieldRankRewContainer.FinishFB_BattlefieldRankRewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BattlefieldRankRew.txt", ms.ToArray());
			}
		}

		static void ExprotBenYuanItemBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BenYuanItemBaseProvider.Instance.ListData;
			
			Offset<FB_BenYuanItemBase>[] offsetArray = new Offset<FB_BenYuanItemBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BenYuanItemBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BenYuanItemBase.CreateFB_BenYuanItemBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Quality,curData.Component,curData.Step,curData.StarCount,curData.Exp,curData.MaxLevel,FB_BenYuanItemBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_BenYuanItemBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.DoubleCost,curData.GetPathID,fbb.CreateString(curData.ItemDesc),fbb.CreateString(curData.DropModle),curData.SellPrice);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_BenYuanItemBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BenYuanItemBaseContainer.StartFB_BenYuanItemBaseContainer(fbb);
			FB_BenYuanItemBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_BenYuanItemBaseContainer.EndFB_BenYuanItemBaseContainer(fbb);
			FB_BenYuanItemBaseContainer.FinishFB_BenYuanItemBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BenYuanItemBase.txt", ms.ToArray());
			}
		}

		static void ExprotBenYuanItemLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BenYuanItemLevelUpProvider.Instance.ListData;
			
			Offset<FB_BenYuanItemLevelUp>[] offsetArray = new Offset<FB_BenYuanItemLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BenYuanItemLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BenYuanItemLevelUp.CreateFB_BenYuanItemLevelUp(fbb, curData.Id,curData.Exp,curData.ItemId,curData.ItemCount,FB_BenYuanItemLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_BenYuanItemLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_BenYuanItemLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BenYuanItemLevelUpContainer.StartFB_BenYuanItemLevelUpContainer(fbb);
			FB_BenYuanItemLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_BenYuanItemLevelUpContainer.EndFB_BenYuanItemLevelUpContainer(fbb);
			FB_BenYuanItemLevelUpContainer.FinishFB_BenYuanItemLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BenYuanItemLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotBlackCardSignInReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BlackCardSignInRewardProvider.Instance.ListData;
			
			Offset<FB_BlackCardSignInReward>[] offsetArray = new Offset<FB_BlackCardSignInReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BlackCardSignInRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BlackCardSignInReward.CreateFB_BlackCardSignInReward(fbb, curData.ID,curData.Type,curData.Days,FB_BlackCardSignInReward.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_BlackCardSignInReward.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.TotalItemID,curData.TotalItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BlackCardSignInRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BlackCardSignInRewardContainer.StartFB_BlackCardSignInRewardContainer(fbb);
			FB_BlackCardSignInRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_BlackCardSignInRewardContainer.EndFB_BlackCardSignInRewardContainer(fbb);
			FB_BlackCardSignInRewardContainer.FinishFB_BlackCardSignInRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BlackCardSignInReward.txt", ms.ToArray());
			}
		}

		static void ExprotBlackCardTick()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BlackCardTickProvider.Instance.ListData;
			
			Offset<FB_BlackCardTick>[] offsetArray = new Offset<FB_BlackCardTick>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BlackCardTickProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BlackCardTick.CreateFB_BlackCardTick(fbb, curData.ID,fbb.CreateString(curData.Name),curData.ClassID,curData.LogicType,curData.Goal,FB_BlackCardTick.CreateParamListVector(fbb,curData.ParamList.ToArray()),FB_BlackCardTick.CreateBonusIDListVector(fbb,curData.BonusIDList.ToArray()),FB_BlackCardTick.CreateBonusNumListVector(fbb,curData.BonusNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BlackCardTickContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BlackCardTickContainer.StartFB_BlackCardTickContainer(fbb);
			FB_BlackCardTickContainer.AddItems(fbb, dataVector);
			var provider = FB_BlackCardTickContainer.EndFB_BlackCardTickContainer(fbb);
			FB_BlackCardTickContainer.FinishFB_BlackCardTickContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BlackCardTick.txt", ms.ToArray());
			}
		}

		static void ExprotBloodBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BloodBaseProvider.Instance.ListData;
			
			Offset<FB_BloodBase>[] offsetArray = new Offset<FB_BloodBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BloodBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BloodBase.CreateFB_BloodBase(fbb, curData.ID,curData.Exp,curData.Attack,curData.Defence,curData.HP);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BloodBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BloodBaseContainer.StartFB_BloodBaseContainer(fbb);
			FB_BloodBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_BloodBaseContainer.EndFB_BloodBaseContainer(fbb);
			FB_BloodBaseContainer.FinishFB_BloodBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BloodBase.txt", ms.ToArray());
			}
		}

		static void ExprotBloodMix()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BloodMixProvider.Instance.ListData;
			
			Offset<FB_BloodMix>[] offsetArray = new Offset<FB_BloodMix>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BloodMixProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BloodMix.CreateFB_BloodMix(fbb, curData.ID,fbb.CreateString(curData.Name),curData.CostItemID,curData.CostItemCount,FB_BloodMix.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),FB_BloodMix.CreateLevelUpConditionTypeListVector(fbb,curData.LevelUpConditionTypeList.ToArray()),FB_BloodMix.CreateLevelUpConditionValueListVector(fbb,curData.LevelUpConditionValueList.ToArray()),curData.BloodPossessedId,FB_BloodMix.CreateImpactListVector(fbb,curData.ImpactList.ToArray()),FB_BloodMix.CreateFakeobjIdListVector(fbb,curData.FakeobjIdList.ToArray()),curData.NameIconId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BloodMixContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BloodMixContainer.StartFB_BloodMixContainer(fbb);
			FB_BloodMixContainer.AddItems(fbb, dataVector);
			var provider = FB_BloodMixContainer.EndFB_BloodMixContainer(fbb);
			FB_BloodMixContainer.FinishFB_BloodMixContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BloodMix.txt", ms.ToArray());
			}
		}

		static void ExprotBloodMixLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BloodMixLevelProvider.Instance.ListData;
			
			Offset<FB_BloodMixLevel>[] offsetArray = new Offset<FB_BloodMixLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BloodMixLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BloodMixLevel.CreateFB_BloodMixLevel(fbb, curData.ID,curData.CostItemID,curData.CostItemCount,FB_BloodMixLevel.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_BloodMixLevel.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BloodMixLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BloodMixLevelContainer.StartFB_BloodMixLevelContainer(fbb);
			FB_BloodMixLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_BloodMixLevelContainer.EndFB_BloodMixLevelContainer(fbb);
			FB_BloodMixLevelContainer.FinishFB_BloodMixLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BloodMixLevel.txt", ms.ToArray());
			}
		}

		static void ExprotBloodPossessed()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BloodPossessedProvider.Instance.ListData;
			
			Offset<FB_BloodPossessed>[] offsetArray = new Offset<FB_BloodPossessed>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BloodPossessedProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BloodPossessed.CreateFB_BloodPossessed(fbb, curData.ID,curData.CoolDownTimeID,curData.DurationTime,curData.AdvancedLevel,FB_BloodPossessed.CreateAttrTypeListVector(fbb,curData.AttrTypeList.ToArray()),FB_BloodPossessed.CreateAttrListVector(fbb,curData.AttrList.ToArray()),FB_BloodPossessed.CreateImpactIDListVector(fbb,curData.ImpactIDList.ToArray()),FB_BloodPossessed.CreateJobModelIDListVector(fbb,curData.JobModelIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BloodPossessedContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BloodPossessedContainer.StartFB_BloodPossessedContainer(fbb);
			FB_BloodPossessedContainer.AddItems(fbb, dataVector);
			var provider = FB_BloodPossessedContainer.EndFB_BloodPossessedContainer(fbb);
			FB_BloodPossessedContainer.FinishFB_BloodPossessedContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BloodPossessed.txt", ms.ToArray());
			}
		}

		static void ExprotBloodPossessedModel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BloodPossessedModelProvider.Instance.ListData;
			
			Offset<FB_BloodPossessedModel>[] offsetArray = new Offset<FB_BloodPossessedModel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BloodPossessedModelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BloodPossessedModel.CreateFB_BloodPossessedModel(fbb, curData.ID,curData.CharModelID,curData.EffectID,FB_BloodPossessedModel.CreateSkillIDListVector(fbb,curData.SkillIDList.ToArray()),curData.AnimID,curData.EndEffectID,curData.CameraOffsetX,curData.CameraOffsetY,curData.CameraOffsetZ,curData.CameraRotateX,curData.CameraRotateY,curData.CameraRotateZ,curData.CameraDistance);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BloodPossessedModelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BloodPossessedModelContainer.StartFB_BloodPossessedModelContainer(fbb);
			FB_BloodPossessedModelContainer.AddItems(fbb, dataVector);
			var provider = FB_BloodPossessedModelContainer.EndFB_BloodPossessedModelContainer(fbb);
			FB_BloodPossessedModelContainer.FinishFB_BloodPossessedModelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BloodPossessedModel.txt", ms.ToArray());
			}
		}

		static void ExprotBossGongChengReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BossGongChengRewardProvider.Instance.ListData;
			
			Offset<FB_BossGongChengReward>[] offsetArray = new Offset<FB_BossGongChengReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BossGongChengRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BossGongChengReward.CreateFB_BossGongChengReward(fbb, curData.ID,FB_BossGongChengReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_BossGongChengReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.DelHpDropBoxId,curData.BigBossDieDropBoxId,curData.NormalBossDieDropBoxId,curData.SmallBossDieDropBoxId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BossGongChengRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BossGongChengRewardContainer.StartFB_BossGongChengRewardContainer(fbb);
			FB_BossGongChengRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_BossGongChengRewardContainer.EndFB_BossGongChengRewardContainer(fbb);
			FB_BossGongChengRewardContainer.FinishFB_BossGongChengRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BossGongChengReward.txt", ms.ToArray());
			}
		}

		static void ExprotBossInvest()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BossInvestProvider.Instance.ListData;
			
			Offset<FB_BossInvest>[] offsetArray = new Offset<FB_BossInvest>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BossInvestProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BossInvest.CreateFB_BossInvest(fbb, curData.ID,fbb.CreateString(curData.Name),curData.MoneyNum,curData.StrId,curData.AchievementBaseId,curData.ExtraReward);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BossInvestContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BossInvestContainer.StartFB_BossInvestContainer(fbb);
			FB_BossInvestContainer.AddItems(fbb, dataVector);
			var provider = FB_BossInvestContainer.EndFB_BossInvestContainer(fbb);
			FB_BossInvestContainer.FinishFB_BossInvestContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BossInvest.txt", ms.ToArray());
			}
		}

		static void ExprotBossInvestType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_BossInvestTypeProvider.Instance.ListData;
			
			Offset<FB_BossInvestType>[] offsetArray = new Offset<FB_BossInvestType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_BossInvestTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_BossInvestType.CreateFB_BossInvestType(fbb, curData.ID,curData.MoneyNum,curData.MoneyConsum,curData.Type);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_BossInvestTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_BossInvestTypeContainer.StartFB_BossInvestTypeContainer(fbb);
			FB_BossInvestTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_BossInvestTypeContainer.EndFB_BossInvestTypeContainer(fbb);
			FB_BossInvestTypeContainer.FinishFB_BossInvestTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/BossInvestType.txt", ms.ToArray());
			}
		}

		static void ExprotCardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardBaseProvider.Instance.ListData;
			
			Offset<FB_CardBase>[] offsetArray = new Offset<FB_CardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardBase.CreateFB_CardBase(fbb, curData.ID,fbb.CreateString(curData.CardName),fbb.CreateString(curData.Tips),curData.LogType,curData.Quality,fbb.CreateString(curData.CardImage),fbb.CreateString(curData.CardIcon),curData.CompoundId,curData.DecomposeId,curData.GetWayStrId,FB_CardBase.CreateStarmapIDListVector(fbb,curData.StarmapID_List.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardBaseContainer.StartFB_CardBaseContainer(fbb);
			FB_CardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CardBaseContainer.EndFB_CardBaseContainer(fbb);
			FB_CardBaseContainer.FinishFB_CardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardBase.txt", ms.ToArray());
			}
		}

		static void ExprotCardFlopBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardFlopBaseProvider.Instance.ListData;
			
			Offset<FB_CardFlopBase>[] offsetArray = new Offset<FB_CardFlopBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardFlopBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardFlopBase.CreateFB_CardFlopBase(fbb, curData.Id,curData.ActiveLimit,curData.DropBox,fbb.CreateString(curData.CardSpriteName));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CardFlopBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardFlopBaseContainer.StartFB_CardFlopBaseContainer(fbb);
			FB_CardFlopBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CardFlopBaseContainer.EndFB_CardFlopBaseContainer(fbb);
			FB_CardFlopBaseContainer.FinishFB_CardFlopBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardFlopBase.txt", ms.ToArray());
			}
		}

		static void ExprotCardJiBanActivateReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardJiBanActivateRewardProvider.Instance.ListData;
			
			Offset<FB_CardJiBanActivateReward>[] offsetArray = new Offset<FB_CardJiBanActivateReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardJiBanActivateRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardJiBanActivateReward.CreateFB_CardJiBanActivateReward(fbb, curData.Id,curData.ActivateLimitNum,FB_CardJiBanActivateReward.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_CardJiBanActivateReward.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CardJiBanActivateRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardJiBanActivateRewardContainer.StartFB_CardJiBanActivateRewardContainer(fbb);
			FB_CardJiBanActivateRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_CardJiBanActivateRewardContainer.EndFB_CardJiBanActivateRewardContainer(fbb);
			FB_CardJiBanActivateRewardContainer.FinishFB_CardJiBanActivateRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardJiBanActivateReward.txt", ms.ToArray());
			}
		}

		static void ExprotCardRankRewardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardRankRewardBaseProvider.Instance.ListData;
			
			Offset<FB_CardRankRewardBase>[] offsetArray = new Offset<FB_CardRankRewardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardRankRewardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] RewardByJobNameListoffSet = new StringOffset[curData.RewardByJobNameList.Count];
				for (var i = 0; i < curData.RewardByJobNameList.Count; i++)
				{
					RewardByJobNameListoffSet[i] = fbb.CreateString(curData.RewardByJobNameList[i]);
				}
StringOffset[] RewardNameListoffSet = new StringOffset[curData.RewardNameList.Count];
				for (var i = 0; i < curData.RewardNameList.Count; i++)
				{
					RewardNameListoffSet[i] = fbb.CreateString(curData.RewardNameList[i]);
				}

				offsetArray[index] = FB_CardRankRewardBase.CreateFB_CardRankRewardBase(fbb, curData.ID,FB_CardRankRewardBase.CreateGoalListVector(fbb,curData.GoalList.ToArray()),fbb.CreateString(curData.Label),FB_CardRankRewardBase.CreateRewardByJobListVector(fbb,curData.RewardByJobList.ToArray()),FB_CardRankRewardBase.CreateRewardByJobNameListVector(fbb,RewardByJobNameListoffSet),FB_CardRankRewardBase.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_CardRankRewardBase.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()),FB_CardRankRewardBase.CreateRewardNameListVector(fbb,RewardNameListoffSet),curData.IsBind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CardRankRewardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardRankRewardBaseContainer.StartFB_CardRankRewardBaseContainer(fbb);
			FB_CardRankRewardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CardRankRewardBaseContainer.EndFB_CardRankRewardBaseContainer(fbb);
			FB_CardRankRewardBaseContainer.FinishFB_CardRankRewardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardRankRewardBase.txt", ms.ToArray());
			}
		}

		static void ExprotCardShop()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardShopProvider.Instance.ListData;
			
			Offset<FB_CardShop>[] offsetArray = new Offset<FB_CardShop>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardShopProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardShop.CreateFB_CardShop(fbb, curData.ID,fbb.CreateString(curData.Name),curData.DropboxID,curData.GoldType,curData.PayGold);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CardShopContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardShopContainer.StartFB_CardShopContainer(fbb);
			FB_CardShopContainer.AddItems(fbb, dataVector);
			var provider = FB_CardShopContainer.EndFB_CardShopContainer(fbb);
			FB_CardShopContainer.FinishFB_CardShopContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardShop.txt", ms.ToArray());
			}
		}

		static void ExprotCardXunBaoBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardXunBaoBaseProvider.Instance.ListData;
			
			Offset<FB_CardXunBaoBase>[] offsetArray = new Offset<FB_CardXunBaoBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardXunBaoBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardXunBaoBase.CreateFB_CardXunBaoBase(fbb, curData.Id,curData.LowDropBox,FB_CardXunBaoBase.CreateHighDropBoxListVector(fbb,curData.HighDropBoxList.ToArray()),FB_CardXunBaoBase.CreateHighMinCountListVector(fbb,curData.HighMinCountList.ToArray()),FB_CardXunBaoBase.CreateHighMaxCountListVector(fbb,curData.HighMaxCountList.ToArray()),FB_CardXunBaoBase.CreateBaseRandomListVector(fbb,curData.BaseRandomList.ToArray()),FB_CardXunBaoBase.CreateAddRandomListVector(fbb,curData.AddRandomList.ToArray()),curData.ShopItemId,curData.NeedItemId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CardXunBaoBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardXunBaoBaseContainer.StartFB_CardXunBaoBaseContainer(fbb);
			FB_CardXunBaoBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CardXunBaoBaseContainer.EndFB_CardXunBaoBaseContainer(fbb);
			FB_CardXunBaoBaseContainer.FinishFB_CardXunBaoBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardXunBaoBase.txt", ms.ToArray());
			}
		}

		static void ExprotCardXunBaoShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CardXunBaoShowProvider.Instance.ListData;
			
			Offset<FB_CardXunBaoShow>[] offsetArray = new Offset<FB_CardXunBaoShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CardXunBaoShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CardXunBaoShow.CreateFB_CardXunBaoShow(fbb, curData.ID,curData.CardType,curData.CardShow);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CardXunBaoShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CardXunBaoShowContainer.StartFB_CardXunBaoShowContainer(fbb);
			FB_CardXunBaoShowContainer.AddItems(fbb, dataVector);
			var provider = FB_CardXunBaoShowContainer.EndFB_CardXunBaoShowContainer(fbb);
			FB_CardXunBaoShowContainer.FinishFB_CardXunBaoShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CardXunBaoShow.txt", ms.ToArray());
			}
		}

		static void ExprotChangeJob6ItemBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeJob6ItemBaseProvider.Instance.ListData;
			
			Offset<FB_ChangeJob6ItemBase>[] offsetArray = new Offset<FB_ChangeJob6ItemBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeJob6ItemBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeJob6ItemBase.CreateFB_ChangeJob6ItemBase(fbb, curData.Id,fbb.CreateString(curData.Name),FB_ChangeJob6ItemBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ChangeJob6ItemBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.ItemId,curData.ItemCount);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChangeJob6ItemBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeJob6ItemBaseContainer.StartFB_ChangeJob6ItemBaseContainer(fbb);
			FB_ChangeJob6ItemBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeJob6ItemBaseContainer.EndFB_ChangeJob6ItemBaseContainer(fbb);
			FB_ChangeJob6ItemBaseContainer.FinishFB_ChangeJob6ItemBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeJob6ItemBase.txt", ms.ToArray());
			}
		}

		static void ExprotChangeJob8ComprehendUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeJob8ComprehendUpProvider.Instance.ListData;
			
			Offset<FB_ChangeJob8ComprehendUp>[] offsetArray = new Offset<FB_ChangeJob8ComprehendUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeJob8ComprehendUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeJob8ComprehendUp.CreateFB_ChangeJob8ComprehendUp(fbb, curData.Id,fbb.CreateString(curData.PartName),curData.ComprehendPos,curData.ActiveProgressNum,curData.CostItemId,curData.CostItemNum,FB_ChangeJob8ComprehendUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ChangeJob8ComprehendUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChangeJob8ComprehendUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeJob8ComprehendUpContainer.StartFB_ChangeJob8ComprehendUpContainer(fbb);
			FB_ChangeJob8ComprehendUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeJob8ComprehendUpContainer.EndFB_ChangeJob8ComprehendUpContainer(fbb);
			FB_ChangeJob8ComprehendUpContainer.FinishFB_ChangeJob8ComprehendUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeJob8ComprehendUp.txt", ms.ToArray());
			}
		}

		static void ExprotChangeJob8Mission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeJob8MissionProvider.Instance.ListData;
			
			Offset<FB_ChangeJob8Mission>[] offsetArray = new Offset<FB_ChangeJob8Mission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeJob8MissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeJob8Mission.CreateFB_ChangeJob8Mission(fbb, curData.MissionId,curData.MissionDesc,curData.MissionTriggerType,curData.Param,curData.MissionTargetNum,curData.RewardId,curData.RewardNum);
				KeyMaping[curData.MissionId] = index;
			}
			var dataVector = FB_ChangeJob8MissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeJob8MissionContainer.StartFB_ChangeJob8MissionContainer(fbb);
			FB_ChangeJob8MissionContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeJob8MissionContainer.EndFB_ChangeJob8MissionContainer(fbb);
			FB_ChangeJob8MissionContainer.FinishFB_ChangeJob8MissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeJob8Mission.txt", ms.ToArray());
			}
		}

		static void ExprotChangeJobBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeJobBaseProvider.Instance.ListData;
			
			Offset<FB_ChangeJobBase>[] offsetArray = new Offset<FB_ChangeJobBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeJobBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeJobBase.CreateFB_ChangeJobBase(fbb, curData.ID,fbb.CreateString(curData.MenPaiName),fbb.CreateString(curData.HeadPic),fbb.CreateString(curData.HeadPicFemale),fbb.CreateString(curData.TargetHeadPic),fbb.CreateString(curData.TargetHeadPicFemale),fbb.CreateString(curData.ShowIcon),fbb.CreateString(curData.ShowIconFemale),curData.Type,FB_ChangeJobBase.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.OpenMissionID,curData.DictID,curData.FinalPhase,FB_ChangeJobBase.CreatePhaseListVector(fbb,curData.PhaseList.ToArray()),curData.SkipMoney,curData.FakeObjId,curData.FakeObjIdFemale,curData.CardFakeObjId,curData.CardFakeObjIdFemale,curData.FakeObjIdFinish,curData.FakeObjIdFemaleFinish);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChangeJobBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeJobBaseContainer.StartFB_ChangeJobBaseContainer(fbb);
			FB_ChangeJobBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeJobBaseContainer.EndFB_ChangeJobBaseContainer(fbb);
			FB_ChangeJobBaseContainer.FinishFB_ChangeJobBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeJobBase.txt", ms.ToArray());
			}
		}

		static void ExprotChangeJobPhase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeJobPhaseProvider.Instance.ListData;
			
			Offset<FB_ChangeJobPhase>[] offsetArray = new Offset<FB_ChangeJobPhase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeJobPhaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeJobPhase.CreateFB_ChangeJobPhase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.DictID),curData.EndMissionID,curData.ItemID,FB_ChangeJobPhase.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_ChangeJobPhase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_ChangeJobPhase.CreateMissionListVector(fbb,curData.MissionList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChangeJobPhaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeJobPhaseContainer.StartFB_ChangeJobPhaseContainer(fbb);
			FB_ChangeJobPhaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeJobPhaseContainer.EndFB_ChangeJobPhaseContainer(fbb);
			FB_ChangeJobPhaseContainer.FinishFB_ChangeJobPhaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeJobPhase.txt", ms.ToArray());
			}
		}

		static void ExprotChangeMenPaiCondition()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChangeMenPaiConditionProvider.Instance.ListData;
			
			Offset<FB_ChangeMenPaiCondition>[] offsetArray = new Offset<FB_ChangeMenPaiCondition>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChangeMenPaiConditionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChangeMenPaiCondition.CreateFB_ChangeMenPaiCondition(fbb, curData.ID,curData.Type,curData.Param);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChangeMenPaiConditionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChangeMenPaiConditionContainer.StartFB_ChangeMenPaiConditionContainer(fbb);
			FB_ChangeMenPaiConditionContainer.AddItems(fbb, dataVector);
			var provider = FB_ChangeMenPaiConditionContainer.EndFB_ChangeMenPaiConditionContainer(fbb);
			FB_ChangeMenPaiConditionContainer.FinishFB_ChangeMenPaiConditionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChangeMenPaiCondition.txt", ms.ToArray());
			}
		}

		static void ExprotChapterCardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChapterCardBaseProvider.Instance.ListData;
			
			Offset<FB_ChapterCardBase>[] offsetArray = new Offset<FB_ChapterCardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChapterCardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChapterCardBase.CreateFB_ChapterCardBase(fbb, curData.ID,fbb.CreateString(curData.CardName),fbb.CreateString(curData.CardDesc),curData.UIModelID,curData.InitQuality,curData.ChapterID,curData.FragmentItemID,curData.ActiveNeedCount,curData.FakeObjID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChapterCardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChapterCardBaseContainer.StartFB_ChapterCardBaseContainer(fbb);
			FB_ChapterCardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChapterCardBaseContainer.EndFB_ChapterCardBaseContainer(fbb);
			FB_ChapterCardBaseContainer.FinishFB_ChapterCardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChapterCardBase.txt", ms.ToArray());
			}
		}

		static void ExprotChapterCardLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChapterCardLevelUpProvider.Instance.ListData;
			
			Offset<FB_ChapterCardLevelUp>[] offsetArray = new Offset<FB_ChapterCardLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChapterCardLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChapterCardLevelUp.CreateFB_ChapterCardLevelUp(fbb, curData.ID,curData.CardID,curData.Quality,curData.LevelUpNeedCount,FB_ChapterCardLevelUp.CreateAttrTypeListVector(fbb,curData.AttrTypeList.ToArray()),FB_ChapterCardLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChapterCardLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChapterCardLevelUpContainer.StartFB_ChapterCardLevelUpContainer(fbb);
			FB_ChapterCardLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ChapterCardLevelUpContainer.EndFB_ChapterCardLevelUpContainer(fbb);
			FB_ChapterCardLevelUpContainer.FinishFB_ChapterCardLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChapterCardLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotCharmLoveRankRewardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CharmLoveRankRewardBaseProvider.Instance.ListData;
			
			Offset<FB_CharmLoveRankRewardBase>[] offsetArray = new Offset<FB_CharmLoveRankRewardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CharmLoveRankRewardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] RewardByJobNameListoffSet = new StringOffset[curData.RewardByJobNameList.Count];
				for (var i = 0; i < curData.RewardByJobNameList.Count; i++)
				{
					RewardByJobNameListoffSet[i] = fbb.CreateString(curData.RewardByJobNameList[i]);
				}
StringOffset[] RewardNameListoffSet = new StringOffset[curData.RewardNameList.Count];
				for (var i = 0; i < curData.RewardNameList.Count; i++)
				{
					RewardNameListoffSet[i] = fbb.CreateString(curData.RewardNameList[i]);
				}

				offsetArray[index] = FB_CharmLoveRankRewardBase.CreateFB_CharmLoveRankRewardBase(fbb, curData.ID,FB_CharmLoveRankRewardBase.CreateGoalListVector(fbb,curData.GoalList.ToArray()),fbb.CreateString(curData.Label),FB_CharmLoveRankRewardBase.CreateRewardByJobListVector(fbb,curData.RewardByJobList.ToArray()),FB_CharmLoveRankRewardBase.CreateRewardByJobNameListVector(fbb,RewardByJobNameListoffSet),FB_CharmLoveRankRewardBase.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_CharmLoveRankRewardBase.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()),FB_CharmLoveRankRewardBase.CreateRewardNameListVector(fbb,RewardNameListoffSet),curData.IsBind,curData.ActivityType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CharmLoveRankRewardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CharmLoveRankRewardBaseContainer.StartFB_CharmLoveRankRewardBaseContainer(fbb);
			FB_CharmLoveRankRewardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CharmLoveRankRewardBaseContainer.EndFB_CharmLoveRankRewardBaseContainer(fbb);
			FB_CharmLoveRankRewardBaseContainer.FinishFB_CharmLoveRankRewardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CharmLoveRankRewardBase.txt", ms.ToArray());
			}
		}

		static void ExprotChatLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChatLimitProvider.Instance.ListData;
			
			Offset<FB_ChatLimit>[] offsetArray = new Offset<FB_ChatLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChatLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChatLimit.CreateFB_ChatLimit(fbb, curData.Id,fbb.CreateString(curData.Name),curData.LevelLimit,curData.TimeLimit,curData.ItemLimit,curData.UseItemNumber,curData.VitalityLimit,curData.ReplaceItemId,curData.ReplaceItemCount,fbb.CreateString(curData.FontColor),curData.HighVolLimit,curData.MaxSpeechDuration,curData.VIPLevel,curData.VIPTimeLimit,curData.RechargeRMBLimit,curData.RechargeYuanBaoLimit,curData.TotalRMBLimit);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChatLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChatLimitContainer.StartFB_ChatLimitContainer(fbb);
			FB_ChatLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_ChatLimitContainer.EndFB_ChatLimitContainer(fbb);
			FB_ChatLimitContainer.FinishFB_ChatLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChatLimit.txt", ms.ToArray());
			}
		}

		static void ExprotChiJiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChiJiBaseProvider.Instance.ListData;
			
			Offset<FB_ChiJiBase>[] offsetArray = new Offset<FB_ChiJiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChiJiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChiJiBase.CreateFB_ChiJiBase(fbb, curData.Id,curData.QuanTime,curData.PeopleNum,FB_ChiJiBase.CreateNextQuanIdListVector(fbb,curData.NextQuanIdList.ToArray()),curData.GroupPointId,curData.Radii,curData.PosX,curData.PosY,curData.BuffId,FB_ChiJiBase.CreateGroupPointIdListVector(fbb,curData.GroupPointIdList.ToArray()),FB_ChiJiBase.CreateGroupPointNumListVector(fbb,curData.GroupPointNumList.ToArray()),FB_ChiJiBase.CreateGroupPointPosListVector(fbb,curData.GroupPointPosList.ToArray()),curData.ChuanSongDianId,curData.ChuanSongDianPos);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChiJiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChiJiBaseContainer.StartFB_ChiJiBaseContainer(fbb);
			FB_ChiJiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChiJiBaseContainer.EndFB_ChiJiBaseContainer(fbb);
			FB_ChiJiBaseContainer.FinishFB_ChiJiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChiJiBase.txt", ms.ToArray());
			}
		}

		static void ExprotChiJiRewardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChiJiRewardBaseProvider.Instance.ListData;
			
			Offset<FB_ChiJiRewardBase>[] offsetArray = new Offset<FB_ChiJiRewardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChiJiRewardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChiJiRewardBase.CreateFB_ChiJiRewardBase(fbb, curData.ID,curData.Type,curData.MinRank,curData.MaxRank,curData.Title,curData.Level,curData.Judge,curData.MailID,FB_ChiJiRewardBase.CreateRewardIDListVector(fbb,curData.RewardIDList.ToArray()),FB_ChiJiRewardBase.CreateRewardCountListVector(fbb,curData.RewardCountList.ToArray()),curData.RewardItemID,curData.RewardItemCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ChiJiRewardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChiJiRewardBaseContainer.StartFB_ChiJiRewardBaseContainer(fbb);
			FB_ChiJiRewardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ChiJiRewardBaseContainer.EndFB_ChiJiRewardBaseContainer(fbb);
			FB_ChiJiRewardBaseContainer.FinishFB_ChiJiRewardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChiJiRewardBase.txt", ms.ToArray());
			}
		}

		static void ExprotChongJiGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ChongJiGiftProvider.Instance.ListData;
			
			Offset<FB_ChongJiGift>[] offsetArray = new Offset<FB_ChongJiGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ChongJiGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ChongJiGift.CreateFB_ChongJiGift(fbb, curData.Id,curData.MDIndex,curData.RmbId,FB_ChongJiGift.CreateSpecialItemIdListVector(fbb,curData.SpecialItemIdList.ToArray()),FB_ChongJiGift.CreateSpecialItemCountListVector(fbb,curData.SpecialItemCountList.ToArray()),FB_ChongJiGift.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_ChongJiGift.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.Level,curData.ZhuanZhi);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ChongJiGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ChongJiGiftContainer.StartFB_ChongJiGiftContainer(fbb);
			FB_ChongJiGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_ChongJiGiftContainer.EndFB_ChongJiGiftContainer(fbb);
			FB_ChongJiGiftContainer.FinishFB_ChongJiGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ChongJiGift.txt", ms.ToArray());
			}
		}

		static void ExprotClientConfig()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ClientConfigProvider.Instance.ListData;
			
			Offset<FB_ClientConfig>[] offsetArray = new Offset<FB_ClientConfig>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ClientConfigProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ClientConfig.CreateFB_ClientConfig(fbb, curData.Id,curData.Param,fbb.CreateString(curData.StringParam));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ClientConfigContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ClientConfigContainer.StartFB_ClientConfigContainer(fbb);
			FB_ClientConfigContainer.AddItems(fbb, dataVector);
			var provider = FB_ClientConfigContainer.EndFB_ClientConfigContainer(fbb);
			FB_ClientConfigContainer.FinishFB_ClientConfigContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ClientConfig.txt", ms.ToArray());
			}
		}

		static void ExprotCollectActivity()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CollectActivityProvider.Instance.ListData;
			
			Offset<FB_CollectActivity>[] offsetArray = new Offset<FB_CollectActivity>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CollectActivityProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CollectActivity.CreateFB_CollectActivity(fbb, curData.ID,curData.DropDescID,FB_CollectActivity.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()),FB_CollectActivity.CreateShowItemNumListVector(fbb,curData.ShowItemNumList.ToArray()),curData.SumItem);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CollectActivityContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CollectActivityContainer.StartFB_CollectActivityContainer(fbb);
			FB_CollectActivityContainer.AddItems(fbb, dataVector);
			var provider = FB_CollectActivityContainer.EndFB_CollectActivityContainer(fbb);
			FB_CollectActivityContainer.FinishFB_CollectActivityContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CollectActivity.txt", ms.ToArray());
			}
		}

		static void ExprotCombatPetBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CombatPetBaseProvider.Instance.ListData;
			
			Offset<FB_CombatPetBase>[] offsetArray = new Offset<FB_CombatPetBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CombatPetBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CombatPetBase.CreateFB_CombatPetBase(fbb, curData.ID,curData.Totaljifen,curData.MopUpLockId,curData.TotalStage,curData.FlushTime,curData.CopySceneId,curData.DropBox,FB_CombatPetBase.CreateLowItemIDListVector(fbb,curData.LowItemIDList.ToArray()),FB_CombatPetBase.CreateLowItemCountListVector(fbb,curData.LowItemCountList.ToArray()),FB_CombatPetBase.CreateHighItemIDListVector(fbb,curData.HighItemIDList.ToArray()),FB_CombatPetBase.CreateHighItemCountListVector(fbb,curData.HighItemCountList.ToArray()),curData.BossType,curData.MinLvl);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CombatPetBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CombatPetBaseContainer.StartFB_CombatPetBaseContainer(fbb);
			FB_CombatPetBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CombatPetBaseContainer.EndFB_CombatPetBaseContainer(fbb);
			FB_CombatPetBaseContainer.FinishFB_CombatPetBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CombatPetBase.txt", ms.ToArray());
			}
		}

		static void ExprotCombatPetReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CombatPetRewardProvider.Instance.ListData;
			
			Offset<FB_CombatPetReward>[] offsetArray = new Offset<FB_CombatPetReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CombatPetRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CombatPetReward.CreateFB_CombatPetReward(fbb, curData.ID,curData.DicId,FB_CombatPetReward.CreateStarLimitListVector(fbb,curData.StarLimitList.ToArray()),FB_CombatPetReward.CreateBonusIndexListVector(fbb,curData.BonusIndexList.ToArray()),curData.PassReward,curData.FakeObjectId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CombatPetRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CombatPetRewardContainer.StartFB_CombatPetRewardContainer(fbb);
			FB_CombatPetRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_CombatPetRewardContainer.EndFB_CombatPetRewardContainer(fbb);
			FB_CombatPetRewardContainer.FinishFB_CombatPetRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CombatPetReward.txt", ms.ToArray());
			}
		}

		static void ExprotCommonItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CommonItemProvider.Instance.ListData;
			
			Offset<FB_CommonItem>[] offsetArray = new Offset<FB_CommonItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CommonItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CommonItem.CreateFB_CommonItem(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.TipsType),fbb.CreateString(curData.Icon),fbb.CreateString(curData.Tips),curData.ClassID,curData.SubClassID,curData.Quality,curData.LogType,curData.MinLevelRequire,curData.MaxLevelRequire,curData.MinAdvRequire,curData.MaxAdvRequire,curData.UseLogicId,curData.UseParam,curData.UseParamSec,curData.UseLimitType,curData.LimitMDId,curData.UseLimitNum,curData.CooldownId,curData.BindType,curData.SellPrice,curData.SellMoneyType,curData.MaxStackSize,curData.MenPaiRequire,curData.SortId,curData.CompoundId,curData.MaxStorageCount,curData.ExistTime,curData.CanThrow,curData.SystemRemind,curData.DecomposeId,curData.IsCanBatchUse,fbb.CreateString(curData.DropModle),curData.CanShow,curData.CanCompound,curData.IsDestory,curData.CanGift,curData.IsRareItem,curData.IsAuctionItem,curData.ShopTypeID,curData.ShopBaseID,curData.IsUseOnGet,curData.GetPathID,curData.IconAtlasName,curData.DiamondDecomposeId,curData.IsQuickUse,curData.CanWarehouse,curData.ItemButtonID,curData.UseLimitNumTotal,curData.TipEquipDataList,curData.TipItemBtnListType,curData.bNumConvert,fbb.CreateString(curData.NamePrefix),curData.MinYuanShenLevel,curData.XuanJiChangeJobLimit,curData.XuanJiLevelLimit,curData.SendLicense,curData.Money);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CommonItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CommonItemContainer.StartFB_CommonItemContainer(fbb);
			FB_CommonItemContainer.AddItems(fbb, dataVector);
			var provider = FB_CommonItemContainer.EndFB_CommonItemContainer(fbb);
			FB_CommonItemContainer.FinishFB_CommonItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CommonItem.txt", ms.ToArray());
			}
		}

		static void ExprotCoolDownTime()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CoolDownTimeProvider.Instance.ListData;
			
			Offset<FB_CoolDownTime>[] offsetArray = new Offset<FB_CoolDownTime>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CoolDownTimeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CoolDownTime.CreateFB_CoolDownTime(fbb, curData.Id,curData.CDTime,curData.CDGroupId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CoolDownTimeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CoolDownTimeContainer.StartFB_CoolDownTimeContainer(fbb);
			FB_CoolDownTimeContainer.AddItems(fbb, dataVector);
			var provider = FB_CoolDownTimeContainer.EndFB_CoolDownTimeContainer(fbb);
			FB_CoolDownTimeContainer.FinishFB_CoolDownTimeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CoolDownTime.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneLimitProvider.Instance.ListData;
			
			Offset<FB_CopySceneLimit>[] offsetArray = new Offset<FB_CopySceneLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneLimit.CreateFB_CopySceneLimit(fbb, curData.Id,fbb.CreateString(curData.Name),curData.CopySceneType,curData.AdaptType,curData.MinAdvanced,curData.MaxAdvance,curData.MinLvl,curData.MaxLvl,curData.MinMenCount,curData.MaxMemCount,curData.AttendTimes,curData.RefreshType,curData.MDId,curData.SceneId,curData.ScriptId,curData.WaitStarTime,curData.LogicTime,curData.WaitEndTime,curData.LogicInterval,curData.RankID,curData.ActivityID,curData.CsBonusRefresh,curData.CSBonusTimes,curData.CSBonusID,curData.CSBonusMDID,curData.ExtraPassLimit,curData.ExtraPassReward,curData.HelpWeakLimit,curData.HelpWeakReward,curData.LeaderShipsTime,curData.LeaderReward,curData.MemberReward,curData.TeamMoneyMDID,curData.PassIndex,curData.ReliveTimes,curData.FriendValue,curData.TargetDictID,FB_CopySceneLimit.CreateGuideDictIDListVector(fbb,curData.GuideDictIDList.ToArray()),curData.DamageRankID,curData.TeamPlatformId,curData.MissionLimitID,curData.ReliveMdid,curData.BuyAttendTimesMDID,curData.UseItemAddCountID,curData.CoolDownTimeMDID,curData.CoolDownTime,curData.CostItemID,curData.CostNum,curData.IntroduceId,curData.CanMopUp,curData.CanGotoCopyScene,curData.VIPLimitID,curData.BuyCostID,curData.IsNowCount,curData.SJMissionLimit,curData.IsShowAutoExit,curData.EvaluationId,curData.IsShowMov,curData.EvaluationLogic,curData.TreasureId,curData.XianYuID,curData.CDLevelLimit,curData.CarnivalId,curData.LevelSealId,curData.IsDieEnd,curData.ChangeJobLimit);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CopySceneLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneLimitContainer.StartFB_CopySceneLimitContainer(fbb);
			FB_CopySceneLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneLimitContainer.EndFB_CopySceneLimitContainer(fbb);
			FB_CopySceneLimitContainer.FinishFB_CopySceneLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneLimit.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneMoNengFeiXu()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneMoNengFeiXuProvider.Instance.ListData;
			
			Offset<FB_CopySceneMoNengFeiXu>[] offsetArray = new Offset<FB_CopySceneMoNengFeiXu>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneMoNengFeiXuProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneMoNengFeiXu.CreateFB_CopySceneMoNengFeiXu(fbb, curData.Id,curData.LevelLimit,FB_CopySceneMoNengFeiXu.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),curData.LevelId,curData.DropBoxID,curData.PassIndex);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CopySceneMoNengFeiXuContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneMoNengFeiXuContainer.StartFB_CopySceneMoNengFeiXuContainer(fbb);
			FB_CopySceneMoNengFeiXuContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneMoNengFeiXuContainer.EndFB_CopySceneMoNengFeiXuContainer(fbb);
			FB_CopySceneMoNengFeiXuContainer.FinishFB_CopySceneMoNengFeiXuContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneMoNengFeiXu.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneShop()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneShopProvider.Instance.ListData;
			
			Offset<FB_CopySceneShop>[] offsetArray = new Offset<FB_CopySceneShop>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneShopProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneShop.CreateFB_CopySceneShop(fbb, curData.ID,curData.AwardItemId,curData.ConsumNum,curData.ConsumItemId,curData.LevelLimit,curData.Score,curData.Component,curData.JieLvl,curData.IsBind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CopySceneShopContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneShopContainer.StartFB_CopySceneShopContainer(fbb);
			FB_CopySceneShopContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneShopContainer.EndFB_CopySceneShopContainer(fbb);
			FB_CopySceneShopContainer.FinishFB_CopySceneShopContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneShop.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneStageDic()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneStageDicProvider.Instance.ListData;
			
			Offset<FB_CopySceneStageDic>[] offsetArray = new Offset<FB_CopySceneStageDic>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneStageDicProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneStageDic.CreateFB_CopySceneStageDic(fbb, curData.ID,curData.StageDic,curData.StageTip,curData.DicNum,curData.Tips1Num,fbb.CreateString(curData.Titils),FB_CopySceneStageDic.CreateTipNumIDListVector(fbb,curData.TipNumIDList.ToArray()),curData.IconId,curData.DicInfoId,curData.PlayStrDic);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CopySceneStageDicContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneStageDicContainer.StartFB_CopySceneStageDicContainer(fbb);
			FB_CopySceneStageDicContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneStageDicContainer.EndFB_CopySceneStageDicContainer(fbb);
			FB_CopySceneStageDicContainer.FinishFB_CopySceneStageDicContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneStageDic.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneTower()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneTowerProvider.Instance.ListData;
			
			Offset<FB_CopySceneTower>[] offsetArray = new Offset<FB_CopySceneTower>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneTowerProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneTower.CreateFB_CopySceneTower(fbb, curData.Id,fbb.CreateString(curData.TowerName),fbb.CreateString(curData.Name),fbb.CreateString(curData.RankTowerName),curData.DescStrDictID,curData.StageClearDrop,curData.StageClearRuneExp,curData.MosterFakeObjId,FB_CopySceneTower.CreateMonsterIDListVector(fbb,curData.MonsterIDList.ToArray()),FB_CopySceneTower.CreateMonsterPosXListVector(fbb,curData.MonsterPosXList.ToArray()),FB_CopySceneTower.CreateMonsterPosZListVector(fbb,curData.MonsterPosZList.ToArray()),FB_CopySceneTower.CreateMonsterRotationListVector(fbb,curData.MonsterRotationList.ToArray()),curData.RecommendPower,curData.IsUnlockRune,curData.LevelLimit,fbb.CreateString(curData.TowerNumString),FB_CopySceneTower.CreateRewardItemIDListVector(fbb,curData.RewardItemIDList.ToArray()),FB_CopySceneTower.CreateRewardItemCountListVector(fbb,curData.RewardItemCountList.ToArray()),FB_CopySceneTower.CreateRewardJobIDListVector(fbb,curData.RewardJobIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CopySceneTowerContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneTowerContainer.StartFB_CopySceneTowerContainer(fbb);
			FB_CopySceneTowerContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneTowerContainer.EndFB_CopySceneTowerContainer(fbb);
			FB_CopySceneTowerContainer.FinishFB_CopySceneTowerContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneTower.txt", ms.ToArray());
			}
		}

		static void ExprotCopySceneTowerSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CopySceneTowerSkillProvider.Instance.ListData;
			
			Offset<FB_CopySceneTowerSkill>[] offsetArray = new Offset<FB_CopySceneTowerSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CopySceneTowerSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CopySceneTowerSkill.CreateFB_CopySceneTowerSkill(fbb, curData.Id,FB_CopySceneTowerSkill.CreateKZSkillIdListVector(fbb,curData.KZSkillIdList.ToArray()),FB_CopySceneTowerSkill.CreateHLSkillIdListVector(fbb,curData.HLSkillIdList.ToArray()),FB_CopySceneTowerSkill.CreateCKSkillIdListVector(fbb,curData.CKSkillIdList.ToArray()),FB_CopySceneTowerSkill.CreateYJSkillIdListVector(fbb,curData.YJSkillIdList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CopySceneTowerSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CopySceneTowerSkillContainer.StartFB_CopySceneTowerSkillContainer(fbb);
			FB_CopySceneTowerSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_CopySceneTowerSkillContainer.EndFB_CopySceneTowerSkillContainer(fbb);
			FB_CopySceneTowerSkillContainer.FinishFB_CopySceneTowerSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CopySceneTowerSkill.txt", ms.ToArray());
			}
		}

		static void ExprotCreatePlayer()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CreatePlayerProvider.Instance.ListData;
			
			Offset<FB_CreatePlayer>[] offsetArray = new Offset<FB_CreatePlayer>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CreatePlayerProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CreatePlayer.CreateFB_CreatePlayer(fbb, curData.ID,curData.MenPai,curData.Sex,curData.CharModelID,curData.WeapenModelID,curData.CharOffsetX,curData.CharOffsetY,curData.CharOffsetZ,curData.CharRotateY,fbb.CreateString(curData.ScenePath),curData.IdleAniID,curData.ShowAniID,curData.LoginAnimID,curData.LoginIdleAnimID,curData.SelectFarCameraOffsetX,curData.SelectFarCameraOffsetY,curData.SelectFarCameraOffsetZ,curData.SelectFarCameraRotateX,curData.SelectFarCameraRotateY,curData.SelectFarCameraRotateZ,curData.SelectCloseCameraOffsetX,curData.SelectCloseCameraOffsetY,curData.SelectCloseCameraOffsetZ,curData.SelectCloseCameraRotateX,curData.SelectCloseCameraRotateY,curData.SelectCloseCameraRotateZ,curData.CreateCameraOffsetX,curData.CreateCameraOffsetY,curData.CreateCameraOffsetZ,curData.CreateCameraRotateX,curData.CreateCameraRotateY,curData.CreateCameraRotateZ,curData.BGMusic,fbb.CreateString(curData.CameraBlurAnima),fbb.CreateString(curData.BloodCameraBlurAnim),curData.BloodPossessedModelId,curData.SoundID,curData.BloodSoundID,curData.ChangeMenPaiItemId,fbb.CreateString(curData.Cam_BindPoint),fbb.CreateString(curData.Cam_XueMaiBindPoint),curData.UISpecialHideID,curData.KFCameraFieldOfView,curData.KFCameraNearPosY,curData.KFCameraNearPosZ,curData.KFCameraNearRotateX,curData.KFCameraFarPosY,curData.KFCameraFarPosZ,curData.KFCameraFarRotateX,curData.XueMaiCameraNearPosX,curData.XueMaiCameraNearPosY,curData.XueMaiCameraNearPosZ,curData.XueMaiCameraNearRotoX,curData.XueMaiCameraNearRotoY,curData.XueMaiCameraNearRotoZ,curData.FaceItemId,curData.FaceNum,curData.KneadfaceUIPosIndex,fbb.CreateString(curData.CreateBloomColor));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CreatePlayerContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CreatePlayerContainer.StartFB_CreatePlayerContainer(fbb);
			FB_CreatePlayerContainer.AddItems(fbb, dataVector);
			var provider = FB_CreatePlayerContainer.EndFB_CreatePlayerContainer(fbb);
			FB_CreatePlayerContainer.FinishFB_CreatePlayerContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CreatePlayer.txt", ms.ToArray());
			}
		}

		static void ExprotCSEvalueReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CSEvalueRewardProvider.Instance.ListData;
			
			Offset<FB_CSEvalueReward>[] offsetArray = new Offset<FB_CSEvalueReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CSEvalueRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CSEvalueReward.CreateFB_CSEvalueReward(fbb, curData.Id,FB_CSEvalueReward.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_CSEvalueReward.CreateDropIDListVector(fbb,curData.DropIDList.ToArray()),FB_CSEvalueReward.CreateKExpIDListVector(fbb,curData.kExpIDList.ToArray()),curData.ExpRewardId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_CSEvalueRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CSEvalueRewardContainer.StartFB_CSEvalueRewardContainer(fbb);
			FB_CSEvalueRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_CSEvalueRewardContainer.EndFB_CSEvalueRewardContainer(fbb);
			FB_CSEvalueRewardContainer.FinishFB_CSEvalueRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CSEvalueReward.txt", ms.ToArray());
			}
		}

		static void ExprotCurrencyBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_CurrencyBaseProvider.Instance.ListData;
			
			Offset<FB_CurrencyBase>[] offsetArray = new Offset<FB_CurrencyBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_CurrencyBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_CurrencyBase.CreateFB_CurrencyBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.IconPath),curData.LimitType,curData.Limit,curData.EveryLimit,curData.TimeDataID,curData.NumberDataID,curData.DictID,curData.TargetType,FB_CurrencyBase.CreateTargetParamListVector(fbb,curData.TargetParamList.ToArray()),curData.UnlockType,curData.UnlockParam);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_CurrencyBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_CurrencyBaseContainer.StartFB_CurrencyBaseContainer(fbb);
			FB_CurrencyBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_CurrencyBaseContainer.EndFB_CurrencyBaseContainer(fbb);
			FB_CurrencyBaseContainer.FinishFB_CurrencyBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/CurrencyBase.txt", ms.ToArray());
			}
		}

		static void ExprotDailyRebate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DailyRebateProvider.Instance.ListData;
			
			Offset<FB_DailyRebate>[] offsetArray = new Offset<FB_DailyRebate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DailyRebateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DailyRebate.CreateFB_DailyRebate(fbb, curData.ID,curData.PriceMin,curData.PriceMax,FB_DailyRebate.CreateRateListVector(fbb,curData.RateList.ToArray()),FB_DailyRebate.CreateMoneyTypeListVector(fbb,curData.MoneyTypeList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DailyRebateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DailyRebateContainer.StartFB_DailyRebateContainer(fbb);
			FB_DailyRebateContainer.AddItems(fbb, dataVector);
			var provider = FB_DailyRebateContainer.EndFB_DailyRebateContainer(fbb);
			FB_DailyRebateContainer.FinishFB_DailyRebateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DailyRebate.txt", ms.ToArray());
			}
		}

		static void ExprotDailyRecharge()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DailyRechargeProvider.Instance.ListData;
			
			Offset<FB_DailyRecharge>[] offsetArray = new Offset<FB_DailyRecharge>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DailyRechargeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DailyRecharge.CreateFB_DailyRecharge(fbb, curData.ID,curData.ScoreLimit,curData.Type);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DailyRechargeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DailyRechargeContainer.StartFB_DailyRechargeContainer(fbb);
			FB_DailyRechargeContainer.AddItems(fbb, dataVector);
			var provider = FB_DailyRechargeContainer.EndFB_DailyRechargeContainer(fbb);
			FB_DailyRechargeContainer.FinishFB_DailyRechargeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DailyRecharge.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBaseProvider.Instance.ListData;
			
			Offset<FB_DestinyBase>[] offsetArray = new Offset<FB_DestinyBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBase.CreateFB_DestinyBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.MaxLv,fbb.CreateString(curData.NameSprite),fbb.CreateString(curData.Title),fbb.CreateString(curData.SubTitle),curData.DescId,fbb.CreateString(curData.Getpath),fbb.CreateString(curData.GetpathName),curData.FakeobjID,fbb.CreateString(curData.Icon),curData.Class,curData.Index,curData.MissionID,curData.CopySceneID,curData.LevelLimit,curData.HuaShenLevelLimit,curData.AttributeLessId,curData.GoldAttackIce,curData.GoldAttackFire,curData.SceneGroupPointId,curData.Scale,curData.RotateY,curData.OffsetY,curData.SystemBroadCastId,FB_DestinyBase.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),curData.GetExp,curData.Quality,curData.DropBoxId,curData.SkillOpenId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBaseContainer.StartFB_DestinyBaseContainer(fbb);
			FB_DestinyBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBaseContainer.EndFB_DestinyBaseContainer(fbb);
			FB_DestinyBaseContainer.FinishFB_DestinyBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyBase.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBaseLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBaseLevelUpProvider.Instance.ListData;
			
			Offset<FB_DestinyBaseLevelUp>[] offsetArray = new Offset<FB_DestinyBaseLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBaseLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBaseLevelUp.CreateFB_DestinyBaseLevelUp(fbb, curData.Id,FB_DestinyBaseLevelUp.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_DestinyBaseLevelUp.CreateCostItemCountListVector(fbb,curData.CostItemCountList.ToArray()),FB_DestinyBaseLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DestinyBaseLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyBaseLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBaseLevelUpContainer.StartFB_DestinyBaseLevelUpContainer(fbb);
			FB_DestinyBaseLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBaseLevelUpContainer.EndFB_DestinyBaseLevelUpContainer(fbb);
			FB_DestinyBaseLevelUpContainer.FinishFB_DestinyBaseLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyBaseLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBloodBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBloodBaseProvider.Instance.ListData;
			
			Offset<FB_DestinyBloodBase>[] offsetArray = new Offset<FB_DestinyBloodBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBloodBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBloodBase.CreateFB_DestinyBloodBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.LimitBloodId,curData.LimitLevel,FB_DestinyBloodBase.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),FB_DestinyBloodBase.CreateImpactListVector(fbb,curData.ImpactList.ToArray()),curData.BloodPossessedId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DestinyBloodBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBloodBaseContainer.StartFB_DestinyBloodBaseContainer(fbb);
			FB_DestinyBloodBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBloodBaseContainer.EndFB_DestinyBloodBaseContainer(fbb);
			FB_DestinyBloodBaseContainer.FinishFB_DestinyBloodBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyBloodBase.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBloodItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBloodItemProvider.Instance.ListData;
			
			Offset<FB_DestinyBloodItem>[] offsetArray = new Offset<FB_DestinyBloodItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBloodItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBloodItem.CreateFB_DestinyBloodItem(fbb, curData.Id,FB_DestinyBloodItem.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_DestinyBloodItem.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.Max);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyBloodItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBloodItemContainer.StartFB_DestinyBloodItemContainer(fbb);
			FB_DestinyBloodItemContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBloodItemContainer.EndFB_DestinyBloodItemContainer(fbb);
			FB_DestinyBloodItemContainer.FinishFB_DestinyBloodItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyBloodItem.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyBloodLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyBloodLevelUpProvider.Instance.ListData;
			
			Offset<FB_DestinyBloodLevelUp>[] offsetArray = new Offset<FB_DestinyBloodLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyBloodLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyBloodLevelUp.CreateFB_DestinyBloodLevelUp(fbb, curData.Id,curData.BreakThrough,curData.CostItemId,curData.CostItemCount,FB_DestinyBloodLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DestinyBloodLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyBloodLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyBloodLevelUpContainer.StartFB_DestinyBloodLevelUpContainer(fbb);
			FB_DestinyBloodLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyBloodLevelUpContainer.EndFB_DestinyBloodLevelUpContainer(fbb);
			FB_DestinyBloodLevelUpContainer.FinishFB_DestinyBloodLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyBloodLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyCultureLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyCultureLevelUpProvider.Instance.ListData;
			
			Offset<FB_DestinyCultureLevelUp>[] offsetArray = new Offset<FB_DestinyCultureLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyCultureLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyCultureLevelUp.CreateFB_DestinyCultureLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemCount,curData.PassiveSkillId,curData.LimitTemperCount,fbb.CreateString(curData.SkillDesc),fbb.CreateString(curData.LockSkillDesc));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyCultureLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyCultureLevelUpContainer.StartFB_DestinyCultureLevelUpContainer(fbb);
			FB_DestinyCultureLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyCultureLevelUpContainer.EndFB_DestinyCultureLevelUpContainer(fbb);
			FB_DestinyCultureLevelUpContainer.FinishFB_DestinyCultureLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyCultureLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotDestinySkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinySkillProvider.Instance.ListData;
			
			Offset<FB_DestinySkill>[] offsetArray = new Offset<FB_DestinySkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinySkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinySkill.CreateFB_DestinySkill(fbb, curData.ID,curData.PassiveSkillId,curData.IsShowOnUI,curData.UnLockLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DestinySkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinySkillContainer.StartFB_DestinySkillContainer(fbb);
			FB_DestinySkillContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinySkillContainer.EndFB_DestinySkillContainer(fbb);
			FB_DestinySkillContainer.FinishFB_DestinySkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinySkill.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyTemperBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyTemperBaseProvider.Instance.ListData;
			
			Offset<FB_DestinyTemperBase>[] offsetArray = new Offset<FB_DestinyTemperBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyTemperBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyTemperBase.CreateFB_DestinyTemperBase(fbb, curData.Id,curData.CostItemId,curData.CostItemNum,curData.MaxPercent,FB_DestinyTemperBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DestinyTemperBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyTemperBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyTemperBaseContainer.StartFB_DestinyTemperBaseContainer(fbb);
			FB_DestinyTemperBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyTemperBaseContainer.EndFB_DestinyTemperBaseContainer(fbb);
			FB_DestinyTemperBaseContainer.FinishFB_DestinyTemperBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyTemperBase.txt", ms.ToArray());
			}
		}

		static void ExprotDestinyTemperRate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DestinyTemperRateProvider.Instance.ListData;
			
			Offset<FB_DestinyTemperRate>[] offsetArray = new Offset<FB_DestinyTemperRate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DestinyTemperRateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DestinyTemperRate.CreateFB_DestinyTemperRate(fbb, curData.Id,FB_DestinyTemperRate.CreateRandomRateListVector(fbb,curData.RandomRateList.ToArray()),FB_DestinyTemperRate.CreateExtraRandomRateListVector(fbb,curData.ExtraRandomRateList.ToArray()),FB_DestinyTemperRate.CreateIncreaseRateListVector(fbb,curData.IncreaseRateList.ToArray()),FB_DestinyTemperRate.CreateMinAddValueListVector(fbb,curData.MinAddValueList.ToArray()),FB_DestinyTemperRate.CreateMaxAddValueListVector(fbb,curData.MaxAddValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DestinyTemperRateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DestinyTemperRateContainer.StartFB_DestinyTemperRateContainer(fbb);
			FB_DestinyTemperRateContainer.AddItems(fbb, dataVector);
			var provider = FB_DestinyTemperRateContainer.EndFB_DestinyTemperRateContainer(fbb);
			FB_DestinyTemperRateContainer.FinishFB_DestinyTemperRateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DestinyTemperRate.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondAttribute()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondAttributeProvider.Instance.ListData;
			
			Offset<FB_DiamondAttribute>[] offsetArray = new Offset<FB_DiamondAttribute>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondAttributeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondAttribute.CreateFB_DiamondAttribute(fbb, curData.ID,curData.MinLevel,FB_DiamondAttribute.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_DiamondAttribute.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DiamondAttributeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondAttributeContainer.StartFB_DiamondAttributeContainer(fbb);
			FB_DiamondAttributeContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondAttributeContainer.EndFB_DiamondAttributeContainer(fbb);
			FB_DiamondAttributeContainer.FinishFB_DiamondAttributeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondAttribute.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondBaseProvider.Instance.ListData;
			
			Offset<FB_DiamondBase>[] offsetArray = new Offset<FB_DiamondBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondBase.CreateFB_DiamondBase(fbb, curData.Id,curData.SetType,curData.MountType,curData.DiamondLevel,FB_DiamondBase.CreateAttributeIDListVector(fbb,curData.AttributeIDList.ToArray()),FB_DiamondBase.CreateAttributeValueListVector(fbb,curData.AttributeValueList.ToArray()),curData.StrID,curData.Compound,curData.MoneyConsume,curData.IsOpen);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondBaseContainer.StartFB_DiamondBaseContainer(fbb);
			FB_DiamondBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondBaseContainer.EndFB_DiamondBaseContainer(fbb);
			FB_DiamondBaseContainer.FinishFB_DiamondBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondBase.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondCuiLian()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondCuiLianProvider.Instance.ListData;
			
			Offset<FB_DiamondCuiLian>[] offsetArray = new Offset<FB_DiamondCuiLian>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondCuiLianProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondCuiLian.CreateFB_DiamondCuiLian(fbb, curData.Id,curData.ConditionCuilianLv,curData.CostItemId,curData.CostItemNum,FB_DiamondCuiLian.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DiamondCuiLian.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.Rate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondCuiLianContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondCuiLianContainer.StartFB_DiamondCuiLianContainer(fbb);
			FB_DiamondCuiLianContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondCuiLianContainer.EndFB_DiamondCuiLianContainer(fbb);
			FB_DiamondCuiLianContainer.FinishFB_DiamondCuiLianContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondCuiLian.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondGongZhen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondGongZhenProvider.Instance.ListData;
			
			Offset<FB_DiamondGongZhen>[] offsetArray = new Offset<FB_DiamondGongZhen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondGongZhenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondGongZhen.CreateFB_DiamondGongZhen(fbb, curData.Id,fbb.CreateString(curData.Components),curData.Lv,curData.CostItemId,curData.CostItemNum,FB_DiamondGongZhen.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DiamondGongZhen.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondGongZhenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondGongZhenContainer.StartFB_DiamondGongZhenContainer(fbb);
			FB_DiamondGongZhenContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondGongZhenContainer.EndFB_DiamondGongZhenContainer(fbb);
			FB_DiamondGongZhenContainer.FinishFB_DiamondGongZhenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondGongZhen.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondGongZhenAll()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondGongZhenAllProvider.Instance.ListData;
			
			Offset<FB_DiamondGongZhenAll>[] offsetArray = new Offset<FB_DiamondGongZhenAll>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondGongZhenAllProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondGongZhenAll.CreateFB_DiamondGongZhenAll(fbb, curData.Id,curData.LvSum,FB_DiamondGongZhenAll.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DiamondGongZhenAll.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondGongZhenAllContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondGongZhenAllContainer.StartFB_DiamondGongZhenAllContainer(fbb);
			FB_DiamondGongZhenAllContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondGongZhenAllContainer.EndFB_DiamondGongZhenAllContainer(fbb);
			FB_DiamondGongZhenAllContainer.FinishFB_DiamondGongZhenAllContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondGongZhenAll.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondGongZhenEnum()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondGongZhenEnumProvider.Instance.ListData;
			
			Offset<FB_DiamondGongZhenEnum>[] offsetArray = new Offset<FB_DiamondGongZhenEnum>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondGongZhenEnumProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondGongZhenEnum.CreateFB_DiamondGongZhenEnum(fbb, curData.Id,curData.ConditionCuilianLv,curData.Rate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondGongZhenEnumContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondGongZhenEnumContainer.StartFB_DiamondGongZhenEnumContainer(fbb);
			FB_DiamondGongZhenEnumContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondGongZhenEnumContainer.EndFB_DiamondGongZhenEnumContainer(fbb);
			FB_DiamondGongZhenEnumContainer.FinishFB_DiamondGongZhenEnumContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondGongZhenEnum.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondSet()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondSetProvider.Instance.ListData;
			
			Offset<FB_DiamondSet>[] offsetArray = new Offset<FB_DiamondSet>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondSetProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondSet.CreateFB_DiamondSet(fbb, curData.Id,curData.SlotNum,FB_DiamondSet.CreateSlotTypeListVector(fbb,curData.SlotTypeList.ToArray()),FB_DiamondSet.CreateUnlockGodWordLevelListVector(fbb,curData.UnlockGodWordLevelList.ToArray()),curData.UnlockGodVIPLevel,curData.UnlockGodVIP7Level,FB_DiamondSet.CreateShenZhuangUnLockLevelListVector(fbb,curData.ShenZhuangUnLockLevelList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_DiamondSetContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondSetContainer.StartFB_DiamondSetContainer(fbb);
			FB_DiamondSetContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondSetContainer.EndFB_DiamondSetContainer(fbb);
			FB_DiamondSetContainer.FinishFB_DiamondSetContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondSet.txt", ms.ToArray());
			}
		}

		static void ExprotDiamondStrengthen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_DiamondStrengthenProvider.Instance.ListData;
			
			Offset<FB_DiamondStrengthen>[] offsetArray = new Offset<FB_DiamondStrengthen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_DiamondStrengthenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_DiamondStrengthen.CreateFB_DiamondStrengthen(fbb, curData.ID,FB_DiamondStrengthen.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_DiamondStrengthen.CreateAttrNumListVector(fbb,curData.AttrNumList.ToArray()),curData.NeedItemId,curData.NeedItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_DiamondStrengthenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_DiamondStrengthenContainer.StartFB_DiamondStrengthenContainer(fbb);
			FB_DiamondStrengthenContainer.AddItems(fbb, dataVector);
			var provider = FB_DiamondStrengthenContainer.EndFB_DiamondStrengthenContainer(fbb);
			FB_DiamondStrengthenContainer.FinishFB_DiamondStrengthenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/DiamondStrengthen.txt", ms.ToArray());
			}
		}

		static void ExprotEmotionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EmotionBaseProvider.Instance.ListData;
			
			Offset<FB_EmotionBase>[] offsetArray = new Offset<FB_EmotionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EmotionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EmotionBase.CreateFB_EmotionBase(fbb, curData.ID,curData.Class,fbb.CreateString(curData.SpriteName),fbb.CreateString(curData.Name));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EmotionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EmotionBaseContainer.StartFB_EmotionBaseContainer(fbb);
			FB_EmotionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_EmotionBaseContainer.EndFB_EmotionBaseContainer(fbb);
			FB_EmotionBaseContainer.FinishFB_EmotionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EmotionBase.txt", ms.ToArray());
			}
		}

		static void ExprotEmotionClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EmotionClassProvider.Instance.ListData;
			
			Offset<FB_EmotionClass>[] offsetArray = new Offset<FB_EmotionClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EmotionClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EmotionClass.CreateFB_EmotionClass(fbb, curData.ID,fbb.CreateString(curData.SpriteName),curData.ItemId,curData.AvatarPoint,curData.Class,curData.Sort);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EmotionClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EmotionClassContainer.StartFB_EmotionClassContainer(fbb);
			FB_EmotionClassContainer.AddItems(fbb, dataVector);
			var provider = FB_EmotionClassContainer.EndFB_EmotionClassContainer(fbb);
			FB_EmotionClassContainer.FinishFB_EmotionClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EmotionClass.txt", ms.ToArray());
			}
		}

		static void ExprotEquipAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipAttrProvider.Instance.ListData;
			
			Offset<FB_EquipAttr>[] offsetArray = new Offset<FB_EquipAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipAttr.CreateFB_EquipAttr(fbb, curData.Id,curData.JieLvl,curData.ModelId,curData.EffectId,curData.Component,curData.Attribute0ID,curData.Attribute0Value,curData.Attribute1ID,curData.Attribute1Value,curData.Attribute2ID,curData.Attribute2Value,curData.Attribute3ID,curData.Attribute3Value,curData.Attribute4ID,curData.Attribute4Value,curData.Attribute5ID,curData.Attribute5Value,curData.RMBAttribute,curData.BroadcastRate,curData.LevelRequest,curData.StarCount,curData.ShenDuanCount,curData.TipsStrId,curData.IsShenZhuang,curData.FenJieCount,FB_EquipAttr.CreatePassiveSkillIdListVector(fbb,curData.PassiveSkillIdList.ToArray()),FB_EquipAttr.CreatePassiveSkillDesListVector(fbb,curData.PassiveSkillDesList.ToArray()),curData.BaseAttrPercent,curData.SpecialAttrPercent,curData.IsXuanJiEquip,curData.XuanJiChangeJob,curData.CanRongLian,FB_EquipAttr.CreateXuanJiAttrIdListVector(fbb,curData.XuanJiAttrIdList.ToArray()),FB_EquipAttr.CreateXuanJiAttrValueListVector(fbb,curData.XuanJiAttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipAttrContainer.StartFB_EquipAttrContainer(fbb);
			FB_EquipAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipAttrContainer.EndFB_EquipAttrContainer(fbb);
			FB_EquipAttrContainer.FinishFB_EquipAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipAttrRate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipAttrRateProvider.Instance.ListData;
			
			Offset<FB_EquipAttrRate>[] offsetArray = new Offset<FB_EquipAttrRate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipAttrRateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipAttrRate.CreateFB_EquipAttrRate(fbb, curData.Id,curData.GoldenAttrId,FB_EquipAttrRate.CreatePurpleAttrIdListVector(fbb,curData.PurpleAttrIdList.ToArray()),FB_EquipAttrRate.CreatePurpleAttrRateListVector(fbb,curData.PurpleAttrRateList.ToArray()),FB_EquipAttrRate.CreateBlueAttrIdListVector(fbb,curData.BlueAttrIdList.ToArray()),FB_EquipAttrRate.CreateBlueAttrRateListVector(fbb,curData.BlueAttrRateList.ToArray()),FB_EquipAttrRate.CreateShenZhuangAttrIdListVector(fbb,curData.ShenZhuangAttrIdList.ToArray()),FB_EquipAttrRate.CreateShenZhuangAttrRateListVector(fbb,curData.ShenZhuangAttrRateList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipAttrRateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipAttrRateContainer.StartFB_EquipAttrRateContainer(fbb);
			FB_EquipAttrRateContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipAttrRateContainer.EndFB_EquipAttrRateContainer(fbb);
			FB_EquipAttrRateContainer.FinishFB_EquipAttrRateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipAttrRate.txt", ms.ToArray());
			}
		}

		static void ExprotEquipAttrValue()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipAttrValueProvider.Instance.ListData;
			
			Offset<FB_EquipAttrValue>[] offsetArray = new Offset<FB_EquipAttrValue>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipAttrValueProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipAttrValue.CreateFB_EquipAttrValue(fbb, curData.Id,FB_EquipAttrValue.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_EquipAttrValue.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_EquipAttrValue.CreateMaxAttrValueListVector(fbb,curData.MaxAttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipAttrValueContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipAttrValueContainer.StartFB_EquipAttrValueContainer(fbb);
			FB_EquipAttrValueContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipAttrValueContainer.EndFB_EquipAttrValueContainer(fbb);
			FB_EquipAttrValueContainer.FinishFB_EquipAttrValueContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipAttrValue.txt", ms.ToArray());
			}
		}

		static void ExprotEquipCompoundType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipCompoundTypeProvider.Instance.ListData;
			
			Offset<FB_EquipCompoundType>[] offsetArray = new Offset<FB_EquipCompoundType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipCompoundTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipCompoundType.CreateFB_EquipCompoundType(fbb, curData.ID,fbb.CreateString(curData.Name),curData.FirstPage,curData.SecondPage,curData.Quality,curData.StarNum,curData.MenPai,fbb.CreateString(curData.EquipPoint),curData.ExtraMaterial);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipCompoundTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipCompoundTypeContainer.StartFB_EquipCompoundTypeContainer(fbb);
			FB_EquipCompoundTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipCompoundTypeContainer.EndFB_EquipCompoundTypeContainer(fbb);
			FB_EquipCompoundTypeContainer.FinishFB_EquipCompoundTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipCompoundType.txt", ms.ToArray());
			}
		}

		static void ExprotEquipCompoundTypeShenZhuang()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipCompoundTypeShenZhuangProvider.Instance.ListData;
			
			Offset<FB_EquipCompoundTypeShenZhuang>[] offsetArray = new Offset<FB_EquipCompoundTypeShenZhuang>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipCompoundTypeShenZhuangProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipCompoundTypeShenZhuang.CreateFB_EquipCompoundTypeShenZhuang(fbb, curData.ID,fbb.CreateString(curData.Name),curData.FirstPage,curData.SecondPage,curData.Quality,curData.StarNum,curData.MenPai,fbb.CreateString(curData.EquipPoint),curData.ExtraMaterial,curData.Type,curData.EquipGrade);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipCompoundTypeShenZhuangContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipCompoundTypeShenZhuangContainer.StartFB_EquipCompoundTypeShenZhuangContainer(fbb);
			FB_EquipCompoundTypeShenZhuangContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipCompoundTypeShenZhuangContainer.EndFB_EquipCompoundTypeShenZhuangContainer(fbb);
			FB_EquipCompoundTypeShenZhuangContainer.FinishFB_EquipCompoundTypeShenZhuangContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipCompoundTypeShenZhuang.txt", ms.ToArray());
			}
		}

		static void ExprotEquipExchange()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipExchangeProvider.Instance.ListData;
			
			Offset<FB_EquipExchange>[] offsetArray = new Offset<FB_EquipExchange>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipExchangeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipExchange.CreateFB_EquipExchange(fbb, curData.Id,curData.Type,curData.JieLvl,curData.Quality,curData.StarCount,curData.ItemId,curData.ItemCount);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipExchangeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipExchangeContainer.StartFB_EquipExchangeContainer(fbb);
			FB_EquipExchangeContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipExchangeContainer.EndFB_EquipExchangeContainer(fbb);
			FB_EquipExchangeContainer.FinishFB_EquipExchangeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipExchange.txt", ms.ToArray());
			}
		}

		static void ExprotEquipExhibition()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipExhibitionProvider.Instance.ListData;
			
			Offset<FB_EquipExhibition>[] offsetArray = new Offset<FB_EquipExhibition>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipExhibitionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipExhibition.CreateFB_EquipExhibition(fbb, curData.Id,curData.OwnProrobability,FB_EquipExhibition.CreateMenPaiListVector(fbb,curData.MenPaiList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipExhibitionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipExhibitionContainer.StartFB_EquipExhibitionContainer(fbb);
			FB_EquipExhibitionContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipExhibitionContainer.EndFB_EquipExhibitionContainer(fbb);
			FB_EquipExhibitionContainer.FinishFB_EquipExhibitionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipExhibition.txt", ms.ToArray());
			}
		}

		static void ExprotEquipExtraAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipExtraAttrProvider.Instance.ListData;
			
			Offset<FB_EquipExtraAttr>[] offsetArray = new Offset<FB_EquipExtraAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipExtraAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipExtraAttr.CreateFB_EquipExtraAttr(fbb, curData.Id,FB_EquipExtraAttr.CreateAttrListVector(fbb,curData.AttrList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipExtraAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipExtraAttrContainer.StartFB_EquipExtraAttrContainer(fbb);
			FB_EquipExtraAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipExtraAttrContainer.EndFB_EquipExtraAttrContainer(fbb);
			FB_EquipExtraAttrContainer.FinishFB_EquipExtraAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipExtraAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipFavPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipFavPointProvider.Instance.ListData;
			
			Offset<FB_EquipFavPoint>[] offsetArray = new Offset<FB_EquipFavPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipFavPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipFavPoint.CreateFB_EquipFavPoint(fbb, curData.Id,curData.Lock);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipFavPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipFavPointContainer.StartFB_EquipFavPointContainer(fbb);
			FB_EquipFavPointContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipFavPointContainer.EndFB_EquipFavPointContainer(fbb);
			FB_EquipFavPointContainer.FinishFB_EquipFavPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipFavPoint.txt", ms.ToArray());
			}
		}

		static void ExprotEquipFuLingAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipFuLingAttrProvider.Instance.ListData;
			
			Offset<FB_EquipFuLingAttr>[] offsetArray = new Offset<FB_EquipFuLingAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipFuLingAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipFuLingAttr.CreateFB_EquipFuLingAttr(fbb, curData.ID,curData.UnlockLevel,curData.Component,curData.AttrId,curData.AttrValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipFuLingAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipFuLingAttrContainer.StartFB_EquipFuLingAttrContainer(fbb);
			FB_EquipFuLingAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipFuLingAttrContainer.EndFB_EquipFuLingAttrContainer(fbb);
			FB_EquipFuLingAttrContainer.FinishFB_EquipFuLingAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipFuLingAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipFuLingLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipFuLingLevelUpProvider.Instance.ListData;
			
			Offset<FB_EquipFuLingLevelUp>[] offsetArray = new Offset<FB_EquipFuLingLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipFuLingLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipFuLingLevelUp.CreateFB_EquipFuLingLevelUp(fbb, curData.ID,curData.Step,curData.ShowLevel,curData.UnLockType,curData.UnlockId,curData.MoneyType,curData.MoneyNum,curData.AttrValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipFuLingLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipFuLingLevelUpContainer.StartFB_EquipFuLingLevelUpContainer(fbb);
			FB_EquipFuLingLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipFuLingLevelUpContainer.EndFB_EquipFuLingLevelUpContainer(fbb);
			FB_EquipFuLingLevelUpContainer.FinishFB_EquipFuLingLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipFuLingLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotEquipFusionAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipFusionAttrProvider.Instance.ListData;
			
			Offset<FB_EquipFusionAttr>[] offsetArray = new Offset<FB_EquipFusionAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipFusionAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipFusionAttr.CreateFB_EquipFusionAttr(fbb, curData.ID,curData.CostItemId,curData.CostItemNum,FB_EquipFusionAttr.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_EquipFusionAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_EquipFusionAttr.CreateSuitAttrIdListVector(fbb,curData.SuitAttrIdList.ToArray()),FB_EquipFusionAttr.CreateSuitAttrValueListVector(fbb,curData.SuitAttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipFusionAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipFusionAttrContainer.StartFB_EquipFusionAttrContainer(fbb);
			FB_EquipFusionAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipFusionAttrContainer.EndFB_EquipFusionAttrContainer(fbb);
			FB_EquipFusionAttrContainer.FinishFB_EquipFusionAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipFusionAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipFusionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipFusionBaseProvider.Instance.ListData;
			
			Offset<FB_EquipFusionBase>[] offsetArray = new Offset<FB_EquipFusionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipFusionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipFusionBase.CreateFB_EquipFusionBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Unlock,fbb.CreateString(curData.UnlockTip),curData.ShowNewIconMFId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipFusionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipFusionBaseContainer.StartFB_EquipFusionBaseContainer(fbb);
			FB_EquipFusionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipFusionBaseContainer.EndFB_EquipFusionBaseContainer(fbb);
			FB_EquipFusionBaseContainer.FinishFB_EquipFusionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipFusionBase.txt", ms.ToArray());
			}
		}

		static void ExprotEquipPartZhuHun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipPartZhuHunProvider.Instance.ListData;
			
			Offset<FB_EquipPartZhuHun>[] offsetArray = new Offset<FB_EquipPartZhuHun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipPartZhuHunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipPartZhuHun.CreateFB_EquipPartZhuHun(fbb, curData.Id,curData.ItemId,curData.ItemCount,curData.IsStep,curData.AttrId,curData.AttrValue,curData.LevelUpRate,curData.ClientLevelUpRate,curData.FailLevel,curData.MoneyType,curData.MoneyCost,curData.PassiveSkillId,curData.StarNeed);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipPartZhuHunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipPartZhuHunContainer.StartFB_EquipPartZhuHunContainer(fbb);
			FB_EquipPartZhuHunContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipPartZhuHunContainer.EndFB_EquipPartZhuHunContainer(fbb);
			FB_EquipPartZhuHunContainer.FinishFB_EquipPartZhuHunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipPartZhuHun.txt", ms.ToArray());
			}
		}

		static void ExprotEquipPartZhuHunBaoShi()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipPartZhuHunBaoShiProvider.Instance.ListData;
			
			Offset<FB_EquipPartZhuHunBaoShi>[] offsetArray = new Offset<FB_EquipPartZhuHunBaoShi>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipPartZhuHunBaoShiProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipPartZhuHunBaoShi.CreateFB_EquipPartZhuHunBaoShi(fbb, curData.Id,curData.ItemId,curData.ItemCount,curData.IsStep,FB_EquipPartZhuHunBaoShi.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_EquipPartZhuHunBaoShi.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.LevelUpRate,curData.ClientLevelUpRate,curData.FailLevel,curData.MoneyType,curData.MoneyCost,curData.PassiveSkillId,curData.NextSkillStrId,curData.UnlockSkill,curData.SkillLevel,curData.StarNeed);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipPartZhuHunBaoShiContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipPartZhuHunBaoShiContainer.StartFB_EquipPartZhuHunBaoShiContainer(fbb);
			FB_EquipPartZhuHunBaoShiContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipPartZhuHunBaoShiContainer.EndFB_EquipPartZhuHunBaoShiContainer(fbb);
			FB_EquipPartZhuHunBaoShiContainer.FinishFB_EquipPartZhuHunBaoShiContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipPartZhuHunBaoShi.txt", ms.ToArray());
			}
		}

		static void ExprotEquipRandomAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipRandomAttrProvider.Instance.ListData;
			
			Offset<FB_EquipRandomAttr>[] offsetArray = new Offset<FB_EquipRandomAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipRandomAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipRandomAttr.CreateFB_EquipRandomAttr(fbb, curData.Id,curData.Type,FB_EquipRandomAttr.CreateDropTypeListVector(fbb,curData.DropType_List.ToArray()),FB_EquipRandomAttr.CreateItemIDListVector(fbb,curData.ItemID_List.ToArray()),FB_EquipRandomAttr.CreateItemDropRateListVector(fbb,curData.ItemDropRate_List.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipRandomAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipRandomAttrContainer.StartFB_EquipRandomAttrContainer(fbb);
			FB_EquipRandomAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipRandomAttrContainer.EndFB_EquipRandomAttrContainer(fbb);
			FB_EquipRandomAttrContainer.FinishFB_EquipRandomAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipRandomAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipRecast()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipRecastProvider.Instance.ListData;
			
			Offset<FB_EquipRecast>[] offsetArray = new Offset<FB_EquipRecast>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipRecastProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipRecast.CreateFB_EquipRecast(fbb, curData.Id,curData.MustItemId,curData.MustItemNum,curData.LowItemId,curData.LowItemNum,curData.HighItemId,curData.HighItemNum,curData.GoldId,curData.GoldNum);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipRecastContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipRecastContainer.StartFB_EquipRecastContainer(fbb);
			FB_EquipRecastContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipRecastContainer.EndFB_EquipRecastContainer(fbb);
			FB_EquipRecastContainer.FinishFB_EquipRecastContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipRecast.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSetStone()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSetStoneProvider.Instance.ListData;
			
			Offset<FB_EquipSetStone>[] offsetArray = new Offset<FB_EquipSetStone>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSetStoneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSetStone.CreateFB_EquipSetStone(fbb, curData.Id,curData.StoneType,curData.EquipType,curData.Level,curData.StoneName,FB_EquipSetStone.CreateLevelUpItemIdListVector(fbb,curData.LevelUpItemIdList.ToArray()),FB_EquipSetStone.CreateLevelUpItemCountListVector(fbb,curData.LevelUpItemCountList.ToArray()),curData.AttrAdd,FB_EquipSetStone.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_EquipSetStone.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipSetStoneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSetStoneContainer.StartFB_EquipSetStoneContainer(fbb);
			FB_EquipSetStoneContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSetStoneContainer.EndFB_EquipSetStoneContainer(fbb);
			FB_EquipSetStoneContainer.FinishFB_EquipSetStoneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSetStone.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSetStoneGroupAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSetStoneGroupAttrProvider.Instance.ListData;
			
			Offset<FB_EquipSetStoneGroupAttr>[] offsetArray = new Offset<FB_EquipSetStoneGroupAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSetStoneGroupAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSetStoneGroupAttr.CreateFB_EquipSetStoneGroupAttr(fbb, curData.Id,fbb.CreateString(curData.Name),curData.StoneType,curData.EquipType,curData.Quality,curData.Level,FB_EquipSetStoneGroupAttr.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_EquipSetStoneGroupAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipSetStoneGroupAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSetStoneGroupAttrContainer.StartFB_EquipSetStoneGroupAttrContainer(fbb);
			FB_EquipSetStoneGroupAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSetStoneGroupAttrContainer.EndFB_EquipSetStoneGroupAttrContainer(fbb);
			FB_EquipSetStoneGroupAttrContainer.FinishFB_EquipSetStoneGroupAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSetStoneGroupAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSlotAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSlotAttrProvider.Instance.ListData;
			
			Offset<FB_EquipSlotAttr>[] offsetArray = new Offset<FB_EquipSlotAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSlotAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSlotAttr.CreateFB_EquipSlotAttr(fbb, curData.ID,curData.Rate,curData.Quality);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipSlotAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSlotAttrContainer.StartFB_EquipSlotAttrContainer(fbb);
			FB_EquipSlotAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSlotAttrContainer.EndFB_EquipSlotAttrContainer(fbb);
			FB_EquipSlotAttrContainer.FinishFB_EquipSlotAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSlotAttr.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSlotResonance()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSlotResonanceProvider.Instance.ListData;
			
			Offset<FB_EquipSlotResonance>[] offsetArray = new Offset<FB_EquipSlotResonance>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSlotResonanceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSlotResonance.CreateFB_EquipSlotResonance(fbb, curData.ID,curData.MinLevel,FB_EquipSlotResonance.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_EquipSlotResonance.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipSlotResonanceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSlotResonanceContainer.StartFB_EquipSlotResonanceContainer(fbb);
			FB_EquipSlotResonanceContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSlotResonanceContainer.EndFB_EquipSlotResonanceContainer(fbb);
			FB_EquipSlotResonanceContainer.FinishFB_EquipSlotResonanceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSlotResonance.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSlotStrengthen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSlotStrengthenProvider.Instance.ListData;
			
			Offset<FB_EquipSlotStrengthen>[] offsetArray = new Offset<FB_EquipSlotStrengthen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSlotStrengthenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSlotStrengthen.CreateFB_EquipSlotStrengthen(fbb, curData.ID,curData.MoneyType,curData.MoneyNum,curData.ExpByTime,curData.ExpNeed,curData.LowEquipNeedLevel,curData.HighEquipNeedLevel,FB_EquipSlotStrengthen.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_EquipSlotStrengthen.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.ShenZhuangNeedLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EquipSlotStrengthenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSlotStrengthenContainer.StartFB_EquipSlotStrengthenContainer(fbb);
			FB_EquipSlotStrengthenContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSlotStrengthenContainer.EndFB_EquipSlotStrengthenContainer(fbb);
			FB_EquipSlotStrengthenContainer.FinishFB_EquipSlotStrengthenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSlotStrengthen.txt", ms.ToArray());
			}
		}

		static void ExprotEquipSource()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipSourceProvider.Instance.ListData;
			
			Offset<FB_EquipSource>[] offsetArray = new Offset<FB_EquipSource>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipSourceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipSource.CreateFB_EquipSource(fbb, curData.Id,curData.Low,curData.High,FB_EquipSource.CreateQualityPercentListVector(fbb,curData.QualityPercentList.ToArray()),FB_EquipSource.CreateQualityLowListVector(fbb,curData.QualityLowList.ToArray()),FB_EquipSource.CreateQualityHighListVector(fbb,curData.QualityHighList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipSourceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipSourceContainer.StartFB_EquipSourceContainer(fbb);
			FB_EquipSourceContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipSourceContainer.EndFB_EquipSourceContainer(fbb);
			FB_EquipSourceContainer.FinishFB_EquipSourceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipSource.txt", ms.ToArray());
			}
		}

		static void ExprotEquipStrengthen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipStrengthenProvider.Instance.ListData;
			
			Offset<FB_EquipStrengthen>[] offsetArray = new Offset<FB_EquipStrengthen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipStrengthenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipStrengthen.CreateFB_EquipStrengthen(fbb, curData.Id,curData.LevelNow,FB_EquipStrengthen.CreateMaterialListVector(fbb,curData.MaterialList.ToArray()),FB_EquipStrengthen.CreateMaterialNumListVector(fbb,curData.MaterialNumList.ToArray()),FB_EquipStrengthen.CreateProbabilityListVector(fbb,curData.ProbabilityList.ToArray()),FB_EquipStrengthen.CreateSpProbabilityListVector(fbb,curData.SpProbabilityList.ToArray()),curData.Exp,curData.SpExp,curData.MaxExp,curData.MaxHP,curData.PAttack,curData.MAttack,curData.PDefense,curData.MDefense,FB_EquipStrengthen.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipStrengthenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipStrengthenContainer.StartFB_EquipStrengthenContainer(fbb);
			FB_EquipStrengthenContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipStrengthenContainer.EndFB_EquipStrengthenContainer(fbb);
			FB_EquipStrengthenContainer.FinishFB_EquipStrengthenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipStrengthen.txt", ms.ToArray());
			}
		}

		static void ExprotEquipZhuHun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EquipZhuHunProvider.Instance.ListData;
			
			Offset<FB_EquipZhuHun>[] offsetArray = new Offset<FB_EquipZhuHun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EquipZhuHunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EquipZhuHun.CreateFB_EquipZhuHun(fbb, curData.Id,curData.ItemId,curData.ItemCount,curData.AttrId,curData.AttrValue,curData.LevelUpRate,curData.ClientLevelUpRate,curData.FailLevel,curData.MoneyType,curData.MoneyCost,curData.PassiveSkillId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_EquipZhuHunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EquipZhuHunContainer.StartFB_EquipZhuHunContainer(fbb);
			FB_EquipZhuHunContainer.AddItems(fbb, dataVector);
			var provider = FB_EquipZhuHunContainer.EndFB_EquipZhuHunContainer(fbb);
			FB_EquipZhuHunContainer.FinishFB_EquipZhuHunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EquipZhuHun.txt", ms.ToArray());
			}
		}

		static void ExprotEternalTreasure()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EternalTreasureProvider.Instance.ListData;
			
			Offset<FB_EternalTreasure>[] offsetArray = new Offset<FB_EternalTreasure>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EternalTreasureProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EternalTreasure.CreateFB_EternalTreasure(fbb, curData.ID,curData.Score,curData.Parm,curData.MDID,curData.DicId,curData.ShowItemId,fbb.CreateString(curData.Name),curData.ActivityId,curData.FuntionOpenID,curData.UIID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EternalTreasureContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EternalTreasureContainer.StartFB_EternalTreasureContainer(fbb);
			FB_EternalTreasureContainer.AddItems(fbb, dataVector);
			var provider = FB_EternalTreasureContainer.EndFB_EternalTreasureContainer(fbb);
			FB_EternalTreasureContainer.FinishFB_EternalTreasureContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EternalTreasure.txt", ms.ToArray());
			}
		}

		static void ExprotEternalTreasureReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_EternalTreasureRewardProvider.Instance.ListData;
			
			Offset<FB_EternalTreasureReward>[] offsetArray = new Offset<FB_EternalTreasureReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_EternalTreasureRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_EternalTreasureReward.CreateFB_EternalTreasureReward(fbb, curData.ID,curData.ScoreLimit,curData.Level,curData.DicId,FB_EternalTreasureReward.CreateBonusIndexListVector(fbb,curData.BonusIndexList.ToArray()),curData.FlagId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_EternalTreasureRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_EternalTreasureRewardContainer.StartFB_EternalTreasureRewardContainer(fbb);
			FB_EternalTreasureRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_EternalTreasureRewardContainer.EndFB_EternalTreasureRewardContainer(fbb);
			FB_EternalTreasureRewardContainer.FinishFB_EternalTreasureRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/EternalTreasureReward.txt", ms.ToArray());
			}
		}

		static void ExprotFakeObject()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FakeObjectProvider.Instance.ListData;
			
			Offset<FB_FakeObject>[] offsetArray = new Offset<FB_FakeObject>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FakeObjectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FakeObject.CreateFB_FakeObject(fbb, curData.Id,curData.CharModelId,curData.AnimaId,curData.XOffSet,curData.YOffSet,curData.ZOffset,curData.XRotation,curData.YRotation,curData.ZRotation,curData.CameraRotationX,curData.IsPlayer,fbb.CreateString(curData.BGPath),curData.Scale,curData.sCamYRota,curData.sCamXOffset,curData.sCamZOffset,curData.sCamSize,curData.HasShadow,curData.CamFieldOfView,curData.RongYaoTime);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_FakeObjectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FakeObjectContainer.StartFB_FakeObjectContainer(fbb);
			FB_FakeObjectContainer.AddItems(fbb, dataVector);
			var provider = FB_FakeObjectContainer.EndFB_FakeObjectContainer(fbb);
			FB_FakeObjectContainer.FinishFB_FakeObjectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FakeObject.txt", ms.ToArray());
			}
		}

		static void ExprotFindRewardBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FindRewardBaseProvider.Instance.ListData;
			
			Offset<FB_FindRewardBase>[] offsetArray = new Offset<FB_FindRewardBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FindRewardBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FindRewardBase.CreateFB_FindRewardBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_FindRewardBase.CreateActicityBaseIDListVector(fbb,curData.ActicityBaseIDList.ToArray()),curData.IsGuild,curData.Time,curData.VIPId,curData.LowCost,curData.LowRatio,curData.HighCost,curData.HighRatio,curData.MDId,curData.VipMDId,curData.FindType,FB_FindRewardBase.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.Ratio,curData.IsVIP,curData.HighGoldItemId,curData.HighGoldItemCount,curData.LowGoldItemId,curData.LowGoldItemCount,curData.AddYuanShenExpIndex);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_FindRewardBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FindRewardBaseContainer.StartFB_FindRewardBaseContainer(fbb);
			FB_FindRewardBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_FindRewardBaseContainer.EndFB_FindRewardBaseContainer(fbb);
			FB_FindRewardBaseContainer.FinishFB_FindRewardBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FindRewardBase.txt", ms.ToArray());
			}
		}

		static void ExprotFindRewardClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FindRewardClassProvider.Instance.ListData;
			
			Offset<FB_FindRewardClass>[] offsetArray = new Offset<FB_FindRewardClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FindRewardClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FindRewardClass.CreateFB_FindRewardClass(fbb, curData.ID,curData.BaseID,curData.MinLvl,curData.MaxLvl,curData.CSLvl,curData.LowExp,FB_FindRewardClass.CreateLowItemIDListVector(fbb,curData.LowItemIDList.ToArray()),FB_FindRewardClass.CreateLowItemCountListVector(fbb,curData.LowItemCountList.ToArray()),curData.HighExp,FB_FindRewardClass.CreateHighItemIDListVector(fbb,curData.HighItemIDList.ToArray()),FB_FindRewardClass.CreateHighItemCountListVector(fbb,curData.HighItemCountList.ToArray()),curData.ChangeJobLimit);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_FindRewardClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FindRewardClassContainer.StartFB_FindRewardClassContainer(fbb);
			FB_FindRewardClassContainer.AddItems(fbb, dataVector);
			var provider = FB_FindRewardClassContainer.EndFB_FindRewardClassContainer(fbb);
			FB_FindRewardClassContainer.FinishFB_FindRewardClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FindRewardClass.txt", ms.ToArray());
			}
		}

		static void ExprotFuLiDaTing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FuLiDaTingProvider.Instance.ListData;
			
			Offset<FB_FuLiDaTing>[] offsetArray = new Offset<FB_FuLiDaTing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FuLiDaTingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FuLiDaTing.CreateFB_FuLiDaTing(fbb, curData.Id,fbb.CreateString(curData.Name),curData.IsAcitve,curData.ActivityId,curData.UnlockType,curData.UnlockParam,curData.ExpIndex,curData.CanUseAddExpRate,curData.MoneyType,curData.MoneyCost,curData.YBAddExpRate,FB_FuLiDaTing.CreateYBItemIdListVector(fbb,curData.YBItemIdList.ToArray()),FB_FuLiDaTing.CreateYBItemCountListVector(fbb,curData.YBItemCountList.ToArray()),curData.YBMoneyType,curData.YBMoneyCost,curData.YBMoneyShow,FB_FuLiDaTing.CreateNormalItemIdListVector(fbb,curData.NormalItemIdList.ToArray()),FB_FuLiDaTing.CreateNormalItemCountListVector(fbb,curData.NormalItemCountList.ToArray()),curData.NormalMoneyType,curData.NormalMoneyCost,curData.NormalMoneyShow,curData.MdId,curData.Count,curData.MFId,FB_FuLiDaTing.CreateAchievementTypeListVector(fbb,curData.AchievementTypeList.ToArray()),FB_FuLiDaTing.CreateAchievementPointListVector(fbb,curData.AchievementPointList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_FuLiDaTingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FuLiDaTingContainer.StartFB_FuLiDaTingContainer(fbb);
			FB_FuLiDaTingContainer.AddItems(fbb, dataVector);
			var provider = FB_FuLiDaTingContainer.EndFB_FuLiDaTingContainer(fbb);
			FB_FuLiDaTingContainer.FinishFB_FuLiDaTingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FuLiDaTing.txt", ms.ToArray());
			}
		}

		static void ExprotFunctionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FunctionBaseProvider.Instance.ListData;
			
			Offset<FB_FunctionBase>[] offsetArray = new Offset<FB_FunctionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FunctionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_FunctionBase.CreateFB_FunctionBase(fbb, curData.ID,fbb.CreateString(curData.FunctionName),curData.UnlockType,curData.UnlockParam,FB_FunctionBase.CreateSubFunctionListVector(fbb,curData.SubFunctionList.ToArray()),curData.LockedType,curData.LockedTipsID,curData.IsShowTips,curData.IsShowUI,curData.UIModelID,curData.StrId,fbb.CreateString(curData.SpriteName),fbb.CreateString(curData.FuncIcon),curData.FuncDescId,fbb.CreateString(curData.UIName),fbb.CreateString(curData.MovePath),curData.IsSunFunc,curData.DelayTime,curData.IsWorldEnabled,curData.MailId,curData.IsShowNewIcon,curData.MFId,curData.IsActivity);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_FunctionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FunctionBaseContainer.StartFB_FunctionBaseContainer(fbb);
			FB_FunctionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_FunctionBaseContainer.EndFB_FunctionBaseContainer(fbb);
			FB_FunctionBaseContainer.FinishFB_FunctionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FunctionBase.txt", ms.ToArray());
			}
		}

		static void ExprotFunctionPrepare()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_FunctionPrepareProvider.Instance.ListData;
			
			Offset<FB_FunctionPrepare>[] offsetArray = new Offset<FB_FunctionPrepare>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_FunctionPrepareProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] DescTwoFuncListoffSet = new StringOffset[curData.DescTwoFuncList.Count];
				for (var i = 0; i < curData.DescTwoFuncList.Count; i++)
				{
					DescTwoFuncListoffSet[i] = fbb.CreateString(curData.DescTwoFuncList[i]);
				}
StringOffset[] DescThreeFuncListoffSet = new StringOffset[curData.DescThreeFuncList.Count];
				for (var i = 0; i < curData.DescThreeFuncList.Count; i++)
				{
					DescThreeFuncListoffSet[i] = fbb.CreateString(curData.DescThreeFuncList[i]);
				}

				offsetArray[index] = FB_FunctionPrepare.CreateFB_FunctionPrepare(fbb, curData.ID,curData.FuncClass,curData.MissionID,curData.UnlockType,fbb.CreateString(curData.FuncIcon),fbb.CreateString(curData.FuncName),fbb.CreateString(curData.FunctionName),fbb.CreateString(curData.FuncSpeaker),FB_FunctionPrepare.CreateFakeObjIDListVector(fbb,curData.FakeObjIDList.ToArray()),FB_FunctionPrepare.CreateFuncIntroduceListVector(fbb,curData.FuncIntroduceList.ToArray()),curData.PassIndex,curData.SortID,FB_FunctionPrepare.CreateDescTwoFuncListVector(fbb,DescTwoFuncListoffSet),FB_FunctionPrepare.CreateDescThreeFuncListVector(fbb,DescThreeFuncListoffSet),fbb.CreateString(curData.ChapterName));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_FunctionPrepareContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_FunctionPrepareContainer.StartFB_FunctionPrepareContainer(fbb);
			FB_FunctionPrepareContainer.AddItems(fbb, dataVector);
			var provider = FB_FunctionPrepareContainer.EndFB_FunctionPrepareContainer(fbb);
			FB_FunctionPrepareContainer.FinishFB_FunctionPrepareContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/FunctionPrepare.txt", ms.ToArray());
			}
		}

		static void ExprotGodWeaponBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GodWeaponBaseProvider.Instance.ListData;
			
			Offset<FB_GodWeaponBase>[] offsetArray = new Offset<FB_GodWeaponBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GodWeaponBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GodWeaponBase.CreateFB_GodWeaponBase(fbb, curData.ID,fbb.CreateString(curData.Desc),fbb.CreateString(curData.Name),FB_GodWeaponBase.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_GodWeaponBase.CreateItemExpListVector(fbb,curData.ItemExpList.ToArray()),curData.FakeobjID,FB_GodWeaponBase.CreatePassiveSkillIdListVector(fbb,curData.PassiveSkillIdList.ToArray()),FB_GodWeaponBase.CreateUnlockLevelListVector(fbb,curData.UnlockLevelList.ToArray()),fbb.CreateString(curData.Icon),curData.Order);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GodWeaponBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GodWeaponBaseContainer.StartFB_GodWeaponBaseContainer(fbb);
			FB_GodWeaponBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GodWeaponBaseContainer.EndFB_GodWeaponBaseContainer(fbb);
			FB_GodWeaponBaseContainer.FinishFB_GodWeaponBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GodWeaponBase.txt", ms.ToArray());
			}
		}

		static void ExprotGodWeaponLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GodWeaponLevelProvider.Instance.ListData;
			
			Offset<FB_GodWeaponLevel>[] offsetArray = new Offset<FB_GodWeaponLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GodWeaponLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GodWeaponLevel.CreateFB_GodWeaponLevel(fbb, curData.ID,curData.Exp,FB_GodWeaponLevel.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_GodWeaponLevel.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GodWeaponLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GodWeaponLevelContainer.StartFB_GodWeaponLevelContainer(fbb);
			FB_GodWeaponLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_GodWeaponLevelContainer.EndFB_GodWeaponLevelContainer(fbb);
			FB_GodWeaponLevelContainer.FinishFB_GodWeaponLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GodWeaponLevel.txt", ms.ToArray());
			}
		}

		static void ExprotGodWordBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GodWordBaseProvider.Instance.ListData;
			
			Offset<FB_GodWordBase>[] offsetArray = new Offset<FB_GodWordBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GodWordBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GodWordBase.CreateFB_GodWordBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.HintID,curData.AdvancedLimit,curData.EquipLevel,curData.DiamondCompoundLimit,curData.CopySceneID,curData.CopySceneMissionId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GodWordBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GodWordBaseContainer.StartFB_GodWordBaseContainer(fbb);
			FB_GodWordBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GodWordBaseContainer.EndFB_GodWordBaseContainer(fbb);
			FB_GodWordBaseContainer.FinishFB_GodWordBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GodWordBase.txt", ms.ToArray());
			}
		}

		static void ExprotGodWordCharm()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GodWordCharmProvider.Instance.ListData;
			
			Offset<FB_GodWordCharm>[] offsetArray = new Offset<FB_GodWordCharm>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GodWordCharmProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GodWordCharm.CreateFB_GodWordCharm(fbb, curData.Id,fbb.CreateString(curData.Name),curData.CraftReq,curData.CraftNum,curData.StrDictionryID,fbb.CreateString(curData.Icon),FB_GodWordCharm.CreateCraftItemListVector(fbb,curData.CraftItemList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GodWordCharmContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GodWordCharmContainer.StartFB_GodWordCharmContainer(fbb);
			FB_GodWordCharmContainer.AddItems(fbb, dataVector);
			var provider = FB_GodWordCharmContainer.EndFB_GodWordCharmContainer(fbb);
			FB_GodWordCharmContainer.FinishFB_GodWordCharmContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GodWordCharm.txt", ms.ToArray());
			}
		}

		static void ExprotGoldCopyAward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GoldCopyAwardProvider.Instance.ListData;
			
			Offset<FB_GoldCopyAward>[] offsetArray = new Offset<FB_GoldCopyAward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GoldCopyAwardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GoldCopyAward.CreateFB_GoldCopyAward(fbb, curData.ID,curData.DicId,curData.ItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GoldCopyAwardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GoldCopyAwardContainer.StartFB_GoldCopyAwardContainer(fbb);
			FB_GoldCopyAwardContainer.AddItems(fbb, dataVector);
			var provider = FB_GoldCopyAwardContainer.EndFB_GoldCopyAwardContainer(fbb);
			FB_GoldCopyAwardContainer.FinishFB_GoldCopyAwardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GoldCopyAward.txt", ms.ToArray());
			}
		}

		static void ExprotGoldenBadgeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GoldenBadgeBaseProvider.Instance.ListData;
			
			Offset<FB_GoldenBadgeBase>[] offsetArray = new Offset<FB_GoldenBadgeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GoldenBadgeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GoldenBadgeBase.CreateFB_GoldenBadgeBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameSprite),curData.ActivateBattlePower,curData.LevelBattlePower);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GoldenBadgeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GoldenBadgeBaseContainer.StartFB_GoldenBadgeBaseContainer(fbb);
			FB_GoldenBadgeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GoldenBadgeBaseContainer.EndFB_GoldenBadgeBaseContainer(fbb);
			FB_GoldenBadgeBaseContainer.FinishFB_GoldenBadgeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GoldenBadgeBase.txt", ms.ToArray());
			}
		}

		static void ExprotGoldenBadgeLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GoldenBadgeLevelUpProvider.Instance.ListData;
			
			Offset<FB_GoldenBadgeLevelUp>[] offsetArray = new Offset<FB_GoldenBadgeLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GoldenBadgeLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GoldenBadgeLevelUp.CreateFB_GoldenBadgeLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemCount,FB_GoldenBadgeLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_GoldenBadgeLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GoldenBadgeLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GoldenBadgeLevelUpContainer.StartFB_GoldenBadgeLevelUpContainer(fbb);
			FB_GoldenBadgeLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_GoldenBadgeLevelUpContainer.EndFB_GoldenBadgeLevelUpContainer(fbb);
			FB_GoldenBadgeLevelUpContainer.FinishFB_GoldenBadgeLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GoldenBadgeLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotGreetingCardReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GreetingCardRewardProvider.Instance.ListData;
			
			Offset<FB_GreetingCardReward>[] offsetArray = new Offset<FB_GreetingCardReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GreetingCardRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GreetingCardReward.CreateFB_GreetingCardReward(fbb, curData.ID,FB_GreetingCardReward.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_GreetingCardReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.SpecialItem,curData.SpecialCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GreetingCardRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GreetingCardRewardContainer.StartFB_GreetingCardRewardContainer(fbb);
			FB_GreetingCardRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_GreetingCardRewardContainer.EndFB_GreetingCardRewardContainer(fbb);
			FB_GreetingCardRewardContainer.FinishFB_GreetingCardRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GreetingCardReward.txt", ms.ToArray());
			}
		}

		static void ExprotGroupPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GroupPointProvider.Instance.ListData;
			
			Offset<FB_GroupPoint>[] offsetArray = new Offset<FB_GroupPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GroupPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GroupPoint.CreateFB_GroupPoint(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.FlowText),curData.CharModelID,curData.Type,curData.IsOnlyClient,curData.NotifyId,curData.Area,curData.CollectTime,curData.RespawnTime,curData.LiveTime,curData.IsDelete,curData.InitAnimId,curData.FinishAnimId,curData.SelfEffectId,curData.PlayerKZEffectId,curData.PlayerHLEffectId,curData.PlayerCKEffectId,curData.PlayerYJEffectId,fbb.CreateString(curData.IconPath),curData.subtype,FB_GroupPoint.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.IsNeedClick,curData.buffId,curData.IsRespawn,curData.DefaultEffectID,curData.FinishedEffectID,curData.LimitNum,curData.LimitType,curData.LimitIndex,curData.LimitDict,curData.ProgressBase,curData.DelDict,curData.Height,curData.PStrId,curData.PLifeTime,curData.PShowInChat,curData.IsShowNameBoard,curData.PlayerInBloodEffect,curData.AchieveAnimId,curData.AchieveEffect,curData.MissionId,curData.ModelEffectId,curData.StopRange,curData.SoundId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GroupPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GroupPointContainer.StartFB_GroupPointContainer(fbb);
			FB_GroupPointContainer.AddItems(fbb, dataVector);
			var provider = FB_GroupPointContainer.EndFB_GroupPointContainer(fbb);
			FB_GroupPointContainer.FinishFB_GroupPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GroupPoint.txt", ms.ToArray());
			}
		}

		static void ExprotGrowUpBag()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GrowUpBagProvider.Instance.ListData;
			
			Offset<FB_GrowUpBag>[] offsetArray = new Offset<FB_GrowUpBag>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GrowUpBagProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GrowUpBag.CreateFB_GrowUpBag(fbb, curData.ID,curData.Type,curData.Days,curData.ConsumeMoney,FB_GrowUpBag.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_GrowUpBag.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.AddBuff);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GrowUpBagContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GrowUpBagContainer.StartFB_GrowUpBagContainer(fbb);
			FB_GrowUpBagContainer.AddItems(fbb, dataVector);
			var provider = FB_GrowUpBagContainer.EndFB_GrowUpBagContainer(fbb);
			FB_GrowUpBagContainer.FinishFB_GrowUpBagContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GrowUpBag.txt", ms.ToArray());
			}
		}

		static void ExprotGuideCollectBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuideCollectBaseProvider.Instance.ListData;
			
			Offset<FB_GuideCollectBase>[] offsetArray = new Offset<FB_GuideCollectBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuideCollectBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuideCollectBase.CreateFB_GuideCollectBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.AddPointNum,curData.CombatProbability);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuideCollectBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuideCollectBaseContainer.StartFB_GuideCollectBaseContainer(fbb);
			FB_GuideCollectBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuideCollectBaseContainer.EndFB_GuideCollectBaseContainer(fbb);
			FB_GuideCollectBaseContainer.FinishFB_GuideCollectBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuideCollectBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuideCollectBossTips()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuideCollectBossTipsProvider.Instance.ListData;
			
			Offset<FB_GuideCollectBossTips>[] offsetArray = new Offset<FB_GuideCollectBossTips>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuideCollectBossTipsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuideCollectBossTips.CreateFB_GuideCollectBossTips(fbb, curData.Id,fbb.CreateString(curData.Name),curData.BossFakeObjId,curData.BossCharModelId,curData.BossTalk);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuideCollectBossTipsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuideCollectBossTipsContainer.StartFB_GuideCollectBossTipsContainer(fbb);
			FB_GuideCollectBossTipsContainer.AddItems(fbb, dataVector);
			var provider = FB_GuideCollectBossTipsContainer.EndFB_GuideCollectBossTipsContainer(fbb);
			FB_GuideCollectBossTipsContainer.FinishFB_GuideCollectBossTipsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuideCollectBossTips.txt", ms.ToArray());
			}
		}

		static void ExprotGuildActiveBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildActiveBaseProvider.Instance.ListData;
			
			Offset<FB_GuildActiveBase>[] offsetArray = new Offset<FB_GuildActiveBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildActiveBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildActiveBase.CreateFB_GuildActiveBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.BgSprite),fbb.CreateString(curData.Descript),curData.IconItemId,fbb.CreateString(curData.UnlockType),fbb.CreateString(curData.OpenType),curData.TargetType,FB_GuildActiveBase.CreateTargetParamListVector(fbb,curData.TargetParamList.ToArray()),curData.ActivityID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildActiveBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildActiveBaseContainer.StartFB_GuildActiveBaseContainer(fbb);
			FB_GuildActiveBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildActiveBaseContainer.EndFB_GuildActiveBaseContainer(fbb);
			FB_GuildActiveBaseContainer.FinishFB_GuildActiveBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildActiveBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuildBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildBaseProvider.Instance.ListData;
			
			Offset<FB_GuildBase>[] offsetArray = new Offset<FB_GuildBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildBase.CreateFB_GuildBase(fbb, curData.Id,curData.GuildMoneyMax,curData.UpKeepMoney,curData.HighUpKeepMoney,curData.HighUpKeepLimit,curData.Dividend,FB_GuildBase.CreateRoleNumListVector(fbb,curData.RoleNumList.ToArray()),curData.RoleMax,curData.TeamMax,curData.CostType,curData.CostMoney,curData.NeedMoney,curData.PaybackMoney,curData.RobberAwardMoney,curData.RobberAwardDividend,curData.RobberPunishment,curData.GuildBattleWinCapital,curData.GuildBattleLoseCapital,curData.GuildDefenceWinAward,curData.GuildDefenceLosePunishment,curData.GuildBossCapital,curData.GuildBossContribution);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildBaseContainer.StartFB_GuildBaseContainer(fbb);
			FB_GuildBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildBaseContainer.EndFB_GuildBaseContainer(fbb);
			FB_GuildBaseContainer.FinishFB_GuildBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuildBlessBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildBlessBaseProvider.Instance.ListData;
			
			Offset<FB_GuildBlessBase>[] offsetArray = new Offset<FB_GuildBlessBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildBlessBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildBlessBase.CreateFB_GuildBlessBase(fbb, curData.ID,curData.DictID,FB_GuildBlessBase.CreateRewardIDListVector(fbb,curData.RewardIDList.ToArray()),FB_GuildBlessBase.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GuildBlessBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildBlessBaseContainer.StartFB_GuildBlessBaseContainer(fbb);
			FB_GuildBlessBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildBlessBaseContainer.EndFB_GuildBlessBaseContainer(fbb);
			FB_GuildBlessBaseContainer.FinishFB_GuildBlessBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildBlessBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuildBoss()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildBossProvider.Instance.ListData;
			
			Offset<FB_GuildBoss>[] offsetArray = new Offset<FB_GuildBoss>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildBossProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildBoss.CreateFB_GuildBoss(fbb, curData.ID,curData.Level,curData.OpenExpend,curData.FirstExpend,FB_GuildBoss.CreateRoleBaseIDListVector(fbb,curData.RoleBaseIDList.ToArray()),curData.PosX,curData.PosZ,curData.FaceDirection,FB_GuildBoss.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GuildBossContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildBossContainer.StartFB_GuildBossContainer(fbb);
			FB_GuildBossContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildBossContainer.EndFB_GuildBossContainer(fbb);
			FB_GuildBossContainer.FinishFB_GuildBossContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildBoss.txt", ms.ToArray());
			}
		}

		static void ExprotGuildFoodBox()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildFoodBoxProvider.Instance.ListData;
			
			Offset<FB_GuildFoodBox>[] offsetArray = new Offset<FB_GuildFoodBox>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildFoodBoxProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildFoodBox.CreateFB_GuildFoodBox(fbb, curData.Id,curData.Foods,curData.ExpBonus,curData.MoneyBonus);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildFoodBoxContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildFoodBoxContainer.StartFB_GuildFoodBoxContainer(fbb);
			FB_GuildFoodBoxContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildFoodBoxContainer.EndFB_GuildFoodBoxContainer(fbb);
			FB_GuildFoodBoxContainer.FinishFB_GuildFoodBoxContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildFoodBox.txt", ms.ToArray());
			}
		}

		static void ExprotGuildFormationBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildFormationBaseProvider.Instance.ListData;
			
			Offset<FB_GuildFormationBase>[] offsetArray = new Offset<FB_GuildFormationBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildFormationBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildFormationBase.CreateFB_GuildFormationBase(fbb, curData.Id,curData.AttrType,curData.PersonAttr,curData.TeamAttr,curData.GuildAttr,curData.TeamBuffID,curData.GuildBuffID,FB_GuildFormationBase.CreateCostTypeListVector(fbb,curData.CostTypeList.ToArray()),FB_GuildFormationBase.CreateCostMoneyListVector(fbb,curData.CostMoneyList.ToArray()),curData.DictID,curData.CurrID,curData.NextDictID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildFormationBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildFormationBaseContainer.StartFB_GuildFormationBaseContainer(fbb);
			FB_GuildFormationBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildFormationBaseContainer.EndFB_GuildFormationBaseContainer(fbb);
			FB_GuildFormationBaseContainer.FinishFB_GuildFormationBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildFormationBase.txt", ms.ToArray());
			}
		}

		static void ExprotGuildFormationLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildFormationLevelProvider.Instance.ListData;
			
			Offset<FB_GuildFormationLevel>[] offsetArray = new Offset<FB_GuildFormationLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildFormationLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildFormationLevel.CreateFB_GuildFormationLevel(fbb, curData.Id,curData.CostMoney,curData.UpgradeTime,curData.UpgradeExp,curData.LevelExp,curData.PersonLevel);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildFormationLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildFormationLevelContainer.StartFB_GuildFormationLevelContainer(fbb);
			FB_GuildFormationLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildFormationLevelContainer.EndFB_GuildFormationLevelContainer(fbb);
			FB_GuildFormationLevelContainer.FinishFB_GuildFormationLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildFormationLevel.txt", ms.ToArray());
			}
		}

		static void ExprotGuildFormationTypeNew()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildFormationTypeNewProvider.Instance.ListData;
			
			Offset<FB_GuildFormationTypeNew>[] offsetArray = new Offset<FB_GuildFormationTypeNew>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildFormationTypeNewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildFormationTypeNew.CreateFB_GuildFormationTypeNew(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.FormationDesc,curData.AttrDesc,curData.LevelLimit);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildFormationTypeNewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildFormationTypeNewContainer.StartFB_GuildFormationTypeNewContainer(fbb);
			FB_GuildFormationTypeNewContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildFormationTypeNewContainer.EndFB_GuildFormationTypeNewContainer(fbb);
			FB_GuildFormationTypeNewContainer.FinishFB_GuildFormationTypeNewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildFormationTypeNew.txt", ms.ToArray());
			}
		}

		static void ExprotGuildPermission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildPermissionProvider.Instance.ListData;
			
			Offset<FB_GuildPermission>[] offsetArray = new Offset<FB_GuildPermission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildPermissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildPermission.CreateFB_GuildPermission(fbb, curData.Id,fbb.CreateString(curData.Name),FB_GuildPermission.CreatePermissionListVector(fbb,curData.PermissionList.ToArray()),curData.DividendRate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildPermissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildPermissionContainer.StartFB_GuildPermissionContainer(fbb);
			FB_GuildPermissionContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildPermissionContainer.EndFB_GuildPermissionContainer(fbb);
			FB_GuildPermissionContainer.FinishFB_GuildPermissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildPermission.txt", ms.ToArray());
			}
		}

		static void ExprotGuildPresent()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildPresentProvider.Instance.ListData;
			
			Offset<FB_GuildPresent>[] offsetArray = new Offset<FB_GuildPresent>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildPresentProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildPresent.CreateFB_GuildPresent(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.IconPath),curData.JobLimit,curData.AttrID,FB_GuildPresent.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_GuildPresent.CreateRewardMoneyTypeListVector(fbb,curData.RewardMoneyTypeList.ToArray()),FB_GuildPresent.CreateRewardMoneyListVector(fbb,curData.RewardMoneyList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GuildPresentContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildPresentContainer.StartFB_GuildPresentContainer(fbb);
			FB_GuildPresentContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildPresentContainer.EndFB_GuildPresentContainer(fbb);
			FB_GuildPresentContainer.FinishFB_GuildPresentContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildPresent.txt", ms.ToArray());
			}
		}

		static void ExprotGuildRedPacket()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildRedPacketProvider.Instance.ListData;
			
			Offset<FB_GuildRedPacket>[] offsetArray = new Offset<FB_GuildRedPacket>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildRedPacketProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildRedPacket.CreateFB_GuildRedPacket(fbb, curData.ID,fbb.CreateString(curData.FirstName),fbb.CreateString(curData.AccumulatedName),curData.FirstNotice,curData.AccumulatedNotice,FB_GuildRedPacket.CreateAccomplishListVector(fbb,curData.AccomplishList.ToArray()),FB_GuildRedPacket.CreateAwardListVector(fbb,curData.AwardList.ToArray()),curData.CountLimit);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_GuildRedPacketContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildRedPacketContainer.StartFB_GuildRedPacketContainer(fbb);
			FB_GuildRedPacketContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildRedPacketContainer.EndFB_GuildRedPacketContainer(fbb);
			FB_GuildRedPacketContainer.FinishFB_GuildRedPacketContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildRedPacket.txt", ms.ToArray());
			}
		}

		static void ExprotGuildWelfareBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_GuildWelfareBaseProvider.Instance.ListData;
			
			Offset<FB_GuildWelfareBase>[] offsetArray = new Offset<FB_GuildWelfareBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_GuildWelfareBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_GuildWelfareBase.CreateFB_GuildWelfareBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Descript),curData.IconItemId,fbb.CreateString(curData.BtnName),curData.LogicType,curData.Param);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_GuildWelfareBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_GuildWelfareBaseContainer.StartFB_GuildWelfareBaseContainer(fbb);
			FB_GuildWelfareBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_GuildWelfareBaseContainer.EndFB_GuildWelfareBaseContainer(fbb);
			FB_GuildWelfareBaseContainer.FinishFB_GuildWelfareBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/GuildWelfareBase.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingBaseProvider.Instance.ListData;
			
			Offset<FB_HuanJingBase>[] offsetArray = new Offset<FB_HuanJingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] IconButtonListoffSet = new StringOffset[curData.IconButtonList.Count];
				for (var i = 0; i < curData.IconButtonList.Count; i++)
				{
					IconButtonListoffSet[i] = fbb.CreateString(curData.IconButtonList[i]);
				}

				offsetArray[index] = FB_HuanJingBase.CreateFB_HuanJingBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Type,curData.TypeMini,curData.Modle,curData.Quality,curData.UnlockType,curData.UnlockParam,curData.UnlockParamSec,fbb.CreateString(curData.HuanJingEquip),curData.HuanJingJiBan,FB_HuanJingBase.CreateIconButtonListVector(fbb,IconButtonListoffSet),fbb.CreateString(curData.Icon),curData.FakeObjId,fbb.CreateString(curData.StoryTitle),fbb.CreateString(curData.StoryInfo));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HuanJingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingBaseContainer.StartFB_HuanJingBaseContainer(fbb);
			FB_HuanJingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingBaseContainer.EndFB_HuanJingBaseContainer(fbb);
			FB_HuanJingBaseContainer.FinishFB_HuanJingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingBase.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingEquip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingEquipProvider.Instance.ListData;
			
			Offset<FB_HuanJingEquip>[] offsetArray = new Offset<FB_HuanJingEquip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingEquipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingEquip.CreateFB_HuanJingEquip(fbb, curData.ID,fbb.CreateString(curData.TitleEquip),fbb.CreateString(curData.TitleEquipInfo),curData.Quality,FB_HuanJingEquip.CreateHuanJingBaseIdListVector(fbb,curData.HuanJingBaseIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HuanJingEquipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingEquipContainer.StartFB_HuanJingEquipContainer(fbb);
			FB_HuanJingEquipContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingEquipContainer.EndFB_HuanJingEquipContainer(fbb);
			FB_HuanJingEquipContainer.FinishFB_HuanJingEquipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingEquip.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingEquipSlot()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingEquipSlotProvider.Instance.ListData;
			
			Offset<FB_HuanJingEquipSlot>[] offsetArray = new Offset<FB_HuanJingEquipSlot>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingEquipSlotProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingEquipSlot.CreateFB_HuanJingEquipSlot(fbb, curData.ID,curData.HuanJingBaseId,curData.Slot,curData.CostItemId,curData.CostItemCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HuanJingEquipSlotContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingEquipSlotContainer.StartFB_HuanJingEquipSlotContainer(fbb);
			FB_HuanJingEquipSlotContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingEquipSlotContainer.EndFB_HuanJingEquipSlotContainer(fbb);
			FB_HuanJingEquipSlotContainer.FinishFB_HuanJingEquipSlotContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingEquipSlot.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingEquipStar()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingEquipStarProvider.Instance.ListData;
			
			Offset<FB_HuanJingEquipStar>[] offsetArray = new Offset<FB_HuanJingEquipStar>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingEquipStarProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingEquipStar.CreateFB_HuanJingEquipStar(fbb, curData.ID,curData.HuanJingEquipLevel,curData.HuanJingEquipStar,FB_HuanJingEquipStar.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_HuanJingEquipStar.CreateCostItemCountListVector(fbb,curData.CostItemCountList.ToArray()),FB_HuanJingEquipStar.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HuanJingEquipStar.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HuanJingEquipStarContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingEquipStarContainer.StartFB_HuanJingEquipStarContainer(fbb);
			FB_HuanJingEquipStarContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingEquipStarContainer.EndFB_HuanJingEquipStarContainer(fbb);
			FB_HuanJingEquipStarContainer.FinishFB_HuanJingEquipStarContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingEquipStar.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingJiBan()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingJiBanProvider.Instance.ListData;
			
			Offset<FB_HuanJingJiBan>[] offsetArray = new Offset<FB_HuanJingJiBan>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingJiBanProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingJiBan.CreateFB_HuanJingJiBan(fbb, curData.Id,curData.Group,curData.HuanJingJiBanLv,curData.PassiveSkillId,fbb.CreateString(curData.SkillTitle),fbb.CreateString(curData.SkillInfo),fbb.CreateString(curData.RequireInfo),FB_HuanJingJiBan.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_HuanJingJiBan.CreateCostItemCountListVector(fbb,curData.CostItemCountList.ToArray()),FB_HuanJingJiBan.CreateHuanJingBaseIdListVector(fbb,curData.HuanJingBaseIdList.ToArray()),FB_HuanJingJiBan.CreateHuanJingLevelListVector(fbb,curData.HuanJingLevelList.ToArray()),FB_HuanJingJiBan.CreateHuanJingSkillLevelListVector(fbb,curData.HuanJingSkillLevelList.ToArray()),FB_HuanJingJiBan.CreateHuanJingEquipStarListVector(fbb,curData.HuanJingEquipStarList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HuanJingJiBanContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingJiBanContainer.StartFB_HuanJingJiBanContainer(fbb);
			FB_HuanJingJiBanContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingJiBanContainer.EndFB_HuanJingJiBanContainer(fbb);
			FB_HuanJingJiBanContainer.FinishFB_HuanJingJiBanContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingJiBan.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingLevelProvider.Instance.ListData;
			
			Offset<FB_HuanJingLevel>[] offsetArray = new Offset<FB_HuanJingLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingLevel.CreateFB_HuanJingLevel(fbb, curData.Id,curData.HuanJingBaseId,curData.HuanJingLevel,curData.BreakThrough,FB_HuanJingLevel.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_HuanJingLevel.CreateCostItemCountListVector(fbb,curData.CostItemCountList.ToArray()),FB_HuanJingLevel.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HuanJingLevel.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HuanJingLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingLevelContainer.StartFB_HuanJingLevelContainer(fbb);
			FB_HuanJingLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingLevelContainer.EndFB_HuanJingLevelContainer(fbb);
			FB_HuanJingLevelContainer.FinishFB_HuanJingLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingLevel.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingSkillProvider.Instance.ListData;
			
			Offset<FB_HuanJingSkill>[] offsetArray = new Offset<FB_HuanJingSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuanJingSkill.CreateFB_HuanJingSkill(fbb, curData.ID,curData.HuanJingBaseId,curData.HuanJingSkillLevel,FB_HuanJingSkill.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_HuanJingSkill.CreateCostItemCountListVector(fbb,curData.CostItemCountList.ToArray()),FB_HuanJingSkill.CreatePassiveSkillIdListVector(fbb,curData.PassiveSkillIdList.ToArray()),fbb.CreateString(curData.SkillDes));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HuanJingSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingSkillContainer.StartFB_HuanJingSkillContainer(fbb);
			FB_HuanJingSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingSkillContainer.EndFB_HuanJingSkillContainer(fbb);
			FB_HuanJingSkillContainer.FinishFB_HuanJingSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingSkill.txt", ms.ToArray());
			}
		}

		static void ExprotHuanJingType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuanJingTypeProvider.Instance.ListData;
			
			Offset<FB_HuanJingType>[] offsetArray = new Offset<FB_HuanJingType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuanJingTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] IconListoffSet = new StringOffset[curData.IconList.Count];
				for (var i = 0; i < curData.IconList.Count; i++)
				{
					IconListoffSet[i] = fbb.CreateString(curData.IconList[i]);
				}

				offsetArray[index] = FB_HuanJingType.CreateFB_HuanJingType(fbb, curData.Id,fbb.CreateString(curData.WorldName),curData.WorldId,fbb.CreateString(curData.Name),FB_HuanJingType.CreateIconListVector(fbb,IconListoffSet),curData.Flagid,fbb.CreateString(curData.UIIcon),fbb.CreateString(curData.LeftEffect));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HuanJingTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuanJingTypeContainer.StartFB_HuanJingTypeContainer(fbb);
			FB_HuanJingTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_HuanJingTypeContainer.EndFB_HuanJingTypeContainer(fbb);
			FB_HuanJingTypeContainer.FinishFB_HuanJingTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuanJingType.txt", ms.ToArray());
			}
		}

		static void ExprotHuLingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HuLingBaseProvider.Instance.ListData;
			
			Offset<FB_HuLingBase>[] offsetArray = new Offset<FB_HuLingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HuLingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HuLingBase.CreateFB_HuLingBase(fbb, curData.ID,curData.MoneyType,curData.MoneyNum,FB_HuLingBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HuLingBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HuLingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HuLingBaseContainer.StartFB_HuLingBaseContainer(fbb);
			FB_HuLingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HuLingBaseContainer.EndFB_HuLingBaseContainer(fbb);
			FB_HuLingBaseContainer.FinishFB_HuLingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HuLingBase.txt", ms.ToArray());
			}
		}

		static void ExprotHunGeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunGeBaseProvider.Instance.ListData;
			
			Offset<FB_HunGeBase>[] offsetArray = new Offset<FB_HunGeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunGeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunGeBase.CreateFB_HunGeBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_HunGeBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HunGeBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.NeedExp,curData.NeedItemId,curData.NeedItemCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunGeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunGeBaseContainer.StartFB_HunGeBaseContainer(fbb);
			FB_HunGeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HunGeBaseContainer.EndFB_HunGeBaseContainer(fbb);
			FB_HunGeBaseContainer.FinishFB_HunGeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunGeBase.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangGongMing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangGongMingProvider.Instance.ListData;
			
			Offset<FB_HunJiangGongMing>[] offsetArray = new Offset<FB_HunJiangGongMing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangGongMingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangGongMing.CreateFB_HunJiangGongMing(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Quality,curData.StarCount,FB_HunJiangGongMing.CreateAttrListVector(fbb,curData.AttrList.ToArray()),FB_HunJiangGongMing.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangGongMingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangGongMingContainer.StartFB_HunJiangGongMingContainer(fbb);
			FB_HunJiangGongMingContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangGongMingContainer.EndFB_HunJiangGongMingContainer(fbb);
			FB_HunJiangGongMingContainer.FinishFB_HunJiangGongMingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangGongMing.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangItemBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangItemBaseProvider.Instance.ListData;
			
			Offset<FB_HunJiangItemBase>[] offsetArray = new Offset<FB_HunJiangItemBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangItemBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangItemBase.CreateFB_HunJiangItemBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Quality,curData.Component,curData.StarCount,curData.Exp,FB_HunJiangItemBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HunJiangItemBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.SellPrice,curData.GetPathID,curData.SystemRemind,fbb.CreateString(curData.ItemDesc),fbb.CreateString(curData.DropModle));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangItemBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangItemBaseContainer.StartFB_HunJiangItemBaseContainer(fbb);
			FB_HunJiangItemBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangItemBaseContainer.EndFB_HunJiangItemBaseContainer(fbb);
			FB_HunJiangItemBaseContainer.FinishFB_HunJiangItemBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangItemBase.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangItemLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangItemLevelUpProvider.Instance.ListData;
			
			Offset<FB_HunJiangItemLevelUp>[] offsetArray = new Offset<FB_HunJiangItemLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangItemLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangItemLevelUp.CreateFB_HunJiangItemLevelUp(fbb, curData.Id,curData.Quality,curData.Exp,FB_HunJiangItemLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HunJiangItemLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangItemLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangItemLevelUpContainer.StartFB_HunJiangItemLevelUpContainer(fbb);
			FB_HunJiangItemLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangItemLevelUpContainer.EndFB_HunJiangItemLevelUpContainer(fbb);
			FB_HunJiangItemLevelUpContainer.FinishFB_HunJiangItemLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangItemLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangJiBanBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangJiBanBaseProvider.Instance.ListData;
			
			Offset<FB_HunJiangJiBanBase>[] offsetArray = new Offset<FB_HunJiangJiBanBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangJiBanBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangJiBanBase.CreateFB_HunJiangJiBanBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Quality,FB_HunJiangJiBanBase.CreateSkillIDListVector(fbb,curData.SkillIDList.ToArray()),FB_HunJiangJiBanBase.CreateHunJiangIDListVector(fbb,curData.HunJiangIDList.ToArray()),FB_HunJiangJiBanBase.CreateShangZhenAttrIdListVector(fbb,curData.ShangZhenAttrIdList.ToArray()),FB_HunJiangJiBanBase.CreateShangZhenAttrValListVector(fbb,curData.ShangZhenAttrValList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangJiBanBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangJiBanBaseContainer.StartFB_HunJiangJiBanBaseContainer(fbb);
			FB_HunJiangJiBanBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangJiBanBaseContainer.EndFB_HunJiangJiBanBaseContainer(fbb);
			FB_HunJiangJiBanBaseContainer.FinishFB_HunJiangJiBanBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangJiBanBase.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangJiBanLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangJiBanLevelUpProvider.Instance.ListData;
			
			Offset<FB_HunJiangJiBanLevelUp>[] offsetArray = new Offset<FB_HunJiangJiBanLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangJiBanLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] SkillDesListoffSet = new StringOffset[curData.SkillDesList.Count];
				for (var i = 0; i < curData.SkillDesList.Count; i++)
				{
					SkillDesListoffSet[i] = fbb.CreateString(curData.SkillDesList[i]);
				}

				offsetArray[index] = FB_HunJiangJiBanLevelUp.CreateFB_HunJiangJiBanLevelUp(fbb, curData.ID,curData.StarCount,curData.ItemId,curData.ItemCount,FB_HunJiangJiBanLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_HunJiangJiBanLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_HunJiangJiBanLevelUp.CreateSkillDesListVector(fbb,SkillDesListoffSet));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangJiBanLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangJiBanLevelUpContainer.StartFB_HunJiangJiBanLevelUpContainer(fbb);
			FB_HunJiangJiBanLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangJiBanLevelUpContainer.EndFB_HunJiangJiBanLevelUpContainer(fbb);
			FB_HunJiangJiBanLevelUpContainer.FinishFB_HunJiangJiBanLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangJiBanLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangJiBanSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangJiBanSkillProvider.Instance.ListData;
			
			Offset<FB_HunJiangJiBanSkill>[] offsetArray = new Offset<FB_HunJiangJiBanSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangJiBanSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangJiBanSkill.CreateFB_HunJiangJiBanSkill(fbb, curData.ID,fbb.CreateString(curData.Name),curData.PassiveSkillID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangJiBanSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangJiBanSkillContainer.StartFB_HunJiangJiBanSkillContainer(fbb);
			FB_HunJiangJiBanSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangJiBanSkillContainer.EndFB_HunJiangJiBanSkillContainer(fbb);
			FB_HunJiangJiBanSkillContainer.FinishFB_HunJiangJiBanSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangJiBanSkill.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangJuHun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangJuHunProvider.Instance.ListData;
			
			Offset<FB_HunJiangJuHun>[] offsetArray = new Offset<FB_HunJiangJuHun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangJuHunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangJuHun.CreateFB_HunJiangJuHun(fbb, curData.ID,curData.UnitId,curData.ShopItemId,curData.ItemId,curData.ItemCount,curData.DropBoxItemId,curData.GetItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangJuHunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangJuHunContainer.StartFB_HunJiangJuHunContainer(fbb);
			FB_HunJiangJuHunContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangJuHunContainer.EndFB_HunJiangJuHunContainer(fbb);
			FB_HunJiangJuHunContainer.FinishFB_HunJiangJuHunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangJuHun.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangRongLian()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangRongLianProvider.Instance.ListData;
			
			Offset<FB_HunJiangRongLian>[] offsetArray = new Offset<FB_HunJiangRongLian>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangRongLianProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangRongLian.CreateFB_HunJiangRongLian(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Quality,curData.ItemCount,curData.DroBoxId,fbb.CreateString(curData.Tip));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangRongLianContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangRongLianContainer.StartFB_HunJiangRongLianContainer(fbb);
			FB_HunJiangRongLianContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangRongLianContainer.EndFB_HunJiangRongLianContainer(fbb);
			FB_HunJiangRongLianContainer.FinishFB_HunJiangRongLianContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangRongLian.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangShangZhen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangShangZhenProvider.Instance.ListData;
			
			Offset<FB_HunJiangShangZhen>[] offsetArray = new Offset<FB_HunJiangShangZhen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangShangZhenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangShangZhen.CreateFB_HunJiangShangZhen(fbb, curData.ID,curData.UnLockType,FB_HunJiangShangZhen.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()),curData.ShangZhenAttrmultiple);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangShangZhenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangShangZhenContainer.StartFB_HunJiangShangZhenContainer(fbb);
			FB_HunJiangShangZhenContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangShangZhenContainer.EndFB_HunJiangShangZhenContainer(fbb);
			FB_HunJiangShangZhenContainer.FinishFB_HunJiangShangZhenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangShangZhen.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangSkillBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangSkillBaseProvider.Instance.ListData;
			
			Offset<FB_HunJiangSkillBase>[] offsetArray = new Offset<FB_HunJiangSkillBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangSkillBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangSkillBase.CreateFB_HunJiangSkillBase(fbb, curData.ID,curData.SkillBaseId,fbb.CreateString(curData.BookDesc));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangSkillBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangSkillBaseContainer.StartFB_HunJiangSkillBaseContainer(fbb);
			FB_HunJiangSkillBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangSkillBaseContainer.EndFB_HunJiangSkillBaseContainer(fbb);
			FB_HunJiangSkillBaseContainer.FinishFB_HunJiangSkillBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangSkillBase.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangSkillValue()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangSkillValueProvider.Instance.ListData;
			
			Offset<FB_HunJiangSkillValue>[] offsetArray = new Offset<FB_HunJiangSkillValue>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangSkillValueProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangSkillValue.CreateFB_HunJiangSkillValue(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Quality,curData.RaceRequired,curData.PassiveSkillId,curData.RateOne,curData.RateTwo);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_HunJiangSkillValueContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangSkillValueContainer.StartFB_HunJiangSkillValueContainer(fbb);
			FB_HunJiangSkillValueContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangSkillValueContainer.EndFB_HunJiangSkillValueContainer(fbb);
			FB_HunJiangSkillValueContainer.FinishFB_HunJiangSkillValueContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangSkillValue.txt", ms.ToArray());
			}
		}

		static void ExprotHunJiangXunBao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_HunJiangXunBaoProvider.Instance.ListData;
			
			Offset<FB_HunJiangXunBao>[] offsetArray = new Offset<FB_HunJiangXunBao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_HunJiangXunBaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_HunJiangXunBao.CreateFB_HunJiangXunBao(fbb, curData.Id,curData.HighDropBox,curData.LowDropBox,curData.LowTime,curData.HighTime,curData.BaseRandom,curData.AddRandom,curData.PageId,curData.ShopItemId,curData.NeedItemId,curData.TreasureAddMoney,FB_HunJiangXunBao.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_HunJiangXunBao.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.FixedDropBox);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_HunJiangXunBaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_HunJiangXunBaoContainer.StartFB_HunJiangXunBaoContainer(fbb);
			FB_HunJiangXunBaoContainer.AddItems(fbb, dataVector);
			var provider = FB_HunJiangXunBaoContainer.EndFB_HunJiangXunBaoContainer(fbb);
			FB_HunJiangXunBaoContainer.FinishFB_HunJiangXunBaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/HunJiangXunBao.txt", ms.ToArray());
			}
		}

		static void ExprotIapGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_IapGiftProvider.Instance.ListData;
			
			Offset<FB_IapGift>[] offsetArray = new Offset<FB_IapGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_IapGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_IapGift.CreateFB_IapGift(fbb, curData.Id,curData.Type,curData.IapId,FB_IapGift.CreateWorldLvListVector(fbb,curData.WorldLvList.ToArray()),FB_IapGift.CreateRmbIdListVector(fbb,curData.RmbIdList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_IapGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_IapGiftContainer.StartFB_IapGiftContainer(fbb);
			FB_IapGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_IapGiftContainer.EndFB_IapGiftContainer(fbb);
			FB_IapGiftContainer.FinishFB_IapGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/IapGift.txt", ms.ToArray());
			}
		}

		static void ExprotIapGift2()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_IapGift2Provider.Instance.ListData;
			
			Offset<FB_IapGift2>[] offsetArray = new Offset<FB_IapGift2>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_IapGift2Provider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_IapGift2.CreateFB_IapGift2(fbb, curData.Id,fbb.CreateString(curData.Des2c),fbb.CreateString(curData.Des3c),curData.Type,curData.IapId,FB_IapGift2.CreateWorldLvListVector(fbb,curData.WorldLvList.ToArray()),curData.allBuyRmbId,FB_IapGift2.CreateRmbIdListVector(fbb,curData.RmbIdList.ToArray()),curData.Power);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_IapGift2Container.CreateItemsVector(fbb, offsetArray);
	
			FB_IapGift2Container.StartFB_IapGift2Container(fbb);
			FB_IapGift2Container.AddItems(fbb, dataVector);
			var provider = FB_IapGift2Container.EndFB_IapGift2Container(fbb);
			FB_IapGift2Container.FinishFB_IapGift2ContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/IapGift2.txt", ms.ToArray());
			}
		}

		static void ExprotIapGiftReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_IapGiftRewardProvider.Instance.ListData;
			
			Offset<FB_IapGiftReward>[] offsetArray = new Offset<FB_IapGiftReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_IapGiftRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_IapGiftReward.CreateFB_IapGiftReward(fbb, curData.Id,curData.RmbId,curData.RefreshType,curData.LimitValue,FB_IapGiftReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_IapGiftReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_IapGiftRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_IapGiftRewardContainer.StartFB_IapGiftRewardContainer(fbb);
			FB_IapGiftRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_IapGiftRewardContainer.EndFB_IapGiftRewardContainer(fbb);
			FB_IapGiftRewardContainer.FinishFB_IapGiftRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/IapGiftReward.txt", ms.ToArray());
			}
		}

		static void ExprotIapGiftReward2()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_IapGiftReward2Provider.Instance.ListData;
			
			Offset<FB_IapGiftReward2>[] offsetArray = new Offset<FB_IapGiftReward2>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_IapGiftReward2Provider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_IapGiftReward2.CreateFB_IapGiftReward2(fbb, curData.Id,fbb.CreateString(curData.Des2c),curData.RefreshType,curData.related,curData.LimitValue,curData.showModel,curData.infor,fbb.CreateString(curData.showPassiveSkillMain),fbb.CreateString(curData.showPassiveSkillMinor),FB_IapGiftReward2.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_IapGiftReward2.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),FB_IapGiftReward2.CreateDailyItemIdListVector(fbb,curData.DailyItemIdList.ToArray()),FB_IapGiftReward2.CreateDailyItemCountListVector(fbb,curData.DailyItemCountList.ToArray()),fbb.CreateString(curData.name));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_IapGiftReward2Container.CreateItemsVector(fbb, offsetArray);
	
			FB_IapGiftReward2Container.StartFB_IapGiftReward2Container(fbb);
			FB_IapGiftReward2Container.AddItems(fbb, dataVector);
			var provider = FB_IapGiftReward2Container.EndFB_IapGiftReward2Container(fbb);
			FB_IapGiftReward2Container.FinishFB_IapGiftReward2ContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/IapGiftReward2.txt", ms.ToArray());
			}
		}

		static void ExprotImpact()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ImpactProvider.Instance.ListData;
			
			Offset<FB_Impact>[] offsetArray = new Offset<FB_Impact>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ImpactProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Impact.CreateFB_Impact(fbb, curData.ImpactID,fbb.CreateString(curData.Name),curData.DescribeID,curData.InDatabase,curData.ElapseOffline,curData.Duration,curData.SortId,curData.ShowType,curData.MaxOverlayCount,curData.IsNeedNoticeClient,fbb.CreateString(curData.BuffIcon),curData.BuffType,curData.IsLimitSkill,curData.threat,curData.LogicID,curData.EffectId,curData.KeepEffect,curData.MutexcollectionId,curData.Mutexpriority,FB_Impact.CreateParamValueListVector(fbb,curData.ParamValue_List.ToArray()),curData.CanSynchronization,curData.RefreshID,curData.RemoveType);
				KeyMaping[curData.ImpactID] = index;
			}
			var dataVector = FB_ImpactContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ImpactContainer.StartFB_ImpactContainer(fbb);
			FB_ImpactContainer.AddItems(fbb, dataVector);
			var provider = FB_ImpactContainer.EndFB_ImpactContainer(fbb);
			FB_ImpactContainer.FinishFB_ImpactContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/Impact.txt", ms.ToArray());
			}
		}

		static void ExprotItemCompoundBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemCompoundBaseProvider.Instance.ListData;
			
			Offset<FB_ItemCompoundBase>[] offsetArray = new Offset<FB_ItemCompoundBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemCompoundBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemCompoundBase.CreateFB_ItemCompoundBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Type,FB_ItemCompoundBase.CreateRequireIDListVector(fbb,curData.RequireIDList.ToArray()),FB_ItemCompoundBase.CreateRequireNumListVector(fbb,curData.RequireNumList.ToArray()),curData.CompoundID,curData.CompoundNum,curData.Rate,curData.CostType,curData.CostValue,curData.LevelVisible,curData.StrIdManual,curData.WuHunCostType,curData.WuHunCostValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ItemCompoundBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemCompoundBaseContainer.StartFB_ItemCompoundBaseContainer(fbb);
			FB_ItemCompoundBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemCompoundBaseContainer.EndFB_ItemCompoundBaseContainer(fbb);
			FB_ItemCompoundBaseContainer.FinishFB_ItemCompoundBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ItemCompoundBase.txt", ms.ToArray());
			}
		}

		static void ExprotItemCompoundType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemCompoundTypeProvider.Instance.ListData;
			
			Offset<FB_ItemCompoundType>[] offsetArray = new Offset<FB_ItemCompoundType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemCompoundTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemCompoundType.CreateFB_ItemCompoundType(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Page,curData.FirstPage,curData.SecondPage,curData.MenPai,FB_ItemCompoundType.CreateCompoundIDListVector(fbb,curData.CompoundIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ItemCompoundTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemCompoundTypeContainer.StartFB_ItemCompoundTypeContainer(fbb);
			FB_ItemCompoundTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemCompoundTypeContainer.EndFB_ItemCompoundTypeContainer(fbb);
			FB_ItemCompoundTypeContainer.FinishFB_ItemCompoundTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ItemCompoundType.txt", ms.ToArray());
			}
		}

		static void ExprotItemGiftBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemGiftBaseProvider.Instance.ListData;
			
			Offset<FB_ItemGiftBase>[] offsetArray = new Offset<FB_ItemGiftBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemGiftBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemGiftBase.CreateFB_ItemGiftBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Type,curData.Param,curData.GiftNum);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ItemGiftBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemGiftBaseContainer.StartFB_ItemGiftBaseContainer(fbb);
			FB_ItemGiftBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemGiftBaseContainer.EndFB_ItemGiftBaseContainer(fbb);
			FB_ItemGiftBaseContainer.FinishFB_ItemGiftBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ItemGiftBase.txt", ms.ToArray());
			}
		}

		static void ExprotItemLocation()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemLocationProvider.Instance.ListData;
			
			Offset<FB_ItemLocation>[] offsetArray = new Offset<FB_ItemLocation>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemLocationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemLocation.CreateFB_ItemLocation(fbb, curData.Id,curData.UseTime,fbb.CreateString(curData.ShowText),fbb.CreateString(curData.Icon),curData.SceneID,curData.PosX,curData.PosZ,curData.RoleID,curData.Area,curData.ProgressBase);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ItemLocationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemLocationContainer.StartFB_ItemLocationContainer(fbb);
			FB_ItemLocationContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemLocationContainer.EndFB_ItemLocationContainer(fbb);
			FB_ItemLocationContainer.FinishFB_ItemLocationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ItemLocation.txt", ms.ToArray());
			}
		}

		static void ExprotItemStepUpBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ItemStepUpBaseProvider.Instance.ListData;
			
			Offset<FB_ItemStepUpBase>[] offsetArray = new Offset<FB_ItemStepUpBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ItemStepUpBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ItemStepUpBase.CreateFB_ItemStepUpBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_ItemStepUpBase.CreateCompoundIDListVector(fbb,curData.CompoundIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ItemStepUpBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ItemStepUpBaseContainer.StartFB_ItemStepUpBaseContainer(fbb);
			FB_ItemStepUpBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ItemStepUpBaseContainer.EndFB_ItemStepUpBaseContainer(fbb);
			FB_ItemStepUpBaseContainer.FinishFB_ItemStepUpBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ItemStepUpBase.txt", ms.ToArray());
			}
		}

		static void ExprotJiBanAttrLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiBanAttrLevelUpProvider.Instance.ListData;
			
			Offset<FB_JiBanAttrLevelUp>[] offsetArray = new Offset<FB_JiBanAttrLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiBanAttrLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiBanAttrLevelUp.CreateFB_JiBanAttrLevelUp(fbb, curData.ID,fbb.CreateString(curData.JiBanID),curData.Quality,FB_JiBanAttrLevelUp.CreateAttrTypeListVector(fbb,curData.AttrTypeList.ToArray()),FB_JiBanAttrLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JiBanAttrLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiBanAttrLevelUpContainer.StartFB_JiBanAttrLevelUpContainer(fbb);
			FB_JiBanAttrLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JiBanAttrLevelUpContainer.EndFB_JiBanAttrLevelUpContainer(fbb);
			FB_JiBanAttrLevelUpContainer.FinishFB_JiBanAttrLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiBanAttrLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJiBanBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiBanBaseProvider.Instance.ListData;
			
			Offset<FB_JiBanBase>[] offsetArray = new Offset<FB_JiBanBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiBanBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiBanBase.CreateFB_JiBanBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Tips),curData.InitQuality,FB_JiBanBase.CreateCardIDListVector(fbb,curData.CardIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JiBanBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiBanBaseContainer.StartFB_JiBanBaseContainer(fbb);
			FB_JiBanBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JiBanBaseContainer.EndFB_JiBanBaseContainer(fbb);
			FB_JiBanBaseContainer.FinishFB_JiBanBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiBanBase.txt", ms.ToArray());
			}
		}

		static void ExprotJieSoulStone()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieSoulStoneProvider.Instance.ListData;
			
			Offset<FB_JieSoulStone>[] offsetArray = new Offset<FB_JieSoulStone>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieSoulStoneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieSoulStone.CreateFB_JieSoulStone(fbb, curData.Id,curData.Level,curData.ItemID,FB_JieSoulStone.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JieSoulStone.CreateAttrListVector(fbb,curData.AttrList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JieSoulStoneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieSoulStoneContainer.StartFB_JieSoulStoneContainer(fbb);
			FB_JieSoulStoneContainer.AddItems(fbb, dataVector);
			var provider = FB_JieSoulStoneContainer.EndFB_JieSoulStoneContainer(fbb);
			FB_JieSoulStoneContainer.FinishFB_JieSoulStoneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieSoulStone.txt", ms.ToArray());
			}
		}

		static void ExprotJieYuanBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieYuanBaseProvider.Instance.ListData;
			
			Offset<FB_JieYuanBase>[] offsetArray = new Offset<FB_JieYuanBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieYuanBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieYuanBase.CreateFB_JieYuanBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Quality,curData.SpecialSymbol,curData.Component,curData.SuitId,curData.UnLockLevel,curData.Decompose,FB_JieYuanBase.CreateBaseAttrIdListVector(fbb,curData.BaseAttrIdList.ToArray()),FB_JieYuanBase.CreateBaseAttrValueListVector(fbb,curData.BaseAttrValueList.ToArray()),FB_JieYuanBase.CreateSpecialAttrIdListVector(fbb,curData.SpecialAttrIdList.ToArray()),FB_JieYuanBase.CreateSpecialAttrValueListVector(fbb,curData.SpecialAttrValueList.ToArray()),curData.GetPathId,fbb.CreateString(curData.Describe),fbb.CreateString(curData.DropModle),curData.SystemRemind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JieYuanBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieYuanBaseContainer.StartFB_JieYuanBaseContainer(fbb);
			FB_JieYuanBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JieYuanBaseContainer.EndFB_JieYuanBaseContainer(fbb);
			FB_JieYuanBaseContainer.FinishFB_JieYuanBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieYuanBase.txt", ms.ToArray());
			}
		}

		static void ExprotJieYuanLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieYuanLevelUpProvider.Instance.ListData;
			
			Offset<FB_JieYuanLevelUp>[] offsetArray = new Offset<FB_JieYuanLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieYuanLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieYuanLevelUp.CreateFB_JieYuanLevelUp(fbb, curData.Id,curData.ExpByTime,curData.ExpNeed,FB_JieYuanLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_JieYuanLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JieYuanLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieYuanLevelUpContainer.StartFB_JieYuanLevelUpContainer(fbb);
			FB_JieYuanLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JieYuanLevelUpContainer.EndFB_JieYuanLevelUpContainer(fbb);
			FB_JieYuanLevelUpContainer.FinishFB_JieYuanLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieYuanLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJieYuanSlotResonance()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieYuanSlotResonanceProvider.Instance.ListData;
			
			Offset<FB_JieYuanSlotResonance>[] offsetArray = new Offset<FB_JieYuanSlotResonance>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieYuanSlotResonanceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieYuanSlotResonance.CreateFB_JieYuanSlotResonance(fbb, curData.ID,curData.MinLevel,FB_JieYuanSlotResonance.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JieYuanSlotResonance.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JieYuanSlotResonanceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieYuanSlotResonanceContainer.StartFB_JieYuanSlotResonanceContainer(fbb);
			FB_JieYuanSlotResonanceContainer.AddItems(fbb, dataVector);
			var provider = FB_JieYuanSlotResonanceContainer.EndFB_JieYuanSlotResonanceContainer(fbb);
			FB_JieYuanSlotResonanceContainer.FinishFB_JieYuanSlotResonanceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieYuanSlotResonance.txt", ms.ToArray());
			}
		}

		static void ExprotJieYuanSuit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieYuanSuitProvider.Instance.ListData;
			
			Offset<FB_JieYuanSuit>[] offsetArray = new Offset<FB_JieYuanSuit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieYuanSuitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieYuanSuit.CreateFB_JieYuanSuit(fbb, curData.ID,FB_JieYuanSuit.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_JieYuanSuit.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JieYuanSuitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieYuanSuitContainer.StartFB_JieYuanSuitContainer(fbb);
			FB_JieYuanSuitContainer.AddItems(fbb, dataVector);
			var provider = FB_JieYuanSuitContainer.EndFB_JieYuanSuitContainer(fbb);
			FB_JieYuanSuitContainer.FinishFB_JieYuanSuitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieYuanSuit.txt", ms.ToArray());
			}
		}

		static void ExprotJieYuanSuitInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JieYuanSuitInfoProvider.Instance.ListData;
			
			Offset<FB_JieYuanSuitInfo>[] offsetArray = new Offset<FB_JieYuanSuitInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JieYuanSuitInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JieYuanSuitInfo.CreateFB_JieYuanSuitInfo(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Quailty,curData.ActiveCount,FB_JieYuanSuitInfo.CreateSuitIDListVector(fbb,curData.SuitIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JieYuanSuitInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JieYuanSuitInfoContainer.StartFB_JieYuanSuitInfoContainer(fbb);
			FB_JieYuanSuitInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_JieYuanSuitInfoContainer.EndFB_JieYuanSuitInfoContainer(fbb);
			FB_JieYuanSuitInfoContainer.FinishFB_JieYuanSuitInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JieYuanSuitInfo.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingAttrPercentLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingAttrPercentLevelUpProvider.Instance.ListData;
			
			Offset<FB_JiLingAttrPercentLevelUp>[] offsetArray = new Offset<FB_JiLingAttrPercentLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingAttrPercentLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingAttrPercentLevelUp.CreateFB_JiLingAttrPercentLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemNum,curData.AttrId,curData.AddAttrPercent);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingAttrPercentLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingAttrPercentLevelUpContainer.StartFB_JiLingAttrPercentLevelUpContainer(fbb);
			FB_JiLingAttrPercentLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingAttrPercentLevelUpContainer.EndFB_JiLingAttrPercentLevelUpContainer(fbb);
			FB_JiLingAttrPercentLevelUpContainer.FinishFB_JiLingAttrPercentLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingAttrPercentLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingDecompose()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingDecomposeProvider.Instance.ListData;
			
			Offset<FB_JiLingDecompose>[] offsetArray = new Offset<FB_JiLingDecompose>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingDecomposeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingDecompose.CreateFB_JiLingDecompose(fbb, curData.Id,curData.DecomposeType,curData.MoneyType,curData.MoneyNum);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingDecomposeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingDecomposeContainer.StartFB_JiLingDecomposeContainer(fbb);
			FB_JiLingDecomposeContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingDecomposeContainer.EndFB_JiLingDecomposeContainer(fbb);
			FB_JiLingDecomposeContainer.FinishFB_JiLingDecomposeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingDecompose.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingDestinyAddAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingDestinyAddAttrProvider.Instance.ListData;
			
			Offset<FB_JiLingDestinyAddAttr>[] offsetArray = new Offset<FB_JiLingDestinyAddAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingDestinyAddAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingDestinyAddAttr.CreateFB_JiLingDestinyAddAttr(fbb, curData.Id,fbb.CreateString(curData.Name),curData.UnlockingLevel,FB_JiLingDestinyAddAttr.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingDestinyAddAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingDestinyAddAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingDestinyAddAttrContainer.StartFB_JiLingDestinyAddAttrContainer(fbb);
			FB_JiLingDestinyAddAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingDestinyAddAttrContainer.EndFB_JiLingDestinyAddAttrContainer(fbb);
			FB_JiLingDestinyAddAttrContainer.FinishFB_JiLingDestinyAddAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingDestinyAddAttr.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingDestinyLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingDestinyLevelUpProvider.Instance.ListData;
			
			Offset<FB_JiLingDestinyLevelUp>[] offsetArray = new Offset<FB_JiLingDestinyLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingDestinyLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingDestinyLevelUp.CreateFB_JiLingDestinyLevelUp(fbb, curData.Id,curData.CostType,curData.CostValue,FB_JiLingDestinyLevelUp.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingDestinyLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingDestinyLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingDestinyLevelUpContainer.StartFB_JiLingDestinyLevelUpContainer(fbb);
			FB_JiLingDestinyLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingDestinyLevelUpContainer.EndFB_JiLingDestinyLevelUpContainer(fbb);
			FB_JiLingDestinyLevelUpContainer.FinishFB_JiLingDestinyLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingDestinyLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingJingJie()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingJingJieProvider.Instance.ListData;
			
			Offset<FB_JiLingJingJie>[] offsetArray = new Offset<FB_JiLingJingJie>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingJingJieProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingJingJie.CreateFB_JiLingJingJie(fbb, curData.Id,curData.Level,curData.Step,curData.Quality,fbb.CreateString(curData.StepSprite),fbb.CreateString(curData.Info),curData.ItemID,curData.ItemCount,curData.RealityItemID,FB_JiLingJingJie.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingJingJie.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingJingJieContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingJingJieContainer.StartFB_JiLingJingJieContainer(fbb);
			FB_JiLingJingJieContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingJingJieContainer.EndFB_JiLingJingJieContainer(fbb);
			FB_JiLingJingJieContainer.FinishFB_JiLingJingJieContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingJingJie.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingMapBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingMapBaseProvider.Instance.ListData;
			
			Offset<FB_JiLingMapBase>[] offsetArray = new Offset<FB_JiLingMapBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingMapBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingMapBase.CreateFB_JiLingMapBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.MaPexplain,curData.DoubleRewIndex,FB_JiLingMapBase.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_JiLingMapBase.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JiLingMapBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingMapBaseContainer.StartFB_JiLingMapBaseContainer(fbb);
			FB_JiLingMapBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingMapBaseContainer.EndFB_JiLingMapBaseContainer(fbb);
			FB_JiLingMapBaseContainer.FinishFB_JiLingMapBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingMapBase.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingQiLingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingQiLingBaseProvider.Instance.ListData;
			
			Offset<FB_JiLingQiLingBase>[] offsetArray = new Offset<FB_JiLingQiLingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingQiLingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingQiLingBase.CreateFB_JiLingQiLingBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.MaxStep);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingQiLingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingQiLingBaseContainer.StartFB_JiLingQiLingBaseContainer(fbb);
			FB_JiLingQiLingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingQiLingBaseContainer.EndFB_JiLingQiLingBaseContainer(fbb);
			FB_JiLingQiLingBaseContainer.FinishFB_JiLingQiLingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingQiLingBase.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingQiLingGongMing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingQiLingGongMingProvider.Instance.ListData;
			
			Offset<FB_JiLingQiLingGongMing>[] offsetArray = new Offset<FB_JiLingQiLingGongMing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingQiLingGongMingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingQiLingGongMing.CreateFB_JiLingQiLingGongMing(fbb, curData.Id,curData.Step,curData.ItemID,curData.RealityItemID,curData.ItemCount,FB_JiLingQiLingGongMing.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingQiLingGongMing.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingQiLingGongMingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingQiLingGongMingContainer.StartFB_JiLingQiLingGongMingContainer(fbb);
			FB_JiLingQiLingGongMingContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingQiLingGongMingContainer.EndFB_JiLingQiLingGongMingContainer(fbb);
			FB_JiLingQiLingGongMingContainer.FinishFB_JiLingQiLingGongMingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingQiLingGongMing.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingQiLingGongMingAddAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingQiLingGongMingAddAttrProvider.Instance.ListData;
			
			Offset<FB_JiLingQiLingGongMingAddAttr>[] offsetArray = new Offset<FB_JiLingQiLingGongMingAddAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingQiLingGongMingAddAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingQiLingGongMingAddAttr.CreateFB_JiLingQiLingGongMingAddAttr(fbb, curData.Id,curData.QiLingType,curData.QiLingLevel,curData.GongMingLevel,FB_JiLingQiLingGongMingAddAttr.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingQiLingGongMingAddAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingQiLingGongMingAddAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingQiLingGongMingAddAttrContainer.StartFB_JiLingQiLingGongMingAddAttrContainer(fbb);
			FB_JiLingQiLingGongMingAddAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingQiLingGongMingAddAttrContainer.EndFB_JiLingQiLingGongMingAddAttrContainer(fbb);
			FB_JiLingQiLingGongMingAddAttrContainer.FinishFB_JiLingQiLingGongMingAddAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingQiLingGongMingAddAttr.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingQiLingLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingQiLingLevelUpProvider.Instance.ListData;
			
			Offset<FB_JiLingQiLingLevelUp>[] offsetArray = new Offset<FB_JiLingQiLingLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingQiLingLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingQiLingLevelUp.CreateFB_JiLingQiLingLevelUp(fbb, curData.Id,curData.Step,curData.CostType,curData.CostValue,FB_JiLingQiLingLevelUp.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingQiLingLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingQiLingLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingQiLingLevelUpContainer.StartFB_JiLingQiLingLevelUpContainer(fbb);
			FB_JiLingQiLingLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingQiLingLevelUpContainer.EndFB_JiLingQiLingLevelUpContainer(fbb);
			FB_JiLingQiLingLevelUpContainer.FinishFB_JiLingQiLingLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingQiLingLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingTransformationAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingTransformationAttrProvider.Instance.ListData;
			
			Offset<FB_JiLingTransformationAttr>[] offsetArray = new Offset<FB_JiLingTransformationAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingTransformationAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingTransformationAttr.CreateFB_JiLingTransformationAttr(fbb, curData.Id,curData.AttrId,curData.AttrPercentId,curData.TransformationAttrId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingTransformationAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingTransformationAttrContainer.StartFB_JiLingTransformationAttrContainer(fbb);
			FB_JiLingTransformationAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingTransformationAttrContainer.EndFB_JiLingTransformationAttrContainer(fbb);
			FB_JiLingTransformationAttrContainer.FinishFB_JiLingTransformationAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingTransformationAttr.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingWuHunLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingWuHunLevelUpProvider.Instance.ListData;
			
			Offset<FB_JiLingWuHunLevelUp>[] offsetArray = new Offset<FB_JiLingWuHunLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingWuHunLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingWuHunLevelUp.CreateFB_JiLingWuHunLevelUp(fbb, curData.Id,curData.Step,fbb.CreateString(curData.StepSprite),curData.CostType,curData.CostValue,curData.RealityCostType,FB_JiLingWuHunLevelUp.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JiLingWuHunLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingWuHunLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingWuHunLevelUpContainer.StartFB_JiLingWuHunLevelUpContainer(fbb);
			FB_JiLingWuHunLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingWuHunLevelUpContainer.EndFB_JiLingWuHunLevelUpContainer(fbb);
			FB_JiLingWuHunLevelUpContainer.FinishFB_JiLingWuHunLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingWuHunLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJiLingWuHunNingHun()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiLingWuHunNingHunProvider.Instance.ListData;
			
			Offset<FB_JiLingWuHunNingHun>[] offsetArray = new Offset<FB_JiLingWuHunNingHun>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiLingWuHunNingHunProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiLingWuHunNingHun.CreateFB_JiLingWuHunNingHun(fbb, curData.Id,curData.AttrId,curData.AttrValue,curData.DefaultVaule,curData.CostType,curData.CostValue,curData.RealityCostType,curData.MinUnLockRate,curData.MaxUnLockRate,curData.UnLockRate,FB_JiLingWuHunNingHun.CreateMinAddValueListVector(fbb,curData.MinAddValueList.ToArray()),FB_JiLingWuHunNingHun.CreateMaxAddValueListVector(fbb,curData.MaxAddValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JiLingWuHunNingHunContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiLingWuHunNingHunContainer.StartFB_JiLingWuHunNingHunContainer(fbb);
			FB_JiLingWuHunNingHunContainer.AddItems(fbb, dataVector);
			var provider = FB_JiLingWuHunNingHunContainer.EndFB_JiLingWuHunNingHunContainer(fbb);
			FB_JiLingWuHunNingHunContainer.FinishFB_JiLingWuHunNingHunContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiLingWuHunNingHun.txt", ms.ToArray());
			}
		}

		static void ExprotJiYiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JiYiBaseProvider.Instance.ListData;
			
			Offset<FB_JiYiBase>[] offsetArray = new Offset<FB_JiYiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JiYiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JiYiBase.CreateFB_JiYiBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Time,curData.QuestCount,curData.LimitFinger,curData.Reward,curData.RewardNumber);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JiYiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JiYiBaseContainer.StartFB_JiYiBaseContainer(fbb);
			FB_JiYiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JiYiBaseContainer.EndFB_JiYiBaseContainer(fbb);
			FB_JiYiBaseContainer.FinishFB_JiYiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JiYiBase.txt", ms.ToArray());
			}
		}

		static void ExprotJuBaoPenTreasure()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JuBaoPenTreasureProvider.Instance.ListData;
			
			Offset<FB_JuBaoPenTreasure>[] offsetArray = new Offset<FB_JuBaoPenTreasure>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JuBaoPenTreasureProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JuBaoPenTreasure.CreateFB_JuBaoPenTreasure(fbb, curData.Id,curData.Group,curData.Draw,curData.Recharge,curData.Cost,FB_JuBaoPenTreasure.CreateTimesListVector(fbb,curData.TimesList.ToArray()),FB_JuBaoPenTreasure.CreateWeightListVector(fbb,curData.WeightList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_JuBaoPenTreasureContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JuBaoPenTreasureContainer.StartFB_JuBaoPenTreasureContainer(fbb);
			FB_JuBaoPenTreasureContainer.AddItems(fbb, dataVector);
			var provider = FB_JuBaoPenTreasureContainer.EndFB_JuBaoPenTreasureContainer(fbb);
			FB_JuBaoPenTreasureContainer.FinishFB_JuBaoPenTreasureContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JuBaoPenTreasure.txt", ms.ToArray());
			}
		}

		static void ExprotJuHunAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JuHunAttrProvider.Instance.ListData;
			
			Offset<FB_JuHunAttr>[] offsetArray = new Offset<FB_JuHunAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JuHunAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JuHunAttr.CreateFB_JuHunAttr(fbb, curData.ID,curData.LevelupType,curData.Exp,curData.Type,curData.MaxLevel,FB_JuHunAttr.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_JuHunAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_JuHunAttr.CreateAttrValueIncListVector(fbb,curData.AttrValueIncList.ToArray()),FB_JuHunAttr.CreateAttrValueIncRangeListVector(fbb,curData.AttrValueIncRangeList.ToArray()),fbb.CreateString(curData.IconSpriteName));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JuHunAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JuHunAttrContainer.StartFB_JuHunAttrContainer(fbb);
			FB_JuHunAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_JuHunAttrContainer.EndFB_JuHunAttrContainer(fbb);
			FB_JuHunAttrContainer.FinishFB_JuHunAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JuHunAttr.txt", ms.ToArray());
			}
		}

		static void ExprotJuhunBoxWeight()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JuhunBoxWeightProvider.Instance.ListData;
			
			Offset<FB_JuhunBoxWeight>[] offsetArray = new Offset<FB_JuhunBoxWeight>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JuhunBoxWeightProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JuhunBoxWeight.CreateFB_JuhunBoxWeight(fbb, curData.ID,curData.UnLockLevel,FB_JuhunBoxWeight.CreateWeightListVector(fbb,curData.WeightList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JuhunBoxWeightContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JuhunBoxWeightContainer.StartFB_JuhunBoxWeightContainer(fbb);
			FB_JuhunBoxWeightContainer.AddItems(fbb, dataVector);
			var provider = FB_JuhunBoxWeightContainer.EndFB_JuhunBoxWeightContainer(fbb);
			FB_JuhunBoxWeightContainer.FinishFB_JuhunBoxWeightContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JuhunBoxWeight.txt", ms.ToArray());
			}
		}

		static void ExprotJuHunLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JuHunLevelUpProvider.Instance.ListData;
			
			Offset<FB_JuHunLevelUp>[] offsetArray = new Offset<FB_JuHunLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JuHunLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JuHunLevelUp.CreateFB_JuHunLevelUp(fbb, curData.ID,FB_JuHunLevelUp.CreateQualityListVector(fbb,curData.QualityList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JuHunLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JuHunLevelUpContainer.StartFB_JuHunLevelUpContainer(fbb);
			FB_JuHunLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_JuHunLevelUpContainer.EndFB_JuHunLevelUpContainer(fbb);
			FB_JuHunLevelUpContainer.FinishFB_JuHunLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JuHunLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotJuLingCSbase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_JuLingCSbaseProvider.Instance.ListData;
			
			Offset<FB_JuLingCSbase>[] offsetArray = new Offset<FB_JuLingCSbase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_JuLingCSbaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_JuLingCSbase.CreateFB_JuLingCSbase(fbb, curData.ID,fbb.CreateString(curData.CSName),curData.TotalExp,curData.Totaljifen,curData.MopUpLockId,curData.BossType,curData.TotalStage,curData.FlushTime,curData.CopySceneId,fbb.CreateString(curData.TowerName),curData.FuLingId,fbb.CreateString(curData.LimitDesc),curData.TimeLimit,fbb.CreateString(curData.RankDesc),curData.UIModelId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_JuLingCSbaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_JuLingCSbaseContainer.StartFB_JuLingCSbaseContainer(fbb);
			FB_JuLingCSbaseContainer.AddItems(fbb, dataVector);
			var provider = FB_JuLingCSbaseContainer.EndFB_JuLingCSbaseContainer(fbb);
			FB_JuLingCSbaseContainer.FinishFB_JuLingCSbaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/JuLingCSbase.txt", ms.ToArray());
			}
		}

		static void ExprotKaiFuPaiHang()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KaiFuPaiHangProvider.Instance.ListData;
			
			Offset<FB_KaiFuPaiHang>[] offsetArray = new Offset<FB_KaiFuPaiHang>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KaiFuPaiHangProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KaiFuPaiHang.CreateFB_KaiFuPaiHang(fbb, curData.ID,FB_KaiFuPaiHang.CreateRecommendListVector(fbb,curData.RecommendList.ToArray()),FB_KaiFuPaiHang.CreateTypeListVector(fbb,curData.TypeList.ToArray()),curData.ItemId,fbb.CreateString(curData.RecommendName),curData.RankId,curData.OpenDay,curData.EndDays);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_KaiFuPaiHangContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KaiFuPaiHangContainer.StartFB_KaiFuPaiHangContainer(fbb);
			FB_KaiFuPaiHangContainer.AddItems(fbb, dataVector);
			var provider = FB_KaiFuPaiHangContainer.EndFB_KaiFuPaiHangContainer(fbb);
			FB_KaiFuPaiHangContainer.FinishFB_KaiFuPaiHangContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/KaiFuPaiHang.txt", ms.ToArray());
			}
		}

		static void ExprotKaiFuPaiHangType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KaiFuPaiHangTypeProvider.Instance.ListData;
			
			Offset<FB_KaiFuPaiHangType>[] offsetArray = new Offset<FB_KaiFuPaiHangType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KaiFuPaiHangTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] RewardByJobNameListoffSet = new StringOffset[curData.RewardByJobNameList.Count];
				for (var i = 0; i < curData.RewardByJobNameList.Count; i++)
				{
					RewardByJobNameListoffSet[i] = fbb.CreateString(curData.RewardByJobNameList[i]);
				}
StringOffset[] RewardNameListoffSet = new StringOffset[curData.RewardNameList.Count];
				for (var i = 0; i < curData.RewardNameList.Count; i++)
				{
					RewardNameListoffSet[i] = fbb.CreateString(curData.RewardNameList[i]);
				}

				offsetArray[index] = FB_KaiFuPaiHangType.CreateFB_KaiFuPaiHangType(fbb, curData.ID,FB_KaiFuPaiHangType.CreateGoalListVector(fbb,curData.GoalList.ToArray()),fbb.CreateString(curData.Label),curData.PaiHangIndex,FB_KaiFuPaiHangType.CreateRewardByJobListVector(fbb,curData.RewardByJobList.ToArray()),FB_KaiFuPaiHangType.CreateRewardByJobNameListVector(fbb,RewardByJobNameListoffSet),FB_KaiFuPaiHangType.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_KaiFuPaiHangType.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()),FB_KaiFuPaiHangType.CreateRewardNameListVector(fbb,RewardNameListoffSet),curData.IsBind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_KaiFuPaiHangTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KaiFuPaiHangTypeContainer.StartFB_KaiFuPaiHangTypeContainer(fbb);
			FB_KaiFuPaiHangTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_KaiFuPaiHangTypeContainer.EndFB_KaiFuPaiHangTypeContainer(fbb);
			FB_KaiFuPaiHangTypeContainer.FinishFB_KaiFuPaiHangTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/KaiFuPaiHangType.txt", ms.ToArray());
			}
		}

		static void ExprotKneadFaceOClothing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_KneadFaceOClothingProvider.Instance.ListData;
			
			Offset<FB_KneadFaceOClothing>[] offsetArray = new Offset<FB_KneadFaceOClothing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_KneadFaceOClothingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_KneadFaceOClothing.CreateFB_KneadFaceOClothing(fbb, curData.Id,curData.MenPai,curData.Sex,curData.PupilColor,fbb.CreateString(curData.PupilIcon),curData.HairModelId,fbb.CreateString(curData.HairModelIcon),curData.PlayerSkinBaseId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_KneadFaceOClothingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_KneadFaceOClothingContainer.StartFB_KneadFaceOClothingContainer(fbb);
			FB_KneadFaceOClothingContainer.AddItems(fbb, dataVector);
			var provider = FB_KneadFaceOClothingContainer.EndFB_KneadFaceOClothingContainer(fbb);
			FB_KneadFaceOClothingContainer.FinishFB_KneadFaceOClothingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/KneadFaceOClothing.txt", ms.ToArray());
			}
		}

		static void ExprotLadder()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LadderProvider.Instance.ListData;
			
			Offset<FB_Ladder>[] offsetArray = new Offset<FB_Ladder>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LadderProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Ladder.CreateFB_Ladder(fbb, curData.ID,fbb.CreateString(curData.Name),curData.JiFen,curData.JiFenReward,curData.ShenQiLevel,curData.DescStrId,curData.DIdShenQi,curData.DidShenQiShowId,curData.DBangYuan,curData.DBangYin,FB_Ladder.CreateDIdItemListVector(fbb,curData.DIdItemList.ToArray()),FB_Ladder.CreateDIdItemCountListVector(fbb,curData.DIdItemCountList.ToArray()),curData.SIdShenQi,curData.SIdShenQiShowId,curData.SBangYuan,curData.SBangYin,FB_Ladder.CreateSIdItemListVector(fbb,curData.SIdItemList.ToArray()),FB_Ladder.CreateSIdItemCountListVector(fbb,curData.SIdItemCountList.ToArray()),fbb.CreateString(curData.RankBg),fbb.CreateString(curData.RankIcon));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LadderContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LadderContainer.StartFB_LadderContainer(fbb);
			FB_LadderContainer.AddItems(fbb, dataVector);
			var provider = FB_LadderContainer.EndFB_LadderContainer(fbb);
			FB_LadderContainer.FinishFB_LadderContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/Ladder.txt", ms.ToArray());
			}
		}

		static void ExprotLadderHonor()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LadderHonorProvider.Instance.ListData;
			
			Offset<FB_LadderHonor>[] offsetArray = new Offset<FB_LadderHonor>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LadderHonorProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LadderHonor.CreateFB_LadderHonor(fbb, curData.ID,curData.HonorNeed,curData.BangYuan,curData.BangYin,FB_LadderHonor.CreateIdItemListVector(fbb,curData.IdItemList.ToArray()),FB_LadderHonor.CreateCountItemListVector(fbb,curData.CountItemList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LadderHonorContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LadderHonorContainer.StartFB_LadderHonorContainer(fbb);
			FB_LadderHonorContainer.AddItems(fbb, dataVector);
			var provider = FB_LadderHonorContainer.EndFB_LadderHonorContainer(fbb);
			FB_LadderHonorContainer.FinishFB_LadderHonorContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LadderHonor.txt", ms.ToArray());
			}
		}

		static void ExprotLadderMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LadderMissionProvider.Instance.ListData;
			
			Offset<FB_LadderMission>[] offsetArray = new Offset<FB_LadderMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LadderMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LadderMission.CreateFB_LadderMission(fbb, curData.ID,curData.IdStrDic,FB_LadderMission.CreateTargetListVector(fbb,curData.TargetList.ToArray()),FB_LadderMission.CreateHonorListVector(fbb,curData.HonorList.ToArray()),curData.ShowId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LadderMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LadderMissionContainer.StartFB_LadderMissionContainer(fbb);
			FB_LadderMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_LadderMissionContainer.EndFB_LadderMissionContainer(fbb);
			FB_LadderMissionContainer.FinishFB_LadderMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LadderMission.txt", ms.ToArray());
			}
		}

		static void ExprotLevelCompensate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelCompensateProvider.Instance.ListData;
			
			Offset<FB_LevelCompensate>[] offsetArray = new Offset<FB_LevelCompensate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelCompensateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelCompensate.CreateFB_LevelCompensate(fbb, curData.ID,FB_LevelCompensate.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_LevelCompensate.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LevelCompensateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelCompensateContainer.StartFB_LevelCompensateContainer(fbb);
			FB_LevelCompensateContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelCompensateContainer.EndFB_LevelCompensateContainer(fbb);
			FB_LevelCompensateContainer.FinishFB_LevelCompensateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelCompensate.txt", ms.ToArray());
			}
		}

		static void ExprotLevelExp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelExpProvider.Instance.ListData;
			
			Offset<FB_LevelExp>[] offsetArray = new Offset<FB_LevelExp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelExpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelExp.CreateFB_LevelExp(fbb, curData.LevelID,curData.Level,curData.Exp);
				KeyMaping[curData.LevelID] = index;
			}
			var dataVector = FB_LevelExpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelExpContainer.StartFB_LevelExpContainer(fbb);
			FB_LevelExpContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelExpContainer.EndFB_LevelExpContainer(fbb);
			FB_LevelExpContainer.FinishFB_LevelExpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelExp.txt", ms.ToArray());
			}
		}

		static void ExprotLevelSealAddExpRate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelSealAddExpRateProvider.Instance.ListData;
			
			Offset<FB_LevelSealAddExpRate>[] offsetArray = new Offset<FB_LevelSealAddExpRate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelSealAddExpRateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelSealAddExpRate.CreateFB_LevelSealAddExpRate(fbb, curData.ID,curData.EpxAttr);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LevelSealAddExpRateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelSealAddExpRateContainer.StartFB_LevelSealAddExpRateContainer(fbb);
			FB_LevelSealAddExpRateContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelSealAddExpRateContainer.EndFB_LevelSealAddExpRateContainer(fbb);
			FB_LevelSealAddExpRateContainer.FinishFB_LevelSealAddExpRateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelSealAddExpRate.txt", ms.ToArray());
			}
		}

		static void ExprotLevelSealAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelSealAttrProvider.Instance.ListData;
			
			Offset<FB_LevelSealAttr>[] offsetArray = new Offset<FB_LevelSealAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelSealAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelSealAttr.CreateFB_LevelSealAttr(fbb, curData.ID,curData.Exp,FB_LevelSealAttr.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LevelSealAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LevelSealAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelSealAttrContainer.StartFB_LevelSealAttrContainer(fbb);
			FB_LevelSealAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelSealAttrContainer.EndFB_LevelSealAttrContainer(fbb);
			FB_LevelSealAttrContainer.FinishFB_LevelSealAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelSealAttr.txt", ms.ToArray());
			}
		}

		static void ExprotLevelSealBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelSealBaseProvider.Instance.ListData;
			
			Offset<FB_LevelSealBase>[] offsetArray = new Offset<FB_LevelSealBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelSealBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelSealBase.CreateFB_LevelSealBase(fbb, curData.ID,curData.LevelLimit,curData.Duration,curData.HighCopySceneId,curData.LowCopySceneId,curData.SeverOpenDay);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LevelSealBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelSealBaseContainer.StartFB_LevelSealBaseContainer(fbb);
			FB_LevelSealBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelSealBaseContainer.EndFB_LevelSealBaseContainer(fbb);
			FB_LevelSealBaseContainer.FinishFB_LevelSealBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelSealBase.txt", ms.ToArray());
			}
		}

		static void ExprotLevelSealCopyScene()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LevelSealCopySceneProvider.Instance.ListData;
			
			Offset<FB_LevelSealCopyScene>[] offsetArray = new Offset<FB_LevelSealCopyScene>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LevelSealCopySceneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LevelSealCopyScene.CreateFB_LevelSealCopyScene(fbb, curData.ID,curData.CopySceneId,FB_LevelSealCopyScene.CreateShowItemListVector(fbb,curData.ShowItemList.ToArray()),FB_LevelSealCopyScene.CreateCostValueListVector(fbb,curData.CostValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LevelSealCopySceneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LevelSealCopySceneContainer.StartFB_LevelSealCopySceneContainer(fbb);
			FB_LevelSealCopySceneContainer.AddItems(fbb, dataVector);
			var provider = FB_LevelSealCopySceneContainer.EndFB_LevelSealCopySceneContainer(fbb);
			FB_LevelSealCopySceneContainer.FinishFB_LevelSealCopySceneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LevelSealCopyScene.txt", ms.ToArray());
			}
		}

		static void ExprotLimitActivityBroadcast()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LimitActivityBroadcastProvider.Instance.ListData;
			
			Offset<FB_LimitActivityBroadcast>[] offsetArray = new Offset<FB_LimitActivityBroadcast>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LimitActivityBroadcastProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LimitActivityBroadcast.CreateFB_LimitActivityBroadcast(fbb, curData.ID,fbb.CreateString(curData.ActivityIcon),curData.TriggerType,curData.CountDownTime,curData.TriggerTime,curData.StrDic,curData.ActivityID,fbb.CreateString(curData.UIName),fbb.CreateString(curData.Path),curData.TriggerEndTime);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LimitActivityBroadcastContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LimitActivityBroadcastContainer.StartFB_LimitActivityBroadcastContainer(fbb);
			FB_LimitActivityBroadcastContainer.AddItems(fbb, dataVector);
			var provider = FB_LimitActivityBroadcastContainer.EndFB_LimitActivityBroadcastContainer(fbb);
			FB_LimitActivityBroadcastContainer.FinishFB_LimitActivityBroadcastContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LimitActivityBroadcast.txt", ms.ToArray());
			}
		}

		static void ExprotLingBaoBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingBaoBaseProvider.Instance.ListData;
			
			Offset<FB_LingBaoBase>[] offsetArray = new Offset<FB_LingBaoBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingBaoBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingBaoBase.CreateFB_LingBaoBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameSprite),curData.FakeObjId,curData.Quality,curData.Type,curData.UnlockType,curData.UnlockParam,curData.UnlockParamSec,FB_LingBaoBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingBaoBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_LingBaoBase.CreateAttValueMaxListVector(fbb,curData.AttValueMaxList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingBaoBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingBaoBaseContainer.StartFB_LingBaoBaseContainer(fbb);
			FB_LingBaoBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_LingBaoBaseContainer.EndFB_LingBaoBaseContainer(fbb);
			FB_LingBaoBaseContainer.FinishFB_LingBaoBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingBaoBase.txt", ms.ToArray());
			}
		}

		static void ExprotLingBaoLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingBaoLevelUpProvider.Instance.ListData;
			
			Offset<FB_LingBaoLevelUp>[] offsetArray = new Offset<FB_LingBaoLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingBaoLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingBaoLevelUp.CreateFB_LingBaoLevelUp(fbb, curData.Id,curData.MoneyType,curData.MoneyCost,FB_LingBaoLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingBaoLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingBaoLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingBaoLevelUpContainer.StartFB_LingBaoLevelUpContainer(fbb);
			FB_LingBaoLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_LingBaoLevelUpContainer.EndFB_LingBaoLevelUpContainer(fbb);
			FB_LingBaoLevelUpContainer.FinishFB_LingBaoLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingBaoLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotLingBaoQiLing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingBaoQiLingProvider.Instance.ListData;
			
			Offset<FB_LingBaoQiLing>[] offsetArray = new Offset<FB_LingBaoQiLing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingBaoQiLingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingBaoQiLing.CreateFB_LingBaoQiLing(fbb, curData.Id,curData.ItemId,curData.ItemCount,FB_LingBaoQiLing.CreateAttrRateListVector(fbb,curData.AttrRateList.ToArray()),FB_LingBaoQiLing.CreateMinAddValueListVector(fbb,curData.MinAddValueList.ToArray()),FB_LingBaoQiLing.CreateMaxAddValueListVector(fbb,curData.MaxAddValueList.ToArray()),curData.DefaultAttrValue,curData.GuaranteeAddRate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingBaoQiLingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingBaoQiLingContainer.StartFB_LingBaoQiLingContainer(fbb);
			FB_LingBaoQiLingContainer.AddItems(fbb, dataVector);
			var provider = FB_LingBaoQiLingContainer.EndFB_LingBaoQiLingContainer(fbb);
			FB_LingBaoQiLingContainer.FinishFB_LingBaoQiLingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingBaoQiLing.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangBaseProvider.Instance.ListData;
			
			Offset<FB_LingGangBase>[] offsetArray = new Offset<FB_LingGangBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangBase.CreateFB_LingGangBase(fbb, curData.Id,curData.Exp,FB_LingGangBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingGangBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.DamageDelPercent,curData.MaxLingGangPoint);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingGangBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangBaseContainer.StartFB_LingGangBaseContainer(fbb);
			FB_LingGangBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangBaseContainer.EndFB_LingGangBaseContainer(fbb);
			FB_LingGangBaseContainer.FinishFB_LingGangBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangBase.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangLingWuLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangLingWuLevelUpProvider.Instance.ListData;
			
			Offset<FB_LingGangLingWuLevelUp>[] offsetArray = new Offset<FB_LingGangLingWuLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangLingWuLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangLingWuLevelUp.CreateFB_LingGangLingWuLevelUp(fbb, curData.Id,curData.CostPoint,FB_LingGangLingWuLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingGangLingWuLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingGangLingWuLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangLingWuLevelUpContainer.StartFB_LingGangLingWuLevelUpContainer(fbb);
			FB_LingGangLingWuLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangLingWuLevelUpContainer.EndFB_LingGangLingWuLevelUpContainer(fbb);
			FB_LingGangLingWuLevelUpContainer.FinishFB_LingGangLingWuLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangLingWuLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangSkillBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangSkillBaseProvider.Instance.ListData;
			
			Offset<FB_LingGangSkillBase>[] offsetArray = new Offset<FB_LingGangSkillBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangSkillBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangSkillBase.CreateFB_LingGangSkillBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.MenPai,curData.Type,curData.Position,curData.MaxLevel,FB_LingGangSkillBase.CreateUnLockIdListVector(fbb,curData.UnLockIdList.ToArray()),curData.UnLockValue,curData.TakeEffectType,curData.TakeEffectValue,curData.TakeEffectValueSec,curData.StrDescId,FB_LingGangSkillBase.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()),curData.BorderType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LingGangSkillBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangSkillBaseContainer.StartFB_LingGangSkillBaseContainer(fbb);
			FB_LingGangSkillBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangSkillBaseContainer.EndFB_LingGangSkillBaseContainer(fbb);
			FB_LingGangSkillBaseContainer.FinishFB_LingGangSkillBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangSkillBase.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangSkillLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangSkillLevelUpProvider.Instance.ListData;
			
			Offset<FB_LingGangSkillLevelUp>[] offsetArray = new Offset<FB_LingGangSkillLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangSkillLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangSkillLevelUp.CreateFB_LingGangSkillLevelUp(fbb, curData.Id,fbb.CreateString(curData.Name),curData.PassiveSkillId,curData.ItemId,curData.ItemCount);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingGangSkillLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangSkillLevelUpContainer.StartFB_LingGangSkillLevelUpContainer(fbb);
			FB_LingGangSkillLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangSkillLevelUpContainer.EndFB_LingGangSkillLevelUpContainer(fbb);
			FB_LingGangSkillLevelUpContainer.FinishFB_LingGangSkillLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangSkillLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangStepBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangStepBaseProvider.Instance.ListData;
			
			Offset<FB_LingGangStepBase>[] offsetArray = new Offset<FB_LingGangStepBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangStepBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangStepBase.CreateFB_LingGangStepBase(fbb, curData.Id,curData.Star,curData.Step,curData.Exp,curData.UnLockLevel,curData.UnLockItem,curData.UnLockItemNum,FB_LingGangStepBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingGangStepBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.FakeObjId,curData.EffectId,curData.JianKeEffectId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingGangStepBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangStepBaseContainer.StartFB_LingGangStepBaseContainer(fbb);
			FB_LingGangStepBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangStepBaseContainer.EndFB_LingGangStepBaseContainer(fbb);
			FB_LingGangStepBaseContainer.FinishFB_LingGangStepBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangStepBase.txt", ms.ToArray());
			}
		}

		static void ExprotLingGangXuLing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LingGangXuLingProvider.Instance.ListData;
			
			Offset<FB_LingGangXuLing>[] offsetArray = new Offset<FB_LingGangXuLing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LingGangXuLingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LingGangXuLing.CreateFB_LingGangXuLing(fbb, curData.Id,curData.LimitStep,curData.ItemId,curData.ItemCount,curData.SureSucceedMoney,curData.Rate,curData.CriticalRate,curData.CriticalAddLv,FB_LingGangXuLing.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_LingGangXuLing.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_LingGangXuLingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LingGangXuLingContainer.StartFB_LingGangXuLingContainer(fbb);
			FB_LingGangXuLingContainer.AddItems(fbb, dataVector);
			var provider = FB_LingGangXuLingContainer.EndFB_LingGangXuLingContainer(fbb);
			FB_LingGangXuLingContainer.FinishFB_LingGangXuLingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LingGangXuLing.txt", ms.ToArray());
			}
		}

		static void ExprotLotteryMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LotteryMissionProvider.Instance.ListData;
			
			Offset<FB_LotteryMission>[] offsetArray = new Offset<FB_LotteryMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LotteryMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LotteryMission.CreateFB_LotteryMission(fbb, curData.ID,fbb.CreateString(curData.Name),curData.StrDictID,fbb.CreateString(curData.Icon),curData.Type,curData.GoalNum,FB_LotteryMission.CreateParamListVector(fbb,curData.ParamList.ToArray()),FB_LotteryMission.CreateParamTypeListVector(fbb,curData.ParamTypeList.ToArray()),FB_LotteryMission.CreateBonusTypeListVector(fbb,curData.BonusTypeList.ToArray()),FB_LotteryMission.CreateBonusIDListVector(fbb,curData.BonusIDList.ToArray()),FB_LotteryMission.CreateBonusNumListVector(fbb,curData.BonusNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LotteryMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LotteryMissionContainer.StartFB_LotteryMissionContainer(fbb);
			FB_LotteryMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_LotteryMissionContainer.EndFB_LotteryMissionContainer(fbb);
			FB_LotteryMissionContainer.FinishFB_LotteryMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LotteryMission.txt", ms.ToArray());
			}
		}

		static void ExprotLuckyRollDailyMissions()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LuckyRollDailyMissionsProvider.Instance.ListData;
			
			Offset<FB_LuckyRollDailyMissions>[] offsetArray = new Offset<FB_LuckyRollDailyMissions>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LuckyRollDailyMissionsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LuckyRollDailyMissions.CreateFB_LuckyRollDailyMissions(fbb, curData.ID,curData.StrId,curData.LogicType,curData.RewardItem,curData.RewardCount,curData.TypeParam,curData.FunctionId,curData.UIInfoId,curData.Param);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LuckyRollDailyMissionsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LuckyRollDailyMissionsContainer.StartFB_LuckyRollDailyMissionsContainer(fbb);
			FB_LuckyRollDailyMissionsContainer.AddItems(fbb, dataVector);
			var provider = FB_LuckyRollDailyMissionsContainer.EndFB_LuckyRollDailyMissionsContainer(fbb);
			FB_LuckyRollDailyMissionsContainer.FinishFB_LuckyRollDailyMissionsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LuckyRollDailyMissions.txt", ms.ToArray());
			}
		}

		static void ExprotLuckyRollMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_LuckyRollMissionProvider.Instance.ListData;
			
			Offset<FB_LuckyRollMission>[] offsetArray = new Offset<FB_LuckyRollMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_LuckyRollMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_LuckyRollMission.CreateFB_LuckyRollMission(fbb, curData.ID,curData.ScoreLimit,curData.DicId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_LuckyRollMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_LuckyRollMissionContainer.StartFB_LuckyRollMissionContainer(fbb);
			FB_LuckyRollMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_LuckyRollMissionContainer.EndFB_LuckyRollMissionContainer(fbb);
			FB_LuckyRollMissionContainer.FinishFB_LuckyRollMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/LuckyRollMission.txt", ms.ToArray());
			}
		}

		static void ExprotMaiDianPart()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MaiDianPartProvider.Instance.ListData;
			
			Offset<FB_MaiDianPart>[] offsetArray = new Offset<FB_MaiDianPart>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MaiDianPartProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MaiDianPart.CreateFB_MaiDianPart(fbb, curData.ID,curData.StateLevel,curData.PayItemID,curData.PayItem,FB_MaiDianPart.CreateAttributeIDListVector(fbb,curData.AttributeIDList.ToArray()),FB_MaiDianPart.CreateAttributeValueListVector(fbb,curData.AttributeValueList.ToArray()),curData.IsLevelHundred);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MaiDianPartContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MaiDianPartContainer.StartFB_MaiDianPartContainer(fbb);
			FB_MaiDianPartContainer.AddItems(fbb, dataVector);
			var provider = FB_MaiDianPartContainer.EndFB_MaiDianPartContainer(fbb);
			FB_MaiDianPartContainer.FinishFB_MaiDianPartContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MaiDianPart.txt", ms.ToArray());
			}
		}

		static void ExprotMaiDianSuit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MaiDianSuitProvider.Instance.ListData;
			
			Offset<FB_MaiDianSuit>[] offsetArray = new Offset<FB_MaiDianSuit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MaiDianSuitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MaiDianSuit.CreateFB_MaiDianSuit(fbb, curData.ID,curData.System,curData.Switch,curData.Conditon,fbb.CreateString(curData.Name),fbb.CreateString(curData.Nameicon),FB_MaiDianSuit.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_MaiDianSuit.CreateSkillListVector(fbb,curData.SkillList.ToArray()),fbb.CreateString(curData.Photo),curData.PositionX,curData.PositionY,curData.Model,curData.Button,curData.Wear,fbb.CreateString(curData.NameiconSelect),curData.unlockDescStrId,curData.GetNewModelId,curData.OpenServerDay,curData.IsLevelHundred);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MaiDianSuitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MaiDianSuitContainer.StartFB_MaiDianSuitContainer(fbb);
			FB_MaiDianSuitContainer.AddItems(fbb, dataVector);
			var provider = FB_MaiDianSuitContainer.EndFB_MaiDianSuitContainer(fbb);
			FB_MaiDianSuitContainer.FinishFB_MaiDianSuitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MaiDianSuit.txt", ms.ToArray());
			}
		}

		static void ExprotMarryActivityMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryActivityMissionProvider.Instance.ListData;
			
			Offset<FB_MarryActivityMission>[] offsetArray = new Offset<FB_MarryActivityMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryActivityMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryActivityMission.CreateFB_MarryActivityMission(fbb, curData.ID,curData.Score,curData.target,curData.limitTimes,curData.DicId,fbb.CreateString(curData.Name),curData.ShowItemId,curData.Type,curData.SortId,curData.UIID,curData.ParmID,curData.ActivityType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryActivityMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryActivityMissionContainer.StartFB_MarryActivityMissionContainer(fbb);
			FB_MarryActivityMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryActivityMissionContainer.EndFB_MarryActivityMissionContainer(fbb);
			FB_MarryActivityMissionContainer.FinishFB_MarryActivityMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryActivityMission.txt", ms.ToArray());
			}
		}

		static void ExprotMarryActivityMissionReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryActivityMissionRewardProvider.Instance.ListData;
			
			Offset<FB_MarryActivityMissionReward>[] offsetArray = new Offset<FB_MarryActivityMissionReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryActivityMissionRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryActivityMissionReward.CreateFB_MarryActivityMissionReward(fbb, curData.ID,curData.ScoreLimit,curData.Level,curData.DicId,curData.BonusIndex,curData.RewardType,curData.ActivityType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryActivityMissionRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryActivityMissionRewardContainer.StartFB_MarryActivityMissionRewardContainer(fbb);
			FB_MarryActivityMissionRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryActivityMissionRewardContainer.EndFB_MarryActivityMissionRewardContainer(fbb);
			FB_MarryActivityMissionRewardContainer.FinishFB_MarryActivityMissionRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryActivityMissionReward.txt", ms.ToArray());
			}
		}

		static void ExprotMarryBaseInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryBaseInfoProvider.Instance.ListData;
			
			Offset<FB_MarryBaseInfo>[] offsetArray = new Offset<FB_MarryBaseInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryBaseInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryBaseInfo.CreateFB_MarryBaseInfo(fbb, curData.ID,curData.GoldType,curData.GoldNum,curData.ShoutStrId,curData.HaveHunLi,curData.ItemId,curData.ItemNum,FB_MarryBaseInfo.CreateFirstMenPaiItemIdListVector(fbb,curData.FirstMenPaiItemIdList.ToArray()),curData.FirstItemNum,FB_MarryBaseInfo.CreateSecondMenPaiItemIdListVector(fbb,curData.SecondMenPaiItemIdList.ToArray()),curData.SecondItemNum,curData.MailId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryBaseInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryBaseInfoContainer.StartFB_MarryBaseInfoContainer(fbb);
			FB_MarryBaseInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryBaseInfoContainer.EndFB_MarryBaseInfoContainer(fbb);
			FB_MarryBaseInfoContainer.FinishFB_MarryBaseInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryBaseInfo.txt", ms.ToArray());
			}
		}

		static void ExprotMarryGiftInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryGiftInfoProvider.Instance.ListData;
			
			Offset<FB_MarryGiftInfo>[] offsetArray = new Offset<FB_MarryGiftInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryGiftInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryGiftInfo.CreateFB_MarryGiftInfo(fbb, curData.ID,curData.GoldType,curData.GoldNum,curData.ItemFastId,curData.ItemFastNum,curData.ItemSignId,curData.ItemSignNum,curData.EffectiveDays);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryGiftInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryGiftInfoContainer.StartFB_MarryGiftInfoContainer(fbb);
			FB_MarryGiftInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryGiftInfoContainer.EndFB_MarryGiftInfoContainer(fbb);
			FB_MarryGiftInfoContainer.FinishFB_MarryGiftInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryGiftInfo.txt", ms.ToArray());
			}
		}

		static void ExprotMarrySceneInfo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarrySceneInfoProvider.Instance.ListData;
			
			Offset<FB_MarrySceneInfo>[] offsetArray = new Offset<FB_MarrySceneInfo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarrySceneInfoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarrySceneInfo.CreateFB_MarrySceneInfo(fbb, curData.ID,curData.StartTime,curData.EndTime);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarrySceneInfoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarrySceneInfoContainer.StartFB_MarrySceneInfoContainer(fbb);
			FB_MarrySceneInfoContainer.AddItems(fbb, dataVector);
			var provider = FB_MarrySceneInfoContainer.EndFB_MarrySceneInfoContainer(fbb);
			FB_MarrySceneInfoContainer.FinishFB_MarrySceneInfoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarrySceneInfo.txt", ms.ToArray());
			}
		}

		static void ExprotMarryShopItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryShopItemProvider.Instance.ListData;
			
			Offset<FB_MarryShopItem>[] offsetArray = new Offset<FB_MarryShopItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryShopItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryShopItem.CreateFB_MarryShopItem(fbb, curData.ID,fbb.CreateString(curData.GiftName),curData.LimitItemNum,curData.MoneyType,curData.Price,curData.CcurPrice,curData.Discount,curData.BonusId,curData.ActivityType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryShopItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryShopItemContainer.StartFB_MarryShopItemContainer(fbb);
			FB_MarryShopItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryShopItemContainer.EndFB_MarryShopItemContainer(fbb);
			FB_MarryShopItemContainer.FinishFB_MarryShopItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryShopItem.txt", ms.ToArray());
			}
		}

		static void ExprotMarryShowItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryShowItemProvider.Instance.ListData;
			
			Offset<FB_MarryShowItem>[] offsetArray = new Offset<FB_MarryShowItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryShowItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryShowItem.CreateFB_MarryShowItem(fbb, curData.ID,FB_MarryShowItem.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_MarryShowItem.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryShowItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryShowItemContainer.StartFB_MarryShowItemContainer(fbb);
			FB_MarryShowItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryShowItemContainer.EndFB_MarryShowItemContainer(fbb);
			FB_MarryShowItemContainer.FinishFB_MarryShowItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryShowItem.txt", ms.ToArray());
			}
		}

		static void ExprotMarryTitleBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryTitleBaseProvider.Instance.ListData;
			
			Offset<FB_MarryTitleBase>[] offsetArray = new Offset<FB_MarryTitleBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryTitleBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryTitleBase.CreateFB_MarryTitleBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.TargetStep);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryTitleBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryTitleBaseContainer.StartFB_MarryTitleBaseContainer(fbb);
			FB_MarryTitleBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryTitleBaseContainer.EndFB_MarryTitleBaseContainer(fbb);
			FB_MarryTitleBaseContainer.FinishFB_MarryTitleBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryTitleBase.txt", ms.ToArray());
			}
		}

		static void ExprotMarryWuNvBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryWuNvBaseProvider.Instance.ListData;
			
			Offset<FB_MarryWuNvBase>[] offsetArray = new Offset<FB_MarryWuNvBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryWuNvBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryWuNvBase.CreateFB_MarryWuNvBase(fbb, curData.ID,curData.MoneyType,curData.MoneyNum,curData.value,curData.Num);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryWuNvBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryWuNvBaseContainer.StartFB_MarryWuNvBaseContainer(fbb);
			FB_MarryWuNvBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryWuNvBaseContainer.EndFB_MarryWuNvBaseContainer(fbb);
			FB_MarryWuNvBaseContainer.FinishFB_MarryWuNvBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryWuNvBase.txt", ms.ToArray());
			}
		}

		static void ExprotMarryXinWuBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MarryXinWuBaseProvider.Instance.ListData;
			
			Offset<FB_MarryXinWuBase>[] offsetArray = new Offset<FB_MarryXinWuBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MarryXinWuBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MarryXinWuBase.CreateFB_MarryXinWuBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Level,curData.Step,curData.Exp,curData.PayItemID,curData.QuickItemCount,FB_MarryXinWuBase.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_MarryXinWuBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_MarryXinWuBase.CreateSpecAttrIDListVector(fbb,curData.SpecAttrIDList.ToArray()),FB_MarryXinWuBase.CreateSpectAttrValueListVector(fbb,curData.SpectAttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MarryXinWuBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MarryXinWuBaseContainer.StartFB_MarryXinWuBaseContainer(fbb);
			FB_MarryXinWuBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MarryXinWuBaseContainer.EndFB_MarryXinWuBaseContainer(fbb);
			FB_MarryXinWuBaseContainer.FinishFB_MarryXinWuBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MarryXinWuBase.txt", ms.ToArray());
			}
		}

		static void ExprotMergeRankReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MergeRankRewardProvider.Instance.ListData;
			
			Offset<FB_MergeRankReward>[] offsetArray = new Offset<FB_MergeRankReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MergeRankRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MergeRankReward.CreateFB_MergeRankReward(fbb, curData.ID,curData.tpye,curData.group,curData.acceptType,curData.rankMin,curData.rankMax,curData.index,curData.showModelId,FB_MergeRankReward.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_MergeRankReward.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MergeRankRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MergeRankRewardContainer.StartFB_MergeRankRewardContainer(fbb);
			FB_MergeRankRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_MergeRankRewardContainer.EndFB_MergeRankRewardContainer(fbb);
			FB_MergeRankRewardContainer.FinishFB_MergeRankRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MergeRankReward.txt", ms.ToArray());
			}
		}

		static void ExprotMergeRecharge()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MergeRechargeProvider.Instance.ListData;
			
			Offset<FB_MergeRecharge>[] offsetArray = new Offset<FB_MergeRecharge>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MergeRechargeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MergeRecharge.CreateFB_MergeRecharge(fbb, curData.Id,curData.Index,curData.WorldLvMin,curData.WorldLvMax,curData.Glod,FB_MergeRecharge.CreateItemByJobListVector(fbb,curData.ItemByJobList.ToArray()),FB_MergeRecharge.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_MergeRecharge.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()),fbb.CreateString(curData.BigFake));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MergeRechargeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MergeRechargeContainer.StartFB_MergeRechargeContainer(fbb);
			FB_MergeRechargeContainer.AddItems(fbb, dataVector);
			var provider = FB_MergeRechargeContainer.EndFB_MergeRechargeContainer(fbb);
			FB_MergeRechargeContainer.FinishFB_MergeRechargeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MergeRecharge.txt", ms.ToArray());
			}
		}

		static void ExprotMergeTouZi()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MergeTouZiProvider.Instance.ListData;
			
			Offset<FB_MergeTouZi>[] offsetArray = new Offset<FB_MergeTouZi>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MergeTouZiProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MergeTouZi.CreateFB_MergeTouZi(fbb, curData.ID,fbb.CreateString(curData.Name),curData.RewardDay,curData.MoneyNum,curData.StrId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MergeTouZiContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MergeTouZiContainer.StartFB_MergeTouZiContainer(fbb);
			FB_MergeTouZiContainer.AddItems(fbb, dataVector);
			var provider = FB_MergeTouZiContainer.EndFB_MergeTouZiContainer(fbb);
			FB_MergeTouZiContainer.FinishFB_MergeTouZiContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MergeTouZi.txt", ms.ToArray());
			}
		}

		static void ExprotMergeTouZiType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MergeTouZiTypeProvider.Instance.ListData;
			
			Offset<FB_MergeTouZiType>[] offsetArray = new Offset<FB_MergeTouZiType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MergeTouZiTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MergeTouZiType.CreateFB_MergeTouZiType(fbb, curData.ID,curData.MoneyNum,curData.MoneyConsum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MergeTouZiTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MergeTouZiTypeContainer.StartFB_MergeTouZiTypeContainer(fbb);
			FB_MergeTouZiTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_MergeTouZiTypeContainer.EndFB_MergeTouZiTypeContainer(fbb);
			FB_MergeTouZiTypeContainer.FinishFB_MergeTouZiTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MergeTouZiType.txt", ms.ToArray());
			}
		}

		static void ExprotMingGeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MingGeBaseProvider.Instance.ListData;
			
			Offset<FB_MingGeBase>[] offsetArray = new Offset<FB_MingGeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MingGeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MingGeBase.CreateFB_MingGeBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_MingGeBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_MingGeBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.NeedItemId,curData.NeedItemCount,curData.NeedMoneyType,curData.NeedMoneyCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MingGeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MingGeBaseContainer.StartFB_MingGeBaseContainer(fbb);
			FB_MingGeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MingGeBaseContainer.EndFB_MingGeBaseContainer(fbb);
			FB_MingGeBaseContainer.FinishFB_MingGeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MingGeBase.txt", ms.ToArray());
			}
		}

		static void ExprotMiniMap()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MiniMapProvider.Instance.ListData;
			
			Offset<FB_MiniMap>[] offsetArray = new Offset<FB_MiniMap>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MiniMapProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MiniMap.CreateFB_MiniMap(fbb, curData.Id,curData.Scene,fbb.CreateString(curData.Name),curData.Type,curData.ShowType,curData.PosX,curData.PosZ,curData.NpcID,curData.OpenType,FB_MiniMap.CreateOpenTimeListVector(fbb,curData.OpenTimeList.ToArray()),FB_MiniMap.CreateEndTimeListVector(fbb,curData.EndTimeList.ToArray()),curData.PosY,curData.OfflineRewardID,curData.MinLvl,curData.MaxLvl,curData.Quality,curData.IsShowFlyShoe,curData.RefreshLevel);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MiniMapContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MiniMapContainer.StartFB_MiniMapContainer(fbb);
			FB_MiniMapContainer.AddItems(fbb, dataVector);
			var provider = FB_MiniMapContainer.EndFB_MiniMapContainer(fbb);
			FB_MiniMapContainer.FinishFB_MiniMapContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MiniMap.txt", ms.ToArray());
			}
		}

		static void ExprotMissionBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionBaseProvider.Instance.ListData;
			
			Offset<FB_MissionBase>[] offsetArray = new Offset<FB_MissionBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionBase.CreateFB_MissionBase(fbb, curData.Id,curData.LimitID,curData.BonusID,curData.MissionType,curData.LogicType,curData.LogicID,curData.ScriptID,curData.NextMissionID,curData.IsAutoAptMission,curData.AcceptDataID,curData.CompleteDataID,curData.ExpireType,curData.ExpireTime,curData.NextBranchMissionID,curData.IsAutoComplete,curData.IsCanAbandon,curData.PreMissionStoryID,curData.BeforeMissionStoryID,curData.StoryMovId,curData.DimChangeOnAccept,curData.BianShenId,curData.DelayAffterCommit,curData.EventIdOnAccept,curData.IsMissionComplete,curData.IsUseFlyPath,curData.SubId,curData.ChapterStringID,curData.AccepteNpcSceneID,curData.TargetNpcSceneID,curData.CompleteNpcSceneID,curData.FailedID,curData.IsUseMount,curData.EventIdOnCollection,curData.IsTeamSync,curData.SyncId,curData.ActivityID,curData.CopySceneStoryID,FB_MissionBase.CreatePassMissionCostListVector(fbb,curData.PassMissionCostList.ToArray()),curData.IsReturnLua,curData.ExpBonusID,curData.GoldBonusID,curData.MidMissionStoryID,curData.ChapterNameStringID,curData.TargetNpcPosX,curData.TargetNpcPosZ,curData.TargetNpcPosY,curData.TargetFace,curData.AccepteNpcPosX,curData.AccepteNpcPosZ,curData.AccepteNpcPosY,curData.AccepteFace,curData.CompleteNpcPosX,curData.CompleteNpcPosZ,curData.CompleteNpcPosY,curData.CompleteFace,curData.IsCanUseShoe,curData.IsNeedTransmit,curData.TargetDataID,curData.OpenUIID,curData.UIParam,curData.CharSouId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionBaseContainer.StartFB_MissionBaseContainer(fbb);
			FB_MissionBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionBaseContainer.EndFB_MissionBaseContainer(fbb);
			FB_MissionBaseContainer.FinishFB_MissionBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionBase.txt", ms.ToArray());
			}
		}

		static void ExprotMissionBonus()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionBonusProvider.Instance.ListData;
			
			Offset<FB_MissionBonus>[] offsetArray = new Offset<FB_MissionBonus>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionBonusProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionBonus.CreateFB_MissionBonus(fbb, curData.Id,curData.BindMoney,curData.Exp,FB_MissionBonus.CreateMenPaiItemIDListVector(fbb,curData.MenPaiItemIDList.ToArray()),FB_MissionBonus.CreateMenPaiNumListVector(fbb,curData.MenPaiNumList.ToArray()),FB_MissionBonus.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_MissionBonus.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.DoubleBonusCost,curData.SectionProcess,curData.ItemFlagIndex,curData.YuanShenExp);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionBonusContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionBonusContainer.StartFB_MissionBonusContainer(fbb);
			FB_MissionBonusContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionBonusContainer.EndFB_MissionBonusContainer(fbb);
			FB_MissionBonusContainer.FinishFB_MissionBonusContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionBonus.txt", ms.ToArray());
			}
		}

		static void ExprotMissionCollectItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionCollectItemProvider.Instance.ListData;
			
			Offset<FB_MissionCollectItem>[] offsetArray = new Offset<FB_MissionCollectItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionCollectItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionCollectItem.CreateFB_MissionCollectItem(fbb, curData.Index,curData.SceneId,curData.GroupPointID,curData.GroupPointCount,curData.RandomPosID,curData.MonsterID,curData.ItemID,curData.IsTeamCollect,curData.SkillId);
				KeyMaping[curData.Index] = index;
			}
			var dataVector = FB_MissionCollectItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionCollectItemContainer.StartFB_MissionCollectItemContainer(fbb);
			FB_MissionCollectItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionCollectItemContainer.EndFB_MissionCollectItemContainer(fbb);
			FB_MissionCollectItemContainer.FinishFB_MissionCollectItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionCollectItem.txt", ms.ToArray());
			}
		}

		static void ExprotMissionCopyScene()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionCopySceneProvider.Instance.ListData;
			
			Offset<FB_MissionCopyScene>[] offsetArray = new Offset<FB_MissionCopyScene>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionCopySceneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionCopyScene.CreateFB_MissionCopyScene(fbb, curData.Id,curData.CopySceneID,curData.IsEnterCSOnAccept);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionCopySceneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionCopySceneContainer.StartFB_MissionCopySceneContainer(fbb);
			FB_MissionCopySceneContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionCopySceneContainer.EndFB_MissionCopySceneContainer(fbb);
			FB_MissionCopySceneContainer.FinishFB_MissionCopySceneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionCopyScene.txt", ms.ToArray());
			}
		}

		static void ExprotMissionEnterArea()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionEnterAreaProvider.Instance.ListData;
			
			Offset<FB_MissionEnterArea>[] offsetArray = new Offset<FB_MissionEnterArea>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionEnterAreaProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionEnterArea.CreateFB_MissionEnterArea(fbb, curData.Id,curData.TargetSceneID,curData.TargetAreaId,curData.TargetPosX,curData.TargetPosY,curData.TargetPosRadius,curData.EffectID,curData.TargetPosZ);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionEnterAreaContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionEnterAreaContainer.StartFB_MissionEnterAreaContainer(fbb);
			FB_MissionEnterAreaContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionEnterAreaContainer.EndFB_MissionEnterAreaContainer(fbb);
			FB_MissionEnterAreaContainer.FinishFB_MissionEnterAreaContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionEnterArea.txt", ms.ToArray());
			}
		}

		static void ExprotMissionFailedBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionFailedBaseProvider.Instance.ListData;
			
			Offset<FB_MissionFailedBase>[] offsetArray = new Offset<FB_MissionFailedBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionFailedBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionFailedBase.CreateFB_MissionFailedBase(fbb, curData.Id,curData.FailedCount,FB_MissionFailedBase.CreateFailedIDListVector(fbb,curData.FailedIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionFailedBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionFailedBaseContainer.StartFB_MissionFailedBaseContainer(fbb);
			FB_MissionFailedBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionFailedBaseContainer.EndFB_MissionFailedBaseContainer(fbb);
			FB_MissionFailedBaseContainer.FinishFB_MissionFailedBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionFailedBase.txt", ms.ToArray());
			}
		}

		static void ExprotMissionFailedCondition()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionFailedConditionProvider.Instance.ListData;
			
			Offset<FB_MissionFailedCondition>[] offsetArray = new Offset<FB_MissionFailedCondition>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionFailedConditionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionFailedCondition.CreateFB_MissionFailedCondition(fbb, curData.Id,curData.Type,FB_MissionFailedCondition.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionFailedConditionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionFailedConditionContainer.StartFB_MissionFailedConditionContainer(fbb);
			FB_MissionFailedConditionContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionFailedConditionContainer.EndFB_MissionFailedConditionContainer(fbb);
			FB_MissionFailedConditionContainer.FinishFB_MissionFailedConditionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionFailedCondition.txt", ms.ToArray());
			}
		}

		static void ExprotMissionGuide()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionGuideProvider.Instance.ListData;
			
			Offset<FB_MissionGuide>[] offsetArray = new Offset<FB_MissionGuide>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionGuideProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionGuide.CreateFB_MissionGuide(fbb, curData.Id,curData.GuideTypeID,curData.AttrType,curData.AttrParam,curData.OpenUIID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionGuideContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionGuideContainer.StartFB_MissionGuideContainer(fbb);
			FB_MissionGuideContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionGuideContainer.EndFB_MissionGuideContainer(fbb);
			FB_MissionGuideContainer.FinishFB_MissionGuideContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionGuide.txt", ms.ToArray());
			}
		}

		static void ExprotMissionKillMonster()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionKillMonsterProvider.Instance.ListData;
			
			Offset<FB_MissionKillMonster>[] offsetArray = new Offset<FB_MissionKillMonster>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionKillMonsterProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionKillMonster.CreateFB_MissionKillMonster(fbb, curData.Index,fbb.CreateString(curData.MonsterName),FB_MissionKillMonster.CreateMonsterDataIDListVector(fbb,curData.MonsterDataIDList.ToArray()),FB_MissionKillMonster.CreateMonsterCountListVector(fbb,curData.MonsterCountList.ToArray()),curData.IsTeamKill,curData.HelpWeakReward,curData.HelpWeakRewardMax,curData.TargetFlag);
				KeyMaping[curData.Index] = index;
			}
			var dataVector = FB_MissionKillMonsterContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionKillMonsterContainer.StartFB_MissionKillMonsterContainer(fbb);
			FB_MissionKillMonsterContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionKillMonsterContainer.EndFB_MissionKillMonsterContainer(fbb);
			FB_MissionKillMonsterContainer.FinishFB_MissionKillMonsterContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionKillMonster.txt", ms.ToArray());
			}
		}

		static void ExprotMissionLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionLimitProvider.Instance.ListData;
			
			Offset<FB_MissionLimit>[] offsetArray = new Offset<FB_MissionLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionLimit.CreateFB_MissionLimit(fbb, curData.Id,curData.LowLevel,curData.PreMission,curData.ItemNeed,curData.ItemCount,curData.IsLoop);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionLimitContainer.StartFB_MissionLimitContainer(fbb);
			FB_MissionLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionLimitContainer.EndFB_MissionLimitContainer(fbb);
			FB_MissionLimitContainer.FinishFB_MissionLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionLimit.txt", ms.ToArray());
			}
		}

		static void ExprotMissionLootItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionLootItemProvider.Instance.ListData;
			
			Offset<FB_MissionLootItem>[] offsetArray = new Offset<FB_MissionLootItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionLootItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionLootItem.CreateFB_MissionLootItem(fbb, curData.Id,curData.ItemDataID,curData.ItemCount,curData.NpcDateID,curData.ItemDropRate,curData.IsDelMissionItem,curData.TYPE,curData.ClassID,curData.SubClassID,curData.IsSearchClass);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionLootItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionLootItemContainer.StartFB_MissionLootItemContainer(fbb);
			FB_MissionLootItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionLootItemContainer.EndFB_MissionLootItemContainer(fbb);
			FB_MissionLootItemContainer.FinishFB_MissionLootItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionLootItem.txt", ms.ToArray());
			}
		}

		static void ExprotMissionPuzzle()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionPuzzleProvider.Instance.ListData;
			
			Offset<FB_MissionPuzzle>[] offsetArray = new Offset<FB_MissionPuzzle>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionPuzzleProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] RightListoffSet = new StringOffset[curData.RightList.Count];
				for (var i = 0; i < curData.RightList.Count; i++)
				{
					RightListoffSet[i] = fbb.CreateString(curData.RightList[i]);
				}

				offsetArray[index] = FB_MissionPuzzle.CreateFB_MissionPuzzle(fbb, curData.Id,fbb.CreateString(curData.PuzzleID),FB_MissionPuzzle.CreateRightListVector(fbb,RightListoffSet));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionPuzzleContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionPuzzleContainer.StartFB_MissionPuzzleContainer(fbb);
			FB_MissionPuzzleContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionPuzzleContainer.EndFB_MissionPuzzleContainer(fbb);
			FB_MissionPuzzleContainer.FinishFB_MissionPuzzleContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionPuzzle.txt", ms.ToArray());
			}
		}

		static void ExprotMissionRound()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionRoundProvider.Instance.ListData;
			
			Offset<FB_MissionRound>[] offsetArray = new Offset<FB_MissionRound>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionRoundProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionRound.CreateFB_MissionRound(fbb, curData.Id,curData.LevelMin,curData.LevelMax,curData.AdvancedMin,curData.AdvancedMax,FB_MissionRound.CreateMissionListVector(fbb,curData.MissionList.ToArray()),FB_MissionRound.CreateWeightListVector(fbb,curData.WeightList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionRoundContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionRoundContainer.StartFB_MissionRoundContainer(fbb);
			FB_MissionRoundContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionRoundContainer.EndFB_MissionRoundContainer(fbb);
			FB_MissionRoundContainer.FinishFB_MissionRoundContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionRound.txt", ms.ToArray());
			}
		}

		static void ExprotMissionRoundBonus()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionRoundBonusProvider.Instance.ListData;
			
			Offset<FB_MissionRoundBonus>[] offsetArray = new Offset<FB_MissionRoundBonus>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionRoundBonusProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionRoundBonus.CreateFB_MissionRoundBonus(fbb, curData.Id,FB_MissionRoundBonus.CreateExpRateListVector(fbb,curData.ExpRateList.ToArray()),FB_MissionRoundBonus.CreateBindMoneyRateListVector(fbb,curData.BindMoneyRateList.ToArray()),FB_MissionRoundBonus.CreateBossItemCountListVector(fbb,curData.BossItemCountList.ToArray()),FB_MissionRoundBonus.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.YuanShenExpRate);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionRoundBonusContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionRoundBonusContainer.StartFB_MissionRoundBonusContainer(fbb);
			FB_MissionRoundBonusContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionRoundBonusContainer.EndFB_MissionRoundBonusContainer(fbb);
			FB_MissionRoundBonusContainer.FinishFB_MissionRoundBonusContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionRoundBonus.txt", ms.ToArray());
			}
		}

		static void ExprotMissionRoundCommit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionRoundCommitProvider.Instance.ListData;
			
			Offset<FB_MissionRoundCommit>[] offsetArray = new Offset<FB_MissionRoundCommit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionRoundCommitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionRoundCommit.CreateFB_MissionRoundCommit(fbb, curData.Id,curData.RoundConfigID,curData.Rounds);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionRoundCommitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionRoundCommitContainer.StartFB_MissionRoundCommitContainer(fbb);
			FB_MissionRoundCommitContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionRoundCommitContainer.EndFB_MissionRoundCommitContainer(fbb);
			FB_MissionRoundCommitContainer.FinishFB_MissionRoundCommitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionRoundCommit.txt", ms.ToArray());
			}
		}

		static void ExprotMissionRoundConfig()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionRoundConfigProvider.Instance.ListData;
			
			Offset<FB_MissionRoundConfig>[] offsetArray = new Offset<FB_MissionRoundConfig>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionRoundConfigProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionRoundConfig.CreateFB_MissionRoundConfig(fbb, curData.Id,curData.Type,curData.Rounds,curData.Sessions,curData.DoubleExp,curData.CooldownType,curData.ReceiveType,curData.ReceiveID,curData.Prefix,curData.RoundDesc,curData.RoundTitle,curData.RoundTitleInBoard,FB_MissionRoundConfig.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()),curData.GetMissionCostType,curData.GetMissionCost,fbb.CreateString(curData.Name),curData.GiveupDictID,curData.ExpireType,curData.ExpireTime,curData.IsAutoContinus,curData.EndDesc,curData.ScriptId,curData.VipNeed,curData.LevelLimit,curData.LevelDict);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionRoundConfigContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionRoundConfigContainer.StartFB_MissionRoundConfigContainer(fbb);
			FB_MissionRoundConfigContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionRoundConfigContainer.EndFB_MissionRoundConfigContainer(fbb);
			FB_MissionRoundConfigContainer.FinishFB_MissionRoundConfigContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionRoundConfig.txt", ms.ToArray());
			}
		}

		static void ExprotMissionRoundLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionRoundLevelProvider.Instance.ListData;
			
			Offset<FB_MissionRoundLevel>[] offsetArray = new Offset<FB_MissionRoundLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionRoundLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionRoundLevel.CreateFB_MissionRoundLevel(fbb, curData.Id,curData.BindMoney,curData.Exp,curData.BossItemCount,curData.ItemId,curData.ItemCount,curData.ShiliShopCount,curData.YuanShenExp,curData.PlayerLv);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionRoundLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionRoundLevelContainer.StartFB_MissionRoundLevelContainer(fbb);
			FB_MissionRoundLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionRoundLevelContainer.EndFB_MissionRoundLevelContainer(fbb);
			FB_MissionRoundLevelContainer.FinishFB_MissionRoundLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionRoundLevel.txt", ms.ToArray());
			}
		}

		static void ExprotMissionSectionReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionSectionRewardProvider.Instance.ListData;
			
			Offset<FB_MissionSectionReward>[] offsetArray = new Offset<FB_MissionSectionReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionSectionRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionSectionReward.CreateFB_MissionSectionReward(fbb, curData.ID,fbb.CreateString(curData.SectionOrder),fbb.CreateString(curData.Name),fbb.CreateString(curData.SectionDesc),fbb.CreateString(curData.Icon),FB_MissionSectionReward.CreateRewardItemIDListVector(fbb,curData.RewardItemIDList.ToArray()),FB_MissionSectionReward.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()),FB_MissionSectionReward.CreateShowEffectListVector(fbb,curData.ShowEffectList.ToArray()),fbb.CreateString(curData.RewardTips));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MissionSectionRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionSectionRewardContainer.StartFB_MissionSectionRewardContainer(fbb);
			FB_MissionSectionRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionSectionRewardContainer.EndFB_MissionSectionRewardContainer(fbb);
			FB_MissionSectionRewardContainer.FinishFB_MissionSectionRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionSectionReward.txt", ms.ToArray());
			}
		}

		static void ExprotMissionUseItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MissionUseItemProvider.Instance.ListData;
			
			Offset<FB_MissionUseItem>[] offsetArray = new Offset<FB_MissionUseItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MissionUseItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MissionUseItem.CreateFB_MissionUseItem(fbb, curData.Id,curData.ItemID,curData.RoleID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_MissionUseItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MissionUseItemContainer.StartFB_MissionUseItemContainer(fbb);
			FB_MissionUseItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MissionUseItemContainer.EndFB_MissionUseItemContainer(fbb);
			FB_MissionUseItemContainer.FinishFB_MissionUseItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MissionUseItem.txt", ms.ToArray());
			}
		}

		static void ExprotMondayLuckDrawBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MondayLuckDrawBaseProvider.Instance.ListData;
			
			Offset<FB_MondayLuckDrawBase>[] offsetArray = new Offset<FB_MondayLuckDrawBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MondayLuckDrawBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MondayLuckDrawBase.CreateFB_MondayLuckDrawBase(fbb, curData.ID,FB_MondayLuckDrawBase.CreateItemListVector(fbb,curData.ItemList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MondayLuckDrawBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MondayLuckDrawBaseContainer.StartFB_MondayLuckDrawBaseContainer(fbb);
			FB_MondayLuckDrawBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MondayLuckDrawBaseContainer.EndFB_MondayLuckDrawBaseContainer(fbb);
			FB_MondayLuckDrawBaseContainer.FinishFB_MondayLuckDrawBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MondayLuckDrawBase.txt", ms.ToArray());
			}
		}

		static void ExprotMondayLuckDrawItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MondayLuckDrawItemProvider.Instance.ListData;
			
			Offset<FB_MondayLuckDrawItem>[] offsetArray = new Offset<FB_MondayLuckDrawItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MondayLuckDrawItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MondayLuckDrawItem.CreateFB_MondayLuckDrawItem(fbb, curData.ID,curData.ItemCount,curData.RewardType,curData.Weight,curData.UnlockLevel,curData.CountLimit,curData.MDId,curData.ShowNewMDId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MondayLuckDrawItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MondayLuckDrawItemContainer.StartFB_MondayLuckDrawItemContainer(fbb);
			FB_MondayLuckDrawItemContainer.AddItems(fbb, dataVector);
			var provider = FB_MondayLuckDrawItemContainer.EndFB_MondayLuckDrawItemContainer(fbb);
			FB_MondayLuckDrawItemContainer.FinishFB_MondayLuckDrawItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MondayLuckDrawItem.txt", ms.ToArray());
			}
		}

		static void ExprotMondayLuckDrawMissions()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MondayLuckDrawMissionsProvider.Instance.ListData;
			
			Offset<FB_MondayLuckDrawMissions>[] offsetArray = new Offset<FB_MondayLuckDrawMissions>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MondayLuckDrawMissionsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MondayLuckDrawMissions.CreateFB_MondayLuckDrawMissions(fbb, curData.ID,curData.StrId,curData.RewardCount,curData.TypeParam,curData.FunctionId,curData.RefreshType,curData.UIInfoId,curData.Param);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MondayLuckDrawMissionsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MondayLuckDrawMissionsContainer.StartFB_MondayLuckDrawMissionsContainer(fbb);
			FB_MondayLuckDrawMissionsContainer.AddItems(fbb, dataVector);
			var provider = FB_MondayLuckDrawMissionsContainer.EndFB_MondayLuckDrawMissionsContainer(fbb);
			FB_MondayLuckDrawMissionsContainer.FinishFB_MondayLuckDrawMissionsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MondayLuckDrawMissions.txt", ms.ToArray());
			}
		}

		static void ExprotMopUpBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_MopUpBaseProvider.Instance.ListData;
			
			Offset<FB_MopUpBase>[] offsetArray = new Offset<FB_MopUpBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_MopUpBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_MopUpBase.CreateFB_MopUpBase(fbb, curData.ID,curData.ItemID,FB_MopUpBase.CreateCountMaxListVector(fbb,curData.CountMaxList.ToArray()),curData.CostType,curData.LimitLvl);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_MopUpBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_MopUpBaseContainer.StartFB_MopUpBaseContainer(fbb);
			FB_MopUpBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_MopUpBaseContainer.EndFB_MopUpBaseContainer(fbb);
			FB_MopUpBaseContainer.FinishFB_MopUpBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/MopUpBase.txt", ms.ToArray());
			}
		}

		static void ExprotNpcDialog()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_NpcDialogProvider.Instance.ListData;
			
			Offset<FB_NpcDialog>[] offsetArray = new Offset<FB_NpcDialog>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_NpcDialogProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_NpcDialog.CreateFB_NpcDialog(fbb, curData.Id,fbb.CreateString(curData.Dialog),curData.OptionDialogId,curData.OptionDialogType,curData.ScriptId,FB_NpcDialog.CreateMissionIDListVector(fbb,curData.MissionIDList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_NpcDialogContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_NpcDialogContainer.StartFB_NpcDialogContainer(fbb);
			FB_NpcDialogContainer.AddItems(fbb, dataVector);
			var provider = FB_NpcDialogContainer.EndFB_NpcDialogContainer(fbb);
			FB_NpcDialogContainer.FinishFB_NpcDialogContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/NpcDialog.txt", ms.ToArray());
			}
		}

		static void ExprotOccupationBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OccupationBaseProvider.Instance.ListData;
			
			Offset<FB_OccupationBase>[] offsetArray = new Offset<FB_OccupationBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OccupationBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OccupationBase.CreateFB_OccupationBase(fbb, curData.ID,fbb.CreateString(curData.MenPaiName),curData.RoleBaseId,FB_OccupationBase.CreateSkillListVector(fbb,curData.SkillList.ToArray()),curData.StarSoulSkillId,curData.DefaultModel,curData.FemaleModel,curData.DefaultWeapon,curData.HghtAdjstNmbrd);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OccupationBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OccupationBaseContainer.StartFB_OccupationBaseContainer(fbb);
			FB_OccupationBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_OccupationBaseContainer.EndFB_OccupationBaseContainer(fbb);
			FB_OccupationBaseContainer.FinishFB_OccupationBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OccupationBase.txt", ms.ToArray());
			}
		}

		static void ExprotOfflineReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OfflineRewardProvider.Instance.ListData;
			
			Offset<FB_OfflineReward>[] offsetArray = new Offset<FB_OfflineReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OfflineRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OfflineReward.CreateFB_OfflineReward(fbb, curData.Id,curData.SceneType,FB_OfflineReward.CreateRecAttrIdListVector(fbb,curData.RecAttrIdList.ToArray()),FB_OfflineReward.CreateRecAttrValueListVector(fbb,curData.RecAttrValueList.ToArray()),curData.RecMinLv,curData.RecMinDef,FB_OfflineReward.CreateViewDroplevelListVector(fbb,curData.ViewDroplevelList.ToArray()),FB_OfflineReward.CreateViewDropNumListVector(fbb,curData.ViewDropNumList.ToArray()),curData.StandardExp,curData.RecMinAttrpower,curData.StandardAttrpower,FB_OfflineReward.CreateDropBoxIDListVector(fbb,curData.DropBoxIDList.ToArray()),curData.KPM,curData.YuanShenExp,curData.PlayerLv);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OfflineRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OfflineRewardContainer.StartFB_OfflineRewardContainer(fbb);
			FB_OfflineRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_OfflineRewardContainer.EndFB_OfflineRewardContainer(fbb);
			FB_OfflineRewardContainer.FinishFB_OfflineRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OfflineReward.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodDiamondBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodDiamondBaseProvider.Instance.ListData;
			
			Offset<FB_OldGodDiamondBase>[] offsetArray = new Offset<FB_OldGodDiamondBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodDiamondBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodDiamondBase.CreateFB_OldGodDiamondBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.GodId,curData.Type,curData.Step,curData.Quality,curData.IsBind,curData.CanAuction,curData.SuitId,curData.Decompose,FB_OldGodDiamondBase.CreateBaseAttrIdListVector(fbb,curData.BaseAttrIdList.ToArray()),FB_OldGodDiamondBase.CreateBaseAttrValueListVector(fbb,curData.BaseAttrValueList.ToArray()),curData.GetPathId,fbb.CreateString(curData.Describe),fbb.CreateString(curData.DropModle),curData.SystemRemind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OldGodDiamondBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodDiamondBaseContainer.StartFB_OldGodDiamondBaseContainer(fbb);
			FB_OldGodDiamondBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodDiamondBaseContainer.EndFB_OldGodDiamondBaseContainer(fbb);
			FB_OldGodDiamondBaseContainer.FinishFB_OldGodDiamondBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodDiamondBase.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodDiamondLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodDiamondLevelUpProvider.Instance.ListData;
			
			Offset<FB_OldGodDiamondLevelUp>[] offsetArray = new Offset<FB_OldGodDiamondLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodDiamondLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodDiamondLevelUp.CreateFB_OldGodDiamondLevelUp(fbb, curData.Id,curData.MoneyType,curData.MoneyCost,FB_OldGodDiamondLevelUp.CreateBaseAttrIdListVector(fbb,curData.BaseAttrIdList.ToArray()),FB_OldGodDiamondLevelUp.CreateBaseAttrValueListVector(fbb,curData.BaseAttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OldGodDiamondLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodDiamondLevelUpContainer.StartFB_OldGodDiamondLevelUpContainer(fbb);
			FB_OldGodDiamondLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodDiamondLevelUpContainer.EndFB_OldGodDiamondLevelUpContainer(fbb);
			FB_OldGodDiamondLevelUpContainer.FinishFB_OldGodDiamondLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodDiamondLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodItemBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodItemBaseProvider.Instance.ListData;
			
			Offset<FB_OldGodItemBase>[] offsetArray = new Offset<FB_OldGodItemBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodItemBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodItemBase.CreateFB_OldGodItemBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.GodId,curData.Component,curData.Quality,curData.StarCount,curData.DecomposeCount,curData.PassiveSkillId,FB_OldGodItemBase.CreateBaseAttrIdListVector(fbb,curData.BaseAttrIdList.ToArray()),FB_OldGodItemBase.CreateBaseAttrValueListVector(fbb,curData.BaseAttrValueList.ToArray()),curData.GetPathID,fbb.CreateString(curData.ItemDesc),fbb.CreateString(curData.DropModel),curData.SystemRemind);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_OldGodItemBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodItemBaseContainer.StartFB_OldGodItemBaseContainer(fbb);
			FB_OldGodItemBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodItemBaseContainer.EndFB_OldGodItemBaseContainer(fbb);
			FB_OldGodItemBaseContainer.FinishFB_OldGodItemBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodItemBase.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodItemLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodItemLevelUpProvider.Instance.ListData;
			
			Offset<FB_OldGodItemLevelUp>[] offsetArray = new Offset<FB_OldGodItemLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodItemLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodItemLevelUp.CreateFB_OldGodItemLevelUp(fbb, curData.ID,curData.MoneyType,curData.MoneyCost,curData.PerTimeMoneyCost,FB_OldGodItemLevelUp.CreateBaseAttrIdListVector(fbb,curData.BaseAttrIdList.ToArray()),FB_OldGodItemLevelUp.CreateBaseAttrValueListVector(fbb,curData.BaseAttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OldGodItemLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodItemLevelUpContainer.StartFB_OldGodItemLevelUpContainer(fbb);
			FB_OldGodItemLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodItemLevelUpContainer.EndFB_OldGodItemLevelUpContainer(fbb);
			FB_OldGodItemLevelUpContainer.FinishFB_OldGodItemLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodItemLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodSuitAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodSuitAttrProvider.Instance.ListData;
			
			Offset<FB_OldGodSuitAttr>[] offsetArray = new Offset<FB_OldGodSuitAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodSuitAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodSuitAttr.CreateFB_OldGodSuitAttr(fbb, curData.ID,fbb.CreateString(curData.StepName),fbb.CreateString(curData.Name),FB_OldGodSuitAttr.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_OldGodSuitAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OldGodSuitAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodSuitAttrContainer.StartFB_OldGodSuitAttrContainer(fbb);
			FB_OldGodSuitAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodSuitAttrContainer.EndFB_OldGodSuitAttrContainer(fbb);
			FB_OldGodSuitAttrContainer.FinishFB_OldGodSuitAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodSuitAttr.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodSuitBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodSuitBaseProvider.Instance.ListData;
			
			Offset<FB_OldGodSuitBase>[] offsetArray = new Offset<FB_OldGodSuitBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodSuitBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodSuitBase.CreateFB_OldGodSuitBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.TagName),curData.GodId,FB_OldGodSuitBase.CreateSuitIDListVector(fbb,curData.SuitIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OldGodSuitBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodSuitBaseContainer.StartFB_OldGodSuitBaseContainer(fbb);
			FB_OldGodSuitBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodSuitBaseContainer.EndFB_OldGodSuitBaseContainer(fbb);
			FB_OldGodSuitBaseContainer.FinishFB_OldGodSuitBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodSuitBase.txt", ms.ToArray());
			}
		}

		static void ExprotOldGodUnitBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OldGodUnitBaseProvider.Instance.ListData;
			
			Offset<FB_OldGodUnitBase>[] offsetArray = new Offset<FB_OldGodUnitBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OldGodUnitBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OldGodUnitBase.CreateFB_OldGodUnitBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameIcon),fbb.CreateString(curData.UnitIcon),fbb.CreateString(curData.SquareUnitIcon),curData.FakeObjId,curData.FuncOpenFakeObjId,curData.CharSoulId,curData.Quality,curData.UnLockType,curData.UnLockItemId,curData.UnLockItemCount,FB_OldGodUnitBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_OldGodUnitBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_OldGodUnitBase.CreatePassiveCountListVector(fbb,curData.PassiveCountList.ToArray()),FB_OldGodUnitBase.CreatePassiveIdListVector(fbb,curData.PassiveIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OldGodUnitBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OldGodUnitBaseContainer.StartFB_OldGodUnitBaseContainer(fbb);
			FB_OldGodUnitBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_OldGodUnitBaseContainer.EndFB_OldGodUnitBaseContainer(fbb);
			FB_OldGodUnitBaseContainer.FinishFB_OldGodUnitBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OldGodUnitBase.txt", ms.ToArray());
			}
		}

		static void ExprotOperationActivityGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OperationActivityGiftProvider.Instance.ListData;
			
			Offset<FB_OperationActivityGift>[] offsetArray = new Offset<FB_OperationActivityGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OperationActivityGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OperationActivityGift.CreateFB_OperationActivityGift(fbb, curData.ID,curData.Type,curData.Param,FB_OperationActivityGift.CreateGiftJobIDListVector(fbb,curData.GiftJobIDList.ToArray()),curData.GiftJobNum,FB_OperationActivityGift.CreateTwoGiftJobIdListVector(fbb,curData.TwoGiftJobIdList.ToArray()),curData.TwoGiftJobNum,FB_OperationActivityGift.CreateGiftTypeListVector(fbb,curData.GiftTypeList.ToArray()),FB_OperationActivityGift.CreateGiftIDListVector(fbb,curData.GiftIDList.ToArray()),FB_OperationActivityGift.CreateGiftNumListVector(fbb,curData.GiftNumList.ToArray()),curData.NumLimit,curData.IsBanding,curData.GiftLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OperationActivityGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OperationActivityGiftContainer.StartFB_OperationActivityGiftContainer(fbb);
			FB_OperationActivityGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_OperationActivityGiftContainer.EndFB_OperationActivityGiftContainer(fbb);
			FB_OperationActivityGiftContainer.FinishFB_OperationActivityGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OperationActivityGift.txt", ms.ToArray());
			}
		}

		static void ExprotOperationActivityList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OperationActivityListProvider.Instance.ListData;
			
			Offset<FB_OperationActivityList>[] offsetArray = new Offset<FB_OperationActivityList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OperationActivityListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OperationActivityList.CreateFB_OperationActivityList(fbb, curData.ID,fbb.CreateString(curData.Name),curData.GiftType,curData.RefreshType,curData.OpenTimeType,curData.OpenTime,curData.EndTime,curData.RewardTime,curData.OpenLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OperationActivityListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OperationActivityListContainer.StartFB_OperationActivityListContainer(fbb);
			FB_OperationActivityListContainer.AddItems(fbb, dataVector);
			var provider = FB_OperationActivityListContainer.EndFB_OperationActivityListContainer(fbb);
			FB_OperationActivityListContainer.FinishFB_OperationActivityListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OperationActivityList.txt", ms.ToArray());
			}
		}

		static void ExprotOppoReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_OppoRewardProvider.Instance.ListData;
			
			Offset<FB_OppoReward>[] offsetArray = new Offset<FB_OppoReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_OppoRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_OppoReward.CreateFB_OppoReward(fbb, curData.ID,curData.MainType,curData.VipType,curData.PacketId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_OppoRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_OppoRewardContainer.StartFB_OppoRewardContainer(fbb);
			FB_OppoRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_OppoRewardContainer.EndFB_OppoRewardContainer(fbb);
			FB_OppoRewardContainer.FinishFB_OppoRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/OppoReward.txt", ms.ToArray());
			}
		}

		static void ExprotPackageUnlock()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PackageUnlockProvider.Instance.ListData;
			
			Offset<FB_PackageUnlock>[] offsetArray = new Offset<FB_PackageUnlock>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PackageUnlockProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PackageUnlock.CreateFB_PackageUnlock(fbb, curData.ID,curData.RequireType,curData.RequireValue,curData.ItemID,curData.ItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PackageUnlockContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PackageUnlockContainer.StartFB_PackageUnlockContainer(fbb);
			FB_PackageUnlockContainer.AddItems(fbb, dataVector);
			var provider = FB_PackageUnlockContainer.EndFB_PackageUnlockContainer(fbb);
			FB_PackageUnlockContainer.FinishFB_PackageUnlockContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PackageUnlock.txt", ms.ToArray());
			}
		}

		static void ExprotParamCollectionPublic()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ParamCollectionPublicProvider.Instance.ListData;
			
			Offset<FB_ParamCollectionPublic>[] offsetArray = new Offset<FB_ParamCollectionPublic>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ParamCollectionPublicProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ParamCollectionPublic.CreateFB_ParamCollectionPublic(fbb, curData.ID,FB_ParamCollectionPublic.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ParamCollectionPublicContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ParamCollectionPublicContainer.StartFB_ParamCollectionPublicContainer(fbb);
			FB_ParamCollectionPublicContainer.AddItems(fbb, dataVector);
			var provider = FB_ParamCollectionPublicContainer.EndFB_ParamCollectionPublicContainer(fbb);
			FB_ParamCollectionPublicContainer.FinishFB_ParamCollectionPublicContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ParamCollectionPublic.txt", ms.ToArray());
			}
		}

		static void ExprotPassiveSkillBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PassiveSkillBaseProvider.Instance.ListData;
			
			Offset<FB_PassiveSkillBase>[] offsetArray = new Offset<FB_PassiveSkillBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PassiveSkillBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PassiveSkillBase.CreateFB_PassiveSkillBase(fbb, curData.ID,curData.ClassId,fbb.CreateString(curData.Name),curData.SkillDescId,fbb.CreateString(curData.Icon),curData.CoolDownTime,curData.TriggerType,curData.TriggerChance,curData.TriggerChanceAddValue,curData.TriggerHPTarget,curData.TriggerHPPercent,curData.CombatType,curData.TriggerTarget,curData.TriggerResult,curData.DestroyEffect,FB_PassiveSkillBase.CreateTriggerConditionListVector(fbb,curData.TriggerConditionList.ToArray()),FB_PassiveSkillBase.CreateTriggerParamListVector(fbb,curData.TriggerParamList.ToArray()),FB_PassiveSkillBase.CreateChildPassiveSkillListVector(fbb,curData.ChildPassiveSkillList.ToArray()),curData.DamageBoardID,curData.SoundId,curData.Priority,curData.IsBroadCast,curData.ContiueTime);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PassiveSkillBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PassiveSkillBaseContainer.StartFB_PassiveSkillBaseContainer(fbb);
			FB_PassiveSkillBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_PassiveSkillBaseContainer.EndFB_PassiveSkillBaseContainer(fbb);
			FB_PassiveSkillBaseContainer.FinishFB_PassiveSkillBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PassiveSkillBase.txt", ms.ToArray());
			}
		}

		static void ExprotPeiShiCompoundBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PeiShiCompoundBaseProvider.Instance.ListData;
			
			Offset<FB_PeiShiCompoundBase>[] offsetArray = new Offset<FB_PeiShiCompoundBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PeiShiCompoundBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PeiShiCompoundBase.CreateFB_PeiShiCompoundBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Type,FB_PeiShiCompoundBase.CreateRequireIDListVector(fbb,curData.RequireIDList.ToArray()),FB_PeiShiCompoundBase.CreateRequireNumListVector(fbb,curData.RequireNumList.ToArray()),curData.Sort,curData.LimitType,curData.LimitValue,curData.UnLockItemId,curData.AvatarExp,curData.Quality,curData.StrID,curData.EquipOnGet,fbb.CreateString(curData.EffectName),fbb.CreateString(curData.Icon),curData.DurationTime,FB_PeiShiCompoundBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_PeiShiCompoundBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PeiShiCompoundBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PeiShiCompoundBaseContainer.StartFB_PeiShiCompoundBaseContainer(fbb);
			FB_PeiShiCompoundBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_PeiShiCompoundBaseContainer.EndFB_PeiShiCompoundBaseContainer(fbb);
			FB_PeiShiCompoundBaseContainer.FinishFB_PeiShiCompoundBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PeiShiCompoundBase.txt", ms.ToArray());
			}
		}

		static void ExprotPeiShiCompoundType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PeiShiCompoundTypeProvider.Instance.ListData;
			
			Offset<FB_PeiShiCompoundType>[] offsetArray = new Offset<FB_PeiShiCompoundType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PeiShiCompoundTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PeiShiCompoundType.CreateFB_PeiShiCompoundType(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Page,curData.FirstTab,curData.SecondTab,FB_PeiShiCompoundType.CreateCompoundIDListVector(fbb,curData.CompoundIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PeiShiCompoundTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PeiShiCompoundTypeContainer.StartFB_PeiShiCompoundTypeContainer(fbb);
			FB_PeiShiCompoundTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_PeiShiCompoundTypeContainer.EndFB_PeiShiCompoundTypeContainer(fbb);
			FB_PeiShiCompoundTypeContainer.FinishFB_PeiShiCompoundTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PeiShiCompoundType.txt", ms.ToArray());
			}
		}

		static void ExprotPetBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PetBaseProvider.Instance.ListData;
			
			Offset<FB_PetBase>[] offsetArray = new Offset<FB_PetBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PetBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PetBase.CreateFB_PetBase(fbb, curData.Id,curData.Level,curData.Step,fbb.CreateString(curData.StepSprite),curData.Exp,curData.HpMax,curData.PMAttack,curData.PMDefence,curData.Speed,curData.ItemID,curData.MoneyType,curData.QuickItemCount,curData.CombatPower,FB_PetBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_PetBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PetBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PetBaseContainer.StartFB_PetBaseContainer(fbb);
			FB_PetBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_PetBaseContainer.EndFB_PetBaseContainer(fbb);
			FB_PetBaseContainer.FinishFB_PetBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PetBase.txt", ms.ToArray());
			}
		}

		static void ExprotPetBattleSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PetBattleSkillProvider.Instance.ListData;
			
			Offset<FB_PetBattleSkill>[] offsetArray = new Offset<FB_PetBattleSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PetBattleSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PetBattleSkill.CreateFB_PetBattleSkill(fbb, curData.Id,fbb.CreateString(curData.Name),curData.PassiveSkillId,curData.ItemId,curData.ItemCount);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PetBattleSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PetBattleSkillContainer.StartFB_PetBattleSkillContainer(fbb);
			FB_PetBattleSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_PetBattleSkillContainer.EndFB_PetBattleSkillContainer(fbb);
			FB_PetBattleSkillContainer.FinishFB_PetBattleSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PetBattleSkill.txt", ms.ToArray());
			}
		}

		static void ExprotPetMount()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PetMountProvider.Instance.ListData;
			
			Offset<FB_PetMount>[] offsetArray = new Offset<FB_PetMount>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PetMountProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PetMount.CreateFB_PetMount(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.ModelID,fbb.CreateString(curData.NameSprite),curData.FakeObjID,fbb.CreateString(curData.UnlockStep),curData.UnLockType,curData.UnLockParam,curData.UnLockParamSec,curData.FlyMount,FB_PetMount.CreateBattleSkillListVector(fbb,curData.BattleSkillList.ToArray()),curData.DescStrId,curData.UnlockDescStrId,curData.AvatarExp,curData.AvatarDesc,curData.IsActiveShow,curData.RankFakeObjID,curData.ExpireDays,curData.OpenServerDay,curData.IsShowOnUI);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PetMountContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PetMountContainer.StartFB_PetMountContainer(fbb);
			FB_PetMountContainer.AddItems(fbb, dataVector);
			var provider = FB_PetMountContainer.EndFB_PetMountContainer(fbb);
			FB_PetMountContainer.FinishFB_PetMountContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PetMount.txt", ms.ToArray());
			}
		}

		static void ExprotPetSoulStone()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PetSoulStoneProvider.Instance.ListData;
			
			Offset<FB_PetSoulStone>[] offsetArray = new Offset<FB_PetSoulStone>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PetSoulStoneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PetSoulStone.CreateFB_PetSoulStone(fbb, curData.Id,curData.Type,curData.Level,curData.ItemID,curData.UnlockLimit,FB_PetSoulStone.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_PetSoulStone.CreateAttrListVector(fbb,curData.AttrList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PetSoulStoneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PetSoulStoneContainer.StartFB_PetSoulStoneContainer(fbb);
			FB_PetSoulStoneContainer.AddItems(fbb, dataVector);
			var provider = FB_PetSoulStoneContainer.EndFB_PetSoulStoneContainer(fbb);
			FB_PetSoulStoneContainer.FinishFB_PetSoulStoneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PetSoulStone.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerLevelAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerLevelAttrProvider.Instance.ListData;
			
			Offset<FB_PlayerLevelAttr>[] offsetArray = new Offset<FB_PlayerLevelAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerLevelAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerLevelAttr.CreateFB_PlayerLevelAttr(fbb, curData.Id,fbb.CreateString(curData.RoleID),curData.level,curData.MaxHP,curData.PAttack,curData.MAttack,curData.PMDefense,curData.Hit,curData.Dodge,curData.Critical,curData.MaxVitality);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PlayerLevelAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerLevelAttrContainer.StartFB_PlayerLevelAttrContainer(fbb);
			FB_PlayerLevelAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerLevelAttrContainer.EndFB_PlayerLevelAttrContainer(fbb);
			FB_PlayerLevelAttrContainer.FinishFB_PlayerLevelAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PlayerLevelAttr.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerSkinBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerSkinBaseProvider.Instance.ListData;
			
			Offset<FB_PlayerSkinBase>[] offsetArray = new Offset<FB_PlayerSkinBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerSkinBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerSkinBase.CreateFB_PlayerSkinBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Sort,curData.OccupationLimit,curData.SexLimit,curData.EquipType,curData.ModelID,FB_PlayerSkinBase.CreatePartColorIDListVector(fbb,curData.PartColorIDList.ToArray()),curData.PartsNumber,curData.LimitType,curData.LimitValue,curData.UnLockItemId,curData.EquipOnGet,curData.AvatarExp,curData.ExpireDays);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PlayerSkinBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerSkinBaseContainer.StartFB_PlayerSkinBaseContainer(fbb);
			FB_PlayerSkinBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerSkinBaseContainer.EndFB_PlayerSkinBaseContainer(fbb);
			FB_PlayerSkinBaseContainer.FinishFB_PlayerSkinBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PlayerSkinBase.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerSkinColor()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerSkinColorProvider.Instance.ListData;
			
			Offset<FB_PlayerSkinColor>[] offsetArray = new Offset<FB_PlayerSkinColor>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerSkinColorProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerSkinColor.CreateFB_PlayerSkinColor(fbb, curData.ID,curData.RGB,curData.CostItemID,curData.CostNum,curData.LimitType,curData.LimitValue,curData.AvatarExp);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PlayerSkinColorContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerSkinColorContainer.StartFB_PlayerSkinColorContainer(fbb);
			FB_PlayerSkinColorContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerSkinColorContainer.EndFB_PlayerSkinColorContainer(fbb);
			FB_PlayerSkinColorContainer.FinishFB_PlayerSkinColorContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PlayerSkinColor.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerSkinLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerSkinLevelUpProvider.Instance.ListData;
			
			Offset<FB_PlayerSkinLevelUp>[] offsetArray = new Offset<FB_PlayerSkinLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerSkinLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerSkinLevelUp.CreateFB_PlayerSkinLevelUp(fbb, curData.ID,curData.Exp,FB_PlayerSkinLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_PlayerSkinLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PlayerSkinLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerSkinLevelUpContainer.StartFB_PlayerSkinLevelUpContainer(fbb);
			FB_PlayerSkinLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerSkinLevelUpContainer.EndFB_PlayerSkinLevelUpContainer(fbb);
			FB_PlayerSkinLevelUpContainer.FinishFB_PlayerSkinLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PlayerSkinLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotPlayerSkinPart()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PlayerSkinPartProvider.Instance.ListData;
			
			Offset<FB_PlayerSkinPart>[] offsetArray = new Offset<FB_PlayerSkinPart>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PlayerSkinPartProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PlayerSkinPart.CreateFB_PlayerSkinPart(fbb, curData.ID,fbb.CreateString(curData.Name),curData.DefaultColor,curData.CustomColorID,FB_PlayerSkinPart.CreateRecommendColorIDListVector(fbb,curData.RecommendColorIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PlayerSkinPartContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PlayerSkinPartContainer.StartFB_PlayerSkinPartContainer(fbb);
			FB_PlayerSkinPartContainer.AddItems(fbb, dataVector);
			var provider = FB_PlayerSkinPartContainer.EndFB_PlayerSkinPartContainer(fbb);
			FB_PlayerSkinPartContainer.FinishFB_PlayerSkinPartContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PlayerSkinPart.txt", ms.ToArray());
			}
		}

		static void ExprotPoseBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PoseBaseProvider.Instance.ListData;
			
			Offset<FB_PoseBase>[] offsetArray = new Offset<FB_PoseBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PoseBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PoseBase.CreateFB_PoseBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.IconPath),curData.AnimationID,curData.TextID,curData.UnlockID,curData.IsUsePaoPao,curData.AchievementID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PoseBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PoseBaseContainer.StartFB_PoseBaseContainer(fbb);
			FB_PoseBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_PoseBaseContainer.EndFB_PoseBaseContainer(fbb);
			FB_PoseBaseContainer.FinishFB_PoseBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PoseBase.txt", ms.ToArray());
			}
		}

		static void ExprotProgressBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ProgressBaseProvider.Instance.ListData;
			
			Offset<FB_ProgressBase>[] offsetArray = new Offset<FB_ProgressBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ProgressBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ProgressBase.CreateFB_ProgressBase(fbb, curData.ID,curData.Duration,fbb.CreateString(curData.Text),fbb.CreateString(curData.Icon),curData.AnimationID,curData.CanDamageInterrupt);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ProgressBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ProgressBaseContainer.StartFB_ProgressBaseContainer(fbb);
			FB_ProgressBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ProgressBaseContainer.EndFB_ProgressBaseContainer(fbb);
			FB_ProgressBaseContainer.FinishFB_ProgressBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ProgressBase.txt", ms.ToArray());
			}
		}

		static void ExprotPugongCut()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PugongCutProvider.Instance.ListData;
			
			Offset<FB_PugongCut>[] offsetArray = new Offset<FB_PugongCut>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PugongCutProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_PugongCut.CreateFB_PugongCut(fbb, curData.Id,FB_PugongCut.CreateStepTimeListVector(fbb,curData.StepTimeList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_PugongCutContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PugongCutContainer.StartFB_PugongCutContainer(fbb);
			FB_PugongCutContainer.AddItems(fbb, dataVector);
			var provider = FB_PugongCutContainer.EndFB_PugongCutContainer(fbb);
			FB_PugongCutContainer.FinishFB_PugongCutContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PugongCut.txt", ms.ToArray());
			}
		}

		static void ExprotPurchaseAndRestitut()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_PurchaseAndRestitutProvider.Instance.ListData;
			
			Offset<FB_PurchaseAndRestitut>[] offsetArray = new Offset<FB_PurchaseAndRestitut>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_PurchaseAndRestitutProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] NameDesListoffSet = new StringOffset[curData.NameDesList.Count];
				for (var i = 0; i < curData.NameDesList.Count; i++)
				{
					NameDesListoffSet[i] = fbb.CreateString(curData.NameDesList[i]);
				}

				offsetArray[index] = FB_PurchaseAndRestitut.CreateFB_PurchaseAndRestitut(fbb, curData.ID,curData.Type,FB_PurchaseAndRestitut.CreateNameDesListVector(fbb,NameDesListoffSet),FB_PurchaseAndRestitut.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_PurchaseAndRestitut.CreateUIModelIDListVector(fbb,curData.UIModelIDList.ToArray()),curData.CostType,curData.CostNum,curData.RestituteNum,curData.RestituteTime,fbb.CreateString(curData.TipSprite),curData.StrID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_PurchaseAndRestitutContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_PurchaseAndRestitutContainer.StartFB_PurchaseAndRestitutContainer(fbb);
			FB_PurchaseAndRestitutContainer.AddItems(fbb, dataVector);
			var provider = FB_PurchaseAndRestitutContainer.EndFB_PurchaseAndRestitutContainer(fbb);
			FB_PurchaseAndRestitutContainer.FinishFB_PurchaseAndRestitutContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/PurchaseAndRestitut.txt", ms.ToArray());
			}
		}

		static void ExprotQianKunDuoBaoBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_QianKunDuoBaoBaseProvider.Instance.ListData;
			
			Offset<FB_QianKunDuoBaoBase>[] offsetArray = new Offset<FB_QianKunDuoBaoBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_QianKunDuoBaoBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_QianKunDuoBaoBase.CreateFB_QianKunDuoBaoBase(fbb, curData.ID,curData.ActStartTime,curData.ActIntegralEndTime,curData.ActEndTime,curData.LimitLevel,curData.Integral,curData.HisRecordMaxNum,FB_QianKunDuoBaoBase.CreateRewItemListListVector(fbb,curData.RewItemListList.ToArray()),FB_QianKunDuoBaoBase.CreateRewItemNumListVector(fbb,curData.RewItemNumList.ToArray()),FB_QianKunDuoBaoBase.CreateWeightListVector(fbb,curData.WeightList.ToArray()),curData.MenPai);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_QianKunDuoBaoBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_QianKunDuoBaoBaseContainer.StartFB_QianKunDuoBaoBaseContainer(fbb);
			FB_QianKunDuoBaoBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_QianKunDuoBaoBaseContainer.EndFB_QianKunDuoBaoBaseContainer(fbb);
			FB_QianKunDuoBaoBaseContainer.FinishFB_QianKunDuoBaoBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/QianKunDuoBaoBase.txt", ms.ToArray());
			}
		}

		static void ExprotQianKunDuoBaoGetIntegral()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_QianKunDuoBaoGetIntegralProvider.Instance.ListData;
			
			Offset<FB_QianKunDuoBaoGetIntegral>[] offsetArray = new Offset<FB_QianKunDuoBaoGetIntegral>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_QianKunDuoBaoGetIntegralProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_QianKunDuoBaoGetIntegral.CreateFB_QianKunDuoBaoGetIntegral(fbb, curData.ID,curData.DoubleCount,fbb.CreateString(curData.DescStr),curData.TuiJian);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_QianKunDuoBaoGetIntegralContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_QianKunDuoBaoGetIntegralContainer.StartFB_QianKunDuoBaoGetIntegralContainer(fbb);
			FB_QianKunDuoBaoGetIntegralContainer.AddItems(fbb, dataVector);
			var provider = FB_QianKunDuoBaoGetIntegralContainer.EndFB_QianKunDuoBaoGetIntegralContainer(fbb);
			FB_QianKunDuoBaoGetIntegralContainer.FinishFB_QianKunDuoBaoGetIntegralContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/QianKunDuoBaoGetIntegral.txt", ms.ToArray());
			}
		}

		static void ExprotQuickChangeEquip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_QuickChangeEquipProvider.Instance.ListData;
			
			Offset<FB_QuickChangeEquip>[] offsetArray = new Offset<FB_QuickChangeEquip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_QuickChangeEquipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_QuickChangeEquip.CreateFB_QuickChangeEquip(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Type,curData.UnLockType,FB_QuickChangeEquip.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_QuickChangeEquipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_QuickChangeEquipContainer.StartFB_QuickChangeEquipContainer(fbb);
			FB_QuickChangeEquipContainer.AddItems(fbb, dataVector);
			var provider = FB_QuickChangeEquipContainer.EndFB_QuickChangeEquipContainer(fbb);
			FB_QuickChangeEquipContainer.FinishFB_QuickChangeEquipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/QuickChangeEquip.txt", ms.ToArray());
			}
		}

		static void ExprotRankBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RankBaseProvider.Instance.ListData;
			
			Offset<FB_RankBase>[] offsetArray = new Offset<FB_RankBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RankBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RankBase.CreateFB_RankBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.LogicType,curData.GroupCount,curData.RefreshType,curData.RefreshTime,curData.BounsTarget,curData.BounsType,curData.BounsTime,curData.BounsMailID,curData.ShowNum,curData.ShowType,curData.IsSaveDB,curData.IsOutCopySceneRank);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RankBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RankBaseContainer.StartFB_RankBaseContainer(fbb);
			FB_RankBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_RankBaseContainer.EndFB_RankBaseContainer(fbb);
			FB_RankBaseContainer.FinishFB_RankBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RankBase.txt", ms.ToArray());
			}
		}

		static void ExprotRankBonus()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RankBonusProvider.Instance.ListData;
			
			Offset<FB_RankBonus>[] offsetArray = new Offset<FB_RankBonus>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RankBonusProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RankBonus.CreateFB_RankBonus(fbb, curData.ID,FB_RankBonus.CreateRankListVector(fbb,curData.RankList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RankBonusContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RankBonusContainer.StartFB_RankBonusContainer(fbb);
			FB_RankBonusContainer.AddItems(fbb, dataVector);
			var provider = FB_RankBonusContainer.EndFB_RankBonusContainer(fbb);
			FB_RankBonusContainer.FinishFB_RankBonusContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RankBonus.txt", ms.ToArray());
			}
		}

		static void ExprotRealmPracticeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RealmPracticeBaseProvider.Instance.ListData;
			
			Offset<FB_RealmPracticeBase>[] offsetArray = new Offset<FB_RealmPracticeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RealmPracticeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RealmPracticeBase.CreateFB_RealmPracticeBase(fbb, curData.ID,fbb.CreateString(curData.Name));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RealmPracticeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RealmPracticeBaseContainer.StartFB_RealmPracticeBaseContainer(fbb);
			FB_RealmPracticeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_RealmPracticeBaseContainer.EndFB_RealmPracticeBaseContainer(fbb);
			FB_RealmPracticeBaseContainer.FinishFB_RealmPracticeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RealmPracticeBase.txt", ms.ToArray());
			}
		}

		static void ExprotRealmPracticeLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RealmPracticeLevelUpProvider.Instance.ListData;
			
			Offset<FB_RealmPracticeLevelUp>[] offsetArray = new Offset<FB_RealmPracticeLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RealmPracticeLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RealmPracticeLevelUp.CreateFB_RealmPracticeLevelUp(fbb, curData.Id,curData.BreakThrough,curData.CostItemId,curData.CostItemCount,FB_RealmPracticeLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_RealmPracticeLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RealmPracticeLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RealmPracticeLevelUpContainer.StartFB_RealmPracticeLevelUpContainer(fbb);
			FB_RealmPracticeLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_RealmPracticeLevelUpContainer.EndFB_RealmPracticeLevelUpContainer(fbb);
			FB_RealmPracticeLevelUpContainer.FinishFB_RealmPracticeLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RealmPracticeLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotRebateRule()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RebateRuleProvider.Instance.ListData;
			
			Offset<FB_RebateRule>[] offsetArray = new Offset<FB_RebateRule>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RebateRuleProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RebateRule.CreateFB_RebateRule(fbb, curData.Id,curData.MinimumRecharge,curData.TopUpRecharge,curData.Ceiling);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RebateRuleContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RebateRuleContainer.StartFB_RebateRuleContainer(fbb);
			FB_RebateRuleContainer.AddItems(fbb, dataVector);
			var provider = FB_RebateRuleContainer.EndFB_RebateRuleContainer(fbb);
			FB_RebateRuleContainer.FinishFB_RebateRuleContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RebateRule.txt", ms.ToArray());
			}
		}

		static void ExprotRechargeAndConsumeBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RechargeAndConsumeBaseProvider.Instance.ListData;
			
			Offset<FB_RechargeAndConsumeBase>[] offsetArray = new Offset<FB_RechargeAndConsumeBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RechargeAndConsumeBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RechargeAndConsumeBase.CreateFB_RechargeAndConsumeBase(fbb, curData.ID,curData.RewardMD);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RechargeAndConsumeBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RechargeAndConsumeBaseContainer.StartFB_RechargeAndConsumeBaseContainer(fbb);
			FB_RechargeAndConsumeBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_RechargeAndConsumeBaseContainer.EndFB_RechargeAndConsumeBaseContainer(fbb);
			FB_RechargeAndConsumeBaseContainer.FinishFB_RechargeAndConsumeBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RechargeAndConsumeBase.txt", ms.ToArray());
			}
		}

		static void ExprotRechargeGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RechargeGiftProvider.Instance.ListData;
			
			Offset<FB_RechargeGift>[] offsetArray = new Offset<FB_RechargeGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RechargeGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RechargeGift.CreateFB_RechargeGift(fbb, curData.Id,curData.Glod,FB_RechargeGift.CreateItemByJobListVector(fbb,curData.ItemByJobList.ToArray()),FB_RechargeGift.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_RechargeGift.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RechargeGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RechargeGiftContainer.StartFB_RechargeGiftContainer(fbb);
			FB_RechargeGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_RechargeGiftContainer.EndFB_RechargeGiftContainer(fbb);
			FB_RechargeGiftContainer.FinishFB_RechargeGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RechargeGift.txt", ms.ToArray());
			}
		}

		static void ExprotRechargeNew()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RechargeNewProvider.Instance.ListData;
			
			Offset<FB_RechargeNew>[] offsetArray = new Offset<FB_RechargeNew>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RechargeNewProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RechargeNew.CreateFB_RechargeNew(fbb, curData.Id,curData.Index,curData.WorldLvMin,curData.WorldLvMax,curData.Glod,FB_RechargeNew.CreateItemByJobListVector(fbb,curData.ItemByJobList.ToArray()),FB_RechargeNew.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_RechargeNew.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()),fbb.CreateString(curData.BigFake));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RechargeNewContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RechargeNewContainer.StartFB_RechargeNewContainer(fbb);
			FB_RechargeNewContainer.AddItems(fbb, dataVector);
			var provider = FB_RechargeNewContainer.EndFB_RechargeNewContainer(fbb);
			FB_RechargeNewContainer.FinishFB_RechargeNewContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RechargeNew.txt", ms.ToArray());
			}
		}

		static void ExprotRelation()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RelationProvider.Instance.ListData;
			
			Offset<FB_Relation>[] offsetArray = new Offset<FB_Relation>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RelationProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Relation.CreateFB_Relation(fbb, curData.Id,FB_Relation.CreateRelationListVector(fbb,curData.Relation_List.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RelationContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RelationContainer.StartFB_RelationContainer(fbb);
			FB_RelationContainer.AddItems(fbb, dataVector);
			var provider = FB_RelationContainer.EndFB_RelationContainer(fbb);
			FB_RelationContainer.FinishFB_RelationContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/Relation.txt", ms.ToArray());
			}
		}

		static void ExprotRevivePrice()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RevivePriceProvider.Instance.ListData;
			
			Offset<FB_RevivePrice>[] offsetArray = new Offset<FB_RevivePrice>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RevivePriceProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RevivePrice.CreateFB_RevivePrice(fbb, curData.ID,curData.AdvanceLimit,FB_RevivePrice.CreatePriceRangeListVector(fbb,curData.PriceRangeList.ToArray()),FB_RevivePrice.CreatePriceTypeListVector(fbb,curData.PriceTypeList.ToArray()),FB_RevivePrice.CreatePriceListVector(fbb,curData.PriceList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RevivePriceContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RevivePriceContainer.StartFB_RevivePriceContainer(fbb);
			FB_RevivePriceContainer.AddItems(fbb, dataVector);
			var provider = FB_RevivePriceContainer.EndFB_RevivePriceContainer(fbb);
			FB_RevivePriceContainer.FinishFB_RevivePriceContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RevivePrice.txt", ms.ToArray());
			}
		}

		static void ExprotRewardSurvey()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RewardSurveyProvider.Instance.ListData;
			
			Offset<FB_RewardSurvey>[] offsetArray = new Offset<FB_RewardSurvey>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RewardSurveyProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RewardSurvey.CreateFB_RewardSurvey(fbb, curData.ID,curData.TitleID,curData.SelNum,curData.OperationNum,curData.NextID,curData.SkipTitle,curData.InputNum,FB_RewardSurvey.CreateInputLengthListVector(fbb,curData.InputLengthList.ToArray()),FB_RewardSurvey.CreateAnswerIDListVector(fbb,curData.AnswerIDList.ToArray()),FB_RewardSurvey.CreateSkipIDListVector(fbb,curData.SkipIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RewardSurveyContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RewardSurveyContainer.StartFB_RewardSurveyContainer(fbb);
			FB_RewardSurveyContainer.AddItems(fbb, dataVector);
			var provider = FB_RewardSurveyContainer.EndFB_RewardSurveyContainer(fbb);
			FB_RewardSurveyContainer.FinishFB_RewardSurveyContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RewardSurvey.txt", ms.ToArray());
			}
		}

		static void ExprotRewardSurveyConfig()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RewardSurveyConfigProvider.Instance.ListData;
			
			Offset<FB_RewardSurveyConfig>[] offsetArray = new Offset<FB_RewardSurveyConfig>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RewardSurveyConfigProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RewardSurveyConfig.CreateFB_RewardSurveyConfig(fbb, curData.ID,curData.ActCycle,curData.TitleNum,curData.AnswerStartID,curData.Money,curData.Price,FB_RewardSurveyConfig.CreateEndRewardIDListVector(fbb,curData.EndRewardIDList.ToArray()),FB_RewardSurveyConfig.CreateEndRewardNumListVector(fbb,curData.EndRewardNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RewardSurveyConfigContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RewardSurveyConfigContainer.StartFB_RewardSurveyConfigContainer(fbb);
			FB_RewardSurveyConfigContainer.AddItems(fbb, dataVector);
			var provider = FB_RewardSurveyConfigContainer.EndFB_RewardSurveyConfigContainer(fbb);
			FB_RewardSurveyConfigContainer.FinishFB_RewardSurveyConfigContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RewardSurveyConfig.txt", ms.ToArray());
			}
		}

		static void ExprotRMB()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RMBProvider.Instance.ListData;
			
			Offset<FB_RMB>[] offsetArray = new Offset<FB_RMB>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RMBProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RMB.CreateFB_RMB(fbb, curData.ID,fbb.CreateString(curData.ProductDesc),fbb.CreateString(curData.IconUrl),fbb.CreateString(curData.Name),curData.PriceSDK,curData.Price,curData.PriceUS,curData.CostTianYu,fbb.CreateString(curData.PlatformProductId),fbb.CreateString(curData.AOSProductId),fbb.CreateString(curData.AOS9SProductId),fbb.CreateString(curData.WEBProductId),fbb.CreateString(curData.Icon),curData.ShopId,curData.RefreshType,curData.LimitValue,curData.LastGiftId,curData.MDId,curData.Mark,curData.MailId,curData.OnSaleTime,curData.OffSaleTime,curData.ShowVipLimit,curData.ShowLevelLimit,curData.BuyVipLimit,curData.BuyLevelLimit,curData.ShowVipLimitMax,curData.ShowLevelLimitMax,curData.OldMoney,curData.RealValue,curData.YuanBao,curData.TianYu,FB_RMB.CreateMoneyTypeListVector(fbb,curData.MoneyTypeList.ToArray()),FB_RMB.CreateBindYuanBaoListVector(fbb,curData.BindYuanBaoList.ToArray()),FB_RMB.CreateMenPaiItemIdListVector(fbb,curData.MenPaiItemIdList.ToArray()),curData.MenPaiItemCount,FB_RMB.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_RMB.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()),curData.ItemYuanBaoId,curData.ItemYuanBaoCount,curData.OpenServiceDayAct,curData.EndServiceDayAct,curData.TaiGuYiBaoId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RMBContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RMBContainer.StartFB_RMBContainer(fbb);
			FB_RMBContainer.AddItems(fbb, dataVector);
			var provider = FB_RMBContainer.EndFB_RMBContainer(fbb);
			FB_RMBContainer.FinishFB_RMBContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RMB.txt", ms.ToArray());
			}
		}

		static void ExprotRMBAttribute()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RMBAttributeProvider.Instance.ListData;
			
			Offset<FB_RMBAttribute>[] offsetArray = new Offset<FB_RMBAttribute>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RMBAttributeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RMBAttribute.CreateFB_RMBAttribute(fbb, curData.Id,FB_RMBAttribute.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RMBAttributeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RMBAttributeContainer.StartFB_RMBAttributeContainer(fbb);
			FB_RMBAttributeContainer.AddItems(fbb, dataVector);
			var provider = FB_RMBAttributeContainer.EndFB_RMBAttributeContainer(fbb);
			FB_RMBAttributeContainer.FinishFB_RMBAttributeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RMBAttribute.txt", ms.ToArray());
			}
		}

		static void ExprotRobotBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RobotBaseProvider.Instance.ListData;
			
			Offset<FB_RobotBase>[] offsetArray = new Offset<FB_RobotBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RobotBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RobotBase.CreateFB_RobotBase(fbb, curData.ID,curData.RoleId,curData.MenPai,curData.MinRobotCombat,curData.MaxRobotCombat,curData.HairModelID,curData.WeaponModelID,curData.FaceId,curData.Realm,curData.Wing,FB_RobotBase.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RobotBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RobotBaseContainer.StartFB_RobotBaseContainer(fbb);
			FB_RobotBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_RobotBaseContainer.EndFB_RobotBaseContainer(fbb);
			FB_RobotBaseContainer.FinishFB_RobotBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RobotBase.txt", ms.ToArray());
			}
		}

		static void ExprotRoleBaseAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RoleBaseAttrProvider.Instance.ListData;
			
			Offset<FB_RoleBaseAttr>[] offsetArray = new Offset<FB_RoleBaseAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RoleBaseAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RoleBaseAttr.CreateFB_RoleBaseAttr(fbb, curData.Id,curData.CharModelID,fbb.CreateString(curData.Name),curData.Sex,curData.NpcType,curData.Level,curData.AttackType,curData.MaxAP,curData.Camp,curData.CorpseTime,curData.ReviveTime,curData.DialogID,curData.DropItemId,curData.Exp,curData.CanAttackFly,curData.BornEffctID,curData.BornTime,curData.RampType,curData.BelongType,curData.TeamBelongType,curData.DimensionId,curData.AIType,FB_RoleBaseAttr.CreateSkillIdListVector(fbb,curData.SkillIdList.ToArray()),curData.ShowNameBoard,curData.IsShowNameBoard,fbb.CreateString(curData.Title),curData.IsStatic,curData.IsHitBack,curData.IsThrough,curData.IsXiuXian,curData.IsStatistics,curData.LogicRadius,curData.WorldBossType,curData.ScriptsId,curData.ScenePoint,curData.IsLevelSuppress,curData.YuanShenExp);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RoleBaseAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RoleBaseAttrContainer.StartFB_RoleBaseAttrContainer(fbb);
			FB_RoleBaseAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_RoleBaseAttrContainer.EndFB_RoleBaseAttrContainer(fbb);
			FB_RoleBaseAttrContainer.FinishFB_RoleBaseAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RoleBaseAttr.txt", ms.ToArray());
			}
		}

		static void ExprotRongYaoCollectionAwake()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RongYaoCollectionAwakeProvider.Instance.ListData;
			
			Offset<FB_RongYaoCollectionAwake>[] offsetArray = new Offset<FB_RongYaoCollectionAwake>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RongYaoCollectionAwakeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RongYaoCollectionAwake.CreateFB_RongYaoCollectionAwake(fbb, curData.Id,curData.CollectionId,fbb.CreateString(curData.DestName),FB_RongYaoCollectionAwake.CreateAwakeItemListVector(fbb,curData.AwakeItemList.ToArray()),FB_RongYaoCollectionAwake.CreateAwakeItemNumListVector(fbb,curData.AwakeItemNumList.ToArray()),FB_RongYaoCollectionAwake.CreateFakeObjIDListVector(fbb,curData.FakeObjIDList.ToArray()),fbb.CreateString(curData.BackGroundBg),curData.OpenServerDay);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RongYaoCollectionAwakeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RongYaoCollectionAwakeContainer.StartFB_RongYaoCollectionAwakeContainer(fbb);
			FB_RongYaoCollectionAwakeContainer.AddItems(fbb, dataVector);
			var provider = FB_RongYaoCollectionAwakeContainer.EndFB_RongYaoCollectionAwakeContainer(fbb);
			FB_RongYaoCollectionAwakeContainer.FinishFB_RongYaoCollectionAwakeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RongYaoCollectionAwake.txt", ms.ToArray());
			}
		}

		static void ExprotRongYaoCollectionUpdate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RongYaoCollectionUpdateProvider.Instance.ListData;
			
			Offset<FB_RongYaoCollectionUpdate>[] offsetArray = new Offset<FB_RongYaoCollectionUpdate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RongYaoCollectionUpdateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RongYaoCollectionUpdate.CreateFB_RongYaoCollectionUpdate(fbb, curData.Id,curData.NextId,curData.AwakeId,FB_RongYaoCollectionUpdate.CreateUpdateItemListVector(fbb,curData.UpdateItemList.ToArray()),FB_RongYaoCollectionUpdate.CreateUpdateItemNumListVector(fbb,curData.UpdateItemNumList.ToArray()),FB_RongYaoCollectionUpdate.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_RongYaoCollectionUpdate.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RongYaoCollectionUpdateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RongYaoCollectionUpdateContainer.StartFB_RongYaoCollectionUpdateContainer(fbb);
			FB_RongYaoCollectionUpdateContainer.AddItems(fbb, dataVector);
			var provider = FB_RongYaoCollectionUpdateContainer.EndFB_RongYaoCollectionUpdateContainer(fbb);
			FB_RongYaoCollectionUpdateContainer.FinishFB_RongYaoCollectionUpdateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RongYaoCollectionUpdate.txt", ms.ToArray());
			}
		}

		static void ExprotRongYaoSuit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RongYaoSuitProvider.Instance.ListData;
			
			Offset<FB_RongYaoSuit>[] offsetArray = new Offset<FB_RongYaoSuit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RongYaoSuitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RongYaoSuit.CreateFB_RongYaoSuit(fbb, curData.Id,fbb.CreateString(curData.SuitName),FB_RongYaoSuit.CreateTotalFakeObjIDListVector(fbb,curData.TotalFakeObjIDList.ToArray()),curData.SkillID,fbb.CreateString(curData.Background),FB_RongYaoSuit.CreateMenPaiWeaponListVector(fbb,curData.MenPaiWeaponList.ToArray()),FB_RongYaoSuit.CreateMenPaiClothesListVector(fbb,curData.MenPaiClothesList.ToArray()),FB_RongYaoSuit.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_RongYaoSuitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RongYaoSuitContainer.StartFB_RongYaoSuitContainer(fbb);
			FB_RongYaoSuitContainer.AddItems(fbb, dataVector);
			var provider = FB_RongYaoSuitContainer.EndFB_RongYaoSuitContainer(fbb);
			FB_RongYaoSuitContainer.FinishFB_RongYaoSuitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RongYaoSuit.txt", ms.ToArray());
			}
		}

		static void ExprotRuneAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RuneAttrProvider.Instance.ListData;
			
			Offset<FB_RuneAttr>[] offsetArray = new Offset<FB_RuneAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RuneAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RuneAttr.CreateFB_RuneAttr(fbb, curData.ID,curData.LevelupType,curData.JieupType,curData.Exp,FB_RuneAttr.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_RuneAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_RuneAttr.CreateAttrValueIncListVector(fbb,curData.AttrValueIncList.ToArray()),FB_RuneAttr.CreateAttrValueJieIncListVector(fbb,curData.AttrValueJieIncList.ToArray()),curData.UnLockTowerId,curData.UnlockTowID,curData.RuneType,curData.RuneComBatBaseValue,curData.RuneLevelCombatValue,curData.RuneJieCombatValue,curData.RuneSkillBaseValue,curData.RuneSkillLevelValue,curData.RuneSkillJieValue,curData.PassiveSkillID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RuneAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RuneAttrContainer.StartFB_RuneAttrContainer(fbb);
			FB_RuneAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_RuneAttrContainer.EndFB_RuneAttrContainer(fbb);
			FB_RuneAttrContainer.FinishFB_RuneAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RuneAttr.txt", ms.ToArray());
			}
		}

		static void ExprotRuneBoxWeight()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RuneBoxWeightProvider.Instance.ListData;
			
			Offset<FB_RuneBoxWeight>[] offsetArray = new Offset<FB_RuneBoxWeight>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RuneBoxWeightProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RuneBoxWeight.CreateFB_RuneBoxWeight(fbb, curData.ID,curData.UnLockTowerId,FB_RuneBoxWeight.CreateWeightListVector(fbb,curData.WeightList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RuneBoxWeightContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RuneBoxWeightContainer.StartFB_RuneBoxWeightContainer(fbb);
			FB_RuneBoxWeightContainer.AddItems(fbb, dataVector);
			var provider = FB_RuneBoxWeightContainer.EndFB_RuneBoxWeightContainer(fbb);
			FB_RuneBoxWeightContainer.FinishFB_RuneBoxWeightContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RuneBoxWeight.txt", ms.ToArray());
			}
		}

		static void ExprotRuneJieExp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RuneJieExpProvider.Instance.ListData;
			
			Offset<FB_RuneJieExp>[] offsetArray = new Offset<FB_RuneJieExp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RuneJieExpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RuneJieExp.CreateFB_RuneJieExp(fbb, curData.ID,curData.ItemNum);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RuneJieExpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RuneJieExpContainer.StartFB_RuneJieExpContainer(fbb);
			FB_RuneJieExpContainer.AddItems(fbb, dataVector);
			var provider = FB_RuneJieExpContainer.EndFB_RuneJieExpContainer(fbb);
			FB_RuneJieExpContainer.FinishFB_RuneJieExpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RuneJieExp.txt", ms.ToArray());
			}
		}

		static void ExprotRuneLevelExp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RuneLevelExpProvider.Instance.ListData;
			
			Offset<FB_RuneLevelExp>[] offsetArray = new Offset<FB_RuneLevelExp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RuneLevelExpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RuneLevelExp.CreateFB_RuneLevelExp(fbb, curData.ID,FB_RuneLevelExp.CreateQualityListVector(fbb,curData.QualityList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RuneLevelExpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RuneLevelExpContainer.StartFB_RuneLevelExpContainer(fbb);
			FB_RuneLevelExpContainer.AddItems(fbb, dataVector);
			var provider = FB_RuneLevelExpContainer.EndFB_RuneLevelExpContainer(fbb);
			FB_RuneLevelExpContainer.FinishFB_RuneLevelExpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RuneLevelExp.txt", ms.ToArray());
			}
		}

		static void ExprotRunesTreasureBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_RunesTreasureBaseProvider.Instance.ListData;
			
			Offset<FB_RunesTreasureBase>[] offsetArray = new Offset<FB_RunesTreasureBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_RunesTreasureBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_RunesTreasureBase.CreateFB_RunesTreasureBase(fbb, curData.ID,curData.BaseCount,curData.MustGetCount,curData.AddRandom,curData.TowerId,curData.GetFirstPercent,FB_RunesTreasureBase.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_RunesTreasureBase.CreateWeightListVector(fbb,curData.WeightList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_RunesTreasureBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_RunesTreasureBaseContainer.StartFB_RunesTreasureBaseContainer(fbb);
			FB_RunesTreasureBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_RunesTreasureBaseContainer.EndFB_RunesTreasureBaseContainer(fbb);
			FB_RunesTreasureBaseContainer.FinishFB_RunesTreasureBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/RunesTreasureBase.txt", ms.ToArray());
			}
		}

		static void ExprotSceneClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneClassProvider.Instance.ListData;
			
			Offset<FB_SceneClass>[] offsetArray = new Offset<FB_SceneClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneClass.CreateFB_SceneClass(fbb, curData.SceneID,fbb.CreateString(curData.Name),fbb.CreateString(curData.ResName),curData.Type,curData.Length,curData.Width,fbb.CreateString(curData.Path),curData.OffX,curData.OffZ,curData.FlyHeightDefault,curData.FlyHeightMin,curData.FlyHeightMax,fbb.CreateString(curData.Obstacle),curData.BGMusic,curData.PVPRule,FB_SceneClass.CreateReliveTypeListVector(fbb,curData.ReliveType_List.ToArray()),curData.Entry_x,curData.Entry_z,curData.Entry_y,curData.Entry_Rotation,curData.Safe_x,curData.Safe_z,curData.DeadPunishRule,curData.CopySceneID,curData.PlayersMaxA,curData.PlayersMaxB,curData.IsCanUseXp,curData.IsCanUseLight,fbb.CreateString(curData.SceneMapTexture),curData.SceneMapWidth,curData.SceneMapHeight,curData.SceneMapLogicWidth,curData.SceneMapLogicHeight,curData.SceneMapLogicDeltaX,curData.ZoneSize,curData.IsCanTeamFollow,curData.IsCanCallTeam,curData.ScriptID,fbb.CreateString(curData.LoadingPath),curData.IsCanFly,curData.IsCanMount,curData.LevelLimit,curData.WorldMap,curData.PkDefault,curData.PkAllowChange,curData.PkValue,curData.ChangeSceneTeamFollow,curData.CanTransmit,curData.CanTeamShip,curData.RecoverCamera,curData.ExitTextID,curData.ShadowRotateX,curData.ShadowRotateY,fbb.CreateString(curData.LevelRange),curData.CanUseMedicine,curData.FlyPathMin,curData.FlyLength,curData.FlyWidth,curData.FlyOffX,curData.FlyOffZ,curData.MiniMapXOffset,curData.MiniMapYOffset,curData.CanEnterCopyScene,curData.IsAutoPickup,curData.ChangeSceneFlyEffect,curData.CanBloodAwake,curData.CanShowDeathUI,curData.PkModeAutoChange,curData.TiredDeath,curData.ShowGuildChiefDieTip,curData.AutoReliveTime,curData.CostMoneyScene,curData.WaitMoment,fbb.CreateString(curData.FirstLightMap),fbb.CreateString(curData.SecondLightMap),curData.FogColorNoon,curData.FogColorMoringOrDusk,curData.FogColorNight,curData.ShaderParamID,curData.IsArtifact,curData.IsShowBossMov,curData.YuanShenLevelLimit,curData.PowerLimit,fbb.CreateString(curData.PowerLimitShow),curData.CreateRunningMonsterNum,curData.CreateRunningMonsterGap);
				KeyMaping[curData.SceneID] = index;
			}
			var dataVector = FB_SceneClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneClassContainer.StartFB_SceneClassContainer(fbb);
			FB_SceneClassContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneClassContainer.EndFB_SceneClassContainer(fbb);
			FB_SceneClassContainer.FinishFB_SceneClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SceneClass.txt", ms.ToArray());
			}
		}

		static void ExprotSceneGroupPoint()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneGroupPointProvider.Instance.ListData;
			
			Offset<FB_SceneGroupPoint>[] offsetArray = new Offset<FB_SceneGroupPoint>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneGroupPointProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneGroupPoint.CreateFB_SceneGroupPoint(fbb, curData.Id,fbb.CreateString(curData.Name),curData.SceneID,curData.GroupPointID,curData.PosX,curData.PosZ,curData.FaceDirection);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SceneGroupPointContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneGroupPointContainer.StartFB_SceneGroupPointContainer(fbb);
			FB_SceneGroupPointContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneGroupPointContainer.EndFB_SceneGroupPointContainer(fbb);
			FB_SceneGroupPointContainer.FinishFB_SceneGroupPointContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SceneGroupPoint.txt", ms.ToArray());
			}
		}

		static void ExprotSceneMirror()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneMirrorProvider.Instance.ListData;
			
			Offset<FB_SceneMirror>[] offsetArray = new Offset<FB_SceneMirror>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneMirrorProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneMirror.CreateFB_SceneMirror(fbb, curData.SceneID,FB_SceneMirror.CreateDayGapListVector(fbb,curData.DayGapList.ToArray()),FB_SceneMirror.CreateMirrorCountListVector(fbb,curData.MirrorCountList.ToArray()));
				KeyMaping[curData.SceneID] = index;
			}
			var dataVector = FB_SceneMirrorContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneMirrorContainer.StartFB_SceneMirrorContainer(fbb);
			FB_SceneMirrorContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneMirrorContainer.EndFB_SceneMirrorContainer(fbb);
			FB_SceneMirrorContainer.FinishFB_SceneMirrorContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SceneMirror.txt", ms.ToArray());
			}
		}

		static void ExprotSceneNpc()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SceneNpcProvider.Instance.ListData;
			
			Offset<FB_SceneNpc>[] offsetArray = new Offset<FB_SceneNpc>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SceneNpcProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SceneNpc.CreateFB_SceneNpc(fbb, curData.Id,fbb.CreateString(curData.Name),curData.SceneID,curData.DataID,curData.PosX,curData.PosZ,curData.FaceDirection,curData.GroupID,curData.MutexID,curData.PatrolId,curData.PosY);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SceneNpcContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SceneNpcContainer.StartFB_SceneNpcContainer(fbb);
			FB_SceneNpcContainer.AddItems(fbb, dataVector);
			var provider = FB_SceneNpcContainer.EndFB_SceneNpcContainer(fbb);
			FB_SceneNpcContainer.FinishFB_SceneNpcContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SceneNpc.txt", ms.ToArray());
			}
		}

		static void ExprotServerLevelExpExtra()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ServerLevelExpExtraProvider.Instance.ListData;
			
			Offset<FB_ServerLevelExpExtra>[] offsetArray = new Offset<FB_ServerLevelExpExtra>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ServerLevelExpExtraProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ServerLevelExpExtra.CreateFB_ServerLevelExpExtra(fbb, curData.ID,FB_ServerLevelExpExtra.CreateServerLevelLimitListVector(fbb,curData.ServerLevelLimitList.ToArray()),FB_ServerLevelExpExtra.CreateExtarRateListVector(fbb,curData.ExtarRateList.ToArray()),FB_ServerLevelExpExtra.CreateHuaShenServerLevelLimitListVector(fbb,curData.HuaShenServerLevelLimitList.ToArray()),FB_ServerLevelExpExtra.CreateHuaShenExtarRateListVector(fbb,curData.HuaShenExtarRateList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ServerLevelExpExtraContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ServerLevelExpExtraContainer.StartFB_ServerLevelExpExtraContainer(fbb);
			FB_ServerLevelExpExtraContainer.AddItems(fbb, dataVector);
			var provider = FB_ServerLevelExpExtraContainer.EndFB_ServerLevelExpExtraContainer(fbb);
			FB_ServerLevelExpExtraContainer.FinishFB_ServerLevelExpExtraContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ServerLevelExpExtra.txt", ms.ToArray());
			}
		}

		static void ExprotSevenStartBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SevenStartBaseProvider.Instance.ListData;
			
			Offset<FB_SevenStartBase>[] offsetArray = new Offset<FB_SevenStartBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SevenStartBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SevenStartBase.CreateFB_SevenStartBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameSprite),FB_SevenStartBase.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),FB_SevenStartBase.CreatePassiveValueBaseListVector(fbb,curData.PassiveValueBaseList.ToArray()),FB_SevenStartBase.CreatePassiveValueAddListVector(fbb,curData.PassiveValueAddList.ToArray()),curData.ActivateBattlePower,curData.LevelBattlePower);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SevenStartBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SevenStartBaseContainer.StartFB_SevenStartBaseContainer(fbb);
			FB_SevenStartBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SevenStartBaseContainer.EndFB_SevenStartBaseContainer(fbb);
			FB_SevenStartBaseContainer.FinishFB_SevenStartBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SevenStartBase.txt", ms.ToArray());
			}
		}

		static void ExprotSevenStartBaseLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SevenStartBaseLevelUpProvider.Instance.ListData;
			
			Offset<FB_SevenStartBaseLevelUp>[] offsetArray = new Offset<FB_SevenStartBaseLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SevenStartBaseLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SevenStartBaseLevelUp.CreateFB_SevenStartBaseLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemCount,FB_SevenStartBaseLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_SevenStartBaseLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SevenStartBaseLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SevenStartBaseLevelUpContainer.StartFB_SevenStartBaseLevelUpContainer(fbb);
			FB_SevenStartBaseLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_SevenStartBaseLevelUpContainer.EndFB_SevenStartBaseLevelUpContainer(fbb);
			FB_SevenStartBaseLevelUpContainer.FinishFB_SevenStartBaseLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SevenStartBaseLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingBaseProvider.Instance.ListData;
			
			Offset<FB_ShengLingBase>[] offsetArray = new Offset<FB_ShengLingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingBase.CreateFB_ShengLingBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.UnlockLevel,curData.ItemId,curData.ItemCount,FB_ShengLingBase.CreateSpecialLevelListVector(fbb,curData.SpecialLevelList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShengLingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingBaseContainer.StartFB_ShengLingBaseContainer(fbb);
			FB_ShengLingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingBaseContainer.EndFB_ShengLingBaseContainer(fbb);
			FB_ShengLingBaseContainer.FinishFB_ShengLingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingBase.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingCopyScene()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingCopySceneProvider.Instance.ListData;
			
			Offset<FB_ShengLingCopyScene>[] offsetArray = new Offset<FB_ShengLingCopyScene>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingCopySceneProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingCopyScene.CreateFB_ShengLingCopyScene(fbb, curData.Id,curData.RoleBaseAttrId,fbb.CreateString(curData.Name),curData.Type,curData.UnLockLevel,FB_ShengLingCopyScene.CreateItemListVector(fbb,curData.ItemList.ToArray()),curData.DropBox);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShengLingCopySceneContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingCopySceneContainer.StartFB_ShengLingCopySceneContainer(fbb);
			FB_ShengLingCopySceneContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingCopySceneContainer.EndFB_ShengLingCopySceneContainer(fbb);
			FB_ShengLingCopySceneContainer.FinishFB_ShengLingCopySceneContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingCopyScene.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingCopySceneLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingCopySceneLimitProvider.Instance.ListData;
			
			Offset<FB_ShengLingCopySceneLimit>[] offsetArray = new Offset<FB_ShengLingCopySceneLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingCopySceneLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingCopySceneLimit.CreateFB_ShengLingCopySceneLimit(fbb, curData.Id,curData.IsActive,curData.BossCount,FB_ShengLingCopySceneLimit.CreateUnLockTypeListVector(fbb,curData.UnLockTypeList.ToArray()),FB_ShengLingCopySceneLimit.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShengLingCopySceneLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingCopySceneLimitContainer.StartFB_ShengLingCopySceneLimitContainer(fbb);
			FB_ShengLingCopySceneLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingCopySceneLimitContainer.EndFB_ShengLingCopySceneLimitContainer(fbb);
			FB_ShengLingCopySceneLimitContainer.FinishFB_ShengLingCopySceneLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingCopySceneLimit.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingCopySceneType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingCopySceneTypeProvider.Instance.ListData;
			
			Offset<FB_ShengLingCopySceneType>[] offsetArray = new Offset<FB_ShengLingCopySceneType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingCopySceneTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingCopySceneType.CreateFB_ShengLingCopySceneType(fbb, curData.Id,fbb.CreateString(curData.TypeName),curData.IsActive,curData.LockStrId,FB_ShengLingCopySceneType.CreateUnLockTypeListVector(fbb,curData.UnLockTypeList.ToArray()),FB_ShengLingCopySceneType.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShengLingCopySceneTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingCopySceneTypeContainer.StartFB_ShengLingCopySceneTypeContainer(fbb);
			FB_ShengLingCopySceneTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingCopySceneTypeContainer.EndFB_ShengLingCopySceneTypeContainer(fbb);
			FB_ShengLingCopySceneTypeContainer.FinishFB_ShengLingCopySceneTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingCopySceneType.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShengLingLevelUp>[] offsetArray = new Offset<FB_ShengLingLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingLevelUp.CreateFB_ShengLingLevelUp(fbb, curData.Id,curData.ItemId,curData.ItemCount,curData.EffectIndex,FB_ShengLingLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShengLingLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_ShengLingLevelUp.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()),FB_ShengLingLevelUp.CreateIsActiveListVector(fbb,curData.IsActiveList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShengLingLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingLevelUpContainer.StartFB_ShengLingLevelUpContainer(fbb);
			FB_ShengLingLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingLevelUpContainer.EndFB_ShengLingLevelUpContainer(fbb);
			FB_ShengLingLevelUpContainer.FinishFB_ShengLingLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShengLingSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShengLingSkillProvider.Instance.ListData;
			
			Offset<FB_ShengLingSkill>[] offsetArray = new Offset<FB_ShengLingSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShengLingSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShengLingSkill.CreateFB_ShengLingSkill(fbb, curData.ID,curData.PassiveSkillId,curData.SkillLevel,fbb.CreateString(curData.LockDesc),fbb.CreateString(curData.LevelUpDesc));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShengLingSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShengLingSkillContainer.StartFB_ShengLingSkillContainer(fbb);
			FB_ShengLingSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_ShengLingSkillContainer.EndFB_ShengLingSkillContainer(fbb);
			FB_ShengLingSkillContainer.FinishFB_ShengLingSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShengLingSkill.txt", ms.ToArray());
			}
		}

		static void ExprotShenMoJiangYuBuyTimesCost()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenMoJiangYuBuyTimesCostProvider.Instance.ListData;
			
			Offset<FB_ShenMoJiangYuBuyTimesCost>[] offsetArray = new Offset<FB_ShenMoJiangYuBuyTimesCost>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenMoJiangYuBuyTimesCostProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenMoJiangYuBuyTimesCost.CreateFB_ShenMoJiangYuBuyTimesCost(fbb, curData.ID,curData.CostMoneyType,curData.CostMoneyValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenMoJiangYuBuyTimesCostContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenMoJiangYuBuyTimesCostContainer.StartFB_ShenMoJiangYuBuyTimesCostContainer(fbb);
			FB_ShenMoJiangYuBuyTimesCostContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenMoJiangYuBuyTimesCostContainer.EndFB_ShenMoJiangYuBuyTimesCostContainer(fbb);
			FB_ShenMoJiangYuBuyTimesCostContainer.FinishFB_ShenMoJiangYuBuyTimesCostContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenMoJiangYuBuyTimesCost.txt", ms.ToArray());
			}
		}

		static void ExprotShenQiRenZhuClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenQiRenZhuClassProvider.Instance.ListData;
			
			Offset<FB_ShenQiRenZhuClass>[] offsetArray = new Offset<FB_ShenQiRenZhuClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenQiRenZhuClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenQiRenZhuClass.CreateFB_ShenQiRenZhuClass(fbb, curData.ID,fbb.CreateString(curData.Name),FB_ShenQiRenZhuClass.CreateTypeIdListVector(fbb,curData.TypeIdList.ToArray()),curData.RewardId,fbb.CreateString(curData.Introduce),fbb.CreateString(curData.Icon),curData.OpenConditionType,curData.OpenConditionParam);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenQiRenZhuClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenQiRenZhuClassContainer.StartFB_ShenQiRenZhuClassContainer(fbb);
			FB_ShenQiRenZhuClassContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenQiRenZhuClassContainer.EndFB_ShenQiRenZhuClassContainer(fbb);
			FB_ShenQiRenZhuClassContainer.FinishFB_ShenQiRenZhuClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenQiRenZhuClass.txt", ms.ToArray());
			}
		}

		static void ExprotShenQiRenZhuType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenQiRenZhuTypeProvider.Instance.ListData;
			
			Offset<FB_ShenQiRenZhuType>[] offsetArray = new Offset<FB_ShenQiRenZhuType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenQiRenZhuTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenQiRenZhuType.CreateFB_ShenQiRenZhuType(fbb, curData.ID,curData.DicStrId,curData.GoalType,curData.GoalNum,curData.Param,curData.RewaredId,curData.RewaredNum,curData.ShowRewardNum,FB_ShenQiRenZhuType.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenQiRenZhuTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenQiRenZhuTypeContainer.StartFB_ShenQiRenZhuTypeContainer(fbb);
			FB_ShenQiRenZhuTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenQiRenZhuTypeContainer.EndFB_ShenQiRenZhuTypeContainer(fbb);
			FB_ShenQiRenZhuTypeContainer.FinishFB_ShenQiRenZhuTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenQiRenZhuType.txt", ms.ToArray());
			}
		}

		static void ExprotShenShiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShiBaseProvider.Instance.ListData;
			
			Offset<FB_ShenShiBase>[] offsetArray = new Offset<FB_ShenShiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShiBase.CreateFB_ShenShiBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.MenPai,curData.Type,curData.Position,curData.MaxLevel,curData.SkillType,FB_ShenShiBase.CreateUnLockLogicListVector(fbb,curData.UnLockLogicList.ToArray()),FB_ShenShiBase.CreateUnLockTypeListVector(fbb,curData.UnLockTypeList.ToArray()),FB_ShenShiBase.CreateUnLockIdListVector(fbb,curData.UnLockIdList.ToArray()),FB_ShenShiBase.CreateUnLockValueListVector(fbb,curData.UnLockValueList.ToArray()),curData.TakeEffectType,curData.TakeEffectValue,curData.TakeEffectTypeSec,curData.TakeEffectValueSec,curData.AddSystemId,curData.AddSystemPoint,curData.StrDescId,FB_ShenShiBase.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShiBaseContainer.StartFB_ShenShiBaseContainer(fbb);
			FB_ShenShiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShiBaseContainer.EndFB_ShenShiBaseContainer(fbb);
			FB_ShenShiBaseContainer.FinishFB_ShenShiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShiBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenShiMaxLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShiMaxLevelProvider.Instance.ListData;
			
			Offset<FB_ShenShiMaxLevel>[] offsetArray = new Offset<FB_ShenShiMaxLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShiMaxLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShiMaxLevel.CreateFB_ShenShiMaxLevel(fbb, curData.ID,FB_ShenShiMaxLevel.CreateShenShiIdListVector(fbb,curData.ShenShiIdList.ToArray()),FB_ShenShiMaxLevel.CreateShenShiMaxLevelListVector(fbb,curData.ShenShiMaxLevelList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShiMaxLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShiMaxLevelContainer.StartFB_ShenShiMaxLevelContainer(fbb);
			FB_ShenShiMaxLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShiMaxLevelContainer.EndFB_ShenShiMaxLevelContainer(fbb);
			FB_ShenShiMaxLevelContainer.FinishFB_ShenShiMaxLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShiMaxLevel.txt", ms.ToArray());
			}
		}

		static void ExprotShenShouBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShouBaseProvider.Instance.ListData;
			
			Offset<FB_ShenShouBase>[] offsetArray = new Offset<FB_ShenShouBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShouBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShouBase.CreateFB_ShenShouBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),FB_ShenShouBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenShouBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_ShenShouBase.CreateEquipQualityListVector(fbb,curData.EquipQualityList.ToArray()),FB_ShenShouBase.CreateSkillListVector(fbb,curData.SkillList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShouBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShouBaseContainer.StartFB_ShenShouBaseContainer(fbb);
			FB_ShenShouBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShouBaseContainer.EndFB_ShenShouBaseContainer(fbb);
			FB_ShenShouBaseContainer.FinishFB_ShenShouBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShouBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenShouEquipBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShouEquipBaseProvider.Instance.ListData;
			
			Offset<FB_ShenShouEquipBase>[] offsetArray = new Offset<FB_ShenShouEquipBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShouEquipBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShouEquipBase.CreateFB_ShenShouEquipBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Exp,curData.DoubleCost,curData.Quality,curData.Component,curData.StarCount,FB_ShenShouEquipBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenShouEquipBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),fbb.CreateString(curData.Tips),fbb.CreateString(curData.DropModle),curData.SellPrice,curData.GetPathID,curData.SystemRemind);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShouEquipBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShouEquipBaseContainer.StartFB_ShenShouEquipBaseContainer(fbb);
			FB_ShenShouEquipBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShouEquipBaseContainer.EndFB_ShenShouEquipBaseContainer(fbb);
			FB_ShenShouEquipBaseContainer.FinishFB_ShenShouEquipBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShouEquipBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenShouEquipLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShouEquipLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShenShouEquipLevelUp>[] offsetArray = new Offset<FB_ShenShouEquipLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShouEquipLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShouEquipLevelUp.CreateFB_ShenShouEquipLevelUp(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Exp,curData.Quality,FB_ShenShouEquipLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenShouEquipLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShouEquipLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShouEquipLevelUpContainer.StartFB_ShenShouEquipLevelUpContainer(fbb);
			FB_ShenShouEquipLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShouEquipLevelUpContainer.EndFB_ShenShouEquipLevelUpContainer(fbb);
			FB_ShenShouEquipLevelUpContainer.FinishFB_ShenShouEquipLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShouEquipLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShenShouSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenShouSkillProvider.Instance.ListData;
			
			Offset<FB_ShenShouSkill>[] offsetArray = new Offset<FB_ShenShouSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenShouSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenShouSkill.CreateFB_ShenShouSkill(fbb, curData.ID,curData.PassiveSkillId,curData.Level,curData.SkillDescId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenShouSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenShouSkillContainer.StartFB_ShenShouSkillContainer(fbb);
			FB_ShenShouSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenShouSkillContainer.EndFB_ShenShouSkillContainer(fbb);
			FB_ShenShouSkillContainer.FinishFB_ShenShouSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenShouSkill.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangLiLian()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangLiLianProvider.Instance.ListData;
			
			Offset<FB_ShenWangLiLian>[] offsetArray = new Offset<FB_ShenWangLiLian>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangLiLianProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangLiLian.CreateFB_ShenWangLiLian(fbb, curData.ID,curData.DicStrId,curData.GoalType,curData.GoalNum,curData.RewaredId,curData.RewaredNum,curData.RewardItemId,FB_ShenWangLiLian.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangLiLianContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangLiLianContainer.StartFB_ShenWangLiLianContainer(fbb);
			FB_ShenWangLiLianContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangLiLianContainer.EndFB_ShenWangLiLianContainer(fbb);
			FB_ShenWangLiLianContainer.FinishFB_ShenWangLiLianContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangLiLian.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaBaseProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaBase>[] offsetArray = new Offset<FB_ShenWangZhanJiaBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaBase.CreateFB_ShenWangZhanJiaBase(fbb, curData.Id,fbb.CreateString(curData.Info),fbb.CreateString(curData.Name),fbb.CreateString(curData.Tag),curData.StartTime,curData.EndTime,curData.AttrRatio);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShenWangZhanJiaBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaBaseContainer.StartFB_ShenWangZhanJiaBaseContainer(fbb);
			FB_ShenWangZhanJiaBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaBaseContainer.EndFB_ShenWangZhanJiaBaseContainer(fbb);
			FB_ShenWangZhanJiaBaseContainer.FinishFB_ShenWangZhanJiaBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaCsBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaCsBaseProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaCsBase>[] offsetArray = new Offset<FB_ShenWangZhanJiaCsBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaCsBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaCsBase.CreateFB_ShenWangZhanJiaCsBase(fbb, curData.ID,curData.Totaljifen,curData.MopUpLockId,curData.TotalStage,curData.FlushTime,curData.CopySceneId,curData.BossType,curData.Probability,curData.ShopId,curData.CombatPowerNum,curData.ZhanJiaAttack,curData.ZhanJiaDefence);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaCsBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaCsBaseContainer.StartFB_ShenWangZhanJiaCsBaseContainer(fbb);
			FB_ShenWangZhanJiaCsBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaCsBaseContainer.EndFB_ShenWangZhanJiaCsBaseContainer(fbb);
			FB_ShenWangZhanJiaCsBaseContainer.FinishFB_ShenWangZhanJiaCsBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaCsBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaCsReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaCsRewardProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaCsReward>[] offsetArray = new Offset<FB_ShenWangZhanJiaCsReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaCsRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaCsReward.CreateFB_ShenWangZhanJiaCsReward(fbb, curData.ID,fbb.CreateString(curData.RankNum),curData.SeasonId,curData.RankMin,curData.RankMax,FB_ShenWangZhanJiaCsReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_ShenWangZhanJiaCsReward.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaCsRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaCsRewardContainer.StartFB_ShenWangZhanJiaCsRewardContainer(fbb);
			FB_ShenWangZhanJiaCsRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaCsRewardContainer.EndFB_ShenWangZhanJiaCsRewardContainer(fbb);
			FB_ShenWangZhanJiaCsRewardContainer.FinishFB_ShenWangZhanJiaCsRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaCsReward.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaCsShop()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaCsShopProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaCsShop>[] offsetArray = new Offset<FB_ShenWangZhanJiaCsShop>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaCsShopProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaCsShop.CreateFB_ShenWangZhanJiaCsShop(fbb, curData.ID,FB_ShenWangZhanJiaCsShop.CreateItemListVector(fbb,curData.ItemList.ToArray()),FB_ShenWangZhanJiaCsShop.CreatePriceListVector(fbb,curData.PriceList.ToArray()),FB_ShenWangZhanJiaCsShop.CreateCcurPriceListVector(fbb,curData.CcurPriceList.ToArray()),FB_ShenWangZhanJiaCsShop.CreateMoneyTypeListVector(fbb,curData.MoneyTypeList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaCsShopContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaCsShopContainer.StartFB_ShenWangZhanJiaCsShopContainer(fbb);
			FB_ShenWangZhanJiaCsShopContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaCsShopContainer.EndFB_ShenWangZhanJiaCsShopContainer(fbb);
			FB_ShenWangZhanJiaCsShopContainer.FinishFB_ShenWangZhanJiaCsShopContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaCsShop.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaEquip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaEquipProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaEquip>[] offsetArray = new Offset<FB_ShenWangZhanJiaEquip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaEquipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaEquip.CreateFB_ShenWangZhanJiaEquip(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.ExpType,curData.Exp,curData.Quality,curData.Component,curData.Stage,FB_ShenWangZhanJiaEquip.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenWangZhanJiaEquip.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.PassiveSkill,fbb.CreateString(curData.Tips),curData.SellPrice,curData.GetPathID,curData.SystemRemind,fbb.CreateString(curData.DropModle));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaEquipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaEquipContainer.StartFB_ShenWangZhanJiaEquipContainer(fbb);
			FB_ShenWangZhanJiaEquipContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaEquipContainer.EndFB_ShenWangZhanJiaEquipContainer(fbb);
			FB_ShenWangZhanJiaEquipContainer.FinishFB_ShenWangZhanJiaEquipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaEquip.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaLegendAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaLegendAttrProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaLegendAttr>[] offsetArray = new Offset<FB_ShenWangZhanJiaLegendAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaLegendAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaLegendAttr.CreateFB_ShenWangZhanJiaLegendAttr(fbb, curData.ID,FB_ShenWangZhanJiaLegendAttr.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenWangZhanJiaLegendAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaLegendAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaLegendAttrContainer.StartFB_ShenWangZhanJiaLegendAttrContainer(fbb);
			FB_ShenWangZhanJiaLegendAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaLegendAttrContainer.EndFB_ShenWangZhanJiaLegendAttrContainer(fbb);
			FB_ShenWangZhanJiaLegendAttrContainer.FinishFB_ShenWangZhanJiaLegendAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaLegendAttr.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaMakeLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaMakeLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaMakeLevelUp>[] offsetArray = new Offset<FB_ShenWangZhanJiaMakeLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaMakeLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaMakeLevelUp.CreateFB_ShenWangZhanJiaMakeLevelUp(fbb, curData.ID,curData.Exp,curData.CostMakeExp,curData.MakeExp,FB_ShenWangZhanJiaMakeLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenWangZhanJiaMakeLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaMakeLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaMakeLevelUpContainer.StartFB_ShenWangZhanJiaMakeLevelUpContainer(fbb);
			FB_ShenWangZhanJiaMakeLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaMakeLevelUpContainer.EndFB_ShenWangZhanJiaMakeLevelUpContainer(fbb);
			FB_ShenWangZhanJiaMakeLevelUpContainer.FinishFB_ShenWangZhanJiaMakeLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaMakeLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaPaintingMiss()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaPaintingMissProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaPaintingMiss>[] offsetArray = new Offset<FB_ShenWangZhanJiaPaintingMiss>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaPaintingMissProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaPaintingMiss.CreateFB_ShenWangZhanJiaPaintingMiss(fbb, curData.ID,curData.MissTimeType,curData.MissSpecificType,fbb.CreateString(curData.Desc),curData.MissNum,curData.AddExp,fbb.CreateString(curData.MissName),curData.FunctionID,curData.GetPathBaseId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaPaintingMissContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaPaintingMissContainer.StartFB_ShenWangZhanJiaPaintingMissContainer(fbb);
			FB_ShenWangZhanJiaPaintingMissContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaPaintingMissContainer.EndFB_ShenWangZhanJiaPaintingMissContainer(fbb);
			FB_ShenWangZhanJiaPaintingMissContainer.FinishFB_ShenWangZhanJiaPaintingMissContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaPaintingMiss.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaPaintingPay()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaPaintingPayProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaPaintingPay>[] offsetArray = new Offset<FB_ShenWangZhanJiaPaintingPay>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaPaintingPayProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaPaintingPay.CreateFB_ShenWangZhanJiaPaintingPay(fbb, curData.ID,curData.RMBId,curData.Value,curData.AddLevel,curData.TitleId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaPaintingPayContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaPaintingPayContainer.StartFB_ShenWangZhanJiaPaintingPayContainer(fbb);
			FB_ShenWangZhanJiaPaintingPayContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaPaintingPayContainer.EndFB_ShenWangZhanJiaPaintingPayContainer(fbb);
			FB_ShenWangZhanJiaPaintingPayContainer.FinishFB_ShenWangZhanJiaPaintingPayContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaPaintingPay.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaPaintingReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaPaintingRewardProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaPaintingReward>[] offsetArray = new Offset<FB_ShenWangZhanJiaPaintingReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaPaintingRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaPaintingReward.CreateFB_ShenWangZhanJiaPaintingReward(fbb, curData.ID,curData.Exp,curData.RewardType,curData.ItemId,curData.ItemNum,FB_ShenWangZhanJiaPaintingReward.CreatePayItemIdListVector(fbb,curData.PayItemIdList.ToArray()),FB_ShenWangZhanJiaPaintingReward.CreatePayItemNunListVector(fbb,curData.PayItemNunList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaPaintingRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaPaintingRewardContainer.StartFB_ShenWangZhanJiaPaintingRewardContainer(fbb);
			FB_ShenWangZhanJiaPaintingRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaPaintingRewardContainer.EndFB_ShenWangZhanJiaPaintingRewardContainer(fbb);
			FB_ShenWangZhanJiaPaintingRewardContainer.FinishFB_ShenWangZhanJiaPaintingRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaPaintingReward.txt", ms.ToArray());
			}
		}

		static void ExprotShenWangZhanJiaPracticeLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenWangZhanJiaPracticeLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShenWangZhanJiaPracticeLevelUp>[] offsetArray = new Offset<FB_ShenWangZhanJiaPracticeLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenWangZhanJiaPracticeLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenWangZhanJiaPracticeLevelUp.CreateFB_ShenWangZhanJiaPracticeLevelUp(fbb, curData.ID,curData.CostType,curData.Exp,curData.CostPractice,curData.Practice,FB_ShenWangZhanJiaPracticeLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShenWangZhanJiaPracticeLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),FB_ShenWangZhanJiaPracticeLevelUp.CreateLegendAttrIdListVector(fbb,curData.LegendAttrIdList.ToArray()),FB_ShenWangZhanJiaPracticeLevelUp.CreateLegendAttrValueListVector(fbb,curData.LegendAttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenWangZhanJiaPracticeLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenWangZhanJiaPracticeLevelUpContainer.StartFB_ShenWangZhanJiaPracticeLevelUpContainer(fbb);
			FB_ShenWangZhanJiaPracticeLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenWangZhanJiaPracticeLevelUpContainer.EndFB_ShenWangZhanJiaPracticeLevelUpContainer(fbb);
			FB_ShenWangZhanJiaPracticeLevelUpContainer.FinishFB_ShenWangZhanJiaPracticeLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenWangZhanJiaPracticeLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShenYuFengHaoBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenYuFengHaoBaseProvider.Instance.ListData;
			
			Offset<FB_ShenYuFengHaoBase>[] offsetArray = new Offset<FB_ShenYuFengHaoBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenYuFengHaoBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenYuFengHaoBase.CreateFB_ShenYuFengHaoBase(fbb, curData.SceneID,fbb.CreateString(curData.Name),curData.Point,curData.MaxDayPoint,curData.SingleSeasionTitleId,curData.DoubleSeasionTitleId,FB_ShenYuFengHaoBase.CreateWinItemIdListVector(fbb,curData.WinItemIdList.ToArray()),FB_ShenYuFengHaoBase.CreateWinItemCountListVector(fbb,curData.WinItemCountList.ToArray()),FB_ShenYuFengHaoBase.CreateLoseItemIdListVector(fbb,curData.LoseItemIdList.ToArray()),FB_ShenYuFengHaoBase.CreateLoseItemCountListVector(fbb,curData.LoseItemCountList.ToArray()),FB_ShenYuFengHaoBase.CreateScoreItemIdListVector(fbb,curData.ScoreItemIdList.ToArray()),FB_ShenYuFengHaoBase.CreateScoreItemCountListVector(fbb,curData.ScoreItemCountList.ToArray()),curData.Discount,FB_ShenYuFengHaoBase.CreateSecondItemIdListVector(fbb,curData.SecondItemIdList.ToArray()),FB_ShenYuFengHaoBase.CreateSecondItemCountListVector(fbb,curData.SecondItemCountList.ToArray()));
				KeyMaping[curData.SceneID] = index;
			}
			var dataVector = FB_ShenYuFengHaoBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenYuFengHaoBaseContainer.StartFB_ShenYuFengHaoBaseContainer(fbb);
			FB_ShenYuFengHaoBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenYuFengHaoBaseContainer.EndFB_ShenYuFengHaoBaseContainer(fbb);
			FB_ShenYuFengHaoBaseContainer.FinishFB_ShenYuFengHaoBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenYuFengHaoBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenYuPointAddition()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenYuPointAdditionProvider.Instance.ListData;
			
			Offset<FB_ShenYuPointAddition>[] offsetArray = new Offset<FB_ShenYuPointAddition>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenYuPointAdditionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenYuPointAddition.CreateFB_ShenYuPointAddition(fbb, curData.ID,curData.Count,curData.ImpactID,curData.AttrAdd);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenYuPointAdditionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenYuPointAdditionContainer.StartFB_ShenYuPointAdditionContainer(fbb);
			FB_ShenYuPointAdditionContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenYuPointAdditionContainer.EndFB_ShenYuPointAdditionContainer(fbb);
			FB_ShenYuPointAdditionContainer.FinishFB_ShenYuPointAdditionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenYuPointAddition.txt", ms.ToArray());
			}
		}

		static void ExprotShenZhiJingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenZhiJingBaseProvider.Instance.ListData;
			
			Offset<FB_ShenZhiJingBase>[] offsetArray = new Offset<FB_ShenZhiJingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenZhiJingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenZhiJingBase.CreateFB_ShenZhiJingBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.GrowLineType,curData.Position,curData.MaxLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenZhiJingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenZhiJingBaseContainer.StartFB_ShenZhiJingBaseContainer(fbb);
			FB_ShenZhiJingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenZhiJingBaseContainer.EndFB_ShenZhiJingBaseContainer(fbb);
			FB_ShenZhiJingBaseContainer.FinishFB_ShenZhiJingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenZhiJingBase.txt", ms.ToArray());
			}
		}

		static void ExprotShenZhiJingItemLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenZhiJingItemLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShenZhiJingItemLevelUp>[] offsetArray = new Offset<FB_ShenZhiJingItemLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenZhiJingItemLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenZhiJingItemLevelUp.CreateFB_ShenZhiJingItemLevelUp(fbb, curData.ID,curData.LevelUpType,curData.Level,curData.CostItemId,curData.CostItemNum,FB_ShenZhiJingItemLevelUp.CreateAddPropertyIDListVector(fbb,curData.AddPropertyIDList.ToArray()),FB_ShenZhiJingItemLevelUp.CreateAddPropertyValueListVector(fbb,curData.AddPropertyValueList.ToArray()),curData.SkillID,curData.SkillLevel,curData.UnlockNextSkillLevel,curData.HuaShenLevelLimit,curData.UnlockId,curData.UnlockValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenZhiJingItemLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenZhiJingItemLevelUpContainer.StartFB_ShenZhiJingItemLevelUpContainer(fbb);
			FB_ShenZhiJingItemLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenZhiJingItemLevelUpContainer.EndFB_ShenZhiJingItemLevelUpContainer(fbb);
			FB_ShenZhiJingItemLevelUpContainer.FinishFB_ShenZhiJingItemLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenZhiJingItemLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShenZhuangLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShenZhuangLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShenZhuangLevelUp>[] offsetArray = new Offset<FB_ShenZhuangLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShenZhuangLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShenZhuangLevelUp.CreateFB_ShenZhuangLevelUp(fbb, curData.ID,curData.MoneyType,curData.MoneyCost,FB_ShenZhuangLevelUp.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_ShenZhuangLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShenZhuangLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShenZhuangLevelUpContainer.StartFB_ShenZhuangLevelUpContainer(fbb);
			FB_ShenZhuangLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShenZhuangLevelUpContainer.EndFB_ShenZhuangLevelUpContainer(fbb);
			FB_ShenZhuangLevelUpContainer.FinishFB_ShenZhuangLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShenZhuangLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShiLianBoss()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShiLianBossProvider.Instance.ListData;
			
			Offset<FB_ShiLianBoss>[] offsetArray = new Offset<FB_ShiLianBoss>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShiLianBossProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShiLianBoss.CreateFB_ShiLianBoss(fbb, curData.ID,fbb.CreateString(curData.CSName),fbb.CreateString(curData.BossName),curData.DictID,curData.LevelLimit,curData.FakeObjID,curData.DropDescID,FB_ShiLianBoss.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()),FB_ShiLianBoss.CreateDropBoxIDListVector(fbb,curData.DropBoxIDList.ToArray()),fbb.CreateString(curData.BgName),fbb.CreateString(curData.TitalName),curData.TeamPlatformId,fbb.CreateString(curData.bossicon),curData.BigBoxId,curData.SmallBoxId,curData.BloodBigBoxDropId,curData.BloodSmallBoxDropId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShiLianBossContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShiLianBossContainer.StartFB_ShiLianBossContainer(fbb);
			FB_ShiLianBossContainer.AddItems(fbb, dataVector);
			var provider = FB_ShiLianBossContainer.EndFB_ShiLianBossContainer(fbb);
			FB_ShiLianBossContainer.FinishFB_ShiLianBossContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShiLianBoss.txt", ms.ToArray());
			}
		}

		static void ExprotShopItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShopItemProvider.Instance.ListData;
			
			Offset<FB_ShopItem>[] offsetArray = new Offset<FB_ShopItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShopItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShopItem.CreateFB_ShopItem(fbb, curData.ID,curData.ItemID,fbb.CreateString(curData.ItemDesc),curData.GoldType,curData.PayGold,curData.LimitValue,curData.VipLvlVisible,curData.Discount,curData.OnSaleTime,curData.OffSaleTime,curData.Weight,curData.TradeCDType,curData.MiniLvl,curData.MaxLvl,curData.MinJingJie,curData.MiniLvlShiLi,curData.VipLvlBuyable,curData.BuyLimitOnce,curData.RefType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShopItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShopItemContainer.StartFB_ShopItemContainer(fbb);
			FB_ShopItemContainer.AddItems(fbb, dataVector);
			var provider = FB_ShopItemContainer.EndFB_ShopItemContainer(fbb);
			FB_ShopItemContainer.FinishFB_ShopItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShopItem.txt", ms.ToArray());
			}
		}

		static void ExprotShopType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShopTypeProvider.Instance.ListData;
			
			Offset<FB_ShopType>[] offsetArray = new Offset<FB_ShopType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShopTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShopType.CreateFB_ShopType(fbb, curData.ID,curData.IsXianGou,curData.RefreshType,curData.RefreshDataId,curData.ManualRefreshID,curData.RefreshMax,curData.RefreshCount,fbb.CreateString(curData.Name),FB_ShopType.CreateTabListVector(fbb,curData.TabList.ToArray()),curData.IsBinding);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShopTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShopTypeContainer.StartFB_ShopTypeContainer(fbb);
			FB_ShopTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_ShopTypeContainer.EndFB_ShopTypeContainer(fbb);
			FB_ShopTypeContainer.FinishFB_ShopTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShopType.txt", ms.ToArray());
			}
		}

		static void ExprotShouHuangXiLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShouHuangXiLevelUpProvider.Instance.ListData;
			
			Offset<FB_ShouHuangXiLevelUp>[] offsetArray = new Offset<FB_ShouHuangXiLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShouHuangXiLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShouHuangXiLevelUp.CreateFB_ShouHuangXiLevelUp(fbb, curData.Id,curData.CostItemId,curData.CostItemCount,FB_ShouHuangXiLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_ShouHuangXiLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShouHuangXiLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShouHuangXiLevelUpContainer.StartFB_ShouHuangXiLevelUpContainer(fbb);
			FB_ShouHuangXiLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_ShouHuangXiLevelUpContainer.EndFB_ShouHuangXiLevelUpContainer(fbb);
			FB_ShouHuangXiLevelUpContainer.FinishFB_ShouHuangXiLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShouHuangXiLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotShouHuangXiSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShouHuangXiSkillProvider.Instance.ListData;
			
			Offset<FB_ShouHuangXiSkill>[] offsetArray = new Offset<FB_ShouHuangXiSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShouHuangXiSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShouHuangXiSkill.CreateFB_ShouHuangXiSkill(fbb, curData.Id,curData.UnlockType,curData.UnlockParam,curData.PassiveSkillId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ShouHuangXiSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShouHuangXiSkillContainer.StartFB_ShouHuangXiSkillContainer(fbb);
			FB_ShouHuangXiSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_ShouHuangXiSkillContainer.EndFB_ShouHuangXiSkillContainer(fbb);
			FB_ShouHuangXiSkillContainer.FinishFB_ShouHuangXiSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShouHuangXiSkill.txt", ms.ToArray());
			}
		}

		static void ExprotShouHuBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ShouHuBaseProvider.Instance.ListData;
			
			Offset<FB_ShouHuBase>[] offsetArray = new Offset<FB_ShouHuBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ShouHuBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ShouHuBase.CreateFB_ShouHuBase(fbb, curData.ID,curData.RenewNeedYuanBao,curData.RenewNeedBindYuanBao,fbb.CreateString(curData.RenewPanelIcon),curData.CharModelId,curData.EffectId,curData.FakeObjId,curData.FakeObjRenewId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ShouHuBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ShouHuBaseContainer.StartFB_ShouHuBaseContainer(fbb);
			FB_ShouHuBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_ShouHuBaseContainer.EndFB_ShouHuBaseContainer(fbb);
			FB_ShouHuBaseContainer.FinishFB_ShouHuBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ShouHuBase.txt", ms.ToArray());
			}
		}

		static void ExprotSignInReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SignInRewardProvider.Instance.ListData;
			
			Offset<FB_SignInReward>[] offsetArray = new Offset<FB_SignInReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SignInRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SignInReward.CreateFB_SignInReward(fbb, curData.ID,curData.ItemType,curData.ItemID,curData.ItemNum,curData.VipLvl,curData.VipTime,curData.LevelPart);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SignInRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SignInRewardContainer.StartFB_SignInRewardContainer(fbb);
			FB_SignInRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SignInRewardContainer.EndFB_SignInRewardContainer(fbb);
			FB_SignInRewardContainer.FinishFB_SignInRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SignInReward.txt", ms.ToArray());
			}
		}

		static void ExprotSignTotalReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SignTotalRewardProvider.Instance.ListData;
			
			Offset<FB_SignTotalReward>[] offsetArray = new Offset<FB_SignTotalReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SignTotalRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SignTotalReward.CreateFB_SignTotalReward(fbb, curData.ID,curData.ItemType,curData.ItemID,curData.ItemNum,curData.Index);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SignTotalRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SignTotalRewardContainer.StartFB_SignTotalRewardContainer(fbb);
			FB_SignTotalRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SignTotalRewardContainer.EndFB_SignTotalRewardContainer(fbb);
			FB_SignTotalRewardContainer.FinishFB_SignTotalRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SignTotalReward.txt", ms.ToArray());
			}
		}

		static void ExprotSkillAddValue()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillAddValueProvider.Instance.ListData;
			
			Offset<FB_SkillAddValue>[] offsetArray = new Offset<FB_SkillAddValue>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillAddValueProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillAddValue.CreateFB_SkillAddValue(fbb, curData.ID,curData.TianFuId,curData.TianFuLevelValue,curData.BloodId,curData.BloodLevelValue,curData.ZhuanJingId,curData.ZhuanJingLevelValue,curData.RuneId,curData.RuneLevelValue,curData.RuneJieValue,curData.LingGangId,curData.LingGangLevelValue,curData.HunJiangJiBanId,curData.HunJiangJiBanValue,curData.DestinySkillID,curData.DestinyValue,curData.SevenStartSkillID,curData.SevenStartValue,curData.WarPetSkillTabId,curData.WarPetValue,curData.ShenShiId,curData.ShenShiValue,curData.ShenShiSystemId,curData.YuanShenLevelAddValue,curData.ShenShiSystemValue,curData.XuanJiTianFuId,curData.XuanJiTianFuValue,curData.CampId,curData.CampValue,curData.FengHaoValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SkillAddValueContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillAddValueContainer.StartFB_SkillAddValueContainer(fbb);
			FB_SkillAddValueContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillAddValueContainer.EndFB_SkillAddValueContainer(fbb);
			FB_SkillAddValueContainer.FinishFB_SkillAddValueContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillAddValue.txt", ms.ToArray());
			}
		}

		static void ExprotSkillBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillBaseProvider.Instance.ListData;
			
			Offset<FB_SkillBase>[] offsetArray = new Offset<FB_SkillBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillBase.CreateFB_SkillBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.LevelUpID,curData.IsShowSkillName,curData.IsAutoSelectTar,fbb.CreateString(curData.Icon),curData.SkillClass,curData.UseType,curData.IsMove,curData.IsMoveBreak,curData.IsSkillBreak,curData.IsBreakBeAttacked,curData.TargetType,curData.SelLogic,curData.IsNeedStopEffectId,curData.IsTargetDieBreak);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SkillBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillBaseContainer.StartFB_SkillBaseContainer(fbb);
			FB_SkillBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillBaseContainer.EndFB_SkillBaseContainer(fbb);
			FB_SkillBaseContainer.FinishFB_SkillBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillBase.txt", ms.ToArray());
			}
		}

		static void ExprotSkillCalculate()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillCalculateProvider.Instance.ListData;
			
			Offset<FB_SkillCalculate>[] offsetArray = new Offset<FB_SkillCalculate>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillCalculateProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillCalculate.CreateFB_SkillCalculate(fbb, curData.ID,curData.BaseValue,curData.MaxBaseVal,curData.MandomWeight,curData.SkillExId,curData.SkillLevelValue,curData.TheurgyLevelValue,curData.MaxTheurgyLevelVal);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SkillCalculateContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillCalculateContainer.StartFB_SkillCalculateContainer(fbb);
			FB_SkillCalculateContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillCalculateContainer.EndFB_SkillCalculateContainer(fbb);
			FB_SkillCalculateContainer.FinishFB_SkillCalculateContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillCalculate.txt", ms.ToArray());
			}
		}

		static void ExprotSkillDelay()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillDelayProvider.Instance.ListData;
			
			Offset<FB_SkillDelay>[] offsetArray = new Offset<FB_SkillDelay>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillDelayProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillDelay.CreateFB_SkillDelay(fbb, curData.Id,FB_SkillDelay.CreateStartTimeListVector(fbb,curData.StartTimeList.ToArray()),FB_SkillDelay.CreateEndTimeListVector(fbb,curData.EndTimeList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SkillDelayContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillDelayContainer.StartFB_SkillDelayContainer(fbb);
			FB_SkillDelayContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillDelayContainer.EndFB_SkillDelayContainer(fbb);
			FB_SkillDelayContainer.FinishFB_SkillDelayContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillDelay.txt", ms.ToArray());
			}
		}

		static void ExprotSkillEx()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillExProvider.Instance.ListData;
			
			Offset<FB_SkillEx>[] offsetArray = new Offset<FB_SkillEx>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillExProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillEx.CreateFB_SkillEx(fbb, curData.SkillExID,fbb.CreateString(curData.Name),curData.IsPuGong,curData.NextSkillExId,curData.IsBlood,curData.IsUsePassive,curData.BaseId,fbb.CreateString(curData.Icon),fbb.CreateString(curData.SkillType),fbb.CreateString(curData.SkillDesc),fbb.CreateString(curData.TheurgyVerse),fbb.CreateString(curData.TheurgyDesc),fbb.CreateString(curData.TheurgyNextLevelDes),fbb.CreateString(curData.TheurgyRangeDes),curData.SkillReplaceID,FB_SkillEx.CreateTheurgyReplaceIDListVector(fbb,curData.TheurgyReplaceIDList.ToArray()),curData.TheurgyUpID,curData.level,curData.SkillLogic,FB_SkillEx.CreateLogicParamListVector(fbb,curData.LogicParamList.ToArray()),curData.Radius,curData.CDTimeId,curData.SkillDelayTime,curData.SkillContinueTime,curData.YinChangTime,curData.Forced,FB_SkillEx.CreateDelTypeListVector(fbb,curData.DelType_List.ToArray()),FB_SkillEx.CreateDelNumListVector(fbb,curData.DelNum_List.ToArray()),FB_SkillEx.CreateGainsTypeListVector(fbb,curData.GainsType_List.ToArray()),FB_SkillEx.CreateGainsNumListVector(fbb,curData.GainsNum_List.ToArray()),FB_SkillEx.CreateImpactListVector(fbb,curData.Impact_List.ToArray()),curData.SatrtMotionId,FB_SkillEx.CreateBulletEffectIDListVector(fbb,curData.BulletEffectID_List.ToArray()),curData.HitEffect,curData.PaoPaoOnStartSkill,curData.CanUseInNotIdle,curData.CanSynchronization,curData.ProgressId,curData.SkillTipId,curData.AttackFlyRate,curData.AttackFlyRange,curData.AttackFlyTime,curData.Priority,fbb.CreateString(curData.BigSkillTex),curData.IsShenTong,curData.IsXingHunSkill,curData.HitSoundID,curData.ShowTipId);
				KeyMaping[curData.SkillExID] = index;
			}
			var dataVector = FB_SkillExContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillExContainer.StartFB_SkillExContainer(fbb);
			FB_SkillExContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillExContainer.EndFB_SkillExContainer(fbb);
			FB_SkillExContainer.FinishFB_SkillExContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillEx.txt", ms.ToArray());
			}
		}

		static void ExprotSkillLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillLevelProvider.Instance.ListData;
			
			Offset<FB_SkillLevel>[] offsetArray = new Offset<FB_SkillLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillLevel.CreateFB_SkillLevel(fbb, curData.ID,curData.Level,curData.LevelLimit,curData.GoldType,curData.PayGold,curData.ItemID,curData.PayItem,curData.NextLevel,curData.AdvancedExp,curData.BattlePower,FB_SkillLevel.CreateLogicListVector(fbb,curData.LogicList.ToArray()),FB_SkillLevel.CreateLogicOneParamListVector(fbb,curData.LogicOneParamList.ToArray()),FB_SkillLevel.CreateLogicTowParamListVector(fbb,curData.LogicTowParamList.ToArray()),fbb.CreateString(curData.LevelUpDesc));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SkillLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillLevelContainer.StartFB_SkillLevelContainer(fbb);
			FB_SkillLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillLevelContainer.EndFB_SkillLevelContainer(fbb);
			FB_SkillLevelContainer.FinishFB_SkillLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillLevel.txt", ms.ToArray());
			}
		}

		static void ExprotSkillList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillListProvider.Instance.ListData;
			
			Offset<FB_SkillList>[] offsetArray = new Offset<FB_SkillList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillList.CreateFB_SkillList(fbb, curData.Id,curData.PassiveSkillID,fbb.CreateString(curData.GetPathName),fbb.CreateString(curData.Introduce),fbb.CreateString(curData.PathItemName),curData.IsAddMenPai);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SkillListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillListContainer.StartFB_SkillListContainer(fbb);
			FB_SkillListContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillListContainer.EndFB_SkillListContainer(fbb);
			FB_SkillListContainer.FinishFB_SkillListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillList.txt", ms.ToArray());
			}
		}

		static void ExprotSkillSkinBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SkillSkinBaseProvider.Instance.ListData;
			
			Offset<FB_SkillSkinBase>[] offsetArray = new Offset<FB_SkillSkinBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SkillSkinBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SkillSkinBase.CreateFB_SkillSkinBase(fbb, curData.Id,fbb.CreateString(curData.UnlockDesc),FB_SkillSkinBase.CreateFakeObjIDListVector(fbb,curData.FakeObjIDList.ToArray()),curData.MaxAP,fbb.CreateString(curData.NameSprite));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SkillSkinBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SkillSkinBaseContainer.StartFB_SkillSkinBaseContainer(fbb);
			FB_SkillSkinBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SkillSkinBaseContainer.EndFB_SkillSkinBaseContainer(fbb);
			FB_SkillSkinBaseContainer.FinishFB_SkillSkinBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SkillSkinBase.txt", ms.ToArray());
			}
		}

		static void ExprotSoulPowerBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SoulPowerBaseProvider.Instance.ListData;
			
			Offset<FB_SoulPowerBase>[] offsetArray = new Offset<FB_SoulPowerBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SoulPowerBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SoulPowerBase.CreateFB_SoulPowerBase(fbb, curData.Id,fbb.CreateString(curData.Name),curData.UnlockItemId,curData.UnlockParam);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SoulPowerBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SoulPowerBaseContainer.StartFB_SoulPowerBaseContainer(fbb);
			FB_SoulPowerBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SoulPowerBaseContainer.EndFB_SoulPowerBaseContainer(fbb);
			FB_SoulPowerBaseContainer.FinishFB_SoulPowerBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SoulPowerBase.txt", ms.ToArray());
			}
		}

		static void ExprotSoulPowerDecompose()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SoulPowerDecomposeProvider.Instance.ListData;
			
			Offset<FB_SoulPowerDecompose>[] offsetArray = new Offset<FB_SoulPowerDecompose>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SoulPowerDecomposeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SoulPowerDecompose.CreateFB_SoulPowerDecompose(fbb, curData.Id,curData.MoneyType,curData.MoneyCost);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SoulPowerDecomposeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SoulPowerDecomposeContainer.StartFB_SoulPowerDecomposeContainer(fbb);
			FB_SoulPowerDecomposeContainer.AddItems(fbb, dataVector);
			var provider = FB_SoulPowerDecomposeContainer.EndFB_SoulPowerDecomposeContainer(fbb);
			FB_SoulPowerDecomposeContainer.FinishFB_SoulPowerDecomposeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SoulPowerDecompose.txt", ms.ToArray());
			}
		}

		static void ExprotSoulPowerJieUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SoulPowerJieUpProvider.Instance.ListData;
			
			Offset<FB_SoulPowerJieUp>[] offsetArray = new Offset<FB_SoulPowerJieUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SoulPowerJieUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SoulPowerJieUp.CreateFB_SoulPowerJieUp(fbb, curData.Id,curData.ItemId,curData.ItemCost,FB_SoulPowerJieUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_SoulPowerJieUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SoulPowerJieUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SoulPowerJieUpContainer.StartFB_SoulPowerJieUpContainer(fbb);
			FB_SoulPowerJieUpContainer.AddItems(fbb, dataVector);
			var provider = FB_SoulPowerJieUpContainer.EndFB_SoulPowerJieUpContainer(fbb);
			FB_SoulPowerJieUpContainer.FinishFB_SoulPowerJieUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SoulPowerJieUp.txt", ms.ToArray());
			}
		}

		static void ExprotSoulPowerLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SoulPowerLevelUpProvider.Instance.ListData;
			
			Offset<FB_SoulPowerLevelUp>[] offsetArray = new Offset<FB_SoulPowerLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SoulPowerLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SoulPowerLevelUp.CreateFB_SoulPowerLevelUp(fbb, curData.Id,curData.MoneyType,curData.MoneyCost,curData.JieLevel,FB_SoulPowerLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_SoulPowerLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SoulPowerLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SoulPowerLevelUpContainer.StartFB_SoulPowerLevelUpContainer(fbb);
			FB_SoulPowerLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_SoulPowerLevelUpContainer.EndFB_SoulPowerLevelUpContainer(fbb);
			FB_SoulPowerLevelUpContainer.FinishFB_SoulPowerLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SoulPowerLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotSpokesmanReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SpokesmanRewardProvider.Instance.ListData;
			
			Offset<FB_SpokesmanReward>[] offsetArray = new Offset<FB_SpokesmanReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SpokesmanRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SpokesmanReward.CreateFB_SpokesmanReward(fbb, curData.ID,fbb.CreateString(curData.strDesc),curData.DropID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SpokesmanRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SpokesmanRewardContainer.StartFB_SpokesmanRewardContainer(fbb);
			FB_SpokesmanRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SpokesmanRewardContainer.EndFB_SpokesmanRewardContainer(fbb);
			FB_SpokesmanRewardContainer.FinishFB_SpokesmanRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SpokesmanReward.txt", ms.ToArray());
			}
		}

		static void ExprotStarAttribute()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarAttributeProvider.Instance.ListData;
			
			Offset<FB_StarAttribute>[] offsetArray = new Offset<FB_StarAttribute>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarAttributeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarAttribute.CreateFB_StarAttribute(fbb, curData.ID,curData.StarNum,FB_StarAttribute.CreateAttrIDListVector(fbb,curData.AttrIDList.ToArray()),FB_StarAttribute.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.EffectID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarAttributeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarAttributeContainer.StartFB_StarAttributeContainer(fbb);
			FB_StarAttributeContainer.AddItems(fbb, dataVector);
			var provider = FB_StarAttributeContainer.EndFB_StarAttributeContainer(fbb);
			FB_StarAttributeContainer.FinishFB_StarAttributeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarAttribute.txt", ms.ToArray());
			}
		}

		static void ExprotStarCraftFight()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarCraftFightProvider.Instance.ListData;
			
			Offset<FB_StarCraftFight>[] offsetArray = new Offset<FB_StarCraftFight>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarCraftFightProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarCraftFight.CreateFB_StarCraftFight(fbb, curData.ID,curData.CrossWorldLv,curData.StarType,fbb.CreateString(curData.Power),curData.MonsterLv,curData.CopyScene,FB_StarCraftFight.CreateSpecialAttrListVector(fbb,curData.SpecialAttrList.ToArray()),FB_StarCraftFight.CreateSpecialAttrNumListVector(fbb,curData.SpecialAttrNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarCraftFightContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarCraftFightContainer.StartFB_StarCraftFightContainer(fbb);
			FB_StarCraftFightContainer.AddItems(fbb, dataVector);
			var provider = FB_StarCraftFightContainer.EndFB_StarCraftFightContainer(fbb);
			FB_StarCraftFightContainer.FinishFB_StarCraftFightContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarCraftFight.txt", ms.ToArray());
			}
		}

		static void ExprotStarCraftMap()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarCraftMapProvider.Instance.ListData;
			
			Offset<FB_StarCraftMap>[] offsetArray = new Offset<FB_StarCraftMap>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarCraftMapProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarCraftMap.CreateFB_StarCraftMap(fbb, curData.ID,fbb.CreateString(curData.Position),fbb.CreateString(curData.Link),curData.Type,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Quality,curData.Group,curData.Difficult,curData.Score,curData.GateCostNum,FB_StarCraftMap.CreateOccupyRewardListVector(fbb,curData.OccupyRewardList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarCraftMapContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarCraftMapContainer.StartFB_StarCraftMapContainer(fbb);
			FB_StarCraftMapContainer.AddItems(fbb, dataVector);
			var provider = FB_StarCraftMapContainer.EndFB_StarCraftMapContainer(fbb);
			FB_StarCraftMapContainer.FinishFB_StarCraftMapContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarCraftMap.txt", ms.ToArray());
			}
		}

		static void ExprotStarCraftSet()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarCraftSetProvider.Instance.ListData;
			
			Offset<FB_StarCraftSet>[] offsetArray = new Offset<FB_StarCraftSet>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarCraftSetProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarCraftSet.CreateFB_StarCraftSet(fbb, curData.ID,curData.LeftLimit,curData.RightLimit,curData.UpLimit,curData.DownLimit,curData.Star0Num,curData.Star1Num,curData.Star2Num,curData.Star3Num,curData.Star4Num);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarCraftSetContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarCraftSetContainer.StartFB_StarCraftSetContainer(fbb);
			FB_StarCraftSetContainer.AddItems(fbb, dataVector);
			var provider = FB_StarCraftSetContainer.EndFB_StarCraftSetContainer(fbb);
			FB_StarCraftSetContainer.FinishFB_StarCraftSetContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarCraftSet.txt", ms.ToArray());
			}
		}

		static void ExprotStarCraftTicket()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarCraftTicketProvider.Instance.ListData;
			
			Offset<FB_StarCraftTicket>[] offsetArray = new Offset<FB_StarCraftTicket>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarCraftTicketProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarCraftTicket.CreateFB_StarCraftTicket(fbb, curData.ID,curData.Type,FB_StarCraftTicket.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarCraftTicketContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarCraftTicketContainer.StartFB_StarCraftTicketContainer(fbb);
			FB_StarCraftTicketContainer.AddItems(fbb, dataVector);
			var provider = FB_StarCraftTicketContainer.EndFB_StarCraftTicketContainer(fbb);
			FB_StarCraftTicketContainer.FinishFB_StarCraftTicketContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarCraftTicket.txt", ms.ToArray());
			}
		}

		static void ExprotStarmapBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarmapBaseProvider.Instance.ListData;
			
			Offset<FB_StarmapBase>[] offsetArray = new Offset<FB_StarmapBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarmapBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarmapBase.CreateFB_StarmapBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Tips),curData.Quality,curData.SectionID,curData.RequireNum,FB_StarmapBase.CreateRequireIDListVector(fbb,curData.RequireIDList.ToArray()),curData.Attribute1ID,curData.Attribute1Value,curData.Attribute1MinValue,curData.Attribute1PowerValue,curData.Attribute1MaxValue,curData.Attribute2ID,curData.Attribute2Value,curData.Attribute2MinValue,curData.Attribute2PowerValue,curData.Attribute2MaxValue,curData.NormalRandomID,curData.PowerRandomID,curData.PowerMax,curData.IsDoubleAttr,curData.IsBattle,curData.BattleID,curData.AdvancedExp);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarmapBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarmapBaseContainer.StartFB_StarmapBaseContainer(fbb);
			FB_StarmapBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_StarmapBaseContainer.EndFB_StarmapBaseContainer(fbb);
			FB_StarmapBaseContainer.FinishFB_StarmapBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarmapBase.txt", ms.ToArray());
			}
		}

		static void ExprotStarmapRandom()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarmapRandomProvider.Instance.ListData;
			
			Offset<FB_StarmapRandom>[] offsetArray = new Offset<FB_StarmapRandom>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarmapRandomProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarmapRandom.CreateFB_StarmapRandom(fbb, curData.ID,curData.GroupsNum,FB_StarmapRandom.CreateGroupListVector(fbb,curData.GroupList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarmapRandomContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarmapRandomContainer.StartFB_StarmapRandomContainer(fbb);
			FB_StarmapRandomContainer.AddItems(fbb, dataVector);
			var provider = FB_StarmapRandomContainer.EndFB_StarmapRandomContainer(fbb);
			FB_StarmapRandomContainer.FinishFB_StarmapRandomContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarmapRandom.txt", ms.ToArray());
			}
		}

		static void ExprotStarmapSection()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarmapSectionProvider.Instance.ListData;
			
			Offset<FB_StarmapSection>[] offsetArray = new Offset<FB_StarmapSection>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarmapSectionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarmapSection.CreateFB_StarmapSection(fbb, curData.ID,fbb.CreateString(curData.OrderName),fbb.CreateString(curData.Name),curData.UnlockLevel,fbb.CreateString(curData.IconName),curData.MaxStarmap,curData.SortID,FB_StarmapSection.CreateStarmapListVector(fbb,curData.StarmapList.ToArray()),curData.MainGridType,fbb.CreateString(curData.MainGridName));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarmapSectionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarmapSectionContainer.StartFB_StarmapSectionContainer(fbb);
			FB_StarmapSectionContainer.AddItems(fbb, dataVector);
			var provider = FB_StarmapSectionContainer.EndFB_StarmapSectionContainer(fbb);
			FB_StarmapSectionContainer.FinishFB_StarmapSectionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarmapSection.txt", ms.ToArray());
			}
		}

		static void ExprotStarSoulLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarSoulLevelProvider.Instance.ListData;
			
			Offset<FB_StarSoulLevel>[] offsetArray = new Offset<FB_StarSoulLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarSoulLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarSoulLevel.CreateFB_StarSoulLevel(fbb, curData.ID,curData.Exp,curData.AttackValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarSoulLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarSoulLevelContainer.StartFB_StarSoulLevelContainer(fbb);
			FB_StarSoulLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_StarSoulLevelContainer.EndFB_StarSoulLevelContainer(fbb);
			FB_StarSoulLevelContainer.FinishFB_StarSoulLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarSoulLevel.txt", ms.ToArray());
			}
		}

		static void ExprotStarSoulSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarSoulSkillProvider.Instance.ListData;
			
			Offset<FB_StarSoulSkill>[] offsetArray = new Offset<FB_StarSoulSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarSoulSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarSoulSkill.CreateFB_StarSoulSkill(fbb, curData.ID,curData.PassiveSkillId,curData.ReplacePassiveSkillId,curData.InvalidPassiveSkillId,curData.IsShowOnUI,curData.UnLockLevel,curData.SkillLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarSoulSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarSoulSkillContainer.StartFB_StarSoulSkillContainer(fbb);
			FB_StarSoulSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_StarSoulSkillContainer.EndFB_StarSoulSkillContainer(fbb);
			FB_StarSoulSkillContainer.FinishFB_StarSoulSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarSoulSkill.txt", ms.ToArray());
			}
		}

		static void ExprotStarSoulUnitBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarSoulUnitBaseProvider.Instance.ListData;
			
			Offset<FB_StarSoulUnitBase>[] offsetArray = new Offset<FB_StarSoulUnitBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarSoulUnitBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarSoulUnitBase.CreateFB_StarSoulUnitBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameIcon),fbb.CreateString(curData.RaceIcon),fbb.CreateString(curData.ItemIcon),curData.FakeObjId,curData.FuncOpenFakeObjId,curData.CharSoulId,curData.UnLockAttr,curData.UnLockModel,curData.MaxLevel,curData.UnLockType,FB_StarSoulUnitBase.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()),curData.Quality,FB_StarSoulUnitBase.CreateSkillListVector(fbb,curData.SkillList.ToArray()),FB_StarSoulUnitBase.CreateExtSkillListVector(fbb,curData.ExtSkillList.ToArray()),FB_StarSoulUnitBase.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),curData.DescStrId,curData.unlockDescStrId,curData.CanDecompose,curData.RankFakeObjID,curData.Race,curData.ShopItemId,curData.JuHunItemId,curData.JuHunItemCount,curData.DropBoxItemId,curData.GetItemNum,curData.JuHunJiXu,curData.GetPathStrId,curData.GetPathId,curData.OpenServerDay,curData.IsShowOnUI,curData.ShangZhenFakeObjID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarSoulUnitBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarSoulUnitBaseContainer.StartFB_StarSoulUnitBaseContainer(fbb);
			FB_StarSoulUnitBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_StarSoulUnitBaseContainer.EndFB_StarSoulUnitBaseContainer(fbb);
			FB_StarSoulUnitBaseContainer.FinishFB_StarSoulUnitBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarSoulUnitBase.txt", ms.ToArray());
			}
		}

		static void ExprotStarSoulUnitLevel()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarSoulUnitLevelProvider.Instance.ListData;
			
			Offset<FB_StarSoulUnitLevel>[] offsetArray = new Offset<FB_StarSoulUnitLevel>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarSoulUnitLevelProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarSoulUnitLevel.CreateFB_StarSoulUnitLevel(fbb, curData.ID,curData.Attack,curData.CombatPower,curData.CostItemId,curData.CostItemCount,FB_StarSoulUnitLevel.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_StarSoulUnitLevel.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarSoulUnitLevelContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarSoulUnitLevelContainer.StartFB_StarSoulUnitLevelContainer(fbb);
			FB_StarSoulUnitLevelContainer.AddItems(fbb, dataVector);
			var provider = FB_StarSoulUnitLevelContainer.EndFB_StarSoulUnitLevelContainer(fbb);
			FB_StarSoulUnitLevelContainer.FinishFB_StarSoulUnitLevelContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarSoulUnitLevel.txt", ms.ToArray());
			}
		}

		static void ExprotStarWishItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StarWishItemProvider.Instance.ListData;
			
			Offset<FB_StarWishItem>[] offsetArray = new Offset<FB_StarWishItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StarWishItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StarWishItem.CreateFB_StarWishItem(fbb, curData.ID,curData.WorldMin,curData.WorldMax,curData.ItemId,curData.ItemCount,curData.RewardType,curData.CountLimit,curData.MDId,curData.IsBigReward,curData.paramSec);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StarWishItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StarWishItemContainer.StartFB_StarWishItemContainer(fbb);
			FB_StarWishItemContainer.AddItems(fbb, dataVector);
			var provider = FB_StarWishItemContainer.EndFB_StarWishItemContainer(fbb);
			FB_StarWishItemContainer.FinishFB_StarWishItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StarWishItem.txt", ms.ToArray());
			}
		}

		static void ExprotStrengthenBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrengthenBaseProvider.Instance.ListData;
			
			Offset<FB_StrengthenBase>[] offsetArray = new Offset<FB_StrengthenBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrengthenBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrengthenBase.CreateFB_StrengthenBase(fbb, curData.ID,curData.StrDictID,fbb.CreateString(curData.Icon),curData.UseLogic,curData.GoalNum,FB_StrengthenBase.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.SortLevel,curData.FunctionID,curData.UIID,curData.ActiveID,FB_StrengthenBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_StrengthenBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrengthenBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrengthenBaseContainer.StartFB_StrengthenBaseContainer(fbb);
			FB_StrengthenBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_StrengthenBaseContainer.EndFB_StrengthenBaseContainer(fbb);
			FB_StrengthenBaseContainer.FinishFB_StrengthenBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StrengthenBase.txt", ms.ToArray());
			}
		}

		static void ExprotStrengthenSubClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_StrengthenSubClassProvider.Instance.ListData;
			
			Offset<FB_StrengthenSubClass>[] offsetArray = new Offset<FB_StrengthenSubClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_StrengthenSubClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_StrengthenSubClass.CreateFB_StrengthenSubClass(fbb, curData.ID,fbb.CreateString(curData.Name),FB_StrengthenSubClass.CreateMissionIDListVector(fbb,curData.MissionIDList.ToArray()),curData.RewardID,curData.RewardCount,curData.FlagID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_StrengthenSubClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_StrengthenSubClassContainer.StartFB_StrengthenSubClassContainer(fbb);
			FB_StrengthenSubClassContainer.AddItems(fbb, dataVector);
			var provider = FB_StrengthenSubClassContainer.EndFB_StrengthenSubClassContainer(fbb);
			FB_StrengthenSubClassContainer.FinishFB_StrengthenSubClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/StrengthenSubClass.txt", ms.ToArray());
			}
		}

		static void ExprotSYHBonusByStage()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHBonusByStageProvider.Instance.ListData;
			
			Offset<FB_SYHBonusByStage>[] offsetArray = new Offset<FB_SYHBonusByStage>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHBonusByStageProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHBonusByStage.CreateFB_SYHBonusByStage(fbb, curData.ID,FB_SYHBonusByStage.CreateMenPaiAwardListVector(fbb,curData.MenPaiAwardList.ToArray()),curData.MenPaiNum,curData.MenPaiReal,FB_SYHBonusByStage.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_SYHBonusByStage.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHBonusByStageContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHBonusByStageContainer.StartFB_SYHBonusByStageContainer(fbb);
			FB_SYHBonusByStageContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHBonusByStageContainer.EndFB_SYHBonusByStageContainer(fbb);
			FB_SYHBonusByStageContainer.FinishFB_SYHBonusByStageContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHBonusByStage.txt", ms.ToArray());
			}
		}

		static void ExprotSYHCangBaoHuiAward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHCangBaoHuiAwardProvider.Instance.ListData;
			
			Offset<FB_SYHCangBaoHuiAward>[] offsetArray = new Offset<FB_SYHCangBaoHuiAward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHCangBaoHuiAwardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHCangBaoHuiAward.CreateFB_SYHCangBaoHuiAward(fbb, curData.ID,curData.MinLevel,curData.MaxLevel,curData.TargetPoint,curData.AwardIndex,curData.LayerId,curData.GetIndex,curData.BounuID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHCangBaoHuiAwardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHCangBaoHuiAwardContainer.StartFB_SYHCangBaoHuiAwardContainer(fbb);
			FB_SYHCangBaoHuiAwardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHCangBaoHuiAwardContainer.EndFB_SYHCangBaoHuiAwardContainer(fbb);
			FB_SYHCangBaoHuiAwardContainer.FinishFB_SYHCangBaoHuiAwardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHCangBaoHuiAward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHCangBaoMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHCangBaoMissionProvider.Instance.ListData;
			
			Offset<FB_SYHCangBaoMission>[] offsetArray = new Offset<FB_SYHCangBaoMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHCangBaoMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHCangBaoMission.CreateFB_SYHCangBaoMission(fbb, curData.ID,fbb.CreateString(curData.ActivityName),curData.Score,FB_SYHCangBaoMission.CreateCountLimitListVector(fbb,curData.CountLimitList.ToArray()),curData.DicId,curData.MDId,curData.ShowItemId,curData.ActivityId,curData.FuntionOpenID,curData.UIID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHCangBaoMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHCangBaoMissionContainer.StartFB_SYHCangBaoMissionContainer(fbb);
			FB_SYHCangBaoMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHCangBaoMissionContainer.EndFB_SYHCangBaoMissionContainer(fbb);
			FB_SYHCangBaoMissionContainer.FinishFB_SYHCangBaoMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHCangBaoMission.txt", ms.ToArray());
			}
		}

		static void ExprotSYHFestivalActivityList()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHFestivalActivityListProvider.Instance.ListData;
			
			Offset<FB_SYHFestivalActivityList>[] offsetArray = new Offset<FB_SYHFestivalActivityList>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHFestivalActivityListProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHFestivalActivityList.CreateFB_SYHFestivalActivityList(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Describe),curData.OpenTime,curData.EndTime,curData.NPCID,curData.SceneID,curData.NPCX,curData.NPCZ);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHFestivalActivityListContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHFestivalActivityListContainer.StartFB_SYHFestivalActivityListContainer(fbb);
			FB_SYHFestivalActivityListContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHFestivalActivityListContainer.EndFB_SYHFestivalActivityListContainer(fbb);
			FB_SYHFestivalActivityListContainer.FinishFB_SYHFestivalActivityListContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHFestivalActivityList.txt", ms.ToArray());
			}
		}

		static void ExprotSYHFestivalCarnivalMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHFestivalCarnivalMissionProvider.Instance.ListData;
			
			Offset<FB_SYHFestivalCarnivalMission>[] offsetArray = new Offset<FB_SYHFestivalCarnivalMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHFestivalCarnivalMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHFestivalCarnivalMission.CreateFB_SYHFestivalCarnivalMission(fbb, curData.ID,curData.ScoreLimit,curData.ShowItemId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHFestivalCarnivalMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHFestivalCarnivalMissionContainer.StartFB_SYHFestivalCarnivalMissionContainer(fbb);
			FB_SYHFestivalCarnivalMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHFestivalCarnivalMissionContainer.EndFB_SYHFestivalCarnivalMissionContainer(fbb);
			FB_SYHFestivalCarnivalMissionContainer.FinishFB_SYHFestivalCarnivalMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHFestivalCarnivalMission.txt", ms.ToArray());
			}
		}

		static void ExprotSYHFestivalCarnivalReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHFestivalCarnivalRewardProvider.Instance.ListData;
			
			Offset<FB_SYHFestivalCarnivalReward>[] offsetArray = new Offset<FB_SYHFestivalCarnivalReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHFestivalCarnivalRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHFestivalCarnivalReward.CreateFB_SYHFestivalCarnivalReward(fbb, curData.ID,fbb.CreateString(curData.ActivityName),curData.Score,curData.CountLimit,curData.DicId,curData.MDId,curData.ShowItemId,curData.ActivityId,curData.FuntionOpenID,curData.UIID,curData.AwardId,curData.AwardCount,curData.WorldLimit,curData.LogicId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHFestivalCarnivalRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHFestivalCarnivalRewardContainer.StartFB_SYHFestivalCarnivalRewardContainer(fbb);
			FB_SYHFestivalCarnivalRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHFestivalCarnivalRewardContainer.EndFB_SYHFestivalCarnivalRewardContainer(fbb);
			FB_SYHFestivalCarnivalRewardContainer.FinishFB_SYHFestivalCarnivalRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHFestivalCarnivalReward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHFestivalMonster()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHFestivalMonsterProvider.Instance.ListData;
			
			Offset<FB_SYHFestivalMonster>[] offsetArray = new Offset<FB_SYHFestivalMonster>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHFestivalMonsterProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHFestivalMonster.CreateFB_SYHFestivalMonster(fbb, curData.ID,fbb.CreateString(curData.ActivityName),curData.ActivityTime);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHFestivalMonsterContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHFestivalMonsterContainer.StartFB_SYHFestivalMonsterContainer(fbb);
			FB_SYHFestivalMonsterContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHFestivalMonsterContainer.EndFB_SYHFestivalMonsterContainer(fbb);
			FB_SYHFestivalMonsterContainer.FinishFB_SYHFestivalMonsterContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHFestivalMonster.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJianBaoGe()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJianBaoGeProvider.Instance.ListData;
			
			Offset<FB_SYHJianBaoGe>[] offsetArray = new Offset<FB_SYHJianBaoGe>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJianBaoGeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJianBaoGe.CreateFB_SYHJianBaoGe(fbb, curData.ID,curData.HighDropBoxId,curData.LowDropBoxId,curData.ThreeDropBox,curData.MagicNum,curData.LevelLimit,curData.Param,curData.Seq,FB_SYHJianBaoGe.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHJianBaoGe.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.BuyManyTime,curData.CostItem,curData.ShopItemId,curData.MaxTime,curData.FakeObjId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJianBaoGeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJianBaoGeContainer.StartFB_SYHJianBaoGeContainer(fbb);
			FB_SYHJianBaoGeContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJianBaoGeContainer.EndFB_SYHJianBaoGeContainer(fbb);
			FB_SYHJianBaoGeContainer.FinishFB_SYHJianBaoGeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJianBaoGe.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJingXiXianGouBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJingXiXianGouBaseProvider.Instance.ListData;
			
			Offset<FB_SYHJingXiXianGouBase>[] offsetArray = new Offset<FB_SYHJingXiXianGouBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJingXiXianGouBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJingXiXianGouBase.CreateFB_SYHJingXiXianGouBase(fbb, curData.ID,fbb.CreateString(curData.RewardName),curData.RewardItemId,curData.StartTime,curData.EndTime,curData.RewardCount,curData.UnlockType,curData.UnlockParam,curData.Duration,curData.Price,curData.OriginPrice,curData.Discount,curData.FlagId,curData.ShowLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJingXiXianGouBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJingXiXianGouBaseContainer.StartFB_SYHJingXiXianGouBaseContainer(fbb);
			FB_SYHJingXiXianGouBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJingXiXianGouBaseContainer.EndFB_SYHJingXiXianGouBaseContainer(fbb);
			FB_SYHJingXiXianGouBaseContainer.FinishFB_SYHJingXiXianGouBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJingXiXianGouBase.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoFuDaiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoFuDaiBaseProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoFuDaiBase>[] offsetArray = new Offset<FB_SYHJuBaoFuDaiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoFuDaiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoFuDaiBase.CreateFB_SYHJuBaoFuDaiBase(fbb, curData.ID,FB_SYHJuBaoFuDaiBase.CreateItemListVector(fbb,curData.ItemList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoFuDaiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoFuDaiBaseContainer.StartFB_SYHJuBaoFuDaiBaseContainer(fbb);
			FB_SYHJuBaoFuDaiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoFuDaiBaseContainer.EndFB_SYHJuBaoFuDaiBaseContainer(fbb);
			FB_SYHJuBaoFuDaiBaseContainer.FinishFB_SYHJuBaoFuDaiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoFuDaiBase.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoFuDaiItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoFuDaiItemProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoFuDaiItem>[] offsetArray = new Offset<FB_SYHJuBaoFuDaiItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoFuDaiItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoFuDaiItem.CreateFB_SYHJuBaoFuDaiItem(fbb, curData.ID,curData.Type,curData.ItemRate);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoFuDaiItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoFuDaiItemContainer.StartFB_SYHJuBaoFuDaiItemContainer(fbb);
			FB_SYHJuBaoFuDaiItemContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoFuDaiItemContainer.EndFB_SYHJuBaoFuDaiItemContainer(fbb);
			FB_SYHJuBaoFuDaiItemContainer.FinishFB_SYHJuBaoFuDaiItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoFuDaiItem.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoFuDaiReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoFuDaiRewardProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoFuDaiReward>[] offsetArray = new Offset<FB_SYHJuBaoFuDaiReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoFuDaiRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoFuDaiReward.CreateFB_SYHJuBaoFuDaiReward(fbb, curData.ID,fbb.CreateString(curData.Tips),curData.RechargeTimes,FB_SYHJuBaoFuDaiReward.CreateItemIDListVector(fbb,curData.ItemID_List.ToArray()),FB_SYHJuBaoFuDaiReward.CreateItemRateListVector(fbb,curData.ItemRate_List.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoFuDaiRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoFuDaiRewardContainer.StartFB_SYHJuBaoFuDaiRewardContainer(fbb);
			FB_SYHJuBaoFuDaiRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoFuDaiRewardContainer.EndFB_SYHJuBaoFuDaiRewardContainer(fbb);
			FB_SYHJuBaoFuDaiRewardContainer.FinishFB_SYHJuBaoFuDaiRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoFuDaiReward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoPen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoPenProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoPen>[] offsetArray = new Offset<FB_SYHJuBaoPen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoPenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoPen.CreateFB_SYHJuBaoPen(fbb, curData.ID,curData.RMBId,FB_SYHJuBaoPen.CreateProbabilityListVector(fbb,curData.ProbabilityList.ToArray()),FB_SYHJuBaoPen.CreateRateListVector(fbb,curData.RateList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoPenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoPenContainer.StartFB_SYHJuBaoPenContainer(fbb);
			FB_SYHJuBaoPenContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoPenContainer.EndFB_SYHJuBaoPenContainer(fbb);
			FB_SYHJuBaoPenContainer.FinishFB_SYHJuBaoPenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoPen.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoPenPrize()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoPenPrizeProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoPenPrize>[] offsetArray = new Offset<FB_SYHJuBaoPenPrize>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoPenPrizeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoPenPrize.CreateFB_SYHJuBaoPenPrize(fbb, curData.ID,curData.DayLeast,curData.DayMax,curData.Prize);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoPenPrizeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoPenPrizeContainer.StartFB_SYHJuBaoPenPrizeContainer(fbb);
			FB_SYHJuBaoPenPrizeContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoPenPrizeContainer.EndFB_SYHJuBaoPenPrizeContainer(fbb);
			FB_SYHJuBaoPenPrizeContainer.FinishFB_SYHJuBaoPenPrizeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoPenPrize.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoPenRanking()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoPenRankingProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoPenRanking>[] offsetArray = new Offset<FB_SYHJuBaoPenRanking>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoPenRankingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoPenRanking.CreateFB_SYHJuBaoPenRanking(fbb, curData.ID,FB_SYHJuBaoPenRanking.CreateRankingListVector(fbb,curData.RankingList.ToArray()),curData.Percent);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoPenRankingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoPenRankingContainer.StartFB_SYHJuBaoPenRankingContainer(fbb);
			FB_SYHJuBaoPenRankingContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoPenRankingContainer.EndFB_SYHJuBaoPenRankingContainer(fbb);
			FB_SYHJuBaoPenRankingContainer.FinishFB_SYHJuBaoPenRankingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoPenRanking.txt", ms.ToArray());
			}
		}

		static void ExprotSYHJuBaoPenReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHJuBaoPenRewardProvider.Instance.ListData;
			
			Offset<FB_SYHJuBaoPenReward>[] offsetArray = new Offset<FB_SYHJuBaoPenReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHJuBaoPenRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHJuBaoPenReward.CreateFB_SYHJuBaoPenReward(fbb, curData.ID,fbb.CreateString(curData.Tips),FB_SYHJuBaoPenReward.CreateItemIDListVector(fbb,curData.ItemID_List.ToArray()),FB_SYHJuBaoPenReward.CreateItemRateListVector(fbb,curData.ItemRate_List.ToArray()),curData.RealValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHJuBaoPenRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHJuBaoPenRewardContainer.StartFB_SYHJuBaoPenRewardContainer(fbb);
			FB_SYHJuBaoPenRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHJuBaoPenRewardContainer.EndFB_SYHJuBaoPenRewardContainer(fbb);
			FB_SYHJuBaoPenRewardContainer.FinishFB_SYHJuBaoPenRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHJuBaoPenReward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHNiuDanJi()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHNiuDanJiProvider.Instance.ListData;
			
			Offset<FB_SYHNiuDanJi>[] offsetArray = new Offset<FB_SYHNiuDanJi>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHNiuDanJiProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHNiuDanJi.CreateFB_SYHNiuDanJi(fbb, curData.ID,curData.HighDropBoxId,curData.LowDropBoxId,curData.ThreeDropBox,curData.MagicNum,curData.MaxTime,curData.Param,curData.Seq,FB_SYHNiuDanJi.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHNiuDanJi.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHNiuDanJiContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHNiuDanJiContainer.StartFB_SYHNiuDanJiContainer(fbb);
			FB_SYHNiuDanJiContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHNiuDanJiContainer.EndFB_SYHNiuDanJiContainer(fbb);
			FB_SYHNiuDanJiContainer.FinishFB_SYHNiuDanJiContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHNiuDanJi.txt", ms.ToArray());
			}
		}

		static void ExprotSYHQiYuanBaoGe()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHQiYuanBaoGeProvider.Instance.ListData;
			
			Offset<FB_SYHQiYuanBaoGe>[] offsetArray = new Offset<FB_SYHQiYuanBaoGe>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHQiYuanBaoGeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHQiYuanBaoGe.CreateFB_SYHQiYuanBaoGe(fbb, curData.ID,curData.HighDropBoxId,curData.LowDropBoxId,curData.ThreeDropBox,curData.LevelLimit,curData.Param,fbb.CreateString(curData.ShenPuName),curData.model,FB_SYHQiYuanBaoGe.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHQiYuanBaoGe.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),FB_SYHQiYuanBaoGe.CreateShowItemIdListVector(fbb,curData.ShowItemIdList.ToArray()),FB_SYHQiYuanBaoGe.CreateShowItemNumListVector(fbb,curData.ShowItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHQiYuanBaoGeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHQiYuanBaoGeContainer.StartFB_SYHQiYuanBaoGeContainer(fbb);
			FB_SYHQiYuanBaoGeContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHQiYuanBaoGeContainer.EndFB_SYHQiYuanBaoGeContainer(fbb);
			FB_SYHQiYuanBaoGeContainer.FinishFB_SYHQiYuanBaoGeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHQiYuanBaoGe.txt", ms.ToArray());
			}
		}

		static void ExprotSYHRechargeAndConsumeReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHRechargeAndConsumeRewardProvider.Instance.ListData;
			
			Offset<FB_SYHRechargeAndConsumeReward>[] offsetArray = new Offset<FB_SYHRechargeAndConsumeReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHRechargeAndConsumeRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHRechargeAndConsumeReward.CreateFB_SYHRechargeAndConsumeReward(fbb, curData.ID,curData.AwardIndex,curData.LevelLimit,curData.Param,curData.BaseId,curData.Count,FB_SYHRechargeAndConsumeReward.CreateGoldListVector(fbb,curData.GoldList.ToArray()),curData.NameStrId,curData.DescStrId,curData.GoldStrId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHRechargeAndConsumeRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHRechargeAndConsumeRewardContainer.StartFB_SYHRechargeAndConsumeRewardContainer(fbb);
			FB_SYHRechargeAndConsumeRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHRechargeAndConsumeRewardContainer.EndFB_SYHRechargeAndConsumeRewardContainer(fbb);
			FB_SYHRechargeAndConsumeRewardContainer.FinishFB_SYHRechargeAndConsumeRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHRechargeAndConsumeReward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHTianXingBaoGe()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHTianXingBaoGeProvider.Instance.ListData;
			
			Offset<FB_SYHTianXingBaoGe>[] offsetArray = new Offset<FB_SYHTianXingBaoGe>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHTianXingBaoGeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHTianXingBaoGe.CreateFB_SYHTianXingBaoGe(fbb, curData.ID,FB_SYHTianXingBaoGe.CreateJianBaoCountListVector(fbb,curData.JianBaoCountList.ToArray()),curData.VipLimit,FB_SYHTianXingBaoGe.CreateVipCoefficientListVector(fbb,curData.VipCoefficientList.ToArray()),curData.AddNum,curData.HighDropBoxId,curData.LowDropBoxId,curData.ThreeDropBox,curData.LevelLimit,curData.Param,FB_SYHTianXingBaoGe.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHTianXingBaoGe.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHTianXingBaoGeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHTianXingBaoGeContainer.StartFB_SYHTianXingBaoGeContainer(fbb);
			FB_SYHTianXingBaoGeContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHTianXingBaoGeContainer.EndFB_SYHTianXingBaoGeContainer(fbb);
			FB_SYHTianXingBaoGeContainer.FinishFB_SYHTianXingBaoGeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHTianXingBaoGe.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianShiBox()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianShiBoxProvider.Instance.ListData;
			
			Offset<FB_SYHXianShiBox>[] offsetArray = new Offset<FB_SYHXianShiBox>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianShiBoxProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianShiBox.CreateFB_SYHXianShiBox(fbb, curData.Id,curData.LevelLimit,FB_SYHXianShiBox.CreateAwardIdexListVector(fbb,curData.AwardIdexList.ToArray()),FB_SYHXianShiBox.CreateItemCostNumListVector(fbb,curData.ItemCostNumList.ToArray()),FB_SYHXianShiBox.CreateItemWorthNumListVector(fbb,curData.ItemWorthNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SYHXianShiBoxContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianShiBoxContainer.StartFB_SYHXianShiBoxContainer(fbb);
			FB_SYHXianShiBoxContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianShiBoxContainer.EndFB_SYHXianShiBoxContainer(fbb);
			FB_SYHXianShiBoxContainer.FinishFB_SYHXianShiBoxContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianShiBox.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianShiQiangGou()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianShiQiangGouProvider.Instance.ListData;
			
			Offset<FB_SYHXianShiQiangGou>[] offsetArray = new Offset<FB_SYHXianShiQiangGou>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianShiQiangGouProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianShiQiangGou.CreateFB_SYHXianShiQiangGou(fbb, curData.Id,curData.LevelLimit,curData.Param,FB_SYHXianShiQiangGou.CreateRMBListVector(fbb,curData.RMBList.ToArray()),FB_SYHXianShiQiangGou.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHXianShiQiangGou.CreateLimitNumListVector(fbb,curData.LimitNumList.ToArray()),FB_SYHXianShiQiangGou.CreateYuanBaoNumListVector(fbb,curData.YuanBaoNumList.ToArray()),FB_SYHXianShiQiangGou.CreateMailListVector(fbb,curData.MailList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SYHXianShiQiangGouContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianShiQiangGouContainer.StartFB_SYHXianShiQiangGouContainer(fbb);
			FB_SYHXianShiQiangGouContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianShiQiangGouContainer.EndFB_SYHXianShiQiangGouContainer(fbb);
			FB_SYHXianShiQiangGouContainer.FinishFB_SYHXianShiQiangGouContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianShiQiangGou.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianYuMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianYuMissionProvider.Instance.ListData;
			
			Offset<FB_SYHXianYuMission>[] offsetArray = new Offset<FB_SYHXianYuMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianYuMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianYuMission.CreateFB_SYHXianYuMission(fbb, curData.ID,fbb.CreateString(curData.ActivityName),curData.Score,curData.CountLimit,curData.DicId,curData.MDId,curData.ShowItemId,curData.ActivityId,curData.FuntionOpenID,curData.UIID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHXianYuMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianYuMissionContainer.StartFB_SYHXianYuMissionContainer(fbb);
			FB_SYHXianYuMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianYuMissionContainer.EndFB_SYHXianYuMissionContainer(fbb);
			FB_SYHXianYuMissionContainer.FinishFB_SYHXianYuMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianYuMission.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianYuQmlh()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianYuQmlhProvider.Instance.ListData;
			
			Offset<FB_SYHXianYuQmlh>[] offsetArray = new Offset<FB_SYHXianYuQmlh>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianYuQmlhProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianYuQmlh.CreateFB_SYHXianYuQmlh(fbb, curData.ID,curData.ScoreLimit,curData.DicId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHXianYuQmlhContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianYuQmlhContainer.StartFB_SYHXianYuQmlhContainer(fbb);
			FB_SYHXianYuQmlhContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianYuQmlhContainer.EndFB_SYHXianYuQmlhContainer(fbb);
			FB_SYHXianYuQmlhContainer.FinishFB_SYHXianYuQmlhContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianYuQmlh.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianYuShengHuiAward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianYuShengHuiAwardProvider.Instance.ListData;
			
			Offset<FB_SYHXianYuShengHuiAward>[] offsetArray = new Offset<FB_SYHXianYuShengHuiAward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianYuShengHuiAwardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianYuShengHuiAward.CreateFB_SYHXianYuShengHuiAward(fbb, curData.ID,curData.AwardIdex,curData.LevelLimit,curData.Parm,curData.ParmSec,curData.XianYuId,FB_SYHXianYuShengHuiAward.CreateShowItemListVector(fbb,curData.ShowItemList.ToArray()),curData.DicId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHXianYuShengHuiAwardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianYuShengHuiAwardContainer.StartFB_SYHXianYuShengHuiAwardContainer(fbb);
			FB_SYHXianYuShengHuiAwardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianYuShengHuiAwardContainer.EndFB_SYHXianYuShengHuiAwardContainer(fbb);
			FB_SYHXianYuShengHuiAwardContainer.FinishFB_SYHXianYuShengHuiAwardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianYuShengHuiAward.txt", ms.ToArray());
			}
		}

		static void ExprotSYHXianYuShengHuiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHXianYuShengHuiBaseProvider.Instance.ListData;
			
			Offset<FB_SYHXianYuShengHuiBase>[] offsetArray = new Offset<FB_SYHXianYuShengHuiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHXianYuShengHuiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHXianYuShengHuiBase.CreateFB_SYHXianYuShengHuiBase(fbb, curData.ID,fbb.CreateString(curData.ActivityName),curData.StartWordLevelMd,curData.StartIndexMD,curData.StartId,curData.EndId,curData.DicId,fbb.CreateString(curData.TimeInfo));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHXianYuShengHuiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHXianYuShengHuiBaseContainer.StartFB_SYHXianYuShengHuiBaseContainer(fbb);
			FB_SYHXianYuShengHuiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHXianYuShengHuiBaseContainer.EndFB_SYHXianYuShengHuiBaseContainer(fbb);
			FB_SYHXianYuShengHuiBaseContainer.FinishFB_SYHXianYuShengHuiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHXianYuShengHuiBase.txt", ms.ToArray());
			}
		}

		static void ExprotSYHYuanBaoInvest()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHYuanBaoInvestProvider.Instance.ListData;
			
			Offset<FB_SYHYuanBaoInvest>[] offsetArray = new Offset<FB_SYHYuanBaoInvest>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHYuanBaoInvestProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHYuanBaoInvest.CreateFB_SYHYuanBaoInvest(fbb, curData.ID,curData.StrDic,curData.MoneyNum,curData.Dic,curData.LevelLimit,curData.ExtraReward);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHYuanBaoInvestContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHYuanBaoInvestContainer.StartFB_SYHYuanBaoInvestContainer(fbb);
			FB_SYHYuanBaoInvestContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHYuanBaoInvestContainer.EndFB_SYHYuanBaoInvestContainer(fbb);
			FB_SYHYuanBaoInvestContainer.FinishFB_SYHYuanBaoInvestContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHYuanBaoInvest.txt", ms.ToArray());
			}
		}

		static void ExprotSYHYuanBaoInvestType()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHYuanBaoInvestTypeProvider.Instance.ListData;
			
			Offset<FB_SYHYuanBaoInvestType>[] offsetArray = new Offset<FB_SYHYuanBaoInvestType>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHYuanBaoInvestTypeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHYuanBaoInvestType.CreateFB_SYHYuanBaoInvestType(fbb, curData.ID,curData.MoneyNum,curData.MoneyConsum,curData.Type);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_SYHYuanBaoInvestTypeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHYuanBaoInvestTypeContainer.StartFB_SYHYuanBaoInvestTypeContainer(fbb);
			FB_SYHYuanBaoInvestTypeContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHYuanBaoInvestTypeContainer.EndFB_SYHYuanBaoInvestTypeContainer(fbb);
			FB_SYHYuanBaoInvestTypeContainer.FinishFB_SYHYuanBaoInvestTypeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHYuanBaoInvestType.txt", ms.ToArray());
			}
		}

		static void ExprotSYHZaDanPingGuo()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHZaDanPingGuoProvider.Instance.ListData;
			
			Offset<FB_SYHZaDanPingGuo>[] offsetArray = new Offset<FB_SYHZaDanPingGuo>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHZaDanPingGuoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHZaDanPingGuo.CreateFB_SYHZaDanPingGuo(fbb, curData.Id,curData.type,curData.group,curData.WorldLvMin,curData.WorldLvMax,FB_SYHZaDanPingGuo.CreateQualityListVector(fbb,curData.qualityList.ToArray()),FB_SYHZaDanPingGuo.CreateWeightListVector(fbb,curData.weightList.ToArray()),FB_SYHZaDanPingGuo.CreateRewardListVector(fbb,curData.rewardList.ToArray()),curData.showRate,curData.rewardShow);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SYHZaDanPingGuoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHZaDanPingGuoContainer.StartFB_SYHZaDanPingGuoContainer(fbb);
			FB_SYHZaDanPingGuoContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHZaDanPingGuoContainer.EndFB_SYHZaDanPingGuoContainer(fbb);
			FB_SYHZaDanPingGuoContainer.FinishFB_SYHZaDanPingGuoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHZaDanPingGuo.txt", ms.ToArray());
			}
		}

		static void ExprotSYHZaDanPingGuoNumReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_SYHZaDanPingGuoNumRewardProvider.Instance.ListData;
			
			Offset<FB_SYHZaDanPingGuoNumReward>[] offsetArray = new Offset<FB_SYHZaDanPingGuoNumReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_SYHZaDanPingGuoNumRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_SYHZaDanPingGuoNumReward.CreateFB_SYHZaDanPingGuoNumReward(fbb, curData.Id,curData.type,curData.group,curData.WorldLvMin,curData.WorldLvMax,curData.num,FB_SYHZaDanPingGuoNumReward.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_SYHZaDanPingGuoNumReward.CreateItemCountListVector(fbb,curData.ItemCountList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_SYHZaDanPingGuoNumRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_SYHZaDanPingGuoNumRewardContainer.StartFB_SYHZaDanPingGuoNumRewardContainer(fbb);
			FB_SYHZaDanPingGuoNumRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_SYHZaDanPingGuoNumRewardContainer.EndFB_SYHZaDanPingGuoNumRewardContainer(fbb);
			FB_SYHZaDanPingGuoNumRewardContainer.FinishFB_SYHZaDanPingGuoNumRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/SYHZaDanPingGuoNumReward.txt", ms.ToArray());
			}
		}

		static void ExprotTaiGuRelicBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TaiGuRelicBaseProvider.Instance.ListData;
			
			Offset<FB_TaiGuRelicBase>[] offsetArray = new Offset<FB_TaiGuRelicBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TaiGuRelicBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TaiGuRelicBase.CreateFB_TaiGuRelicBase(fbb, curData.ID,curData.ActStartTime,curData.RefMaxNum,curData.RefFreeNum,FB_TaiGuRelicBase.CreateWeekWeightListVector(fbb,curData.WeekWeightList.ToArray()),FB_TaiGuRelicBase.CreatePushLevelListVector(fbb,curData.PushLevelList.ToArray()),FB_TaiGuRelicBase.CreatePushShopIDListVector(fbb,curData.PushShopIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TaiGuRelicBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TaiGuRelicBaseContainer.StartFB_TaiGuRelicBaseContainer(fbb);
			FB_TaiGuRelicBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_TaiGuRelicBaseContainer.EndFB_TaiGuRelicBaseContainer(fbb);
			FB_TaiGuRelicBaseContainer.FinishFB_TaiGuRelicBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TaiGuRelicBase.txt", ms.ToArray());
			}
		}

		static void ExprotTaiGuRelicShopItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TaiGuRelicShopItemProvider.Instance.ListData;
			
			Offset<FB_TaiGuRelicShopItem>[] offsetArray = new Offset<FB_TaiGuRelicShopItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TaiGuRelicShopItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TaiGuRelicShopItem.CreateFB_TaiGuRelicShopItem(fbb, curData.ID,curData.BinType,curData.LevelLimit,curData.PayLimit,curData.MaxLevelLimit,curData.MaxPayLimit,FB_TaiGuRelicShopItem.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_TaiGuRelicShopItem.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.LimitBuyNum,curData.Quality,fbb.CreateString(curData.ItemName),curData.ItemValidTime,curData.CoolingTime,curData.Weight,curData.PushNum,curData.MoneyType,curData.CcurPrice,curData.RmbTabId,FB_TaiGuRelicShopItem.CreateParamListVector(fbb,curData.ParamList.ToArray()),FB_TaiGuRelicShopItem.CreateParamItemIdListVector(fbb,curData.ParamItemIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TaiGuRelicShopItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TaiGuRelicShopItemContainer.StartFB_TaiGuRelicShopItemContainer(fbb);
			FB_TaiGuRelicShopItemContainer.AddItems(fbb, dataVector);
			var provider = FB_TaiGuRelicShopItemContainer.EndFB_TaiGuRelicShopItemContainer(fbb);
			FB_TaiGuRelicShopItemContainer.FinishFB_TaiGuRelicShopItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TaiGuRelicShopItem.txt", ms.ToArray());
			}
		}

		static void ExprotTaoZhuangAttr()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TaoZhuangAttrProvider.Instance.ListData;
			
			Offset<FB_TaoZhuangAttr>[] offsetArray = new Offset<FB_TaoZhuangAttr>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TaoZhuangAttrProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TaoZhuangAttr.CreateFB_TaoZhuangAttr(fbb, curData.ID,curData.TaoZhuangId,curData.Quantity,FB_TaoZhuangAttr.CreateAttrListVector(fbb,curData.AttrList.ToArray()),FB_TaoZhuangAttr.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TaoZhuangAttrContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TaoZhuangAttrContainer.StartFB_TaoZhuangAttrContainer(fbb);
			FB_TaoZhuangAttrContainer.AddItems(fbb, dataVector);
			var provider = FB_TaoZhuangAttrContainer.EndFB_TaoZhuangAttrContainer(fbb);
			FB_TaoZhuangAttrContainer.FinishFB_TaoZhuangAttrContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TaoZhuangAttr.txt", ms.ToArray());
			}
		}

		static void ExprotTaoZhuangBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TaoZhuangBaseProvider.Instance.ListData;
			
			Offset<FB_TaoZhuangBase>[] offsetArray = new Offset<FB_TaoZhuangBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TaoZhuangBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TaoZhuangBase.CreateFB_TaoZhuangBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Icon,curData.Level,curData.Quantity,curData.ModelID,FB_TaoZhuangBase.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_TaoZhuangBase.CreateMenPaiHairListVector(fbb,curData.MenPaiHairList.ToArray()),FB_TaoZhuangBase.CreateMenPaiClothesListVector(fbb,curData.MenPaiClothesList.ToArray()),FB_TaoZhuangBase.CreateMenPaiWeaponListVector(fbb,curData.MenPaiWeaponList.ToArray()),fbb.CreateString(curData.PeiShiQiPao),fbb.CreateString(curData.PeiShiTouXiang));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TaoZhuangBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TaoZhuangBaseContainer.StartFB_TaoZhuangBaseContainer(fbb);
			FB_TaoZhuangBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_TaoZhuangBaseContainer.EndFB_TaoZhuangBaseContainer(fbb);
			FB_TaoZhuangBaseContainer.FinishFB_TaoZhuangBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TaoZhuangBase.txt", ms.ToArray());
			}
		}

		static void ExprotTeamPlatform()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TeamPlatformProvider.Instance.ListData;
			
			Offset<FB_TeamPlatform>[] offsetArray = new Offset<FB_TeamPlatform>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TeamPlatformProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TeamPlatform.CreateFB_TeamPlatform(fbb, curData.ID,fbb.CreateString(curData.Name),curData.ClassID,curData.ContainChild,curData.MinLevelLimit,curData.MaxLevelLimit,curData.OpenType,FB_TeamPlatform.CreateOpenTimeListVector(fbb,curData.OpenTimeList.ToArray()),FB_TeamPlatform.CreateEndTimeListVector(fbb,curData.EndTimeList.ToArray()),curData.DefaultMin,curData.DefaultMax,curData.PlayerLimitID,curData.TimeLimitID,curData.CopySceneID,curData.SceneClassID,curData.PosX,curData.PosZ,curData.RolebaseID,curData.LowLevelTips,curData.IsShowAddHp,curData.IsRobot,curData.WaitingTime,curData.MinRobotId,curData.MaxRobotId,curData.ChangeJobLimit);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TeamPlatformContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TeamPlatformContainer.StartFB_TeamPlatformContainer(fbb);
			FB_TeamPlatformContainer.AddItems(fbb, dataVector);
			var provider = FB_TeamPlatformContainer.EndFB_TeamPlatformContainer(fbb);
			FB_TeamPlatformContainer.FinishFB_TeamPlatformContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TeamPlatform.txt", ms.ToArray());
			}
		}

		static void ExprotTeamShip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TeamShipProvider.Instance.ListData;
			
			Offset<FB_TeamShip>[] offsetArray = new Offset<FB_TeamShip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TeamShipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TeamShip.CreateFB_TeamShip(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Tips,curData.FakeObjectID,curData.CharMountID,curData.GetPathID,curData.GetPathItemId,curData.UnlockType,curData.UnlockParam,curData.StartEffectId,curData.EndEffectId,curData.EnterEffectId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TeamShipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TeamShipContainer.StartFB_TeamShipContainer(fbb);
			FB_TeamShipContainer.AddItems(fbb, dataVector);
			var provider = FB_TeamShipContainer.EndFB_TeamShipContainer(fbb);
			FB_TeamShipContainer.FinishFB_TeamShipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TeamShip.txt", ms.ToArray());
			}
		}

		static void ExprotteQuanEnum()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_teQuanEnumProvider.Instance.ListData;
			
			Offset<FB_teQuanEnum>[] offsetArray = new Offset<FB_teQuanEnum>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_teQuanEnumProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_teQuanEnum.CreateFB_teQuanEnum(fbb, curData.Id,fbb.CreateString(curData.Name),FB_teQuanEnum.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_teQuanEnum.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_teQuanEnumContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_teQuanEnumContainer.StartFB_teQuanEnumContainer(fbb);
			FB_teQuanEnumContainer.AddItems(fbb, dataVector);
			var provider = FB_teQuanEnumContainer.EndFB_teQuanEnumContainer(fbb);
			FB_teQuanEnumContainer.FinishFB_teQuanEnumContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/teQuanEnum.txt", ms.ToArray());
			}
		}

		static void ExprotteQuanGain()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_teQuanGainProvider.Instance.ListData;
			
			Offset<FB_teQuanGain>[] offsetArray = new Offset<FB_teQuanGain>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_teQuanGainProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_teQuanGain.CreateFB_teQuanGain(fbb, curData.Id,fbb.CreateString(curData.Name),FB_teQuanGain.CreateTeQuanIdListVector(fbb,curData.teQuanIdList.ToArray()),curData.cd,curData.related,FB_teQuanGain.CreateAdvanceRmbIdListVector(fbb,curData.advanceRmbIdList.ToArray()),curData.StrDictionaryID);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_teQuanGainContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_teQuanGainContainer.StartFB_teQuanGainContainer(fbb);
			FB_teQuanGainContainer.AddItems(fbb, dataVector);
			var provider = FB_teQuanGainContainer.EndFB_teQuanGainContainer(fbb);
			FB_teQuanGainContainer.FinishFB_teQuanGainContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/teQuanGain.txt", ms.ToArray());
			}
		}

		static void ExprotTheInherit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TheInheritProvider.Instance.ListData;
			
			Offset<FB_TheInherit>[] offsetArray = new Offset<FB_TheInherit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TheInheritProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] InheritDesListoffSet = new StringOffset[curData.InheritDesList.Count];
				for (var i = 0; i < curData.InheritDesList.Count; i++)
				{
					InheritDesListoffSet[i] = fbb.CreateString(curData.InheritDesList[i]);
				}

				offsetArray[index] = FB_TheInherit.CreateFB_TheInherit(fbb, curData.Id,curData.LevelLimit,curData.InheritId,curData.InheritLevelLimit,FB_TheInherit.CreateInheritRewardListVector(fbb,curData.InheritRewardList.ToArray()),FB_TheInherit.CreateInheritRewardNumListVector(fbb,curData.InheritRewardNumList.ToArray()),FB_TheInherit.CreateFakeObjIDListVector(fbb,curData.FakeObjIDList.ToArray()),FB_TheInherit.CreateAchievementIDListVector(fbb,curData.AchievementIDList.ToArray()),FB_TheInherit.CreateInheritDesListVector(fbb,InheritDesListoffSet));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TheInheritContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TheInheritContainer.StartFB_TheInheritContainer(fbb);
			FB_TheInheritContainer.AddItems(fbb, dataVector);
			var provider = FB_TheInheritContainer.EndFB_TheInheritContainer(fbb);
			FB_TheInheritContainer.FinishFB_TheInheritContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TheInherit.txt", ms.ToArray());
			}
		}

		static void ExprotTianCiHongFuBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianCiHongFuBaseProvider.Instance.ListData;
			
			Offset<FB_TianCiHongFuBase>[] offsetArray = new Offset<FB_TianCiHongFuBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianCiHongFuBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TianCiHongFuBase.CreateFB_TianCiHongFuBase(fbb, curData.ID,curData.actType,curData.MaxNum,fbb.CreateString(curData.BeiJing),fbb.CreateString(curData.TitleDesc),FB_TianCiHongFuBase.CreateShowTimeListVector(fbb,curData.ShowTimeList.ToArray()),FB_TianCiHongFuBase.CreateContinueTimeListVector(fbb,curData.ContinueTimeList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianCiHongFuBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianCiHongFuBaseContainer.StartFB_TianCiHongFuBaseContainer(fbb);
			FB_TianCiHongFuBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_TianCiHongFuBaseContainer.EndFB_TianCiHongFuBaseContainer(fbb);
			FB_TianCiHongFuBaseContainer.FinishFB_TianCiHongFuBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianCiHongFuBase.txt", ms.ToArray());
			}
		}

		static void ExprotTianCiHongFuReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianCiHongFuRewardProvider.Instance.ListData;
			
			Offset<FB_TianCiHongFuReward>[] offsetArray = new Offset<FB_TianCiHongFuReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianCiHongFuRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TianCiHongFuReward.CreateFB_TianCiHongFuReward(fbb, curData.ID,curData.actType,curData.LevelLimit,FB_TianCiHongFuReward.CreateDropIdListVector(fbb,curData.DropIdList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianCiHongFuRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianCiHongFuRewardContainer.StartFB_TianCiHongFuRewardContainer(fbb);
			FB_TianCiHongFuRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_TianCiHongFuRewardContainer.EndFB_TianCiHongFuRewardContainer(fbb);
			FB_TianCiHongFuRewardContainer.FinishFB_TianCiHongFuRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianCiHongFuReward.txt", ms.ToArray());
			}
		}

		static void ExprotTianDaoShengYuan()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianDaoShengYuanProvider.Instance.ListData;
			
			Offset<FB_TianDaoShengYuan>[] offsetArray = new Offset<FB_TianDaoShengYuan>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianDaoShengYuanProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] LabelListoffSet = new StringOffset[curData.LabelList.Count];
				for (var i = 0; i < curData.LabelList.Count; i++)
				{
					LabelListoffSet[i] = fbb.CreateString(curData.LabelList[i]);
				}

				offsetArray[index] = FB_TianDaoShengYuan.CreateFB_TianDaoShengYuan(fbb, curData.ID,fbb.CreateString(curData.Name),FB_TianDaoShengYuan.CreateLabelListVector(fbb,LabelListoffSet),fbb.CreateString(curData.Sprite),curData.DropBox_s,curData.DropBox_a,curData.MFID_S,curData.MFID_A,curData.LabelStrId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianDaoShengYuanContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianDaoShengYuanContainer.StartFB_TianDaoShengYuanContainer(fbb);
			FB_TianDaoShengYuanContainer.AddItems(fbb, dataVector);
			var provider = FB_TianDaoShengYuanContainer.EndFB_TianDaoShengYuanContainer(fbb);
			FB_TianDaoShengYuanContainer.FinishFB_TianDaoShengYuanContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianDaoShengYuan.txt", ms.ToArray());
			}
		}

		static void ExprotTianDaoShengYuanReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianDaoShengYuanRewardProvider.Instance.ListData;
			
			Offset<FB_TianDaoShengYuanReward>[] offsetArray = new Offset<FB_TianDaoShengYuanReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianDaoShengYuanRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TianDaoShengYuanReward.CreateFB_TianDaoShengYuanReward(fbb, curData.ID,FB_TianDaoShengYuanReward.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_TianDaoShengYuanReward.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),curData.HighDropBox,curData.LowDropBox,curData.SystemShoutId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianDaoShengYuanRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianDaoShengYuanRewardContainer.StartFB_TianDaoShengYuanRewardContainer(fbb);
			FB_TianDaoShengYuanRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_TianDaoShengYuanRewardContainer.EndFB_TianDaoShengYuanRewardContainer(fbb);
			FB_TianDaoShengYuanRewardContainer.FinishFB_TianDaoShengYuanRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianDaoShengYuanReward.txt", ms.ToArray());
			}
		}

		static void ExprotTianFuBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianFuBaseProvider.Instance.ListData;
			
			Offset<FB_TianFuBase>[] offsetArray = new Offset<FB_TianFuBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianFuBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TianFuBase.CreateFB_TianFuBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.MenPai,curData.Type,curData.Position,curData.MaxLevel,FB_TianFuBase.CreateUnLockTypeListVector(fbb,curData.UnLockTypeList.ToArray()),FB_TianFuBase.CreateUnLockIdListVector(fbb,curData.UnLockIdList.ToArray()),FB_TianFuBase.CreateUnLockValueListVector(fbb,curData.UnLockValueList.ToArray()),curData.TakeEffectType,curData.TakeEffectValue,curData.TakeEffectValueSec,curData.StrDescId,FB_TianFuBase.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianFuBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianFuBaseContainer.StartFB_TianFuBaseContainer(fbb);
			FB_TianFuBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_TianFuBaseContainer.EndFB_TianFuBaseContainer(fbb);
			FB_TianFuBaseContainer.FinishFB_TianFuBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianFuBase.txt", ms.ToArray());
			}
		}

		static void ExprotTianJiBaoGe()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TianJiBaoGeProvider.Instance.ListData;
			
			Offset<FB_TianJiBaoGe>[] offsetArray = new Offset<FB_TianJiBaoGe>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TianJiBaoGeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TianJiBaoGe.CreateFB_TianJiBaoGe(fbb, curData.ID,curData.LevelMin,curData.LevelMax,curData.Set,curData.RewardID,curData.RewardNumber,FB_TianJiBaoGe.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_TianJiBaoGe.CreateItemNumberListVector(fbb,curData.ItemNumberList.ToArray()),FB_TianJiBaoGe.CreateMoneyTypeListVector(fbb,curData.MoneyTypeList.ToArray()),FB_TianJiBaoGe.CreatePriceListVector(fbb,curData.PriceList.ToArray()),FB_TianJiBaoGe.CreatePriceSaleListVector(fbb,curData.PriceSaleList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TianJiBaoGeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TianJiBaoGeContainer.StartFB_TianJiBaoGeContainer(fbb);
			FB_TianJiBaoGeContainer.AddItems(fbb, dataVector);
			var provider = FB_TianJiBaoGeContainer.EndFB_TianJiBaoGeContainer(fbb);
			FB_TianJiBaoGeContainer.FinishFB_TianJiBaoGeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TianJiBaoGe.txt", ms.ToArray());
			}
		}

		static void ExprotTiKuanJiAward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TiKuanJiAwardProvider.Instance.ListData;
			
			Offset<FB_TiKuanJiAward>[] offsetArray = new Offset<FB_TiKuanJiAward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TiKuanJiAwardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TiKuanJiAward.CreateFB_TiKuanJiAward(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Price,curData.Money,curData.ExtraMoney);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TiKuanJiAwardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TiKuanJiAwardContainer.StartFB_TiKuanJiAwardContainer(fbb);
			FB_TiKuanJiAwardContainer.AddItems(fbb, dataVector);
			var provider = FB_TiKuanJiAwardContainer.EndFB_TiKuanJiAwardContainer(fbb);
			FB_TiKuanJiAwardContainer.FinishFB_TiKuanJiAwardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TiKuanJiAward.txt", ms.ToArray());
			}
		}

		static void ExprotTimeLimitBag()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TimeLimitBagProvider.Instance.ListData;
			
			Offset<FB_TimeLimitBag>[] offsetArray = new Offset<FB_TimeLimitBag>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TimeLimitBagProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TimeLimitBag.CreateFB_TimeLimitBag(fbb, curData.ID,curData.OpenType,curData.OpenServerDay,curData.BagPrice,curData.BagMaxPrice,FB_TimeLimitBag.CreateRewardIDListVector(fbb,curData.RewardIDList.ToArray()),FB_TimeLimitBag.CreateRewardCountListVector(fbb,curData.RewardCountList.ToArray()),curData.MailId,fbb.CreateString(curData.TabSprite),fbb.CreateString(curData.DesSprite));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TimeLimitBagContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TimeLimitBagContainer.StartFB_TimeLimitBagContainer(fbb);
			FB_TimeLimitBagContainer.AddItems(fbb, dataVector);
			var provider = FB_TimeLimitBagContainer.EndFB_TimeLimitBagContainer(fbb);
			FB_TimeLimitBagContainer.FinishFB_TimeLimitBagContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TimeLimitBag.txt", ms.ToArray());
			}
		}

		static void ExprotTimingBox()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TimingBoxProvider.Instance.ListData;
			
			Offset<FB_TimingBox>[] offsetArray = new Offset<FB_TimingBox>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TimingBoxProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TimingBox.CreateFB_TimingBox(fbb, curData.ID,FB_TimingBox.CreateBonusTypeListVector(fbb,curData.BonusTypeList.ToArray()),FB_TimingBox.CreateBonusIDListVector(fbb,curData.BonusIDList.ToArray()),FB_TimingBox.CreateBonusNumListVector(fbb,curData.BonusNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TimingBoxContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TimingBoxContainer.StartFB_TimingBoxContainer(fbb);
			FB_TimingBoxContainer.AddItems(fbb, dataVector);
			var provider = FB_TimingBoxContainer.EndFB_TimingBoxContainer(fbb);
			FB_TimingBoxContainer.FinishFB_TimingBoxContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TimingBox.txt", ms.ToArray());
			}
		}

		static void ExprotTitleBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TitleBaseProvider.Instance.ListData;
			
			Offset<FB_TitleBase>[] offsetArray = new Offset<FB_TitleBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TitleBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TitleBase.CreateFB_TitleBase(fbb, curData.ID,curData.Type,fbb.CreateString(curData.Name),curData.IsShowAfterGetting,curData.IsVip,curData.AtlasId,fbb.CreateString(curData.EffectName),fbb.CreateString(curData.Icon),curData.Link,fbb.CreateString(curData.DeadLine),curData.DurationTime,curData.DescribeStrID,curData.GetWayStrID,curData.Quality,curData.TitleClassID,FB_TitleBase.CreateOwnAttrIDListVector(fbb,curData.OwnAttrIDList.ToArray()),FB_TitleBase.CreateOwnAttrValueListVector(fbb,curData.OwnAttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TitleBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TitleBaseContainer.StartFB_TitleBaseContainer(fbb);
			FB_TitleBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_TitleBaseContainer.EndFB_TitleBaseContainer(fbb);
			FB_TitleBaseContainer.FinishFB_TitleBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TitleBase.txt", ms.ToArray());
			}
		}

		static void ExprotTitleClass()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TitleClassProvider.Instance.ListData;
			
			Offset<FB_TitleClass>[] offsetArray = new Offset<FB_TitleClass>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TitleClassProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TitleClass.CreateFB_TitleClass(fbb, curData.ID,fbb.CreateString(curData.Name),curData.TitleNum,FB_TitleClass.CreateTitleIDListVector(fbb,curData.TitleIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TitleClassContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TitleClassContainer.StartFB_TitleClassContainer(fbb);
			FB_TitleClassContainer.AddItems(fbb, dataVector);
			var provider = FB_TitleClassContainer.EndFB_TitleClassContainer(fbb);
			FB_TitleClassContainer.FinishFB_TitleClassContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TitleClass.txt", ms.ToArray());
			}
		}

		static void ExprotTreasure()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TreasureProvider.Instance.ListData;
			
			Offset<FB_Treasure>[] offsetArray = new Offset<FB_Treasure>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TreasureProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Treasure.CreateFB_Treasure(fbb, curData.Id,curData.CostItemID,FB_Treasure.CreateCostNumListVector(fbb,curData.CostNumList.ToArray()),curData.ItemPriceMoney,curData.ItemPrice,curData.FreeCd,curData.ShowBigItem,curData.BroadcastBig,fbb.CreateString(curData.ShowItem),curData.RecordNum,curData.RecordNormal,curData.SaleId,curData.CountNum,curData.Blessing,curData.Score,curData.BroadcastLink);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TreasureContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TreasureContainer.StartFB_TreasureContainer(fbb);
			FB_TreasureContainer.AddItems(fbb, dataVector);
			var provider = FB_TreasureContainer.EndFB_TreasureContainer(fbb);
			FB_TreasureContainer.FinishFB_TreasureContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/Treasure.txt", ms.ToArray());
			}
		}

		static void ExprotTreasureHuntMissions()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TreasureHuntMissionsProvider.Instance.ListData;
			
			Offset<FB_TreasureHuntMissions>[] offsetArray = new Offset<FB_TreasureHuntMissions>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TreasureHuntMissionsProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TreasureHuntMissions.CreateFB_TreasureHuntMissions(fbb, curData.ID,fbb.CreateString(curData.Name),curData.StrId,curData.WorldLvMin,curData.WorldLvMax,curData.LogicType,curData.RewardItem,curData.RewardCount,curData.TypeParam,curData.FunctionId,curData.UIInfoId,curData.Param);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TreasureHuntMissionsContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TreasureHuntMissionsContainer.StartFB_TreasureHuntMissionsContainer(fbb);
			FB_TreasureHuntMissionsContainer.AddItems(fbb, dataVector);
			var provider = FB_TreasureHuntMissionsContainer.EndFB_TreasureHuntMissionsContainer(fbb);
			FB_TreasureHuntMissionsContainer.FinishFB_TreasureHuntMissionsContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TreasureHuntMissions.txt", ms.ToArray());
			}
		}

		static void ExprotTreasureHuntShopItem()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TreasureHuntShopItemProvider.Instance.ListData;
			
			Offset<FB_TreasureHuntShopItem>[] offsetArray = new Offset<FB_TreasureHuntShopItem>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TreasureHuntShopItemProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TreasureHuntShopItem.CreateFB_TreasureHuntShopItem(fbb, curData.ID,fbb.CreateString(curData.GiftName),curData.LimitItemNum,curData.MoneyType,curData.Price,curData.CcurPrice,curData.Discount,curData.ItemId,curData.ItemNum,curData.WorldLvMin,curData.WorldLvMax);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_TreasureHuntShopItemContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TreasureHuntShopItemContainer.StartFB_TreasureHuntShopItemContainer(fbb);
			FB_TreasureHuntShopItemContainer.AddItems(fbb, dataVector);
			var provider = FB_TreasureHuntShopItemContainer.EndFB_TreasureHuntShopItemContainer(fbb);
			FB_TreasureHuntShopItemContainer.FinishFB_TreasureHuntShopItemContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TreasureHuntShopItem.txt", ms.ToArray());
			}
		}

		static void ExprotTreasureShow()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_TreasureShowProvider.Instance.ListData;
			
			Offset<FB_TreasureShow>[] offsetArray = new Offset<FB_TreasureShow>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_TreasureShowProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_TreasureShow.CreateFB_TreasureShow(fbb, curData.Id,curData.TreasureType,curData.LevelMin,curData.LevelMax,curData.RateShowTitle,curData.RateShowDesc,curData.FreeDrop,curData.MdId,curData.DropId,fbb.CreateString(curData.Big),FB_TreasureShow.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()),FB_TreasureShow.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_TreasureShowContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_TreasureShowContainer.StartFB_TreasureShowContainer(fbb);
			FB_TreasureShowContainer.AddItems(fbb, dataVector);
			var provider = FB_TreasureShowContainer.EndFB_TreasureShowContainer(fbb);
			FB_TreasureShowContainer.FinishFB_TreasureShowContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/TreasureShow.txt", ms.ToArray());
			}
		}

		static void ExprotVehicle()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VehicleProvider.Instance.ListData;
			
			Offset<FB_Vehicle>[] offsetArray = new Offset<FB_Vehicle>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VehicleProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_Vehicle.CreateFB_Vehicle(fbb, curData.Id,curData.RoleBaseId,curData.ModifyAttr,curData.CanBattle,curData.ExistTime,curData.CanFly,curData.CanQuit,curData.ScriptId,curData.CamXAngle,curData.CamYAngel,curData.CamDis);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_VehicleContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VehicleContainer.StartFB_VehicleContainer(fbb);
			FB_VehicleContainer.AddItems(fbb, dataVector);
			var provider = FB_VehicleContainer.EndFB_VehicleContainer(fbb);
			FB_VehicleContainer.FinishFB_VehicleContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/Vehicle.txt", ms.ToArray());
			}
		}

		static void ExprotVipDayGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VipDayGiftProvider.Instance.ListData;
			
			Offset<FB_VipDayGift>[] offsetArray = new Offset<FB_VipDayGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VipDayGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_VipDayGift.CreateFB_VipDayGift(fbb, curData.ID,curData.Cost,FB_VipDayGift.CreateDayGiftIDListVector(fbb,curData.DayGiftIDList.ToArray()),FB_VipDayGift.CreateDayGiftNumListVector(fbb,curData.DayGiftNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VipDayGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VipDayGiftContainer.StartFB_VipDayGiftContainer(fbb);
			FB_VipDayGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_VipDayGiftContainer.EndFB_VipDayGiftContainer(fbb);
			FB_VipDayGiftContainer.FinishFB_VipDayGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VipDayGift.txt", ms.ToArray());
			}
		}

		static void ExprotVipEnjoyGift()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VipEnjoyGiftProvider.Instance.ListData;
			
			Offset<FB_VipEnjoyGift>[] offsetArray = new Offset<FB_VipEnjoyGift>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VipEnjoyGiftProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_VipEnjoyGift.CreateFB_VipEnjoyGift(fbb, curData.ID,curData.OriginalCost,curData.RealCost,FB_VipEnjoyGift.CreateEnjoyGiftIDListVector(fbb,curData.EnjoyGiftIDList.ToArray()),FB_VipEnjoyGift.CreateEnjoyGiftNumListVector(fbb,curData.EnjoyGiftNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VipEnjoyGiftContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VipEnjoyGiftContainer.StartFB_VipEnjoyGiftContainer(fbb);
			FB_VipEnjoyGiftContainer.AddItems(fbb, dataVector);
			var provider = FB_VipEnjoyGiftContainer.EndFB_VipEnjoyGiftContainer(fbb);
			FB_VipEnjoyGiftContainer.FinishFB_VipEnjoyGiftContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VipEnjoyGift.txt", ms.ToArray());
			}
		}

		static void ExprotVipHaoLi()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VipHaoLiProvider.Instance.ListData;
			
			Offset<FB_VipHaoLi>[] offsetArray = new Offset<FB_VipHaoLi>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VipHaoLiProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				StringOffset[] TaskListoffSet = new StringOffset[curData.TaskList.Count];
				for (var i = 0; i < curData.TaskList.Count; i++)
				{
					TaskListoffSet[i] = fbb.CreateString(curData.TaskList[i]);
				}

				offsetArray[index] = FB_VipHaoLi.CreateFB_VipHaoLi(fbb, curData.ID,fbb.CreateString(curData.Name),FB_VipHaoLi.CreateResPathListVector(fbb,curData.ResPathList.ToArray()),fbb.CreateString(curData.IconPath),curData.IconWidth,curData.IconHeight,FB_VipHaoLi.CreateItemIdListVector(fbb,curData.ItemIdList.ToArray()),FB_VipHaoLi.CreateNumberListVector(fbb,curData.NumberList.ToArray()),FB_VipHaoLi.CreateTaskListVector(fbb,TaskListoffSet),FB_VipHaoLi.CreateTaskTypListVector(fbb,curData.TaskTypList.ToArray()),FB_VipHaoLi.CreateTaskItemListVector(fbb,curData.TaskItemList.ToArray()),FB_VipHaoLi.CreateUiInfoIdListVector(fbb,curData.UiInfoIdList.ToArray()),FB_VipHaoLi.CreateParamIdListVector(fbb,curData.ParamIdList.ToArray()),FB_VipHaoLi.CreateRewardIDListVector(fbb,curData.RewardIDList.ToArray()),FB_VipHaoLi.CreateRewardNumberListVector(fbb,curData.RewardNumberList.ToArray()),curData.Power);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VipHaoLiContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VipHaoLiContainer.StartFB_VipHaoLiContainer(fbb);
			FB_VipHaoLiContainer.AddItems(fbb, dataVector);
			var provider = FB_VipHaoLiContainer.EndFB_VipHaoLiContainer(fbb);
			FB_VipHaoLiContainer.FinishFB_VipHaoLiContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VipHaoLi.txt", ms.ToArray());
			}
		}

		static void ExprotVIPInvestReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VIPInvestRewardProvider.Instance.ListData;
			
			Offset<FB_VIPInvestReward>[] offsetArray = new Offset<FB_VIPInvestReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VIPInvestRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_VIPInvestReward.CreateFB_VIPInvestReward(fbb, curData.ID,curData.RefreshType,curData.MinLvlLimit,curData.MaxLvlLimit,curData.DayNum,FB_VIPInvestReward.CreateGiftIDListVector(fbb,curData.GiftIDList.ToArray()),FB_VIPInvestReward.CreateGiftNumListVector(fbb,curData.GiftNumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VIPInvestRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VIPInvestRewardContainer.StartFB_VIPInvestRewardContainer(fbb);
			FB_VIPInvestRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_VIPInvestRewardContainer.EndFB_VIPInvestRewardContainer(fbb);
			FB_VIPInvestRewardContainer.FinishFB_VIPInvestRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VIPInvestReward.txt", ms.ToArray());
			}
		}

		static void ExprotVIPLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VIPLimitProvider.Instance.ListData;
			
			Offset<FB_VIPLimit>[] offsetArray = new Offset<FB_VIPLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VIPLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_VIPLimit.CreateFB_VIPLimit(fbb, curData.ID,FB_VIPLimit.CreateVIPListVector(fbb,curData.VIPList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VIPLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VIPLimitContainer.StartFB_VIPLimitContainer(fbb);
			FB_VIPLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_VIPLimitContainer.EndFB_VIPLimitContainer(fbb);
			FB_VIPLimitContainer.FinishFB_VIPLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VIPLimit.txt", ms.ToArray());
			}
		}

		static void ExprotVIPPower()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_VIPPowerProvider.Instance.ListData;
			
			Offset<FB_VIPPower>[] offsetArray = new Offset<FB_VIPPower>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_VIPPowerProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_VIPPower.CreateFB_VIPPower(fbb, curData.ID,curData.Exp,fbb.CreateString(curData.VIPTitle),curData.StartStrID,curData.EndStrID,curData.NoStartStrID,curData.NoEndStrID,curData.ImpactId,curData.TitleId,curData.ActivateStartStrID,curData.ActivateEndStrID);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_VIPPowerContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_VIPPowerContainer.StartFB_VIPPowerContainer(fbb);
			FB_VIPPowerContainer.AddItems(fbb, dataVector);
			var provider = FB_VIPPowerContainer.EndFB_VIPPowerContainer(fbb);
			FB_VIPPowerContainer.FinishFB_VIPPowerContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/VIPPower.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetArrayEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetArrayEffectProvider.Instance.ListData;
			
			Offset<FB_WarPetArrayEffect>[] offsetArray = new Offset<FB_WarPetArrayEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetArrayEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetArrayEffect.CreateFB_WarPetArrayEffect(fbb, curData.Id,fbb.CreateString(curData.Name),FB_WarPetArrayEffect.CreatePassiveSkillListVector(fbb,curData.PassiveSkillList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WarPetArrayEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetArrayEffectContainer.StartFB_WarPetArrayEffectContainer(fbb);
			FB_WarPetArrayEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetArrayEffectContainer.EndFB_WarPetArrayEffectContainer(fbb);
			FB_WarPetArrayEffectContainer.FinishFB_WarPetArrayEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetArrayEffect.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetArrayTechniqueLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetArrayTechniqueLevelUpProvider.Instance.ListData;
			
			Offset<FB_WarPetArrayTechniqueLevelUp>[] offsetArray = new Offset<FB_WarPetArrayTechniqueLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetArrayTechniqueLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetArrayTechniqueLevelUp.CreateFB_WarPetArrayTechniqueLevelUp(fbb, curData.ID,curData.PetExp,FB_WarPetArrayTechniqueLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetArrayTechniqueLevelUp.CreateAttrValListVector(fbb,curData.AttrValList.ToArray()),curData.UnLockItem,curData.UnLockItemNum,curData.UnLockItemIndex);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetArrayTechniqueLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetArrayTechniqueLevelUpContainer.StartFB_WarPetArrayTechniqueLevelUpContainer(fbb);
			FB_WarPetArrayTechniqueLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetArrayTechniqueLevelUpContainer.EndFB_WarPetArrayTechniqueLevelUpContainer(fbb);
			FB_WarPetArrayTechniqueLevelUpContainer.FinishFB_WarPetArrayTechniqueLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetArrayTechniqueLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetBaseProvider.Instance.ListData;
			
			Offset<FB_WarPetBase>[] offsetArray = new Offset<FB_WarPetBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetBase.CreateFB_WarPetBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.NameIcon),fbb.CreateString(curData.ItemIcon),curData.FakeObjId,curData.RankFakeObjID,curData.CharSoulId,curData.Quality,curData.Generation,curData.ItemId,curData.ItemNum,curData.MaxLevel,curData.InheritMoney,curData.ReleaseExp,curData.PassiveSkilId,curData.FixedTalent,FB_WarPetBase.CreateRandomTalentListVector(fbb,curData.RandomTalentList.ToArray()),FB_WarPetBase.CreateQualificationsListVector(fbb,curData.QualificationsList.ToArray()),curData.MaxQualifications,curData.GetPathBaseId,curData.EvolutionMap,curData.GetPathStrId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetBaseContainer.StartFB_WarPetBaseContainer(fbb);
			FB_WarPetBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetBaseContainer.EndFB_WarPetBaseContainer(fbb);
			FB_WarPetBaseContainer.FinishFB_WarPetBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetBase.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetCompound()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetCompoundProvider.Instance.ListData;
			
			Offset<FB_WarPetCompound>[] offsetArray = new Offset<FB_WarPetCompound>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetCompoundProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetCompound.CreateFB_WarPetCompound(fbb, curData.Id,fbb.CreateString(curData.Name),curData.Quality,curData.ItemCount,curData.DroBoxId,curData.DroBoxIdSecond,curData.SkillTabTipStrId,curData.TianFuTabTipStrId,curData.SkillSubTabStrId,curData.TianFuSubTabStrId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WarPetCompoundContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetCompoundContainer.StartFB_WarPetCompoundContainer(fbb);
			FB_WarPetCompoundContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetCompoundContainer.EndFB_WarPetCompoundContainer(fbb);
			FB_WarPetCompoundContainer.FinishFB_WarPetCompoundContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetCompound.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetEquip()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetEquipProvider.Instance.ListData;
			
			Offset<FB_WarPetEquip>[] offsetArray = new Offset<FB_WarPetEquip>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetEquipProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetEquip.CreateFB_WarPetEquip(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.Exp,curData.Quality,curData.Component,curData.Star,curData.MaxStar,FB_WarPetEquip.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetEquip.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),fbb.CreateString(curData.Tips),curData.SellPrice,curData.GetPathID,curData.SystemRemind,fbb.CreateString(curData.DropModle));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetEquipContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetEquipContainer.StartFB_WarPetEquipContainer(fbb);
			FB_WarPetEquipContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetEquipContainer.EndFB_WarPetEquipContainer(fbb);
			FB_WarPetEquipContainer.FinishFB_WarPetEquipContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetEquip.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetEquipLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetEquipLevelUpProvider.Instance.ListData;
			
			Offset<FB_WarPetEquipLevelUp>[] offsetArray = new Offset<FB_WarPetEquipLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetEquipLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetEquipLevelUp.CreateFB_WarPetEquipLevelUp(fbb, curData.ID,curData.CostExp,curData.AddExp,curData.LevelUpExp,FB_WarPetEquipLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetEquipLevelUp.CreateAttrValListVector(fbb,curData.AttrValList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetEquipLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetEquipLevelUpContainer.StartFB_WarPetEquipLevelUpContainer(fbb);
			FB_WarPetEquipLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetEquipLevelUpContainer.EndFB_WarPetEquipLevelUpContainer(fbb);
			FB_WarPetEquipLevelUpContainer.FinishFB_WarPetEquipLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetEquipLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetEquipStarLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetEquipStarLevelUpProvider.Instance.ListData;
			
			Offset<FB_WarPetEquipStarLevelUp>[] offsetArray = new Offset<FB_WarPetEquipStarLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetEquipStarLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetEquipStarLevelUp.CreateFB_WarPetEquipStarLevelUp(fbb, curData.ID,FB_WarPetEquipStarLevelUp.CreateCostItemIdListVector(fbb,curData.CostItemIdList.ToArray()),FB_WarPetEquipStarLevelUp.CreateCostItemNumListVector(fbb,curData.CostItemNumList.ToArray()),FB_WarPetEquipStarLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetEquipStarLevelUp.CreateAttrValListVector(fbb,curData.AttrValList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetEquipStarLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetEquipStarLevelUpContainer.StartFB_WarPetEquipStarLevelUpContainer(fbb);
			FB_WarPetEquipStarLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetEquipStarLevelUpContainer.EndFB_WarPetEquipStarLevelUpContainer(fbb);
			FB_WarPetEquipStarLevelUpContainer.FinishFB_WarPetEquipStarLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetEquipStarLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetItemDecompose()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetItemDecomposeProvider.Instance.ListData;
			
			Offset<FB_WarPetItemDecompose>[] offsetArray = new Offset<FB_WarPetItemDecompose>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetItemDecomposeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetItemDecompose.CreateFB_WarPetItemDecompose(fbb, curData.ID,curData.Decompose,curData.Type);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetItemDecomposeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetItemDecomposeContainer.StartFB_WarPetItemDecomposeContainer(fbb);
			FB_WarPetItemDecomposeContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetItemDecomposeContainer.EndFB_WarPetItemDecomposeContainer(fbb);
			FB_WarPetItemDecomposeContainer.FinishFB_WarPetItemDecomposeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetItemDecompose.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetLevelUpProvider.Instance.ListData;
			
			Offset<FB_WarPetLevelUp>[] offsetArray = new Offset<FB_WarPetLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetLevelUp.CreateFB_WarPetLevelUp(fbb, curData.ID,curData.PetExp,FB_WarPetLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetLevelUp.CreateAttrValListVector(fbb,curData.AttrValList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetLevelUpContainer.StartFB_WarPetLevelUpContainer(fbb);
			FB_WarPetLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetLevelUpContainer.EndFB_WarPetLevelUpContainer(fbb);
			FB_WarPetLevelUpContainer.FinishFB_WarPetLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetRandomStar()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetRandomStarProvider.Instance.ListData;
			
			Offset<FB_WarPetRandomStar>[] offsetArray = new Offset<FB_WarPetRandomStar>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetRandomStarProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetRandomStar.CreateFB_WarPetRandomStar(fbb, curData.ID,FB_WarPetRandomStar.CreateStarListVector(fbb,curData.StarList.ToArray()),FB_WarPetRandomStar.CreateWeightListVector(fbb,curData.WeightList.ToArray()),FB_WarPetRandomStar.CreateAttributeMultiplierListVector(fbb,curData.AttributeMultiplierList.ToArray()),FB_WarPetRandomStar.CreateStarLevelListVector(fbb,curData.StarLevelList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetRandomStarContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetRandomStarContainer.StartFB_WarPetRandomStarContainer(fbb);
			FB_WarPetRandomStarContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetRandomStarContainer.EndFB_WarPetRandomStarContainer(fbb);
			FB_WarPetRandomStarContainer.FinishFB_WarPetRandomStarContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetRandomStar.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetSkillProvider.Instance.ListData;
			
			Offset<FB_WarPetSkill>[] offsetArray = new Offset<FB_WarPetSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetSkill.CreateFB_WarPetSkill(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.SkillDesc,curData.Type,curData.SkillId,curData.Quality,curData.MaxLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetSkillContainer.StartFB_WarPetSkillContainer(fbb);
			FB_WarPetSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetSkillContainer.EndFB_WarPetSkillContainer(fbb);
			FB_WarPetSkillContainer.FinishFB_WarPetSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetSkill.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetSkillLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetSkillLevelUpProvider.Instance.ListData;
			
			Offset<FB_WarPetSkillLevelUp>[] offsetArray = new Offset<FB_WarPetSkillLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetSkillLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetSkillLevelUp.CreateFB_WarPetSkillLevelUp(fbb, curData.ID,curData.SkillLevel,curData.CostItemId,curData.CostItemNum,FB_WarPetSkillLevelUp.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetSkillLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetSkillLevelUpContainer.StartFB_WarPetSkillLevelUpContainer(fbb);
			FB_WarPetSkillLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetSkillLevelUpContainer.EndFB_WarPetSkillLevelUpContainer(fbb);
			FB_WarPetSkillLevelUpContainer.FinishFB_WarPetSkillLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetSkillLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetSkillLimit()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetSkillLimitProvider.Instance.ListData;
			
			Offset<FB_WarPetSkillLimit>[] offsetArray = new Offset<FB_WarPetSkillLimit>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetSkillLimitProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetSkillLimit.CreateFB_WarPetSkillLimit(fbb, curData.ID,curData.LimitLevel);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetSkillLimitContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetSkillLimitContainer.StartFB_WarPetSkillLimitContainer(fbb);
			FB_WarPetSkillLimitContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetSkillLimitContainer.EndFB_WarPetSkillLimitContainer(fbb);
			FB_WarPetSkillLimitContainer.FinishFB_WarPetSkillLimitContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetSkillLimit.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetStar()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetStarProvider.Instance.ListData;
			
			Offset<FB_WarPetStar>[] offsetArray = new Offset<FB_WarPetStar>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetStarProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetStar.CreateFB_WarPetStar(fbb, curData.ID,fbb.CreateString(curData.Name),FB_WarPetStar.CreateStarExpListVector(fbb,curData.StarExpList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetStarContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetStarContainer.StartFB_WarPetStarContainer(fbb);
			FB_WarPetStarContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetStarContainer.EndFB_WarPetStarContainer(fbb);
			FB_WarPetStarContainer.FinishFB_WarPetStarContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetStar.txt", ms.ToArray());
			}
		}

		static void ExprotWarPetTalent()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WarPetTalentProvider.Instance.ListData;
			
			Offset<FB_WarPetTalent>[] offsetArray = new Offset<FB_WarPetTalent>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WarPetTalentProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WarPetTalent.CreateFB_WarPetTalent(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.SkillDesc,FB_WarPetTalent.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WarPetTalent.CreateAttrValListVector(fbb,curData.AttrValList.ToArray()),curData.SkillId,curData.AddImpact,curData.Component,curData.Level,curData.CostItemId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WarPetTalentContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WarPetTalentContainer.StartFB_WarPetTalentContainer(fbb);
			FB_WarPetTalentContainer.AddItems(fbb, dataVector);
			var provider = FB_WarPetTalentContainer.EndFB_WarPetTalentContainer(fbb);
			FB_WarPetTalentContainer.FinishFB_WarPetTalentContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WarPetTalent.txt", ms.ToArray());
			}
		}

		static void ExprotWingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WingBaseProvider.Instance.ListData;
			
			Offset<FB_WingBase>[] offsetArray = new Offset<FB_WingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WingBase.CreateFB_WingBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.StateLevel,curData.FloorLevel,curData.IsBreak,curData.LevelLimit,curData.PayItemID,curData.PayItem,curData.BreakItemID,curData.BreakItem,curData.Attribute0ID,curData.Attribute0Value,curData.Attribute1ID,curData.Attribute1Value,curData.Attribute2ID,curData.Attribute2Value,curData.WingPowerMax,curData.WingPowerRecover,curData.FlySpeed,curData.QuickenFlySpeed,curData.AdvancedExp);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WingBaseContainer.StartFB_WingBaseContainer(fbb);
			FB_WingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_WingBaseContainer.EndFB_WingBaseContainer(fbb);
			FB_WingBaseContainer.FinishFB_WingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WingBase.txt", ms.ToArray());
			}
		}

		static void ExprotWingTransmog()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WingTransmogProvider.Instance.ListData;
			
			Offset<FB_WingTransmog>[] offsetArray = new Offset<FB_WingTransmog>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WingTransmogProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WingTransmog.CreateFB_WingTransmog(fbb, curData.ID,fbb.CreateString(curData.Name),curData.IsShowAfterGetting,curData.DescribeID,curData.KPJDesStrID,curData.UnlockWingDesStrID,curData.DictionaryID,curData.UnlockType,curData.UnlockID,curData.CharWingID,curData.EffectID,FB_WingTransmog.CreateWingModelIDListVector(fbb,curData.WingModelIDList.ToArray()),fbb.CreateString(curData.IconPath),curData.UnLockItemId,curData.UnLockItemNum,curData.MenuFakeObjID,curData.WingLevel,fbb.CreateString(curData.WingStep),curData.AvatarExp,fbb.CreateString(curData.FakeObjEffect),curData.HasExtraModel,curData.ExtraModelId,curData.ExtraWingEffectId,curData.ExpireDays,curData.OpenServerDay,curData.IsShowOnUI);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WingTransmogContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WingTransmogContainer.StartFB_WingTransmogContainer(fbb);
			FB_WingTransmogContainer.AddItems(fbb, dataVector);
			var provider = FB_WingTransmogContainer.EndFB_WingTransmogContainer(fbb);
			FB_WingTransmogContainer.FinishFB_WingTransmogContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WingTransmog.txt", ms.ToArray());
			}
		}

		static void ExprotWishBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WishBaseProvider.Instance.ListData;
			
			Offset<FB_WishBase>[] offsetArray = new Offset<FB_WishBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WishBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WishBase.CreateFB_WishBase(fbb, curData.ID,FB_WishBase.CreateConsumMoneyListVector(fbb,curData.ConsumMoneyList.ToArray()),curData.AwardMoney,curData.GratisCount,curData.Addition,curData.AdditionCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WishBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WishBaseContainer.StartFB_WishBaseContainer(fbb);
			FB_WishBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_WishBaseContainer.EndFB_WishBaseContainer(fbb);
			FB_WishBaseContainer.FinishFB_WishBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WishBase.txt", ms.ToArray());
			}
		}

		static void ExprotWitCompete()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WitCompeteProvider.Instance.ListData;
			
			Offset<FB_WitCompete>[] offsetArray = new Offset<FB_WitCompete>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WitCompeteProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WitCompete.CreateFB_WitCompete(fbb, curData.ID,curData.QuestionDic,FB_WitCompete.CreateAnswerListVector(fbb,curData.AnswerList.ToArray()),curData.CorrectANswer,curData.Money,curData.Coefficient);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WitCompeteContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WitCompeteContainer.StartFB_WitCompeteContainer(fbb);
			FB_WitCompeteContainer.AddItems(fbb, dataVector);
			var provider = FB_WitCompeteContainer.EndFB_WitCompeteContainer(fbb);
			FB_WitCompeteContainer.FinishFB_WitCompeteContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WitCompete.txt", ms.ToArray());
			}
		}

		static void ExprotWorldBoss()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WorldBossProvider.Instance.ListData;
			
			Offset<FB_WorldBoss>[] offsetArray = new Offset<FB_WorldBoss>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WorldBossProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WorldBoss.CreateFB_WorldBoss(fbb, curData.Id,curData.Type,curData.Param,curData.Class,curData.FakeObjID,curData.VIPLimit,curData.CostItemID,curData.CostNum,curData.MoneyType,curData.MoneyCost,FB_WorldBoss.CreateShowItemIDListVector(fbb,curData.ShowItemIDList.ToArray()),curData.SceneID,curData.PosX,curData.PosZ,curData.FaceDir,curData.RefreshType,curData.RefreshParam,curData.Tired,FB_WorldBoss.CreateSureDropItemIDListVector(fbb,curData.SureDropItemIDList.ToArray()),curData.PKDistance,fbb.CreateString(curData.Icon),curData.LevelLimit,curData.IsSystemBroadcast,curData.MaxHP,curData.PAttack,curData.PMDefense,curData.Hit,curData.Dodge,curData.Penetrate,curData.Tenacity,curData.SecDropBox,curData.AwardType,curData.ShowSkill,curData.WorldBossKillMFid,curData.IsFirstKillShow,curData.GetRewardMdId,FB_WorldBoss.CreateFirstKillItemIDListVector(fbb,curData.FirstKillItemIDList.ToArray()),FB_WorldBoss.CreateKillItemIDListVector(fbb,curData.KillItemIDList.ToArray()),FB_WorldBoss.CreateFirstKillItemCountListVector(fbb,curData.FirstKillItemCountList.ToArray()),FB_WorldBoss.CreateKillItemCountListVector(fbb,curData.KillItemCountList.ToArray()),curData.BossFirstKillFakeObjID,curData.RealIndex,curData.EquipmentOorder,curData.KillCountMDid,curData.BossMoney,curData.GetMoneyType,curData.YuanShenLevel,curData.OfflineExp,curData.WorldServerType,curData.RefreshLevel,curData.GoldAttackIce,curData.GoldDefenceIce,curData.GoldAttackFire,curData.GoldDefenceFire,curData.GoldAttackThunder,curData.GoldDefenceThunder,curData.GoldAttackElectric,curData.GoldDefencekElectric,curData.GoldAttackForst,curData.GoldDefenceForst,curData.GoldAttackSnow,curData.GoldDefenceSnow);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WorldBossContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WorldBossContainer.StartFB_WorldBossContainer(fbb);
			FB_WorldBossContainer.AddItems(fbb, dataVector);
			var provider = FB_WorldBossContainer.EndFB_WorldBossContainer(fbb);
			FB_WorldBossContainer.FinishFB_WorldBossContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WorldBoss.txt", ms.ToArray());
			}
		}

		static void ExprotWorldBossLike()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WorldBossLikeProvider.Instance.ListData;
			
			Offset<FB_WorldBossLike>[] offsetArray = new Offset<FB_WorldBossLike>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WorldBossLikeProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WorldBossLike.CreateFB_WorldBossLike(fbb, curData.Id,curData.CountDownSeconds,curData.MoneyType,curData.MoneyNum);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_WorldBossLikeContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WorldBossLikeContainer.StartFB_WorldBossLikeContainer(fbb);
			FB_WorldBossLikeContainer.AddItems(fbb, dataVector);
			var provider = FB_WorldBossLikeContainer.EndFB_WorldBossLikeContainer(fbb);
			FB_WorldBossLikeContainer.FinishFB_WorldBossLikeContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WorldBossLike.txt", ms.ToArray());
			}
		}

		static void ExprotWuXingYuanLi()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_WuXingYuanLiProvider.Instance.ListData;
			
			Offset<FB_WuXingYuanLi>[] offsetArray = new Offset<FB_WuXingYuanLi>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_WuXingYuanLiProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_WuXingYuanLi.CreateFB_WuXingYuanLi(fbb, curData.ID,fbb.CreateString(curData.Name),FB_WuXingYuanLi.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_WuXingYuanLi.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.NeedItemId,curData.NeedItemCount,curData.Price);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_WuXingYuanLiContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_WuXingYuanLiContainer.StartFB_WuXingYuanLiContainer(fbb);
			FB_WuXingYuanLiContainer.AddItems(fbb, dataVector);
			var provider = FB_WuXingYuanLiContainer.EndFB_WuXingYuanLiContainer(fbb);
			FB_WuXingYuanLiContainer.FinishFB_WuXingYuanLiContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/WuXingYuanLi.txt", ms.ToArray());
			}
		}

		static void ExprotXianYuZhiYiBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XianYuZhiYiBaseProvider.Instance.ListData;
			
			Offset<FB_XianYuZhiYiBase>[] offsetArray = new Offset<FB_XianYuZhiYiBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XianYuZhiYiBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XianYuZhiYiBase.CreateFB_XianYuZhiYiBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Quality,curData.UnlockLevel,curData.ModelId,curData.DescId,fbb.CreateString(curData.IconName),curData.UnLockModelId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XianYuZhiYiBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XianYuZhiYiBaseContainer.StartFB_XianYuZhiYiBaseContainer(fbb);
			FB_XianYuZhiYiBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XianYuZhiYiBaseContainer.EndFB_XianYuZhiYiBaseContainer(fbb);
			FB_XianYuZhiYiBaseContainer.FinishFB_XianYuZhiYiBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XianYuZhiYiBase.txt", ms.ToArray());
			}
		}

		static void ExprotXianYuZhiYiChapterBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XianYuZhiYiChapterBaseProvider.Instance.ListData;
			
			Offset<FB_XianYuZhiYiChapterBase>[] offsetArray = new Offset<FB_XianYuZhiYiChapterBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XianYuZhiYiChapterBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XianYuZhiYiChapterBase.CreateFB_XianYuZhiYiChapterBase(fbb, curData.ID,fbb.CreateString(curData.Name),FB_XianYuZhiYiChapterBase.CreateBookIDListVector(fbb,curData.BookIDList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XianYuZhiYiChapterBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XianYuZhiYiChapterBaseContainer.StartFB_XianYuZhiYiChapterBaseContainer(fbb);
			FB_XianYuZhiYiChapterBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XianYuZhiYiChapterBaseContainer.EndFB_XianYuZhiYiChapterBaseContainer(fbb);
			FB_XianYuZhiYiChapterBaseContainer.FinishFB_XianYuZhiYiChapterBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XianYuZhiYiChapterBase.txt", ms.ToArray());
			}
		}

		static void ExprotXianYuZhiYiLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XianYuZhiYiLevelUpProvider.Instance.ListData;
			
			Offset<FB_XianYuZhiYiLevelUp>[] offsetArray = new Offset<FB_XianYuZhiYiLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XianYuZhiYiLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XianYuZhiYiLevelUp.CreateFB_XianYuZhiYiLevelUp(fbb, curData.ID,curData.CostMoneyType,curData.CostMoneyNum,curData.CostCardScore,FB_XianYuZhiYiLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_XianYuZhiYiLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.AttrAddition);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XianYuZhiYiLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XianYuZhiYiLevelUpContainer.StartFB_XianYuZhiYiLevelUpContainer(fbb);
			FB_XianYuZhiYiLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_XianYuZhiYiLevelUpContainer.EndFB_XianYuZhiYiLevelUpContainer(fbb);
			FB_XianYuZhiYiLevelUpContainer.FinishFB_XianYuZhiYiLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XianYuZhiYiLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotXianYuZhiYiUnlockLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XianYuZhiYiUnlockLevelUpProvider.Instance.ListData;
			
			Offset<FB_XianYuZhiYiUnlockLevelUp>[] offsetArray = new Offset<FB_XianYuZhiYiUnlockLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XianYuZhiYiUnlockLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XianYuZhiYiUnlockLevelUp.CreateFB_XianYuZhiYiUnlockLevelUp(fbb, curData.ID,curData.UnlockItemId,curData.UnlockItemNum,curData.AttrId,curData.AttrValue);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XianYuZhiYiUnlockLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XianYuZhiYiUnlockLevelUpContainer.StartFB_XianYuZhiYiUnlockLevelUpContainer(fbb);
			FB_XianYuZhiYiUnlockLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_XianYuZhiYiUnlockLevelUpContainer.EndFB_XianYuZhiYiUnlockLevelUpContainer(fbb);
			FB_XianYuZhiYiUnlockLevelUpContainer.FinishFB_XianYuZhiYiUnlockLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XianYuZhiYiUnlockLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunItemBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunItemBaseProvider.Instance.ListData;
			
			Offset<FB_XingHunItemBase>[] offsetArray = new Offset<FB_XingHunItemBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunItemBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunItemBase.CreateFB_XingHunItemBase(fbb, curData.Id,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.GetPathId,curData.Quality,curData.Component,curData.Exp,curData.MaxLevel,FB_XingHunItemBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_XingHunItemBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()),curData.DoubleCost,fbb.CreateString(curData.DropModle));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XingHunItemBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunItemBaseContainer.StartFB_XingHunItemBaseContainer(fbb);
			FB_XingHunItemBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunItemBaseContainer.EndFB_XingHunItemBaseContainer(fbb);
			FB_XingHunItemBaseContainer.FinishFB_XingHunItemBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunItemBase.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunLevelUpProvider.Instance.ListData;
			
			Offset<FB_XingHunLevelUp>[] offsetArray = new Offset<FB_XingHunLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunLevelUp.CreateFB_XingHunLevelUp(fbb, curData.ID,curData.EXP,curData.Step,fbb.CreateString(curData.Icon),curData.SubLevel,FB_XingHunLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_XingHunLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingHunLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunLevelUpContainer.StartFB_XingHunLevelUpContainer(fbb);
			FB_XingHunLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunLevelUpContainer.EndFB_XingHunLevelUpContainer(fbb);
			FB_XingHunLevelUpContainer.FinishFB_XingHunLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunTeZhiLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunTeZhiLevelUpProvider.Instance.ListData;
			
			Offset<FB_XingHunTeZhiLevelUp>[] offsetArray = new Offset<FB_XingHunTeZhiLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunTeZhiLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunTeZhiLevelUp.CreateFB_XingHunTeZhiLevelUp(fbb, curData.Id,curData.MoneyType,curData.MoneyCost,FB_XingHunTeZhiLevelUp.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_XingHunTeZhiLevelUp.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XingHunTeZhiLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunTeZhiLevelUpContainer.StartFB_XingHunTeZhiLevelUpContainer(fbb);
			FB_XingHunTeZhiLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunTeZhiLevelUpContainer.EndFB_XingHunTeZhiLevelUpContainer(fbb);
			FB_XingHunTeZhiLevelUpContainer.FinishFB_XingHunTeZhiLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunTeZhiLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunTeZhiPassiveSkill()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunTeZhiPassiveSkillProvider.Instance.ListData;
			
			Offset<FB_XingHunTeZhiPassiveSkill>[] offsetArray = new Offset<FB_XingHunTeZhiPassiveSkill>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunTeZhiPassiveSkillProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunTeZhiPassiveSkill.CreateFB_XingHunTeZhiPassiveSkill(fbb, curData.Id,curData.UnLockLevel,curData.PassiveSkillId);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XingHunTeZhiPassiveSkillContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunTeZhiPassiveSkillContainer.StartFB_XingHunTeZhiPassiveSkillContainer(fbb);
			FB_XingHunTeZhiPassiveSkillContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunTeZhiPassiveSkillContainer.EndFB_XingHunTeZhiPassiveSkillContainer(fbb);
			FB_XingHunTeZhiPassiveSkillContainer.FinishFB_XingHunTeZhiPassiveSkillContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunTeZhiPassiveSkill.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunUnitBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunUnitBaseProvider.Instance.ListData;
			
			Offset<FB_XingHunUnitBase>[] offsetArray = new Offset<FB_XingHunUnitBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunUnitBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunUnitBase.CreateFB_XingHunUnitBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.ItemId,fbb.CreateString(curData.NameIcon),fbb.CreateString(curData.StarSoulName),fbb.CreateString(curData.EffectPath),curData.MenPai,curData.FakeObjId,curData.CharXingHunId,curData.EffectIndex,FB_XingHunUnitBase.CreateUnLockTypeListVector(fbb,curData.UnLockTypeList.ToArray()),FB_XingHunUnitBase.CreateUnLockParamListVector(fbb,curData.UnLockParamList.ToArray()),curData.UnlockDescStrId,FB_XingHunUnitBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_XingHunUnitBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingHunUnitBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunUnitBaseContainer.StartFB_XingHunUnitBaseContainer(fbb);
			FB_XingHunUnitBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunUnitBaseContainer.EndFB_XingHunUnitBaseContainer(fbb);
			FB_XingHunUnitBaseContainer.FinishFB_XingHunUnitBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunUnitBase.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunZhuanJingBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunZhuanJingBaseProvider.Instance.ListData;
			
			Offset<FB_XingHunZhuanJingBase>[] offsetArray = new Offset<FB_XingHunZhuanJingBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunZhuanJingBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunZhuanJingBase.CreateFB_XingHunZhuanJingBase(fbb, curData.ID,fbb.CreateString(curData.Name),fbb.CreateString(curData.Icon),curData.SkillType,curData.MenPai,curData.Position,curData.MaxLevel,curData.UnLockType,FB_XingHunZhuanJingBase.CreateUnLockIdListVector(fbb,curData.UnLockIdList.ToArray()),FB_XingHunZhuanJingBase.CreateUnLockValueListVector(fbb,curData.UnLockValueList.ToArray()),curData.PassiveSkillId,curData.ImpactId,curData.SkillId,FB_XingHunZhuanJingBase.CreateStrDescIdListVector(fbb,curData.StrDescIdList.ToArray()),FB_XingHunZhuanJingBase.CreateDescParamListVector(fbb,curData.DescParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingHunZhuanJingBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunZhuanJingBaseContainer.StartFB_XingHunZhuanJingBaseContainer(fbb);
			FB_XingHunZhuanJingBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunZhuanJingBaseContainer.EndFB_XingHunZhuanJingBaseContainer(fbb);
			FB_XingHunZhuanJingBaseContainer.FinishFB_XingHunZhuanJingBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunZhuanJingBase.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunZhuanJingEffect()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunZhuanJingEffectProvider.Instance.ListData;
			
			Offset<FB_XingHunZhuanJingEffect>[] offsetArray = new Offset<FB_XingHunZhuanJingEffect>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunZhuanJingEffectProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunZhuanJingEffect.CreateFB_XingHunZhuanJingEffect(fbb, curData.Id,curData.DefaultEffectId,FB_XingHunZhuanJingEffect.CreateEffectListVector(fbb,curData.EffectList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XingHunZhuanJingEffectContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunZhuanJingEffectContainer.StartFB_XingHunZhuanJingEffectContainer(fbb);
			FB_XingHunZhuanJingEffectContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunZhuanJingEffectContainer.EndFB_XingHunZhuanJingEffectContainer(fbb);
			FB_XingHunZhuanJingEffectContainer.FinishFB_XingHunZhuanJingEffectContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunZhuanJingEffect.txt", ms.ToArray());
			}
		}

		static void ExprotXingHunZhuanJingLevelUp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingHunZhuanJingLevelUpProvider.Instance.ListData;
			
			Offset<FB_XingHunZhuanJingLevelUp>[] offsetArray = new Offset<FB_XingHunZhuanJingLevelUp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingHunZhuanJingLevelUpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingHunZhuanJingLevelUp.CreateFB_XingHunZhuanJingLevelUp(fbb, curData.ID,curData.MoneyType,curData.MoneyCost);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingHunZhuanJingLevelUpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingHunZhuanJingLevelUpContainer.StartFB_XingHunZhuanJingLevelUpContainer(fbb);
			FB_XingHunZhuanJingLevelUpContainer.AddItems(fbb, dataVector);
			var provider = FB_XingHunZhuanJingLevelUpContainer.EndFB_XingHunZhuanJingLevelUpContainer(fbb);
			FB_XingHunZhuanJingLevelUpContainer.FinishFB_XingHunZhuanJingLevelUpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingHunZhuanJingLevelUp.txt", ms.ToArray());
			}
		}

		static void ExprotXingYunBlessing()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYunBlessingProvider.Instance.ListData;
			
			Offset<FB_XingYunBlessing>[] offsetArray = new Offset<FB_XingYunBlessing>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYunBlessingProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYunBlessing.CreateFB_XingYunBlessing(fbb, curData.EventId,curData.BlessType,curData.RewardID,curData.RewardNum,curData.SpecialEventType,curData.SpecialEventParam,curData.BuffID,curData.BufDescId,curData.EventWeights,curData.LevelLimitType,curData.MinLevelLimit,curData.MaxLevelLimit,curData.RankLimit,curData.ActivityBaseId);
				KeyMaping[curData.EventId] = index;
			}
			var dataVector = FB_XingYunBlessingContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYunBlessingContainer.StartFB_XingYunBlessingContainer(fbb);
			FB_XingYunBlessingContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYunBlessingContainer.EndFB_XingYunBlessingContainer(fbb);
			FB_XingYunBlessingContainer.FinishFB_XingYunBlessingContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYunBlessing.txt", ms.ToArray());
			}
		}

		static void ExprotXingYunExtractBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYunExtractBaseProvider.Instance.ListData;
			
			Offset<FB_XingYunExtractBase>[] offsetArray = new Offset<FB_XingYunExtractBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYunExtractBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYunExtractBase.CreateFB_XingYunExtractBase(fbb, curData.ExtractId,curData.ExtraCostTimes,curData.CostMoneyType,curData.CostMoneyCount,curData.AddLuckyValue,curData.MaxLuckyValue,curData.MaxTotalFortune,curData.FreeListCount);
				KeyMaping[curData.ExtractId] = index;
			}
			var dataVector = FB_XingYunExtractBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYunExtractBaseContainer.StartFB_XingYunExtractBaseContainer(fbb);
			FB_XingYunExtractBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYunExtractBaseContainer.EndFB_XingYunExtractBaseContainer(fbb);
			FB_XingYunExtractBaseContainer.FinishFB_XingYunExtractBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYunExtractBase.txt", ms.ToArray());
			}
		}

		static void ExprotXingYunGuideEvent()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYunGuideEventProvider.Instance.ListData;
			
			Offset<FB_XingYunGuideEvent>[] offsetArray = new Offset<FB_XingYunGuideEvent>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYunGuideEventProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYunGuideEvent.CreateFB_XingYunGuideEvent(fbb, curData.EventId,curData.EventDescId,curData.Type,curData.ExtraDropItemId,fbb.CreateString(curData.ExtraDropItemName),curData.EvaLevel,curData.IsShowPrompt,curData.Weights,curData.LevelLimitType,curData.MinLevelLimit,curData.MaxLevelLimit,curData.RankLimit,curData.AddFactor,curData.MaxFortune,curData.MinFortune,curData.MaxAddProportion,curData.TriggerProbability,curData.EventTriggerType,curData.SystemBroadCastId,curData.WorldServerType,curData.LastRetRatio,curData.ActivityBaseId);
				KeyMaping[curData.EventId] = index;
			}
			var dataVector = FB_XingYunGuideEventContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYunGuideEventContainer.StartFB_XingYunGuideEventContainer(fbb);
			FB_XingYunGuideEventContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYunGuideEventContainer.EndFB_XingYunGuideEventContainer(fbb);
			FB_XingYunGuideEventContainer.FinishFB_XingYunGuideEventContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYunGuideEvent.txt", ms.ToArray());
			}
		}

		static void ExprotXingYunMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYunMissionProvider.Instance.ListData;
			
			Offset<FB_XingYunMission>[] offsetArray = new Offset<FB_XingYunMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYunMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYunMission.CreateFB_XingYunMission(fbb, curData.MissionID,curData.MissionDesc,curData.MissionType,curData.MissionTargetNum,curData.RewardID,curData.RewardNum,curData.LevelLimitType,curData.MinLevelLimit,curData.MaxLevelLimit,curData.RankLimit,curData.Weights,curData.ActivityBaseId,curData.EventType);
				KeyMaping[curData.MissionID] = index;
			}
			var dataVector = FB_XingYunMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYunMissionContainer.StartFB_XingYunMissionContainer(fbb);
			FB_XingYunMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYunMissionContainer.EndFB_XingYunMissionContainer(fbb);
			FB_XingYunMissionContainer.FinishFB_XingYunMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYunMission.txt", ms.ToArray());
			}
		}

		static void ExprotXingYuPaiHang()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYuPaiHangProvider.Instance.ListData;
			
			Offset<FB_XingYuPaiHang>[] offsetArray = new Offset<FB_XingYuPaiHang>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYuPaiHangProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYuPaiHang.CreateFB_XingYuPaiHang(fbb, curData.ID,curData.Type,FB_XingYuPaiHang.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_XingYuPaiHang.CreateParamListVector(fbb,curData.ParamList.ToArray()),curData.Rate,curData.RankMin,curData.RankMax,curData.MailId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingYuPaiHangContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYuPaiHangContainer.StartFB_XingYuPaiHangContainer(fbb);
			FB_XingYuPaiHangContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYuPaiHangContainer.EndFB_XingYuPaiHangContainer(fbb);
			FB_XingYuPaiHangContainer.FinishFB_XingYuPaiHangContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYuPaiHang.txt", ms.ToArray());
			}
		}

		static void ExprotXingYuPingFen()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYuPingFenProvider.Instance.ListData;
			
			Offset<FB_XingYuPingFen>[] offsetArray = new Offset<FB_XingYuPingFen>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYuPingFenProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYuPingFen.CreateFB_XingYuPingFen(fbb, curData.Id,curData.PingJi,curData.SceneID,curData.MinDamage,curData.MaxDamage,curData.Score,FB_XingYuPingFen.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_XingYuPingFen.CreateRewardItemNumListVector(fbb,curData.RewardItemNumList.ToArray()),FB_XingYuPingFen.CreateRandomItemIdListVector(fbb,curData.RandomItemIdList.ToArray()),FB_XingYuPingFen.CreateRandomItemNumListVector(fbb,curData.RandomItemNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XingYuPingFenContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYuPingFenContainer.StartFB_XingYuPingFenContainer(fbb);
			FB_XingYuPingFenContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYuPingFenContainer.EndFB_XingYuPingFenContainer(fbb);
			FB_XingYuPingFenContainer.FinishFB_XingYuPingFenContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYuPingFen.txt", ms.ToArray());
			}
		}

		static void ExprotXingYuReward()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYuRewardProvider.Instance.ListData;
			
			Offset<FB_XingYuReward>[] offsetArray = new Offset<FB_XingYuReward>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYuRewardProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYuReward.CreateFB_XingYuReward(fbb, curData.ID,curData.Type,FB_XingYuReward.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_XingYuReward.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingYuRewardContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYuRewardContainer.StartFB_XingYuRewardContainer(fbb);
			FB_XingYuRewardContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYuRewardContainer.EndFB_XingYuRewardContainer(fbb);
			FB_XingYuRewardContainer.FinishFB_XingYuRewardContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYuReward.txt", ms.ToArray());
			}
		}

		static void ExprotXingYuTicketBonus()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYuTicketBonusProvider.Instance.ListData;
			
			Offset<FB_XingYuTicketBonus>[] offsetArray = new Offset<FB_XingYuTicketBonus>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYuTicketBonusProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYuTicketBonus.CreateFB_XingYuTicketBonus(fbb, curData.ID,curData.Limit,fbb.CreateString(curData.MissionDesc),FB_XingYuTicketBonus.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_XingYuTicketBonus.CreateNumListVector(fbb,curData.NumList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingYuTicketBonusContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYuTicketBonusContainer.StartFB_XingYuTicketBonusContainer(fbb);
			FB_XingYuTicketBonusContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYuTicketBonusContainer.EndFB_XingYuTicketBonusContainer(fbb);
			FB_XingYuTicketBonusContainer.FinishFB_XingYuTicketBonusContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYuTicketBonus.txt", ms.ToArray());
			}
		}

		static void ExprotXingYuTicketMission()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XingYuTicketMissionProvider.Instance.ListData;
			
			Offset<FB_XingYuTicketMission>[] offsetArray = new Offset<FB_XingYuTicketMission>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XingYuTicketMissionProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XingYuTicketMission.CreateFB_XingYuTicketMission(fbb, curData.ID,fbb.CreateString(curData.MissionDesc),curData.Type,curData.UI,curData.UiNum,FB_XingYuTicketMission.CreateStageListVector(fbb,curData.StageList.ToArray()),FB_XingYuTicketMission.CreateStageRewardListVector(fbb,curData.StageRewardList.ToArray()),curData.MIssionType,curData.Weight,curData.Show);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_XingYuTicketMissionContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XingYuTicketMissionContainer.StartFB_XingYuTicketMissionContainer(fbb);
			FB_XingYuTicketMissionContainer.AddItems(fbb, dataVector);
			var provider = FB_XingYuTicketMissionContainer.EndFB_XingYuTicketMissionContainer(fbb);
			FB_XingYuTicketMissionContainer.FinishFB_XingYuTicketMissionContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XingYuTicketMission.txt", ms.ToArray());
			}
		}

		static void ExprotXueShiBaoKu()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_XueShiBaoKuProvider.Instance.ListData;
			
			Offset<FB_XueShiBaoKu>[] offsetArray = new Offset<FB_XueShiBaoKu>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_XueShiBaoKuProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_XueShiBaoKu.CreateFB_XueShiBaoKu(fbb, curData.Id,FB_XueShiBaoKu.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_XueShiBaoKu.CreateDropIDListVector(fbb,curData.DropIDList.ToArray()),curData.LvlLimit,curData.CopySceneId,curData.TeamPlatformId,FB_XueShiBaoKu.CreateCardScoreListVector(fbb,curData.CardScoreList.ToArray()),curData.CardBossCom,curData.CardBossKill,curData.IsCanMopUp);
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_XueShiBaoKuContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_XueShiBaoKuContainer.StartFB_XueShiBaoKuContainer(fbb);
			FB_XueShiBaoKuContainer.AddItems(fbb, dataVector);
			var provider = FB_XueShiBaoKuContainer.EndFB_XueShiBaoKuContainer(fbb);
			FB_XueShiBaoKuContainer.FinishFB_XueShiBaoKuContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/XueShiBaoKu.txt", ms.ToArray());
			}
		}

		static void ExprotYingYanBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YingYanBaseProvider.Instance.ListData;
			
			Offset<FB_YingYanBase>[] offsetArray = new Offset<FB_YingYanBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YingYanBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YingYanBase.CreateFB_YingYanBase(fbb, curData.ID,fbb.CreateString(curData.Name),curData.Time,curData.QuestCount,FB_YingYanBase.CreateNumberListVector(fbb,curData.NumberList.ToArray()),curData.Exp,curData.BindMoney,curData.PigCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_YingYanBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YingYanBaseContainer.StartFB_YingYanBaseContainer(fbb);
			FB_YingYanBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_YingYanBaseContainer.EndFB_YingYanBaseContainer(fbb);
			FB_YingYanBaseContainer.FinishFB_YingYanBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/YingYanBase.txt", ms.ToArray());
			}
		}

		static void ExprotYuanShenBase()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YuanShenBaseProvider.Instance.ListData;
			
			Offset<FB_YuanShenBase>[] offsetArray = new Offset<FB_YuanShenBase>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YuanShenBaseProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YuanShenBase.CreateFB_YuanShenBase(fbb, curData.ID,curData.Exp,curData.Jie,curData.NextJieLevel,FB_YuanShenBase.CreateAttrIdListVector(fbb,curData.AttrIdList.ToArray()),FB_YuanShenBase.CreateAttrValueListVector(fbb,curData.AttrValueList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_YuanShenBaseContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YuanShenBaseContainer.StartFB_YuanShenBaseContainer(fbb);
			FB_YuanShenBaseContainer.AddItems(fbb, dataVector);
			var provider = FB_YuanShenBaseContainer.EndFB_YuanShenBaseContainer(fbb);
			FB_YuanShenBaseContainer.FinishFB_YuanShenBaseContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/YuanShenBase.txt", ms.ToArray());
			}
		}

		static void ExprotYuanShenShowExp()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YuanShenShowExpProvider.Instance.ListData;
			
			Offset<FB_YuanShenShowExp>[] offsetArray = new Offset<FB_YuanShenShowExp>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YuanShenShowExpProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YuanShenShowExp.CreateFB_YuanShenShowExp(fbb, curData.ID,curData.PlayerLv,FB_YuanShenShowExp.CreateParamListVector(fbb,curData.ParamList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_YuanShenShowExpContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YuanShenShowExpContainer.StartFB_YuanShenShowExpContainer(fbb);
			FB_YuanShenShowExpContainer.AddItems(fbb, dataVector);
			var provider = FB_YuanShenShowExpContainer.EndFB_YuanShenShowExpContainer(fbb);
			FB_YuanShenShowExpContainer.FinishFB_YuanShenShowExpContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/YuanShenShowExp.txt", ms.ToArray());
			}
		}

		static void ExprotYueKa()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YueKaProvider.Instance.ListData;
			
			Offset<FB_YueKa>[] offsetArray = new Offset<FB_YueKa>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YueKaProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YueKa.CreateFB_YueKa(fbb, curData.ID,fbb.CreateString(curData.Name),curData.MoneyNum,curData.StrId);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_YueKaContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YueKaContainer.StartFB_YueKaContainer(fbb);
			FB_YueKaContainer.AddItems(fbb, dataVector);
			var provider = FB_YueKaContainer.EndFB_YueKaContainer(fbb);
			FB_YueKaContainer.FinishFB_YueKaContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/YueKa.txt", ms.ToArray());
			}
		}

		static void ExprotYunGou()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_YunGouProvider.Instance.ListData;
			
			Offset<FB_YunGou>[] offsetArray = new Offset<FB_YunGou>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_YunGouProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_YunGou.CreateFB_YunGou(fbb, curData.ID,fbb.CreateString(curData.Price),FB_YunGou.CreateRewardByJobListVector(fbb,curData.RewardByJobList.ToArray()),FB_YunGou.CreateRewardListVector(fbb,curData.RewardList.ToArray()),FB_YunGou.CreateRewardNumListVector(fbb,curData.RewardNumList.ToArray()),FB_YunGou.CreateRewardRateListVector(fbb,curData.RewardRate_List.ToArray()),curData.FirstBuyRewardId,curData.FirstBuyRewardNum,FB_YunGou.CreateFirstRewardByJobListVector(fbb,curData.FirstRewardByJobList.ToArray()),FB_YunGou.CreateSecRewardByJobListVector(fbb,curData.SecRewardByJobList.ToArray()),fbb.CreateString(curData.FirstPrice),fbb.CreateString(curData.SecPrice));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_YunGouContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_YunGouContainer.StartFB_YunGouContainer(fbb);
			FB_YunGouContainer.AddItems(fbb, dataVector);
			var provider = FB_YunGouContainer.EndFB_YunGouContainer(fbb);
			FB_YunGouContainer.FinishFB_YunGouContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/YunGou.txt", ms.ToArray());
			}
		}

		static void ExprotZhanLingLibao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ZhanLingLibaoProvider.Instance.ListData;
			
			Offset<FB_ZhanLingLibao>[] offsetArray = new Offset<FB_ZhanLingLibao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ZhanLingLibaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ZhanLingLibao.CreateFB_ZhanLingLibao(fbb, curData.ID,curData.Type,curData.Days,curData.ConsumeMoney,curData.ConsumeYuanBao,FB_ZhanLingLibao.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_ZhanLingLibao.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()),FB_ZhanLingLibao.CreateItemIDGudingListVector(fbb,curData.ItemIDGudingList.ToArray()),FB_ZhanLingLibao.CreateItemNumGudingListVector(fbb,curData.ItemNumGudingList.ToArray()));
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ZhanLingLibaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ZhanLingLibaoContainer.StartFB_ZhanLingLibaoContainer(fbb);
			FB_ZhanLingLibaoContainer.AddItems(fbb, dataVector);
			var provider = FB_ZhanLingLibaoContainer.EndFB_ZhanLingLibaoContainer(fbb);
			FB_ZhanLingLibaoContainer.FinishFB_ZhanLingLibaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ZhanLingLibao.txt", ms.ToArray());
			}
		}

		static void ExprotZheKouShangDian()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ZheKouShangDianProvider.Instance.ListData;
			
			Offset<FB_ZheKouShangDian>[] offsetArray = new Offset<FB_ZheKouShangDian>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ZheKouShangDianProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ZheKouShangDian.CreateFB_ZheKouShangDian(fbb, curData.ID,curData.KaiFuPaiHangId,FB_ZheKouShangDian.CreateRewardItemIdListVector(fbb,curData.RewardItemIdList.ToArray()),FB_ZheKouShangDian.CreateRewardItemCountListVector(fbb,curData.RewardItemCountList.ToArray()),curData.Price,curData.OriginPrice,curData.Discount,curData.MaxCount,curData.RewardType);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ZheKouShangDianContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ZheKouShangDianContainer.StartFB_ZheKouShangDianContainer(fbb);
			FB_ZheKouShangDianContainer.AddItems(fbb, dataVector);
			var provider = FB_ZheKouShangDianContainer.EndFB_ZheKouShangDianContainer(fbb);
			FB_ZheKouShangDianContainer.FinishFB_ZheKouShangDianContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ZheKouShangDian.txt", ms.ToArray());
			}
		}

		static void ExprotZhongShenDian()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ZhongShenDianProvider.Instance.ListData;
			
			Offset<FB_ZhongShenDian>[] offsetArray = new Offset<FB_ZhongShenDian>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ZhongShenDianProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ZhongShenDian.CreateFB_ZhongShenDian(fbb, curData.ID,fbb.CreateString(curData.Icon),fbb.CreateString(curData.EffectName),curData.ShenDianPoint,curData.TitleId,curData.RewardItemId,curData.RewardItemCount);
				KeyMaping[curData.ID] = index;
			}
			var dataVector = FB_ZhongShenDianContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ZhongShenDianContainer.StartFB_ZhongShenDianContainer(fbb);
			FB_ZhongShenDianContainer.AddItems(fbb, dataVector);
			var provider = FB_ZhongShenDianContainer.EndFB_ZhongShenDianContainer(fbb);
			FB_ZhongShenDianContainer.FinishFB_ZhongShenDianContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ZhongShenDian.txt", ms.ToArray());
			}
		}

		static void ExprotZhuangBeiXunBao()
		{
			FlatBufferBuilder fbb = new FlatBufferBuilder(1);
			var data = Tab_ZhuangBeiXunBaoProvider.Instance.ListData;
			
			Offset<FB_ZhuangBeiXunBao>[] offsetArray = new Offset<FB_ZhuangBeiXunBao>[data.Count];
			Dictionary<int, int> KeyMaping = new Dictionary<int, int>();
			stypeMapDict.Add(typeof(FB_ZhuangBeiXunBaoProvider), KeyMaping);
			for (int index = 0; index < data.Count; index++)
			{
				var curData = data[index];
				
				offsetArray[index] = FB_ZhuangBeiXunBao.CreateFB_ZhuangBeiXunBao(fbb, curData.Id,curData.MenPai,curData.DropLevel,curData.HighDropBox,curData.LowDropBox,curData.LowTime,curData.HighTime,curData.BaseRandom,curData.AddRandom,curData.NeedItemId,curData.TreasureAddMoney,FB_ZhuangBeiXunBao.CreateItemIDListVector(fbb,curData.ItemIDList.ToArray()),FB_ZhuangBeiXunBao.CreateItemNumListVector(fbb,curData.ItemNumList.ToArray()));
				KeyMaping[curData.Id] = index;
			}
			var dataVector = FB_ZhuangBeiXunBaoContainer.CreateItemsVector(fbb, offsetArray);
	
			FB_ZhuangBeiXunBaoContainer.StartFB_ZhuangBeiXunBaoContainer(fbb);
			FB_ZhuangBeiXunBaoContainer.AddItems(fbb, dataVector);
			var provider = FB_ZhuangBeiXunBaoContainer.EndFB_ZhuangBeiXunBaoContainer(fbb);
			FB_ZhuangBeiXunBaoContainer.FinishFB_ZhuangBeiXunBaoContainerBuffer(fbb, provider);
	
			using (var ms = new MemoryStream(fbb.DataBuffer.Data, fbb.DataBuffer.Position, fbb.Offset))
			{
				WriteToFile("Public/ZhuangBeiXunBao.txt", ms.ToArray());
			}
		}

        #endregion
    }
}
