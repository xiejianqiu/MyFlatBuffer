using System;
using FlatBuffers;
using System.Collections.Generic;
using System.IO;
using Shark;
public partial class FB_AchievementJumpProvider
{
    private static FB_AchievementJumpProvider _Instance;
    public static FB_AchievementJumpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AchievementJumpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/AchievementJump.txt";
    protected FB_AchievementJumpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AchievementJump> mData = new Dictionary<int, FB_AchievementJump>();
    private List<FB_AchievementJump> mListData = new List<FB_AchievementJump>();
    public List<FB_AchievementJump> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AchievementJump GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AchievementJump);
    }
    public Dictionary<int, FB_AchievementJump> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AchievementJumpContainer.FB_AchievementJumpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AchievementJumpContainer.GetRootAsFB_AchievementJumpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityDaZhiGouShowProvider
{
    private static FB_ActivityDaZhiGouShowProvider _Instance;
    public static FB_ActivityDaZhiGouShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityDaZhiGouShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ActivityDaZhiGouShow.txt";
    protected FB_ActivityDaZhiGouShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityDaZhiGouShow> mData = new Dictionary<int, FB_ActivityDaZhiGouShow>();
    private List<FB_ActivityDaZhiGouShow> mListData = new List<FB_ActivityDaZhiGouShow>();
    public List<FB_ActivityDaZhiGouShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityDaZhiGouShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityDaZhiGouShow);
    }
    public Dictionary<int, FB_ActivityDaZhiGouShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityDaZhiGouShowContainer.FB_ActivityDaZhiGouShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityDaZhiGouShowContainer.GetRootAsFB_ActivityDaZhiGouShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityPrayShowProvider
{
    private static FB_ActivityPrayShowProvider _Instance;
    public static FB_ActivityPrayShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityPrayShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ActivityPrayShow.txt";
    protected FB_ActivityPrayShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityPrayShow> mData = new Dictionary<int, FB_ActivityPrayShow>();
    private List<FB_ActivityPrayShow> mListData = new List<FB_ActivityPrayShow>();
    public List<FB_ActivityPrayShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityPrayShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityPrayShow);
    }
    public Dictionary<int, FB_ActivityPrayShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityPrayShowContainer.FB_ActivityPrayShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityPrayShowContainer.GetRootAsFB_ActivityPrayShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityTypeProvider
{
    private static FB_ActivityTypeProvider _Instance;
    public static FB_ActivityTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ActivityType.txt";
    protected FB_ActivityTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityType> mData = new Dictionary<int, FB_ActivityType>();
    private List<FB_ActivityType> mListData = new List<FB_ActivityType>();
    public List<FB_ActivityType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityType);
    }
    public Dictionary<int, FB_ActivityType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityTypeContainer.FB_ActivityTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityTypeContainer.GetRootAsFB_ActivityTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AllActivityProvider
{
    private static FB_AllActivityProvider _Instance;
    public static FB_AllActivityProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AllActivityProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/AllActivity.txt";
    protected FB_AllActivityContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AllActivity> mData = new Dictionary<int, FB_AllActivity>();
    private List<FB_AllActivity> mListData = new List<FB_AllActivity>();
    public List<FB_AllActivity> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AllActivity GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AllActivity);
    }
    public Dictionary<int, FB_AllActivity> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AllActivityContainer.FB_AllActivityContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AllActivityContainer.GetRootAsFB_AllActivityContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AnimationProvider
{
    private static FB_AnimationProvider _Instance;
    public static FB_AnimationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AnimationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Animation.txt";
    protected FB_AnimationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Animation> mData = new Dictionary<int, FB_Animation>();
    private List<FB_Animation> mListData = new List<FB_Animation>();
    public List<FB_Animation> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Animation GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Animation);
    }
    public Dictionary<int, FB_Animation> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AnimationContainer.FB_AnimationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AnimationContainer.GetRootAsFB_AnimationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.AnimID))
            {
                mData.Add(item.AnimID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AnimationCurveProvider
{
    private static FB_AnimationCurveProvider _Instance;
    public static FB_AnimationCurveProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AnimationCurveProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/AnimationCurve.txt";
    protected FB_AnimationCurveContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AnimationCurve> mData = new Dictionary<int, FB_AnimationCurve>();
    private List<FB_AnimationCurve> mListData = new List<FB_AnimationCurve>();
    public List<FB_AnimationCurve> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AnimationCurve GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AnimationCurve);
    }
    public Dictionary<int, FB_AnimationCurve> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AnimationCurveContainer.FB_AnimationCurveContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AnimationCurveContainer.GetRootAsFB_AnimationCurveContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AreaCodeProvider
{
    private static FB_AreaCodeProvider _Instance;
    public static FB_AreaCodeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AreaCodeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/AreaCode.txt";
    protected FB_AreaCodeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AreaCode> mData = new Dictionary<int, FB_AreaCode>();
    private List<FB_AreaCode> mListData = new List<FB_AreaCode>();
    public List<FB_AreaCode> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AreaCode GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AreaCode);
    }
    public Dictionary<int, FB_AreaCode> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AreaCodeContainer.FB_AreaCodeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AreaCodeContainer.GetRootAsFB_AreaCodeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AttributeLessProvider
{
    private static FB_AttributeLessProvider _Instance;
    public static FB_AttributeLessProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AttributeLessProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/AttributeLess.txt";
    protected FB_AttributeLessContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AttributeLess> mData = new Dictionary<int, FB_AttributeLess>();
    private List<FB_AttributeLess> mListData = new List<FB_AttributeLess>();
    public List<FB_AttributeLess> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AttributeLess GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AttributeLess);
    }
    public Dictionary<int, FB_AttributeLess> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AttributeLessContainer.FB_AttributeLessContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AttributeLessContainer.GetRootAsFB_AttributeLessContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BottomRightMenuProvider
{
    private static FB_BottomRightMenuProvider _Instance;
    public static FB_BottomRightMenuProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BottomRightMenuProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/BottomRightMenu.txt";
    protected FB_BottomRightMenuContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BottomRightMenu> mData = new Dictionary<int, FB_BottomRightMenu>();
    private List<FB_BottomRightMenu> mListData = new List<FB_BottomRightMenu>();
    public List<FB_BottomRightMenu> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BottomRightMenu GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BottomRightMenu);
    }
    public Dictionary<int, FB_BottomRightMenu> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BottomRightMenuContainer.FB_BottomRightMenuContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BottomRightMenuContainer.GetRootAsFB_BottomRightMenuContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BulletProvider
{
    private static FB_BulletProvider _Instance;
    public static FB_BulletProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BulletProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Bullet.txt";
    protected FB_BulletContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Bullet> mData = new Dictionary<int, FB_Bullet>();
    private List<FB_Bullet> mListData = new List<FB_Bullet>();
    public List<FB_Bullet> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Bullet GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Bullet);
    }
    public Dictionary<int, FB_Bullet> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BulletContainer.FB_BulletContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BulletContainer.GetRootAsFB_BulletContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CameraEffectProvider
{
    private static FB_CameraEffectProvider _Instance;
    public static FB_CameraEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CameraEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CameraEffect.txt";
    protected FB_CameraEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CameraEffect> mData = new Dictionary<int, FB_CameraEffect>();
    private List<FB_CameraEffect> mListData = new List<FB_CameraEffect>();
    public List<FB_CameraEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CameraEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CameraEffect);
    }
    public Dictionary<int, FB_CameraEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CameraEffectContainer.FB_CameraEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CameraEffectContainer.GetRootAsFB_CameraEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharAnimProvider
{
    private static FB_CharAnimProvider _Instance;
    public static FB_CharAnimProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharAnimProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharAnim.txt";
    protected FB_CharAnimContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharAnim> mData = new Dictionary<int, FB_CharAnim>();
    private List<FB_CharAnim> mListData = new List<FB_CharAnim>();
    public List<FB_CharAnim> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharAnim GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharAnim);
    }
    public Dictionary<int, FB_CharAnim> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharAnimContainer.FB_CharAnimContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharAnimContainer.GetRootAsFB_CharAnimContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharAnimEffectProvider
{
    private static FB_CharAnimEffectProvider _Instance;
    public static FB_CharAnimEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharAnimEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharAnimEffect.txt";
    protected FB_CharAnimEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharAnimEffect> mData = new Dictionary<int, FB_CharAnimEffect>();
    private List<FB_CharAnimEffect> mListData = new List<FB_CharAnimEffect>();
    public List<FB_CharAnimEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharAnimEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharAnimEffect);
    }
    public Dictionary<int, FB_CharAnimEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharAnimEffectContainer.FB_CharAnimEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharAnimEffectContainer.GetRootAsFB_CharAnimEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharModelProvider
{
    private static FB_CharModelProvider _Instance;
    public static FB_CharModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharModel.txt";
    protected FB_CharModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharModel> mData = new Dictionary<int, FB_CharModel>();
    private List<FB_CharModel> mListData = new List<FB_CharModel>();
    public List<FB_CharModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharModel);
    }
    public Dictionary<int, FB_CharModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharModelContainer.FB_CharModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharModelContainer.GetRootAsFB_CharModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharMountProvider
{
    private static FB_CharMountProvider _Instance;
    public static FB_CharMountProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharMountProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharMount.txt";
    protected FB_CharMountContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharMount> mData = new Dictionary<int, FB_CharMount>();
    private List<FB_CharMount> mListData = new List<FB_CharMount>();
    public List<FB_CharMount> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharMount GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharMount);
    }
    public Dictionary<int, FB_CharMount> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharMountContainer.FB_CharMountContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharMountContainer.GetRootAsFB_CharMountContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharSoulProvider
{
    private static FB_CharSoulProvider _Instance;
    public static FB_CharSoulProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharSoulProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharSoul.txt";
    protected FB_CharSoulContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharSoul> mData = new Dictionary<int, FB_CharSoul>();
    private List<FB_CharSoul> mListData = new List<FB_CharSoul>();
    public List<FB_CharSoul> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharSoul GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharSoul);
    }
    public Dictionary<int, FB_CharSoul> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharSoulContainer.FB_CharSoulContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharSoulContainer.GetRootAsFB_CharSoulContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharWingProvider
{
    private static FB_CharWingProvider _Instance;
    public static FB_CharWingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharWingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharWing.txt";
    protected FB_CharWingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharWing> mData = new Dictionary<int, FB_CharWing>();
    private List<FB_CharWing> mListData = new List<FB_CharWing>();
    public List<FB_CharWing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharWing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharWing);
    }
    public Dictionary<int, FB_CharWing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharWingContainer.FB_CharWingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharWingContainer.GetRootAsFB_CharWingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharXingHunProvider
{
    private static FB_CharXingHunProvider _Instance;
    public static FB_CharXingHunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharXingHunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CharXingHun.txt";
    protected FB_CharXingHunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharXingHun> mData = new Dictionary<int, FB_CharXingHun>();
    private List<FB_CharXingHun> mListData = new List<FB_CharXingHun>();
    public List<FB_CharXingHun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharXingHun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharXingHun);
    }
    public Dictionary<int, FB_CharXingHun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharXingHunContainer.FB_CharXingHunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharXingHunContainer.GetRootAsFB_CharXingHunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChatExpressionProvider
{
    private static FB_ChatExpressionProvider _Instance;
    public static FB_ChatExpressionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChatExpressionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ChatExpression.txt";
    protected FB_ChatExpressionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChatExpression> mData = new Dictionary<int, FB_ChatExpression>();
    private List<FB_ChatExpression> mListData = new List<FB_ChatExpression>();
    public List<FB_ChatExpression> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChatExpression GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChatExpression);
    }
    public Dictionary<int, FB_ChatExpression> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChatExpressionContainer.FB_ChatExpressionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChatExpressionContainer.GetRootAsFB_ChatExpressionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChatRobotBaseProvider
{
    private static FB_ChatRobotBaseProvider _Instance;
    public static FB_ChatRobotBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChatRobotBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ChatRobotBase.txt";
    protected FB_ChatRobotBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChatRobotBase> mData = new Dictionary<int, FB_ChatRobotBase>();
    private List<FB_ChatRobotBase> mListData = new List<FB_ChatRobotBase>();
    public List<FB_ChatRobotBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChatRobotBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChatRobotBase);
    }
    public Dictionary<int, FB_ChatRobotBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChatRobotBaseContainer.FB_ChatRobotBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChatRobotBaseContainer.GetRootAsFB_ChatRobotBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChatRobotContentProvider
{
    private static FB_ChatRobotContentProvider _Instance;
    public static FB_ChatRobotContentProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChatRobotContentProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ChatRobotContent.txt";
    protected FB_ChatRobotContentContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChatRobotContent> mData = new Dictionary<int, FB_ChatRobotContent>();
    private List<FB_ChatRobotContent> mListData = new List<FB_ChatRobotContent>();
    public List<FB_ChatRobotContent> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChatRobotContent GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChatRobotContent);
    }
    public Dictionary<int, FB_ChatRobotContent> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChatRobotContentContainer.FB_ChatRobotContentContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChatRobotContentContainer.GetRootAsFB_ChatRobotContentContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChatWordExpressionProvider
{
    private static FB_ChatWordExpressionProvider _Instance;
    public static FB_ChatWordExpressionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChatWordExpressionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ChatWordExpression.txt";
    protected FB_ChatWordExpressionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChatWordExpression> mData = new Dictionary<int, FB_ChatWordExpression>();
    private List<FB_ChatWordExpression> mListData = new List<FB_ChatWordExpression>();
    public List<FB_ChatWordExpression> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChatWordExpression GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChatWordExpression);
    }
    public Dictionary<int, FB_ChatWordExpression> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChatWordExpressionContainer.FB_ChatWordExpressionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChatWordExpressionContainer.GetRootAsFB_ChatWordExpressionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ClientStoryTableProvider
{
    private static FB_ClientStoryTableProvider _Instance;
    public static FB_ClientStoryTableProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ClientStoryTableProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ClientStoryTable.txt";
    protected FB_ClientStoryTableContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ClientStoryTable> mData = new Dictionary<int, FB_ClientStoryTable>();
    private List<FB_ClientStoryTable> mListData = new List<FB_ClientStoryTable>();
    public List<FB_ClientStoryTable> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ClientStoryTable GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ClientStoryTable);
    }
    public Dictionary<int, FB_ClientStoryTable> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ClientStoryTableContainer.FB_ClientStoryTableContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ClientStoryTableContainer.GetRootAsFB_ClientStoryTableContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CloseUpShotProvider
{
    private static FB_CloseUpShotProvider _Instance;
    public static FB_CloseUpShotProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CloseUpShotProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CloseUpShot.txt";
    protected FB_CloseUpShotContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CloseUpShot> mData = new Dictionary<int, FB_CloseUpShot>();
    private List<FB_CloseUpShot> mListData = new List<FB_CloseUpShot>();
    public List<FB_CloseUpShot> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CloseUpShot GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CloseUpShot);
    }
    public Dictionary<int, FB_CloseUpShot> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CloseUpShotContainer.FB_CloseUpShotContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CloseUpShotContainer.GetRootAsFB_CloseUpShotContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CombatPetSceneProvider
{
    private static FB_CombatPetSceneProvider _Instance;
    public static FB_CombatPetSceneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CombatPetSceneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CombatPetScene.txt";
    protected FB_CombatPetSceneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CombatPetScene> mData = new Dictionary<int, FB_CombatPetScene>();
    private List<FB_CombatPetScene> mListData = new List<FB_CombatPetScene>();
    public List<FB_CombatPetScene> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CombatPetScene GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CombatPetScene);
    }
    public Dictionary<int, FB_CombatPetScene> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CombatPetSceneContainer.FB_CombatPetSceneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CombatPetSceneContainer.GetRootAsFB_CombatPetSceneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CommonItemDataAboutSexProvider
{
    private static FB_CommonItemDataAboutSexProvider _Instance;
    public static FB_CommonItemDataAboutSexProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CommonItemDataAboutSexProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CommonItemDataAboutSex.txt";
    protected FB_CommonItemDataAboutSexContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CommonItemDataAboutSex> mData = new Dictionary<int, FB_CommonItemDataAboutSex>();
    private List<FB_CommonItemDataAboutSex> mListData = new List<FB_CommonItemDataAboutSex>();
    public List<FB_CommonItemDataAboutSex> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CommonItemDataAboutSex GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CommonItemDataAboutSex);
    }
    public Dictionary<int, FB_CommonItemDataAboutSex> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CommonItemDataAboutSexContainer.FB_CommonItemDataAboutSexContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CommonItemDataAboutSexContainer.GetRootAsFB_CommonItemDataAboutSexContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CommonItemParamTypeListProvider
{
    private static FB_CommonItemParamTypeListProvider _Instance;
    public static FB_CommonItemParamTypeListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CommonItemParamTypeListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CommonItemParamTypeList.txt";
    protected FB_CommonItemParamTypeListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CommonItemParamTypeList> mData = new Dictionary<int, FB_CommonItemParamTypeList>();
    private List<FB_CommonItemParamTypeList> mListData = new List<FB_CommonItemParamTypeList>();
    public List<FB_CommonItemParamTypeList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CommonItemParamTypeList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CommonItemParamTypeList);
    }
    public Dictionary<int, FB_CommonItemParamTypeList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CommonItemParamTypeListContainer.FB_CommonItemParamTypeListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CommonItemParamTypeListContainer.GetRootAsFB_CommonItemParamTypeListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneLastShotProvider
{
    private static FB_CopySceneLastShotProvider _Instance;
    public static FB_CopySceneLastShotProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneLastShotProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CopySceneLastShot.txt";
    protected FB_CopySceneLastShotContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneLastShot> mData = new Dictionary<int, FB_CopySceneLastShot>();
    private List<FB_CopySceneLastShot> mListData = new List<FB_CopySceneLastShot>();
    public List<FB_CopySceneLastShot> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneLastShot GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneLastShot);
    }
    public Dictionary<int, FB_CopySceneLastShot> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneLastShotContainer.FB_CopySceneLastShotContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneLastShotContainer.GetRootAsFB_CopySceneLastShotContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CSQXuanSNpcProvider
{
    private static FB_CSQXuanSNpcProvider _Instance;
    public static FB_CSQXuanSNpcProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CSQXuanSNpcProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/CSQXuanSNpc.txt";
    protected FB_CSQXuanSNpcContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CSQXuanSNpc> mData = new Dictionary<int, FB_CSQXuanSNpc>();
    private List<FB_CSQXuanSNpc> mListData = new List<FB_CSQXuanSNpc>();
    public List<FB_CSQXuanSNpc> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CSQXuanSNpc GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CSQXuanSNpc);
    }
    public Dictionary<int, FB_CSQXuanSNpc> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CSQXuanSNpcContainer.FB_CSQXuanSNpcContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CSQXuanSNpcContainer.GetRootAsFB_CSQXuanSNpcContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DamageBoardTypeProvider
{
    private static FB_DamageBoardTypeProvider _Instance;
    public static FB_DamageBoardTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DamageBoardTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/DamageBoardType.txt";
    protected FB_DamageBoardTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DamageBoardType> mData = new Dictionary<int, FB_DamageBoardType>();
    private List<FB_DamageBoardType> mListData = new List<FB_DamageBoardType>();
    public List<FB_DamageBoardType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DamageBoardType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DamageBoardType);
    }
    public Dictionary<int, FB_DamageBoardType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DamageBoardTypeContainer.FB_DamageBoardTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DamageBoardTypeContainer.GetRootAsFB_DamageBoardTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.DamageBoardTypeID))
            {
                mData.Add(item.DamageBoardTypeID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBloodSkillDesProvider
{
    private static FB_DestinyBloodSkillDesProvider _Instance;
    public static FB_DestinyBloodSkillDesProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBloodSkillDesProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/DestinyBloodSkillDes.txt";
    protected FB_DestinyBloodSkillDesContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBloodSkillDes> mData = new Dictionary<int, FB_DestinyBloodSkillDes>();
    private List<FB_DestinyBloodSkillDes> mListData = new List<FB_DestinyBloodSkillDes>();
    public List<FB_DestinyBloodSkillDes> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBloodSkillDes GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBloodSkillDes);
    }
    public Dictionary<int, FB_DestinyBloodSkillDes> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBloodSkillDesContainer.FB_DestinyBloodSkillDesContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBloodSkillDesContainer.GetRootAsFB_DestinyBloodSkillDesContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyObjParamsProvider
{
    private static FB_DestinyObjParamsProvider _Instance;
    public static FB_DestinyObjParamsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyObjParamsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/DestinyObjParams.txt";
    protected FB_DestinyObjParamsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyObjParams> mData = new Dictionary<int, FB_DestinyObjParams>();
    private List<FB_DestinyObjParams> mListData = new List<FB_DestinyObjParams>();
    public List<FB_DestinyObjParams> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyObjParams GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyObjParams);
    }
    public Dictionary<int, FB_DestinyObjParams> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyObjParamsContainer.FB_DestinyObjParamsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyObjParamsContainer.GetRootAsFB_DestinyObjParamsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DymaticSceneEffectProvider
{
    private static FB_DymaticSceneEffectProvider _Instance;
    public static FB_DymaticSceneEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DymaticSceneEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/DymaticSceneEffect.txt";
    protected FB_DymaticSceneEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DymaticSceneEffect> mData = new Dictionary<int, FB_DymaticSceneEffect>();
    private List<FB_DymaticSceneEffect> mListData = new List<FB_DymaticSceneEffect>();
    public List<FB_DymaticSceneEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DymaticSceneEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DymaticSceneEffect);
    }
    public Dictionary<int, FB_DymaticSceneEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DymaticSceneEffectContainer.FB_DymaticSceneEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DymaticSceneEffectContainer.GetRootAsFB_DymaticSceneEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EffectProvider
{
    private static FB_EffectProvider _Instance;
    public static FB_EffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Effect.txt";
    protected FB_EffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Effect> mData = new Dictionary<int, FB_Effect>();
    private List<FB_Effect> mListData = new List<FB_Effect>();
    public List<FB_Effect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Effect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Effect);
    }
    public Dictionary<int, FB_Effect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EffectContainer.FB_EffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EffectContainer.GetRootAsFB_EffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.EffectID))
            {
                mData.Add(item.EffectID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EffectPointProvider
{
    private static FB_EffectPointProvider _Instance;
    public static FB_EffectPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EffectPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/EffectPoint.txt";
    protected FB_EffectPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EffectPoint> mData = new Dictionary<int, FB_EffectPoint>();
    private List<FB_EffectPoint> mListData = new List<FB_EffectPoint>();
    public List<FB_EffectPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EffectPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EffectPoint);
    }
    public Dictionary<int, FB_EffectPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EffectPointContainer.FB_EffectPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EffectPointContainer.GetRootAsFB_EffectPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ModelTypeId))
            {
                mData.Add(item.ModelTypeId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipStarEffectProvider
{
    private static FB_EquipStarEffectProvider _Instance;
    public static FB_EquipStarEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipStarEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/EquipStarEffect.txt";
    protected FB_EquipStarEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipStarEffect> mData = new Dictionary<int, FB_EquipStarEffect>();
    private List<FB_EquipStarEffect> mListData = new List<FB_EquipStarEffect>();
    public List<FB_EquipStarEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipStarEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipStarEffect);
    }
    public Dictionary<int, FB_EquipStarEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipStarEffectContainer.FB_EquipStarEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipStarEffectContainer.GetRootAsFB_EquipStarEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipTipsProvider
{
    private static FB_EquipTipsProvider _Instance;
    public static FB_EquipTipsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipTipsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/EquipTips.txt";
    protected FB_EquipTipsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipTips> mData = new Dictionary<int, FB_EquipTips>();
    private List<FB_EquipTips> mListData = new List<FB_EquipTips>();
    public List<FB_EquipTips> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipTips GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipTips);
    }
    public Dictionary<int, FB_EquipTips> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipTipsContainer.FB_EquipTipsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipTipsContainer.GetRootAsFB_EquipTipsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FittingBaseProvider
{
    private static FB_FittingBaseProvider _Instance;
    public static FB_FittingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FittingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/FittingBase.txt";
    protected FB_FittingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FittingBase> mData = new Dictionary<int, FB_FittingBase>();
    private List<FB_FittingBase> mListData = new List<FB_FittingBase>();
    public List<FB_FittingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FittingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FittingBase);
    }
    public Dictionary<int, FB_FittingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FittingBaseContainer.FB_FittingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FittingBaseContainer.GetRootAsFB_FittingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FlyCutterUIProvider
{
    private static FB_FlyCutterUIProvider _Instance;
    public static FB_FlyCutterUIProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FlyCutterUIProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/FlyCutterUI.txt";
    protected FB_FlyCutterUIContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FlyCutterUI> mData = new Dictionary<int, FB_FlyCutterUI>();
    private List<FB_FlyCutterUI> mListData = new List<FB_FlyCutterUI>();
    public List<FB_FlyCutterUI> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FlyCutterUI GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FlyCutterUI);
    }
    public Dictionary<int, FB_FlyCutterUI> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FlyCutterUIContainer.FB_FlyCutterUIContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FlyCutterUIContainer.GetRootAsFB_FlyCutterUIContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Level))
            {
                mData.Add(item.Level, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_fwqlistProvider
{
    private static FB_fwqlistProvider _Instance;
    public static FB_fwqlistProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_fwqlistProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/fwqlist.txt";
    protected FB_fwqlistContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_fwqlist> mData = new Dictionary<int, FB_fwqlist>();
    private List<FB_fwqlist> mListData = new List<FB_fwqlist>();
    public List<FB_fwqlist> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_fwqlist GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_fwqlist);
    }
    public Dictionary<int, FB_fwqlist> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_fwqlistContainer.FB_fwqlistContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_fwqlistContainer.GetRootAsFB_fwqlistContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GetPathBaseProvider
{
    private static FB_GetPathBaseProvider _Instance;
    public static FB_GetPathBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GetPathBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/GetPathBase.txt";
    protected FB_GetPathBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GetPathBase> mData = new Dictionary<int, FB_GetPathBase>();
    private List<FB_GetPathBase> mListData = new List<FB_GetPathBase>();
    public List<FB_GetPathBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GetPathBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GetPathBase);
    }
    public Dictionary<int, FB_GetPathBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GetPathBaseContainer.FB_GetPathBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GetPathBaseContainer.GetRootAsFB_GetPathBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GetPathInfoProvider
{
    private static FB_GetPathInfoProvider _Instance;
    public static FB_GetPathInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GetPathInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/GetPathInfo.txt";
    protected FB_GetPathInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GetPathInfo> mData = new Dictionary<int, FB_GetPathInfo>();
    private List<FB_GetPathInfo> mListData = new List<FB_GetPathInfo>();
    public List<FB_GetPathInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GetPathInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GetPathInfo);
    }
    public Dictionary<int, FB_GetPathInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GetPathInfoContainer.FB_GetPathInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GetPathInfoContainer.GetRootAsFB_GetPathInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_gonggaoProvider
{
    private static FB_gonggaoProvider _Instance;
    public static FB_gonggaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_gonggaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/gonggao.txt";
    protected FB_gonggaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_gonggao> mData = new Dictionary<int, FB_gonggao>();
    private List<FB_gonggao> mListData = new List<FB_gonggao>();
    public List<FB_gonggao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_gonggao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_gonggao);
    }
    public Dictionary<int, FB_gonggao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_gonggaoContainer.FB_gonggaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_gonggaoContainer.GetRootAsFB_gonggaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuideBaseProvider
{
    private static FB_GuideBaseProvider _Instance;
    public static FB_GuideBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuideBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/GuideBase.txt";
    protected FB_GuideBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuideBase> mData = new Dictionary<int, FB_GuideBase>();
    private List<FB_GuideBase> mListData = new List<FB_GuideBase>();
    public List<FB_GuideBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuideBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuideBase);
    }
    public Dictionary<int, FB_GuideBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuideBaseContainer.FB_GuideBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuideBaseContainer.GetRootAsFB_GuideBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuideTypeProvider
{
    private static FB_GuideTypeProvider _Instance;
    public static FB_GuideTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuideTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/GuideType.txt";
    protected FB_GuideTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuideType> mData = new Dictionary<int, FB_GuideType>();
    private List<FB_GuideType> mListData = new List<FB_GuideType>();
    public List<FB_GuideType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuideType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuideType);
    }
    public Dictionary<int, FB_GuideType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuideTypeContainer.FB_GuideTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuideTypeContainer.GetRootAsFB_GuideTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildFormationTypeProvider
{
    private static FB_GuildFormationTypeProvider _Instance;
    public static FB_GuildFormationTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildFormationTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/GuildFormationType.txt";
    protected FB_GuildFormationTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildFormationType> mData = new Dictionary<int, FB_GuildFormationType>();
    private List<FB_GuildFormationType> mListData = new List<FB_GuildFormationType>();
    public List<FB_GuildFormationType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildFormationType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildFormationType);
    }
    public Dictionary<int, FB_GuildFormationType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildFormationTypeContainer.FB_GuildFormationTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildFormationTypeContainer.GetRootAsFB_GuildFormationTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HairModelProvider
{
    private static FB_HairModelProvider _Instance;
    public static FB_HairModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HairModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/HairModel.txt";
    protected FB_HairModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HairModel> mData = new Dictionary<int, FB_HairModel>();
    private List<FB_HairModel> mListData = new List<FB_HairModel>();
    public List<FB_HairModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HairModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HairModel);
    }
    public Dictionary<int, FB_HairModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HairModelContainer.FB_HairModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HairModelContainer.GetRootAsFB_HairModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingObjParamsProvider
{
    private static FB_HuanJingObjParamsProvider _Instance;
    public static FB_HuanJingObjParamsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingObjParamsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/HuanJingObjParams.txt";
    protected FB_HuanJingObjParamsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingObjParams> mData = new Dictionary<int, FB_HuanJingObjParams>();
    private List<FB_HuanJingObjParams> mListData = new List<FB_HuanJingObjParams>();
    public List<FB_HuanJingObjParams> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingObjParams GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingObjParams);
    }
    public Dictionary<int, FB_HuanJingObjParams> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingObjParamsContainer.FB_HuanJingObjParamsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingObjParamsContainer.GetRootAsFB_HuanJingObjParamsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanLeXunBaoProvider
{
    private static FB_HuanLeXunBaoProvider _Instance;
    public static FB_HuanLeXunBaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanLeXunBaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/HuanLeXunBao.txt";
    protected FB_HuanLeXunBaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanLeXunBao> mData = new Dictionary<int, FB_HuanLeXunBao>();
    private List<FB_HuanLeXunBao> mListData = new List<FB_HuanLeXunBao>();
    public List<FB_HuanLeXunBao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanLeXunBao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanLeXunBao);
    }
    public Dictionary<int, FB_HuanLeXunBao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanLeXunBaoContainer.FB_HuanLeXunBaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanLeXunBaoContainer.GetRootAsFB_HuanLeXunBaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ModelTypeId))
            {
                mData.Add(item.ModelTypeId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangShanghenParamProvider
{
    private static FB_HunJiangShanghenParamProvider _Instance;
    public static FB_HunJiangShanghenParamProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangShanghenParamProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/HunJiangShanghenParam.txt";
    protected FB_HunJiangShanghenParamContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangShanghenParam> mData = new Dictionary<int, FB_HunJiangShanghenParam>();
    private List<FB_HunJiangShanghenParam> mListData = new List<FB_HunJiangShanghenParam>();
    public List<FB_HunJiangShanghenParam> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangShanghenParam GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangShanghenParam);
    }
    public Dictionary<int, FB_HunJiangShanghenParam> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangShanghenParamContainer.FB_HunJiangShanghenParamContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangShanghenParamContainer.GetRootAsFB_HunJiangShanghenParamContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_IapGiftUIProvider
{
    private static FB_IapGiftUIProvider _Instance;
    public static FB_IapGiftUIProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_IapGiftUIProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/IapGiftUI.txt";
    protected FB_IapGiftUIContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_IapGiftUI> mData = new Dictionary<int, FB_IapGiftUI>();
    private List<FB_IapGiftUI> mListData = new List<FB_IapGiftUI>();
    public List<FB_IapGiftUI> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_IapGiftUI GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_IapGiftUI);
    }
    public Dictionary<int, FB_IapGiftUI> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_IapGiftUIContainer.FB_IapGiftUIContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_IapGiftUIContainer.GetRootAsFB_IapGiftUIContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemButtonLogicProvider
{
    private static FB_ItemButtonLogicProvider _Instance;
    public static FB_ItemButtonLogicProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemButtonLogicProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ItemButtonLogic.txt";
    protected FB_ItemButtonLogicContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemButtonLogic> mData = new Dictionary<int, FB_ItemButtonLogic>();
    private List<FB_ItemButtonLogic> mListData = new List<FB_ItemButtonLogic>();
    public List<FB_ItemButtonLogic> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemButtonLogic GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemButtonLogic);
    }
    public Dictionary<int, FB_ItemButtonLogic> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemButtonLogicContainer.FB_ItemButtonLogicContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemButtonLogicContainer.GetRootAsFB_ItemButtonLogicContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemCompoundTypeSettingProvider
{
    private static FB_ItemCompoundTypeSettingProvider _Instance;
    public static FB_ItemCompoundTypeSettingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemCompoundTypeSettingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ItemCompoundTypeSetting.txt";
    protected FB_ItemCompoundTypeSettingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemCompoundTypeSetting> mData = new Dictionary<int, FB_ItemCompoundTypeSetting>();
    private List<FB_ItemCompoundTypeSetting> mListData = new List<FB_ItemCompoundTypeSetting>();
    public List<FB_ItemCompoundTypeSetting> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemCompoundTypeSetting GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemCompoundTypeSetting);
    }
    public Dictionary<int, FB_ItemCompoundTypeSetting> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemCompoundTypeSettingContainer.FB_ItemCompoundTypeSettingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemCompoundTypeSettingContainer.GetRootAsFB_ItemCompoundTypeSettingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingTreeBaseProvider
{
    private static FB_JiLingTreeBaseProvider _Instance;
    public static FB_JiLingTreeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingTreeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/JiLingTreeBase.txt";
    protected FB_JiLingTreeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingTreeBase> mData = new Dictionary<int, FB_JiLingTreeBase>();
    private List<FB_JiLingTreeBase> mListData = new List<FB_JiLingTreeBase>();
    public List<FB_JiLingTreeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingTreeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingTreeBase);
    }
    public Dictionary<int, FB_JiLingTreeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingTreeBaseContainer.FB_JiLingTreeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingTreeBaseContainer.GetRootAsFB_JiLingTreeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiYiCardProvider
{
    private static FB_JiYiCardProvider _Instance;
    public static FB_JiYiCardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiYiCardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/JiYiCard.txt";
    protected FB_JiYiCardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiYiCard> mData = new Dictionary<int, FB_JiYiCard>();
    private List<FB_JiYiCard> mListData = new List<FB_JiYiCard>();
    public List<FB_JiYiCard> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiYiCard GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiYiCard);
    }
    public Dictionary<int, FB_JiYiCard> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiYiCardContainer.FB_JiYiCardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiYiCardContainer.GetRootAsFB_JiYiCardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceFakeObjMovePosProvider
{
    private static FB_KneadFaceFakeObjMovePosProvider _Instance;
    public static FB_KneadFaceFakeObjMovePosProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceFakeObjMovePosProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceFakeObjMovePos.txt";
    protected FB_KneadFaceFakeObjMovePosContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceFakeObjMovePos> mData = new Dictionary<int, FB_KneadFaceFakeObjMovePos>();
    private List<FB_KneadFaceFakeObjMovePos> mListData = new List<FB_KneadFaceFakeObjMovePos>();
    public List<FB_KneadFaceFakeObjMovePos> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceFakeObjMovePos GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceFakeObjMovePos);
    }
    public Dictionary<int, FB_KneadFaceFakeObjMovePos> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceFakeObjMovePosContainer.FB_KneadFaceFakeObjMovePosContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceFakeObjMovePosContainer.GetRootAsFB_KneadFaceFakeObjMovePosContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOfEyeProvider
{
    private static FB_KneadFaceOfEyeProvider _Instance;
    public static FB_KneadFaceOfEyeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOfEyeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceOfEye.txt";
    protected FB_KneadFaceOfEyeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOfEye> mData = new Dictionary<int, FB_KneadFaceOfEye>();
    private List<FB_KneadFaceOfEye> mListData = new List<FB_KneadFaceOfEye>();
    public List<FB_KneadFaceOfEye> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOfEye GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOfEye);
    }
    public Dictionary<int, FB_KneadFaceOfEye> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOfEyeContainer.FB_KneadFaceOfEyeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOfEyeContainer.GetRootAsFB_KneadFaceOfEyeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOfEyeBrowProvider
{
    private static FB_KneadFaceOfEyeBrowProvider _Instance;
    public static FB_KneadFaceOfEyeBrowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOfEyeBrowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceOfEyeBrow.txt";
    protected FB_KneadFaceOfEyeBrowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOfEyeBrow> mData = new Dictionary<int, FB_KneadFaceOfEyeBrow>();
    private List<FB_KneadFaceOfEyeBrow> mListData = new List<FB_KneadFaceOfEyeBrow>();
    public List<FB_KneadFaceOfEyeBrow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOfEyeBrow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOfEyeBrow);
    }
    public Dictionary<int, FB_KneadFaceOfEyeBrow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOfEyeBrowContainer.FB_KneadFaceOfEyeBrowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOfEyeBrowContainer.GetRootAsFB_KneadFaceOfEyeBrowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOfLipProvider
{
    private static FB_KneadFaceOfLipProvider _Instance;
    public static FB_KneadFaceOfLipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOfLipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceOfLip.txt";
    protected FB_KneadFaceOfLipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOfLip> mData = new Dictionary<int, FB_KneadFaceOfLip>();
    private List<FB_KneadFaceOfLip> mListData = new List<FB_KneadFaceOfLip>();
    public List<FB_KneadFaceOfLip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOfLip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOfLip);
    }
    public Dictionary<int, FB_KneadFaceOfLip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOfLipContainer.FB_KneadFaceOfLipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOfLipContainer.GetRootAsFB_KneadFaceOfLipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOfPrefabProvider
{
    private static FB_KneadFaceOfPrefabProvider _Instance;
    public static FB_KneadFaceOfPrefabProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOfPrefabProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceOfPrefab.txt";
    protected FB_KneadFaceOfPrefabContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOfPrefab> mData = new Dictionary<int, FB_KneadFaceOfPrefab>();
    private List<FB_KneadFaceOfPrefab> mListData = new List<FB_KneadFaceOfPrefab>();
    public List<FB_KneadFaceOfPrefab> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOfPrefab GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOfPrefab);
    }
    public Dictionary<int, FB_KneadFaceOfPrefab> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOfPrefabContainer.FB_KneadFaceOfPrefabContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOfPrefabContainer.GetRootAsFB_KneadFaceOfPrefabContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOfTattoProvider
{
    private static FB_KneadFaceOfTattoProvider _Instance;
    public static FB_KneadFaceOfTattoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOfTattoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/KneadFaceOfTatto.txt";
    protected FB_KneadFaceOfTattoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOfTatto> mData = new Dictionary<int, FB_KneadFaceOfTatto>();
    private List<FB_KneadFaceOfTatto> mListData = new List<FB_KneadFaceOfTatto>();
    public List<FB_KneadFaceOfTatto> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOfTatto GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOfTatto);
    }
    public Dictionary<int, FB_KneadFaceOfTatto> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOfTattoContainer.FB_KneadFaceOfTattoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOfTattoContainer.GetRootAsFB_KneadFaceOfTattoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingBaoTypeProvider
{
    private static FB_LingBaoTypeProvider _Instance;
    public static FB_LingBaoTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingBaoTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/LingBaoType.txt";
    protected FB_LingBaoTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingBaoType> mData = new Dictionary<int, FB_LingBaoType>();
    private List<FB_LingBaoType> mListData = new List<FB_LingBaoType>();
    public List<FB_LingBaoType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingBaoType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingBaoType);
    }
    public Dictionary<int, FB_LingBaoType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingBaoTypeContainer.FB_LingBaoTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingBaoTypeContainer.GetRootAsFB_LingBaoTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LocalNotificationProvider
{
    private static FB_LocalNotificationProvider _Instance;
    public static FB_LocalNotificationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LocalNotificationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/LocalNotification.txt";
    protected FB_LocalNotificationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LocalNotification> mData = new Dictionary<int, FB_LocalNotification>();
    private List<FB_LocalNotification> mListData = new List<FB_LocalNotification>();
    public List<FB_LocalNotification> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LocalNotification GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LocalNotification);
    }
    public Dictionary<int, FB_LocalNotification> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LocalNotificationContainer.FB_LocalNotificationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LocalNotificationContainer.GetRootAsFB_LocalNotificationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MaiDianStarSoulModelProvider
{
    private static FB_MaiDianStarSoulModelProvider _Instance;
    public static FB_MaiDianStarSoulModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MaiDianStarSoulModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/MaiDianStarSoulModel.txt";
    protected FB_MaiDianStarSoulModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MaiDianStarSoulModel> mData = new Dictionary<int, FB_MaiDianStarSoulModel>();
    private List<FB_MaiDianStarSoulModel> mListData = new List<FB_MaiDianStarSoulModel>();
    public List<FB_MaiDianStarSoulModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MaiDianStarSoulModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MaiDianStarSoulModel);
    }
    public Dictionary<int, FB_MaiDianStarSoulModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MaiDianStarSoulModelContainer.FB_MaiDianStarSoulModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MaiDianStarSoulModelContainer.GetRootAsFB_MaiDianStarSoulModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MergeRankShowProvider
{
    private static FB_MergeRankShowProvider _Instance;
    public static FB_MergeRankShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MergeRankShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/MergeRankShow.txt";
    protected FB_MergeRankShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MergeRankShow> mData = new Dictionary<int, FB_MergeRankShow>();
    private List<FB_MergeRankShow> mListData = new List<FB_MergeRankShow>();
    public List<FB_MergeRankShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MergeRankShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MergeRankShow);
    }
    public Dictionary<int, FB_MergeRankShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MergeRankShowContainer.FB_MergeRankShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MergeRankShowContainer.GetRootAsFB_MergeRankShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionDictionaryProvider
{
    private static FB_MissionDictionaryProvider _Instance;
    public static FB_MissionDictionaryProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionDictionaryProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/MissionDictionary.txt";
    protected FB_MissionDictionaryContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionDictionary> mData = new Dictionary<int, FB_MissionDictionary>();
    private List<FB_MissionDictionary> mListData = new List<FB_MissionDictionary>();
    public List<FB_MissionDictionary> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionDictionary GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionDictionary);
    }
    public Dictionary<int, FB_MissionDictionary> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionDictionaryContainer.FB_MissionDictionaryContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionDictionaryContainer.GetRootAsFB_MissionDictionaryContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionSceneEffectProvider
{
    private static FB_MissionSceneEffectProvider _Instance;
    public static FB_MissionSceneEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionSceneEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/MissionSceneEffect.txt";
    protected FB_MissionSceneEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionSceneEffect> mData = new Dictionary<int, FB_MissionSceneEffect>();
    private List<FB_MissionSceneEffect> mListData = new List<FB_MissionSceneEffect>();
    public List<FB_MissionSceneEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionSceneEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionSceneEffect);
    }
    public Dictionary<int, FB_MissionSceneEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionSceneEffectContainer.FB_MissionSceneEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionSceneEffectContainer.GetRootAsFB_MissionSceneEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MountBindPointProvider
{
    private static FB_MountBindPointProvider _Instance;
    public static FB_MountBindPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MountBindPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/MountBindPoint.txt";
    protected FB_MountBindPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MountBindPoint> mData = new Dictionary<int, FB_MountBindPoint>();
    private List<FB_MountBindPoint> mListData = new List<FB_MountBindPoint>();
    public List<FB_MountBindPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MountBindPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MountBindPoint);
    }
    public Dictionary<int, FB_MountBindPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MountBindPointContainer.FB_MountBindPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MountBindPointContainer.GetRootAsFB_MountBindPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_NPCPaoPaoProvider
{
    private static FB_NPCPaoPaoProvider _Instance;
    public static FB_NPCPaoPaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_NPCPaoPaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/NPCPaoPao.txt";
    protected FB_NPCPaoPaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_NPCPaoPao> mData = new Dictionary<int, FB_NPCPaoPao>();
    private List<FB_NPCPaoPao> mListData = new List<FB_NPCPaoPao>();
    public List<FB_NPCPaoPao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_NPCPaoPao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_NPCPaoPao);
    }
    public Dictionary<int, FB_NPCPaoPao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_NPCPaoPaoContainer.FB_NPCPaoPaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_NPCPaoPaoContainer.GetRootAsFB_NPCPaoPaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_NPCSoundsProvider
{
    private static FB_NPCSoundsProvider _Instance;
    public static FB_NPCSoundsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_NPCSoundsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/NPCSounds.txt";
    protected FB_NPCSoundsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_NPCSounds> mData = new Dictionary<int, FB_NPCSounds>();
    private List<FB_NPCSounds> mListData = new List<FB_NPCSounds>();
    public List<FB_NPCSounds> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_NPCSounds GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_NPCSounds);
    }
    public Dictionary<int, FB_NPCSounds> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_NPCSoundsContainer.FB_NPCSoundsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_NPCSoundsContainer.GetRootAsFB_NPCSoundsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OfflineCompetitionPlayerShowPostionProvider
{
    private static FB_OfflineCompetitionPlayerShowPostionProvider _Instance;
    public static FB_OfflineCompetitionPlayerShowPostionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OfflineCompetitionPlayerShowPostionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/OfflineCompetitionPlayerShowPostion.txt";
    protected FB_OfflineCompetitionPlayerShowPostionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OfflineCompetitionPlayerShowPostion> mData = new Dictionary<int, FB_OfflineCompetitionPlayerShowPostion>();
    private List<FB_OfflineCompetitionPlayerShowPostion> mListData = new List<FB_OfflineCompetitionPlayerShowPostion>();
    public List<FB_OfflineCompetitionPlayerShowPostion> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OfflineCompetitionPlayerShowPostion GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OfflineCompetitionPlayerShowPostion);
    }
    public Dictionary<int, FB_OfflineCompetitionPlayerShowPostion> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OfflineCompetitionPlayerShowPostionContainer.FB_OfflineCompetitionPlayerShowPostionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OfflineCompetitionPlayerShowPostionContainer.GetRootAsFB_OfflineCompetitionPlayerShowPostionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OperateResultTipsProvider
{
    private static FB_OperateResultTipsProvider _Instance;
    public static FB_OperateResultTipsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OperateResultTipsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/OperateResultTips.txt";
    protected FB_OperateResultTipsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OperateResultTips> mData = new Dictionary<int, FB_OperateResultTips>();
    private List<FB_OperateResultTips> mListData = new List<FB_OperateResultTips>();
    public List<FB_OperateResultTips> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OperateResultTips GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OperateResultTips);
    }
    public Dictionary<int, FB_OperateResultTips> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OperateResultTipsContainer.FB_OperateResultTipsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OperateResultTipsContainer.GetRootAsFB_OperateResultTipsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OptionTypeProvider
{
    private static FB_OptionTypeProvider _Instance;
    public static FB_OptionTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OptionTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/OptionType.txt";
    protected FB_OptionTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OptionType> mData = new Dictionary<int, FB_OptionType>();
    private List<FB_OptionType> mListData = new List<FB_OptionType>();
    public List<FB_OptionType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OptionType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OptionType);
    }
    public Dictionary<int, FB_OptionType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OptionTypeContainer.FB_OptionTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OptionTypeContainer.GetRootAsFB_OptionTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PhotoEffectProvider
{
    private static FB_PhotoEffectProvider _Instance;
    public static FB_PhotoEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PhotoEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PhotoEffect.txt";
    protected FB_PhotoEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PhotoEffect> mData = new Dictionary<int, FB_PhotoEffect>();
    private List<FB_PhotoEffect> mListData = new List<FB_PhotoEffect>();
    public List<FB_PhotoEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PhotoEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PhotoEffect);
    }
    public Dictionary<int, FB_PhotoEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PhotoEffectContainer.FB_PhotoEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PhotoEffectContainer.GetRootAsFB_PhotoEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PhotoTabEffectProvider
{
    private static FB_PhotoTabEffectProvider _Instance;
    public static FB_PhotoTabEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PhotoTabEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PhotoTabEffect.txt";
    protected FB_PhotoTabEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PhotoTabEffect> mData = new Dictionary<int, FB_PhotoTabEffect>();
    private List<FB_PhotoTabEffect> mListData = new List<FB_PhotoTabEffect>();
    public List<FB_PhotoTabEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PhotoTabEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PhotoTabEffect);
    }
    public Dictionary<int, FB_PhotoTabEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PhotoTabEffectContainer.FB_PhotoTabEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PhotoTabEffectContainer.GetRootAsFB_PhotoTabEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PicturePuzzleProvider
{
    private static FB_PicturePuzzleProvider _Instance;
    public static FB_PicturePuzzleProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PicturePuzzleProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PicturePuzzle.txt";
    protected FB_PicturePuzzleContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PicturePuzzle> mData = new Dictionary<int, FB_PicturePuzzle>();
    private List<FB_PicturePuzzle> mListData = new List<FB_PicturePuzzle>();
    public List<FB_PicturePuzzle> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PicturePuzzle GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PicturePuzzle);
    }
    public Dictionary<int, FB_PicturePuzzle> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PicturePuzzleContainer.FB_PicturePuzzleContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PicturePuzzleContainer.GetRootAsFB_PicturePuzzleContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Level))
            {
                mData.Add(item.Level, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerHeadInfoCfgProvider
{
    private static FB_PlayerHeadInfoCfgProvider _Instance;
    public static FB_PlayerHeadInfoCfgProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerHeadInfoCfgProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PlayerHeadInfoCfg.txt";
    protected FB_PlayerHeadInfoCfgContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerHeadInfoCfg> mData = new Dictionary<int, FB_PlayerHeadInfoCfg>();
    private List<FB_PlayerHeadInfoCfg> mListData = new List<FB_PlayerHeadInfoCfg>();
    public List<FB_PlayerHeadInfoCfg> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerHeadInfoCfg GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerHeadInfoCfg);
    }
    public Dictionary<int, FB_PlayerHeadInfoCfg> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerHeadInfoCfgContainer.FB_PlayerHeadInfoCfgContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerHeadInfoCfgContainer.GetRootAsFB_PlayerHeadInfoCfgContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayMethodBroadcastProvider
{
    private static FB_PlayMethodBroadcastProvider _Instance;
    public static FB_PlayMethodBroadcastProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayMethodBroadcastProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PlayMethodBroadcast.txt";
    protected FB_PlayMethodBroadcastContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayMethodBroadcast> mData = new Dictionary<int, FB_PlayMethodBroadcast>();
    private List<FB_PlayMethodBroadcast> mListData = new List<FB_PlayMethodBroadcast>();
    public List<FB_PlayMethodBroadcast> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayMethodBroadcast GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayMethodBroadcast);
    }
    public Dictionary<int, FB_PlayMethodBroadcast> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayMethodBroadcastContainer.FB_PlayMethodBroadcastContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayMethodBroadcastContainer.GetRootAsFB_PlayMethodBroadcastContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PreloadProvider
{
    private static FB_PreloadProvider _Instance;
    public static FB_PreloadProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PreloadProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Preload.txt";
    protected FB_PreloadContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Preload> mData = new Dictionary<int, FB_Preload>();
    private List<FB_Preload> mListData = new List<FB_Preload>();
    public List<FB_Preload> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Preload GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Preload);
    }
    public Dictionary<int, FB_Preload> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PreloadContainer.FB_PreloadContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PreloadContainer.GetRootAsFB_PreloadContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PropertyIntroProvider
{
    private static FB_PropertyIntroProvider _Instance;
    public static FB_PropertyIntroProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PropertyIntroProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/PropertyIntro.txt";
    protected FB_PropertyIntroContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PropertyIntro> mData = new Dictionary<int, FB_PropertyIntro>();
    private List<FB_PropertyIntro> mListData = new List<FB_PropertyIntro>();
    public List<FB_PropertyIntro> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PropertyIntro GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PropertyIntro);
    }
    public Dictionary<int, FB_PropertyIntro> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PropertyIntroContainer.FB_PropertyIntroContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PropertyIntroContainer.GetRootAsFB_PropertyIntroContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QQDaWanKaProvider
{
    private static FB_QQDaWanKaProvider _Instance;
    public static FB_QQDaWanKaProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QQDaWanKaProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/QQDaWanKa.txt";
    protected FB_QQDaWanKaContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QQDaWanKa> mData = new Dictionary<int, FB_QQDaWanKa>();
    private List<FB_QQDaWanKa> mListData = new List<FB_QQDaWanKa>();
    public List<FB_QQDaWanKa> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QQDaWanKa GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QQDaWanKa);
    }
    public Dictionary<int, FB_QQDaWanKa> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QQDaWanKaContainer.FB_QQDaWanKaContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QQDaWanKaContainer.GetRootAsFB_QQDaWanKaContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QQDaWanKaPrivilegeProvider
{
    private static FB_QQDaWanKaPrivilegeProvider _Instance;
    public static FB_QQDaWanKaPrivilegeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QQDaWanKaPrivilegeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/QQDaWanKaPrivilege.txt";
    protected FB_QQDaWanKaPrivilegeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QQDaWanKaPrivilege> mData = new Dictionary<int, FB_QQDaWanKaPrivilege>();
    private List<FB_QQDaWanKaPrivilege> mListData = new List<FB_QQDaWanKaPrivilege>();
    public List<FB_QQDaWanKaPrivilege> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QQDaWanKaPrivilege GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QQDaWanKaPrivilege);
    }
    public Dictionary<int, FB_QQDaWanKaPrivilege> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QQDaWanKaPrivilegeContainer.FB_QQDaWanKaPrivilegeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QQDaWanKaPrivilegeContainer.GetRootAsFB_QQDaWanKaPrivilegeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RankTypeProvider
{
    private static FB_RankTypeProvider _Instance;
    public static FB_RankTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RankTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/RankType.txt";
    protected FB_RankTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RankType> mData = new Dictionary<int, FB_RankType>();
    private List<FB_RankType> mListData = new List<FB_RankType>();
    public List<FB_RankType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RankType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RankType);
    }
    public Dictionary<int, FB_RankType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RankTypeContainer.FB_RankTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RankTypeContainer.GetRootAsFB_RankTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RealTimeShadowConfigProvider
{
    private static FB_RealTimeShadowConfigProvider _Instance;
    public static FB_RealTimeShadowConfigProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RealTimeShadowConfigProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/RealTimeShadowConfig.txt";
    protected FB_RealTimeShadowConfigContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RealTimeShadowConfig> mData = new Dictionary<int, FB_RealTimeShadowConfig>();
    private List<FB_RealTimeShadowConfig> mListData = new List<FB_RealTimeShadowConfig>();
    public List<FB_RealTimeShadowConfig> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RealTimeShadowConfig GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RealTimeShadowConfig);
    }
    public Dictionary<int, FB_RealTimeShadowConfig> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RealTimeShadowConfigContainer.FB_RealTimeShadowConfigContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RealTimeShadowConfigContainer.GetRootAsFB_RealTimeShadowConfigContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RobotProvider
{
    private static FB_RobotProvider _Instance;
    public static FB_RobotProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RobotProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Robot.txt";
    protected FB_RobotContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Robot> mData = new Dictionary<int, FB_Robot>();
    private List<FB_Robot> mListData = new List<FB_Robot>();
    public List<FB_Robot> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Robot GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Robot);
    }
    public Dictionary<int, FB_Robot> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RobotContainer.FB_RobotContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RobotContainer.GetRootAsFB_RobotContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RobotAppearanceProvider
{
    private static FB_RobotAppearanceProvider _Instance;
    public static FB_RobotAppearanceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RobotAppearanceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/RobotAppearance.txt";
    protected FB_RobotAppearanceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RobotAppearance> mData = new Dictionary<int, FB_RobotAppearance>();
    private List<FB_RobotAppearance> mListData = new List<FB_RobotAppearance>();
    public List<FB_RobotAppearance> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RobotAppearance GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RobotAppearance);
    }
    public Dictionary<int, FB_RobotAppearance> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RobotAppearanceContainer.FB_RobotAppearanceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RobotAppearanceContainer.GetRootAsFB_RobotAppearanceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RoleNameProvider
{
    private static FB_RoleNameProvider _Instance;
    public static FB_RoleNameProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RoleNameProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/RoleName.txt";
    protected FB_RoleNameContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RoleName> mData = new Dictionary<int, FB_RoleName>();
    private List<FB_RoleName> mListData = new List<FB_RoleName>();
    public List<FB_RoleName> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RoleName GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RoleName);
    }
    public Dictionary<int, FB_RoleName> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RoleNameContainer.FB_RoleNameContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RoleNameContainer.GetRootAsFB_RoleNameContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneCullingParamProvider
{
    private static FB_SceneCullingParamProvider _Instance;
    public static FB_SceneCullingParamProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneCullingParamProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SceneCullingParam.txt";
    protected FB_SceneCullingParamContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneCullingParam> mData = new Dictionary<int, FB_SceneCullingParam>();
    private List<FB_SceneCullingParam> mListData = new List<FB_SceneCullingParam>();
    public List<FB_SceneCullingParam> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneCullingParam GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneCullingParam);
    }
    public Dictionary<int, FB_SceneCullingParam> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneCullingParamContainer.FB_SceneCullingParamContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneCullingParamContainer.GetRootAsFB_SceneCullingParamContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneShaderParamProvider
{
    private static FB_SceneShaderParamProvider _Instance;
    public static FB_SceneShaderParamProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneShaderParamProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SceneShaderParam.txt";
    protected FB_SceneShaderParamContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneShaderParam> mData = new Dictionary<int, FB_SceneShaderParam>();
    private List<FB_SceneShaderParam> mListData = new List<FB_SceneShaderParam>();
    public List<FB_SceneShaderParam> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneShaderParam GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneShaderParam);
    }
    public Dictionary<int, FB_SceneShaderParam> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneShaderParamContainer.FB_SceneShaderParamContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneShaderParamContainer.GetRootAsFB_SceneShaderParamContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SexDistinctionProvider
{
    private static FB_SexDistinctionProvider _Instance;
    public static FB_SexDistinctionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SexDistinctionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SexDistinction.txt";
    protected FB_SexDistinctionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SexDistinction> mData = new Dictionary<int, FB_SexDistinction>();
    private List<FB_SexDistinction> mListData = new List<FB_SexDistinction>();
    public List<FB_SexDistinction> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SexDistinction GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SexDistinction);
    }
    public Dictionary<int, FB_SexDistinction> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SexDistinctionContainer.FB_SexDistinctionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SexDistinctionContainer.GetRootAsFB_SexDistinctionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShakeCameraProvider
{
    private static FB_ShakeCameraProvider _Instance;
    public static FB_ShakeCameraProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShakeCameraProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShakeCamera.txt";
    protected FB_ShakeCameraContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShakeCamera> mData = new Dictionary<int, FB_ShakeCamera>();
    private List<FB_ShakeCamera> mListData = new List<FB_ShakeCamera>();
    public List<FB_ShakeCamera> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShakeCamera GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShakeCamera);
    }
    public Dictionary<int, FB_ShakeCamera> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShakeCameraContainer.FB_ShakeCameraContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShakeCameraContainer.GetRootAsFB_ShakeCameraContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangYouLeChangProvider
{
    private static FB_ShenWangYouLeChangProvider _Instance;
    public static FB_ShenWangYouLeChangProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangYouLeChangProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShenWangYouLeChang.txt";
    protected FB_ShenWangYouLeChangContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangYouLeChang> mData = new Dictionary<int, FB_ShenWangYouLeChang>();
    private List<FB_ShenWangYouLeChang> mListData = new List<FB_ShenWangYouLeChang>();
    public List<FB_ShenWangYouLeChang> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangYouLeChang GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangYouLeChang);
    }
    public Dictionary<int, FB_ShenWangYouLeChang> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangYouLeChangContainer.FB_ShenWangYouLeChangContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangYouLeChangContainer.GetRootAsFB_ShenWangYouLeChangContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaCSChapterProvider
{
    private static FB_ShenWangZhanJiaCSChapterProvider _Instance;
    public static FB_ShenWangZhanJiaCSChapterProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaCSChapterProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShenWangZhanJiaCSChapter.txt";
    protected FB_ShenWangZhanJiaCSChapterContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaCSChapter> mData = new Dictionary<int, FB_ShenWangZhanJiaCSChapter>();
    private List<FB_ShenWangZhanJiaCSChapter> mListData = new List<FB_ShenWangZhanJiaCSChapter>();
    public List<FB_ShenWangZhanJiaCSChapter> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaCSChapter GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaCSChapter);
    }
    public Dictionary<int, FB_ShenWangZhanJiaCSChapter> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaCSChapterContainer.FB_ShenWangZhanJiaCSChapterContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaCSChapterContainer.GetRootAsFB_ShenWangZhanJiaCSChapterContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenYuRankBaseProvider
{
    private static FB_ShenYuRankBaseProvider _Instance;
    public static FB_ShenYuRankBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenYuRankBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShenYuRankBase.txt";
    protected FB_ShenYuRankBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenYuRankBase> mData = new Dictionary<int, FB_ShenYuRankBase>();
    private List<FB_ShenYuRankBase> mListData = new List<FB_ShenYuRankBase>();
    public List<FB_ShenYuRankBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenYuRankBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenYuRankBase);
    }
    public Dictionary<int, FB_ShenYuRankBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenYuRankBaseContainer.FB_ShenYuRankBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenYuRankBaseContainer.GetRootAsFB_ShenYuRankBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShieldingSymbolProvider
{
    private static FB_ShieldingSymbolProvider _Instance;
    public static FB_ShieldingSymbolProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShieldingSymbolProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShieldingSymbol.txt";
    protected FB_ShieldingSymbolContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShieldingSymbol> mData = new Dictionary<int, FB_ShieldingSymbol>();
    private List<FB_ShieldingSymbol> mListData = new List<FB_ShieldingSymbol>();
    public List<FB_ShieldingSymbol> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShieldingSymbol GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShieldingSymbol);
    }
    public Dictionary<int, FB_ShieldingSymbol> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShieldingSymbolContainer.FB_ShieldingSymbolContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShieldingSymbolContainer.GetRootAsFB_ShieldingSymbolContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShieldStringProvider
{
    private static FB_ShieldStringProvider _Instance;
    public static FB_ShieldStringProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShieldStringProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShieldString.txt";
    protected FB_ShieldStringContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShieldString> mData = new Dictionary<int, FB_ShieldString>();
    private List<FB_ShieldString> mListData = new List<FB_ShieldString>();
    public List<FB_ShieldString> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShieldString GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShieldString);
    }
    public Dictionary<int, FB_ShieldString> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShieldStringContainer.FB_ShieldStringContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShieldStringContainer.GetRootAsFB_ShieldStringContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShopClassProvider
{
    private static FB_ShopClassProvider _Instance;
    public static FB_ShopClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShopClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/ShopClass.txt";
    protected FB_ShopClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShopClass> mData = new Dictionary<int, FB_ShopClass>();
    private List<FB_ShopClass> mListData = new List<FB_ShopClass>();
    public List<FB_ShopClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShopClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShopClass);
    }
    public Dictionary<int, FB_ShopClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShopClassContainer.FB_ShopClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShopClassContainer.GetRootAsFB_ShopClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillCamAnimProvider
{
    private static FB_SkillCamAnimProvider _Instance;
    public static FB_SkillCamAnimProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillCamAnimProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SkillCamAnim.txt";
    protected FB_SkillCamAnimContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillCamAnim> mData = new Dictionary<int, FB_SkillCamAnim>();
    private List<FB_SkillCamAnim> mListData = new List<FB_SkillCamAnim>();
    public List<FB_SkillCamAnim> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillCamAnim GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillCamAnim);
    }
    public Dictionary<int, FB_SkillCamAnim> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillCamAnimContainer.FB_SkillCamAnimContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillCamAnimContainer.GetRootAsFB_SkillCamAnimContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillDemonstrationProvider
{
    private static FB_SkillDemonstrationProvider _Instance;
    public static FB_SkillDemonstrationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillDemonstrationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SkillDemonstration.txt";
    protected FB_SkillDemonstrationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillDemonstration> mData = new Dictionary<int, FB_SkillDemonstration>();
    private List<FB_SkillDemonstration> mListData = new List<FB_SkillDemonstration>();
    public List<FB_SkillDemonstration> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillDemonstration GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillDemonstration);
    }
    public Dictionary<int, FB_SkillDemonstration> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillDemonstrationContainer.FB_SkillDemonstrationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillDemonstrationContainer.GetRootAsFB_SkillDemonstrationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SoundsProvider
{
    private static FB_SoundsProvider _Instance;
    public static FB_SoundsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SoundsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/Sounds.txt";
    protected FB_SoundsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Sounds> mData = new Dictionary<int, FB_Sounds>();
    private List<FB_Sounds> mListData = new List<FB_Sounds>();
    public List<FB_Sounds> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Sounds GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Sounds);
    }
    public Dictionary<int, FB_Sounds> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SoundsContainer.FB_SoundsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SoundsContainer.GetRootAsFB_SoundsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarSoulPaoPaoProvider
{
    private static FB_StarSoulPaoPaoProvider _Instance;
    public static FB_StarSoulPaoPaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarSoulPaoPaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StarSoulPaoPao.txt";
    protected FB_StarSoulPaoPaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarSoulPaoPao> mData = new Dictionary<int, FB_StarSoulPaoPao>();
    private List<FB_StarSoulPaoPao> mListData = new List<FB_StarSoulPaoPao>();
    public List<FB_StarSoulPaoPao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarSoulPaoPao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarSoulPaoPao);
    }
    public Dictionary<int, FB_StarSoulPaoPao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarSoulPaoPaoContainer.FB_StarSoulPaoPaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarSoulPaoPaoContainer.GetRootAsFB_StarSoulPaoPaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarWishRewardShowProvider
{
    private static FB_StarWishRewardShowProvider _Instance;
    public static FB_StarWishRewardShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarWishRewardShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StarWishRewardShow.txt";
    protected FB_StarWishRewardShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarWishRewardShow> mData = new Dictionary<int, FB_StarWishRewardShow>();
    private List<FB_StarWishRewardShow> mListData = new List<FB_StarWishRewardShow>();
    public List<FB_StarWishRewardShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarWishRewardShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarWishRewardShow);
    }
    public Dictionary<int, FB_StarWishRewardShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarWishRewardShowContainer.FB_StarWishRewardShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarWishRewardShowContainer.GetRootAsFB_StarWishRewardShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ModelTypeId))
            {
                mData.Add(item.ModelTypeId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StoryAnimationProvider
{
    private static FB_StoryAnimationProvider _Instance;
    public static FB_StoryAnimationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StoryAnimationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StoryAnimation.txt";
    protected FB_StoryAnimationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StoryAnimation> mData = new Dictionary<int, FB_StoryAnimation>();
    private List<FB_StoryAnimation> mListData = new List<FB_StoryAnimation>();
    public List<FB_StoryAnimation> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StoryAnimation GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StoryAnimation);
    }
    public Dictionary<int, FB_StoryAnimation> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StoryAnimationContainer.FB_StoryAnimationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StoryAnimationContainer.GetRootAsFB_StoryAnimationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StoryPlayerEffectProvider
{
    private static FB_StoryPlayerEffectProvider _Instance;
    public static FB_StoryPlayerEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StoryPlayerEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StoryPlayerEffect.txt";
    protected FB_StoryPlayerEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StoryPlayerEffect> mData = new Dictionary<int, FB_StoryPlayerEffect>();
    private List<FB_StoryPlayerEffect> mListData = new List<FB_StoryPlayerEffect>();
    public List<FB_StoryPlayerEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StoryPlayerEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StoryPlayerEffect);
    }
    public Dictionary<int, FB_StoryPlayerEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StoryPlayerEffectContainer.FB_StoryPlayerEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StoryPlayerEffectContainer.GetRootAsFB_StoryPlayerEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrDictionaryProvider
{
    private static FB_StrDictionaryProvider _Instance;
    public static FB_StrDictionaryProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrDictionaryProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StrDictionary.txt";
    protected FB_StrDictionaryContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrDictionary> mData = new Dictionary<int, FB_StrDictionary>();
    private List<FB_StrDictionary> mListData = new List<FB_StrDictionary>();
    public List<FB_StrDictionary> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrDictionary GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrDictionary);
    }
    public Dictionary<int, FB_StrDictionary> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrDictionaryContainer.FB_StrDictionaryContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrDictionaryContainer.GetRootAsFB_StrDictionaryContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrengthenNeedEquipOrExpProvider
{
    private static FB_StrengthenNeedEquipOrExpProvider _Instance;
    public static FB_StrengthenNeedEquipOrExpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrengthenNeedEquipOrExpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StrengthenNeedEquipOrExp.txt";
    protected FB_StrengthenNeedEquipOrExpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrengthenNeedEquipOrExp> mData = new Dictionary<int, FB_StrengthenNeedEquipOrExp>();
    private List<FB_StrengthenNeedEquipOrExp> mListData = new List<FB_StrengthenNeedEquipOrExp>();
    public List<FB_StrengthenNeedEquipOrExp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrengthenNeedEquipOrExp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrengthenNeedEquipOrExp);
    }
    public Dictionary<int, FB_StrengthenNeedEquipOrExp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrengthenNeedEquipOrExpContainer.FB_StrengthenNeedEquipOrExpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrengthenNeedEquipOrExpContainer.GetRootAsFB_StrengthenNeedEquipOrExpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrengthenNeedResourceProvider
{
    private static FB_StrengthenNeedResourceProvider _Instance;
    public static FB_StrengthenNeedResourceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrengthenNeedResourceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StrengthenNeedResource.txt";
    protected FB_StrengthenNeedResourceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrengthenNeedResource> mData = new Dictionary<int, FB_StrengthenNeedResource>();
    private List<FB_StrengthenNeedResource> mListData = new List<FB_StrengthenNeedResource>();
    public List<FB_StrengthenNeedResource> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrengthenNeedResource GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrengthenNeedResource);
    }
    public Dictionary<int, FB_StrengthenNeedResource> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrengthenNeedResourceContainer.FB_StrengthenNeedResourceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrengthenNeedResourceContainer.GetRootAsFB_StrengthenNeedResourceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrengthenRateProvider
{
    private static FB_StrengthenRateProvider _Instance;
    public static FB_StrengthenRateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrengthenRateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StrengthenRate.txt";
    protected FB_StrengthenRateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrengthenRate> mData = new Dictionary<int, FB_StrengthenRate>();
    private List<FB_StrengthenRate> mListData = new List<FB_StrengthenRate>();
    public List<FB_StrengthenRate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrengthenRate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrengthenRate);
    }
    public Dictionary<int, FB_StrengthenRate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrengthenRateContainer.FB_StrengthenRateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrengthenRateContainer.GetRootAsFB_StrengthenRateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrLoadingProvider
{
    private static FB_StrLoadingProvider _Instance;
    public static FB_StrLoadingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrLoadingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/StrLoading.txt";
    protected FB_StrLoadingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrLoading> mData = new Dictionary<int, FB_StrLoading>();
    private List<FB_StrLoading> mListData = new List<FB_StrLoading>();
    public List<FB_StrLoading> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrLoading GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrLoading);
    }
    public Dictionary<int, FB_StrLoading> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrLoadingContainer.FB_StrLoadingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrLoadingContainer.GetRootAsFB_StrLoadingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHFestivalDicProvider
{
    private static FB_SYHFestivalDicProvider _Instance;
    public static FB_SYHFestivalDicProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHFestivalDicProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SYHFestivalDic.txt";
    protected FB_SYHFestivalDicContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHFestivalDic> mData = new Dictionary<int, FB_SYHFestivalDic>();
    private List<FB_SYHFestivalDic> mListData = new List<FB_SYHFestivalDic>();
    public List<FB_SYHFestivalDic> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHFestivalDic GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHFestivalDic);
    }
    public Dictionary<int, FB_SYHFestivalDic> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHFestivalDicContainer.FB_SYHFestivalDicContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHFestivalDicContainer.GetRootAsFB_SYHFestivalDicContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHZaDanPingGuoShowProvider
{
    private static FB_SYHZaDanPingGuoShowProvider _Instance;
    public static FB_SYHZaDanPingGuoShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHZaDanPingGuoShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/SYHZaDanPingGuoShow.txt";
    protected FB_SYHZaDanPingGuoShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHZaDanPingGuoShow> mData = new Dictionary<int, FB_SYHZaDanPingGuoShow>();
    private List<FB_SYHZaDanPingGuoShow> mListData = new List<FB_SYHZaDanPingGuoShow>();
    public List<FB_SYHZaDanPingGuoShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHZaDanPingGuoShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHZaDanPingGuoShow);
    }
    public Dictionary<int, FB_SYHZaDanPingGuoShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHZaDanPingGuoShowContainer.FB_SYHZaDanPingGuoShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHZaDanPingGuoShowContainer.GetRootAsFB_SYHZaDanPingGuoShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TaoZhuangModelProvider
{
    private static FB_TaoZhuangModelProvider _Instance;
    public static FB_TaoZhuangModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TaoZhuangModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/TaoZhuangModel.txt";
    protected FB_TaoZhuangModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TaoZhuangModel> mData = new Dictionary<int, FB_TaoZhuangModel>();
    private List<FB_TaoZhuangModel> mListData = new List<FB_TaoZhuangModel>();
    public List<FB_TaoZhuangModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TaoZhuangModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TaoZhuangModel);
    }
    public Dictionary<int, FB_TaoZhuangModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TaoZhuangModelContainer.FB_TaoZhuangModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TaoZhuangModelContainer.GetRootAsFB_TaoZhuangModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TeamPostionProvider
{
    private static FB_TeamPostionProvider _Instance;
    public static FB_TeamPostionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TeamPostionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/TeamPostion.txt";
    protected FB_TeamPostionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TeamPostion> mData = new Dictionary<int, FB_TeamPostion>();
    private List<FB_TeamPostion> mListData = new List<FB_TeamPostion>();
    public List<FB_TeamPostion> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TeamPostion GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TeamPostion);
    }
    public Dictionary<int, FB_TeamPostion> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TeamPostionContainer.FB_TeamPostionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TeamPostionContainer.GetRootAsFB_TeamPostionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TipsEquipListProvider
{
    private static FB_TipsEquipListProvider _Instance;
    public static FB_TipsEquipListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TipsEquipListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/TipsEquipList.txt";
    protected FB_TipsEquipListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TipsEquipList> mData = new Dictionary<int, FB_TipsEquipList>();
    private List<FB_TipsEquipList> mListData = new List<FB_TipsEquipList>();
    public List<FB_TipsEquipList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TipsEquipList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TipsEquipList);
    }
    public Dictionary<int, FB_TipsEquipList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TipsEquipListContainer.FB_TipsEquipListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TipsEquipListContainer.GetRootAsFB_TipsEquipListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TipsPreviewProvider
{
    private static FB_TipsPreviewProvider _Instance;
    public static FB_TipsPreviewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TipsPreviewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/TipsPreview.txt";
    protected FB_TipsPreviewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TipsPreview> mData = new Dictionary<int, FB_TipsPreview>();
    private List<FB_TipsPreview> mListData = new List<FB_TipsPreview>();
    public List<FB_TipsPreview> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TipsPreview GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TipsPreview);
    }
    public Dictionary<int, FB_TipsPreview> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TipsPreviewContainer.FB_TipsPreviewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TipsPreviewContainer.GetRootAsFB_TipsPreviewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TopRightMenuProvider
{
    private static FB_TopRightMenuProvider _Instance;
    public static FB_TopRightMenuProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TopRightMenuProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/TopRightMenu.txt";
    protected FB_TopRightMenuContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TopRightMenu> mData = new Dictionary<int, FB_TopRightMenu>();
    private List<FB_TopRightMenu> mListData = new List<FB_TopRightMenu>();
    public List<FB_TopRightMenu> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TopRightMenu GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TopRightMenu);
    }
    public Dictionary<int, FB_TopRightMenu> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TopRightMenuContainer.FB_TopRightMenuContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TopRightMenuContainer.GetRootAsFB_TopRightMenuContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_UIInfoProvider
{
    private static FB_UIInfoProvider _Instance;
    public static FB_UIInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_UIInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/UIInfo.txt";
    protected FB_UIInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_UIInfo> mData = new Dictionary<int, FB_UIInfo>();
    private List<FB_UIInfo> mListData = new List<FB_UIInfo>();
    public List<FB_UIInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_UIInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_UIInfo);
    }
    public Dictionary<int, FB_UIInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_UIInfoContainer.FB_UIInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_UIInfoContainer.GetRootAsFB_UIInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_UIModelProvider
{
    private static FB_UIModelProvider _Instance;
    public static FB_UIModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_UIModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/UIModel.txt";
    protected FB_UIModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_UIModel> mData = new Dictionary<int, FB_UIModel>();
    private List<FB_UIModel> mListData = new List<FB_UIModel>();
    public List<FB_UIModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_UIModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_UIModel);
    }
    public Dictionary<int, FB_UIModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_UIModelContainer.FB_UIModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_UIModelContainer.GetRootAsFB_UIModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_UISpecialHideProvider
{
    private static FB_UISpecialHideProvider _Instance;
    public static FB_UISpecialHideProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_UISpecialHideProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/UISpecialHide.txt";
    protected FB_UISpecialHideContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_UISpecialHide> mData = new Dictionary<int, FB_UISpecialHide>();
    private List<FB_UISpecialHide> mListData = new List<FB_UISpecialHide>();
    public List<FB_UISpecialHide> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_UISpecialHide GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_UISpecialHide);
    }
    public Dictionary<int, FB_UISpecialHide> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_UISpecialHideContainer.FB_UISpecialHideContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_UISpecialHideContainer.GetRootAsFB_UISpecialHideContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_UISubPanelPathProvider
{
    private static FB_UISubPanelPathProvider _Instance;
    public static FB_UISubPanelPathProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_UISubPanelPathProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/UISubPanelPath.txt";
    protected FB_UISubPanelPathContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_UISubPanelPath> mData = new Dictionary<int, FB_UISubPanelPath>();
    private List<FB_UISubPanelPath> mListData = new List<FB_UISubPanelPath>();
    public List<FB_UISubPanelPath> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_UISubPanelPath GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_UISubPanelPath);
    }
    public Dictionary<int, FB_UISubPanelPath> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_UISubPanelPathContainer.FB_UISubPanelPathContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_UISubPanelPathContainer.GetRootAsFB_UISubPanelPathContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_UITextProvider
{
    private static FB_UITextProvider _Instance;
    public static FB_UITextProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_UITextProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/UIText.txt";
    protected FB_UITextContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_UIText> mData = new Dictionary<int, FB_UIText>();
    private List<FB_UIText> mListData = new List<FB_UIText>();
    public List<FB_UIText> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_UIText GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_UIText);
    }
    public Dictionary<int, FB_UIText> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_UITextContainer.FB_UITextContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_UITextContainer.GetRootAsFB_UITextContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetModelProvider
{
    private static FB_WarPetModelProvider _Instance;
    public static FB_WarPetModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WarPetModel.txt";
    protected FB_WarPetModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetModel> mData = new Dictionary<int, FB_WarPetModel>();
    private List<FB_WarPetModel> mListData = new List<FB_WarPetModel>();
    public List<FB_WarPetModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetModel);
    }
    public Dictionary<int, FB_WarPetModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetModelContainer.FB_WarPetModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetModelContainer.GetRootAsFB_WarPetModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WeaponAnimationProvider
{
    private static FB_WeaponAnimationProvider _Instance;
    public static FB_WeaponAnimationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WeaponAnimationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WeaponAnimation.txt";
    protected FB_WeaponAnimationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WeaponAnimation> mData = new Dictionary<int, FB_WeaponAnimation>();
    private List<FB_WeaponAnimation> mListData = new List<FB_WeaponAnimation>();
    public List<FB_WeaponAnimation> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WeaponAnimation GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WeaponAnimation);
    }
    public Dictionary<int, FB_WeaponAnimation> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WeaponAnimationContainer.FB_WeaponAnimationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WeaponAnimationContainer.GetRootAsFB_WeaponAnimationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.AnimID))
            {
                mData.Add(item.AnimID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WeaponModelProvider
{
    private static FB_WeaponModelProvider _Instance;
    public static FB_WeaponModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WeaponModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WeaponModel.txt";
    protected FB_WeaponModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WeaponModel> mData = new Dictionary<int, FB_WeaponModel>();
    private List<FB_WeaponModel> mListData = new List<FB_WeaponModel>();
    public List<FB_WeaponModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WeaponModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WeaponModel);
    }
    public Dictionary<int, FB_WeaponModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WeaponModelContainer.FB_WeaponModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WeaponModelContainer.GetRootAsFB_WeaponModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WeekPlanProvider
{
    private static FB_WeekPlanProvider _Instance;
    public static FB_WeekPlanProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WeekPlanProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WeekPlan.txt";
    protected FB_WeekPlanContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WeekPlan> mData = new Dictionary<int, FB_WeekPlan>();
    private List<FB_WeekPlan> mListData = new List<FB_WeekPlan>();
    public List<FB_WeekPlan> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WeekPlan GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WeekPlan);
    }
    public Dictionary<int, FB_WeekPlan> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WeekPlanContainer.FB_WeekPlanContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WeekPlanContainer.GetRootAsFB_WeekPlanContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WingExtraModelPointProvider
{
    private static FB_WingExtraModelPointProvider _Instance;
    public static FB_WingExtraModelPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WingExtraModelPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WingExtraModelPoint.txt";
    protected FB_WingExtraModelPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WingExtraModelPoint> mData = new Dictionary<int, FB_WingExtraModelPoint>();
    private List<FB_WingExtraModelPoint> mListData = new List<FB_WingExtraModelPoint>();
    public List<FB_WingExtraModelPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WingExtraModelPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WingExtraModelPoint);
    }
    public Dictionary<int, FB_WingExtraModelPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WingExtraModelPointContainer.FB_WingExtraModelPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WingExtraModelPointContainer.GetRootAsFB_WingExtraModelPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WorldCupCountryProvider
{
    private static FB_WorldCupCountryProvider _Instance;
    public static FB_WorldCupCountryProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WorldCupCountryProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/WorldCupCountry.txt";
    protected FB_WorldCupCountryContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WorldCupCountry> mData = new Dictionary<int, FB_WorldCupCountry>();
    private List<FB_WorldCupCountry> mListData = new List<FB_WorldCupCountry>();
    public List<FB_WorldCupCountry> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WorldCupCountry GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WorldCupCountry);
    }
    public Dictionary<int, FB_WorldCupCountry> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WorldCupCountryContainer.FB_WorldCupCountryContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WorldCupCountryContainer.GetRootAsFB_WorldCupCountryContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YingYanItemProvider
{
    private static FB_YingYanItemProvider _Instance;
    public static FB_YingYanItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YingYanItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Client/YingYanItem.txt";
    protected FB_YingYanItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YingYanItem> mData = new Dictionary<int, FB_YingYanItem>();
    private List<FB_YingYanItem> mListData = new List<FB_YingYanItem>();
    public List<FB_YingYanItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YingYanItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YingYanItem);
    }
    public Dictionary<int, FB_YingYanItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YingYanItemContainer.FB_YingYanItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YingYanItemContainer.GetRootAsFB_YingYanItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AchievementBaseProvider
{
    private static FB_AchievementBaseProvider _Instance;
    public static FB_AchievementBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AchievementBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AchievementBase.txt";
    protected FB_AchievementBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AchievementBase> mData = new Dictionary<int, FB_AchievementBase>();
    private List<FB_AchievementBase> mListData = new List<FB_AchievementBase>();
    public List<FB_AchievementBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AchievementBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AchievementBase);
    }
    public Dictionary<int, FB_AchievementBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AchievementBaseContainer.FB_AchievementBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AchievementBaseContainer.GetRootAsFB_AchievementBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AchievementClassProvider
{
    private static FB_AchievementClassProvider _Instance;
    public static FB_AchievementClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AchievementClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AchievementClass.txt";
    protected FB_AchievementClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AchievementClass> mData = new Dictionary<int, FB_AchievementClass>();
    private List<FB_AchievementClass> mListData = new List<FB_AchievementClass>();
    public List<FB_AchievementClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AchievementClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AchievementClass);
    }
    public Dictionary<int, FB_AchievementClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AchievementClassContainer.FB_AchievementClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AchievementClassContainer.GetRootAsFB_AchievementClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AchievementSubClassProvider
{
    private static FB_AchievementSubClassProvider _Instance;
    public static FB_AchievementSubClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AchievementSubClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AchievementSubClass.txt";
    protected FB_AchievementSubClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AchievementSubClass> mData = new Dictionary<int, FB_AchievementSubClass>();
    private List<FB_AchievementSubClass> mListData = new List<FB_AchievementSubClass>();
    public List<FB_AchievementSubClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AchievementSubClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AchievementSubClass);
    }
    public Dictionary<int, FB_AchievementSubClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AchievementSubClassContainer.FB_AchievementSubClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AchievementSubClassContainer.GetRootAsFB_AchievementSubClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityAncientSealProessRewardProvider
{
    private static FB_ActivityAncientSealProessRewardProvider _Instance;
    public static FB_ActivityAncientSealProessRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityAncientSealProessRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityAncientSealProessReward.txt";
    protected FB_ActivityAncientSealProessRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityAncientSealProessReward> mData = new Dictionary<int, FB_ActivityAncientSealProessReward>();
    private List<FB_ActivityAncientSealProessReward> mListData = new List<FB_ActivityAncientSealProessReward>();
    public List<FB_ActivityAncientSealProessReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityAncientSealProessReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityAncientSealProessReward);
    }
    public Dictionary<int, FB_ActivityAncientSealProessReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityAncientSealProessRewardContainer.FB_ActivityAncientSealProessRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityAncientSealProessRewardContainer.GetRootAsFB_ActivityAncientSealProessRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityAncientSealSearchProvider
{
    private static FB_ActivityAncientSealSearchProvider _Instance;
    public static FB_ActivityAncientSealSearchProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityAncientSealSearchProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityAncientSealSearch.txt";
    protected FB_ActivityAncientSealSearchContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityAncientSealSearch> mData = new Dictionary<int, FB_ActivityAncientSealSearch>();
    private List<FB_ActivityAncientSealSearch> mListData = new List<FB_ActivityAncientSealSearch>();
    public List<FB_ActivityAncientSealSearch> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityAncientSealSearch GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityAncientSealSearch);
    }
    public Dictionary<int, FB_ActivityAncientSealSearch> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityAncientSealSearchContainer.FB_ActivityAncientSealSearchContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityAncientSealSearchContainer.GetRootAsFB_ActivityAncientSealSearchContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityBaseProvider
{
    private static FB_ActivityBaseProvider _Instance;
    public static FB_ActivityBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityBase.txt";
    protected FB_ActivityBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityBase> mData = new Dictionary<int, FB_ActivityBase>();
    private List<FB_ActivityBase> mListData = new List<FB_ActivityBase>();
    public List<FB_ActivityBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityBase);
    }
    public Dictionary<int, FB_ActivityBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityBaseContainer.FB_ActivityBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityBaseContainer.GetRootAsFB_ActivityBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityBonusProvider
{
    private static FB_ActivityBonusProvider _Instance;
    public static FB_ActivityBonusProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityBonusProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityBonus.txt";
    protected FB_ActivityBonusContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityBonus> mData = new Dictionary<int, FB_ActivityBonus>();
    private List<FB_ActivityBonus> mListData = new List<FB_ActivityBonus>();
    public List<FB_ActivityBonus> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityBonus GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityBonus);
    }
    public Dictionary<int, FB_ActivityBonus> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityBonusContainer.FB_ActivityBonusContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityBonusContainer.GetRootAsFB_ActivityBonusContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityChickenBaseProvider
{
    private static FB_ActivityChickenBaseProvider _Instance;
    public static FB_ActivityChickenBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityChickenBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityChickenBase.txt";
    protected FB_ActivityChickenBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityChickenBase> mData = new Dictionary<int, FB_ActivityChickenBase>();
    private List<FB_ActivityChickenBase> mListData = new List<FB_ActivityChickenBase>();
    public List<FB_ActivityChickenBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityChickenBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityChickenBase);
    }
    public Dictionary<int, FB_ActivityChickenBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityChickenBaseContainer.FB_ActivityChickenBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityChickenBaseContainer.GetRootAsFB_ActivityChickenBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityChickenGiftProvider
{
    private static FB_ActivityChickenGiftProvider _Instance;
    public static FB_ActivityChickenGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityChickenGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityChickenGift.txt";
    protected FB_ActivityChickenGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityChickenGift> mData = new Dictionary<int, FB_ActivityChickenGift>();
    private List<FB_ActivityChickenGift> mListData = new List<FB_ActivityChickenGift>();
    public List<FB_ActivityChickenGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityChickenGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityChickenGift);
    }
    public Dictionary<int, FB_ActivityChickenGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityChickenGiftContainer.FB_ActivityChickenGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityChickenGiftContainer.GetRootAsFB_ActivityChickenGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityChickenMissionProvider
{
    private static FB_ActivityChickenMissionProvider _Instance;
    public static FB_ActivityChickenMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityChickenMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityChickenMission.txt";
    protected FB_ActivityChickenMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityChickenMission> mData = new Dictionary<int, FB_ActivityChickenMission>();
    private List<FB_ActivityChickenMission> mListData = new List<FB_ActivityChickenMission>();
    public List<FB_ActivityChickenMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityChickenMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityChickenMission);
    }
    public Dictionary<int, FB_ActivityChickenMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityChickenMissionContainer.FB_ActivityChickenMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityChickenMissionContainer.GetRootAsFB_ActivityChickenMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityChickenProessRewardProvider
{
    private static FB_ActivityChickenProessRewardProvider _Instance;
    public static FB_ActivityChickenProessRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityChickenProessRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityChickenProessReward.txt";
    protected FB_ActivityChickenProessRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityChickenProessReward> mData = new Dictionary<int, FB_ActivityChickenProessReward>();
    private List<FB_ActivityChickenProessReward> mListData = new List<FB_ActivityChickenProessReward>();
    public List<FB_ActivityChickenProessReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityChickenProessReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityChickenProessReward);
    }
    public Dictionary<int, FB_ActivityChickenProessReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityChickenProessRewardContainer.FB_ActivityChickenProessRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityChickenProessRewardContainer.GetRootAsFB_ActivityChickenProessRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityDaZhiGouRewardProvider
{
    private static FB_ActivityDaZhiGouRewardProvider _Instance;
    public static FB_ActivityDaZhiGouRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityDaZhiGouRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityDaZhiGouReward.txt";
    protected FB_ActivityDaZhiGouRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityDaZhiGouReward> mData = new Dictionary<int, FB_ActivityDaZhiGouReward>();
    private List<FB_ActivityDaZhiGouReward> mListData = new List<FB_ActivityDaZhiGouReward>();
    public List<FB_ActivityDaZhiGouReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityDaZhiGouReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityDaZhiGouReward);
    }
    public Dictionary<int, FB_ActivityDaZhiGouReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityDaZhiGouRewardContainer.FB_ActivityDaZhiGouRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityDaZhiGouRewardContainer.GetRootAsFB_ActivityDaZhiGouRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityObjectivesListProvider
{
    private static FB_ActivityObjectivesListProvider _Instance;
    public static FB_ActivityObjectivesListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityObjectivesListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityObjectivesList.txt";
    protected FB_ActivityObjectivesListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityObjectivesList> mData = new Dictionary<int, FB_ActivityObjectivesList>();
    private List<FB_ActivityObjectivesList> mListData = new List<FB_ActivityObjectivesList>();
    public List<FB_ActivityObjectivesList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityObjectivesList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityObjectivesList);
    }
    public Dictionary<int, FB_ActivityObjectivesList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityObjectivesListContainer.FB_ActivityObjectivesListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityObjectivesListContainer.GetRootAsFB_ActivityObjectivesListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityPointProvider
{
    private static FB_ActivityPointProvider _Instance;
    public static FB_ActivityPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityPoint.txt";
    protected FB_ActivityPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityPoint> mData = new Dictionary<int, FB_ActivityPoint>();
    private List<FB_ActivityPoint> mListData = new List<FB_ActivityPoint>();
    public List<FB_ActivityPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityPoint);
    }
    public Dictionary<int, FB_ActivityPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityPointContainer.FB_ActivityPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityPointContainer.GetRootAsFB_ActivityPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityPrayProvider
{
    private static FB_ActivityPrayProvider _Instance;
    public static FB_ActivityPrayProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityPrayProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityPray.txt";
    protected FB_ActivityPrayContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityPray> mData = new Dictionary<int, FB_ActivityPray>();
    private List<FB_ActivityPray> mListData = new List<FB_ActivityPray>();
    public List<FB_ActivityPray> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityPray GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityPray);
    }
    public Dictionary<int, FB_ActivityPray> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityPrayContainer.FB_ActivityPrayContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityPrayContainer.GetRootAsFB_ActivityPrayContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityPrayShopProvider
{
    private static FB_ActivityPrayShopProvider _Instance;
    public static FB_ActivityPrayShopProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityPrayShopProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityPrayShop.txt";
    protected FB_ActivityPrayShopContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityPrayShop> mData = new Dictionary<int, FB_ActivityPrayShop>();
    private List<FB_ActivityPrayShop> mListData = new List<FB_ActivityPrayShop>();
    public List<FB_ActivityPrayShop> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityPrayShop GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityPrayShop);
    }
    public Dictionary<int, FB_ActivityPrayShop> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityPrayShopContainer.FB_ActivityPrayShopContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityPrayShopContainer.GetRootAsFB_ActivityPrayShopContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityQuestionBaseProvider
{
    private static FB_ActivityQuestionBaseProvider _Instance;
    public static FB_ActivityQuestionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityQuestionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityQuestionBase.txt";
    protected FB_ActivityQuestionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityQuestionBase> mData = new Dictionary<int, FB_ActivityQuestionBase>();
    private List<FB_ActivityQuestionBase> mListData = new List<FB_ActivityQuestionBase>();
    public List<FB_ActivityQuestionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityQuestionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityQuestionBase);
    }
    public Dictionary<int, FB_ActivityQuestionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityQuestionBaseContainer.FB_ActivityQuestionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityQuestionBaseContainer.GetRootAsFB_ActivityQuestionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityShowBaseProvider
{
    private static FB_ActivityShowBaseProvider _Instance;
    public static FB_ActivityShowBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityShowBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityShowBase.txt";
    protected FB_ActivityShowBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityShowBase> mData = new Dictionary<int, FB_ActivityShowBase>();
    private List<FB_ActivityShowBase> mListData = new List<FB_ActivityShowBase>();
    public List<FB_ActivityShowBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityShowBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityShowBase);
    }
    public Dictionary<int, FB_ActivityShowBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityShowBaseContainer.FB_ActivityShowBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityShowBaseContainer.GetRootAsFB_ActivityShowBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActivityShowLevelProvider
{
    private static FB_ActivityShowLevelProvider _Instance;
    public static FB_ActivityShowLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActivityShowLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActivityShowLevel.txt";
    protected FB_ActivityShowLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActivityShowLevel> mData = new Dictionary<int, FB_ActivityShowLevel>();
    private List<FB_ActivityShowLevel> mListData = new List<FB_ActivityShowLevel>();
    public List<FB_ActivityShowLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActivityShowLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActivityShowLevel);
    }
    public Dictionary<int, FB_ActivityShowLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActivityShowLevelContainer.FB_ActivityShowLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActivityShowLevelContainer.GetRootAsFB_ActivityShowLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuConfigProvider
{
    private static FB_ActWanGuConfigProvider _Instance;
    public static FB_ActWanGuConfigProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuConfigProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuConfig.txt";
    protected FB_ActWanGuConfigContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuConfig> mData = new Dictionary<int, FB_ActWanGuConfig>();
    private List<FB_ActWanGuConfig> mListData = new List<FB_ActWanGuConfig>();
    public List<FB_ActWanGuConfig> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuConfig GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuConfig);
    }
    public Dictionary<int, FB_ActWanGuConfig> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuConfigContainer.FB_ActWanGuConfigContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuConfigContainer.GetRootAsFB_ActWanGuConfigContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuMissionBaseProvider
{
    private static FB_ActWanGuMissionBaseProvider _Instance;
    public static FB_ActWanGuMissionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuMissionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuMissionBase.txt";
    protected FB_ActWanGuMissionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuMissionBase> mData = new Dictionary<int, FB_ActWanGuMissionBase>();
    private List<FB_ActWanGuMissionBase> mListData = new List<FB_ActWanGuMissionBase>();
    public List<FB_ActWanGuMissionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuMissionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuMissionBase);
    }
    public Dictionary<int, FB_ActWanGuMissionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuMissionBaseContainer.FB_ActWanGuMissionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuMissionBaseContainer.GetRootAsFB_ActWanGuMissionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuMissionClassProvider
{
    private static FB_ActWanGuMissionClassProvider _Instance;
    public static FB_ActWanGuMissionClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuMissionClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuMissionClass.txt";
    protected FB_ActWanGuMissionClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuMissionClass> mData = new Dictionary<int, FB_ActWanGuMissionClass>();
    private List<FB_ActWanGuMissionClass> mListData = new List<FB_ActWanGuMissionClass>();
    public List<FB_ActWanGuMissionClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuMissionClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuMissionClass);
    }
    public Dictionary<int, FB_ActWanGuMissionClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuMissionClassContainer.FB_ActWanGuMissionClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuMissionClassContainer.GetRootAsFB_ActWanGuMissionClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuMissionSubClassProvider
{
    private static FB_ActWanGuMissionSubClassProvider _Instance;
    public static FB_ActWanGuMissionSubClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuMissionSubClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuMissionSubClass.txt";
    protected FB_ActWanGuMissionSubClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuMissionSubClass> mData = new Dictionary<int, FB_ActWanGuMissionSubClass>();
    private List<FB_ActWanGuMissionSubClass> mListData = new List<FB_ActWanGuMissionSubClass>();
    public List<FB_ActWanGuMissionSubClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuMissionSubClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuMissionSubClass);
    }
    public Dictionary<int, FB_ActWanGuMissionSubClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuMissionSubClassContainer.FB_ActWanGuMissionSubClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuMissionSubClassContainer.GetRootAsFB_ActWanGuMissionSubClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuPropLevelBaseProvider
{
    private static FB_ActWanGuPropLevelBaseProvider _Instance;
    public static FB_ActWanGuPropLevelBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuPropLevelBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuPropLevelBase.txt";
    protected FB_ActWanGuPropLevelBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuPropLevelBase> mData = new Dictionary<int, FB_ActWanGuPropLevelBase>();
    private List<FB_ActWanGuPropLevelBase> mListData = new List<FB_ActWanGuPropLevelBase>();
    public List<FB_ActWanGuPropLevelBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuPropLevelBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuPropLevelBase);
    }
    public Dictionary<int, FB_ActWanGuPropLevelBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuPropLevelBaseContainer.FB_ActWanGuPropLevelBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuPropLevelBaseContainer.GetRootAsFB_ActWanGuPropLevelBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActWanGuPropLevelRewardProvider
{
    private static FB_ActWanGuPropLevelRewardProvider _Instance;
    public static FB_ActWanGuPropLevelRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActWanGuPropLevelRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActWanGuPropLevelReward.txt";
    protected FB_ActWanGuPropLevelRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActWanGuPropLevelReward> mData = new Dictionary<int, FB_ActWanGuPropLevelReward>();
    private List<FB_ActWanGuPropLevelReward> mListData = new List<FB_ActWanGuPropLevelReward>();
    public List<FB_ActWanGuPropLevelReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActWanGuPropLevelReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActWanGuPropLevelReward);
    }
    public Dictionary<int, FB_ActWanGuPropLevelReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActWanGuPropLevelRewardContainer.FB_ActWanGuPropLevelRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActWanGuPropLevelRewardContainer.GetRootAsFB_ActWanGuPropLevelRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ActZhuTianBaoLunProvider
{
    private static FB_ActZhuTianBaoLunProvider _Instance;
    public static FB_ActZhuTianBaoLunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ActZhuTianBaoLunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ActZhuTianBaoLun.txt";
    protected FB_ActZhuTianBaoLunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ActZhuTianBaoLun> mData = new Dictionary<int, FB_ActZhuTianBaoLun>();
    private List<FB_ActZhuTianBaoLun> mListData = new List<FB_ActZhuTianBaoLun>();
    public List<FB_ActZhuTianBaoLun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ActZhuTianBaoLun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ActZhuTianBaoLun);
    }
    public Dictionary<int, FB_ActZhuTianBaoLun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ActZhuTianBaoLunContainer.FB_ActZhuTianBaoLunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ActZhuTianBaoLunContainer.GetRootAsFB_ActZhuTianBaoLunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AdvancedBaseProvider
{
    private static FB_AdvancedBaseProvider _Instance;
    public static FB_AdvancedBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AdvancedBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AdvancedBase.txt";
    protected FB_AdvancedBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AdvancedBase> mData = new Dictionary<int, FB_AdvancedBase>();
    private List<FB_AdvancedBase> mListData = new List<FB_AdvancedBase>();
    public List<FB_AdvancedBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AdvancedBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AdvancedBase);
    }
    public Dictionary<int, FB_AdvancedBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AdvancedBaseContainer.FB_AdvancedBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AdvancedBaseContainer.GetRootAsFB_AdvancedBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AncientSealShopItemProvider
{
    private static FB_AncientSealShopItemProvider _Instance;
    public static FB_AncientSealShopItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AncientSealShopItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AncientSealShopItem.txt";
    protected FB_AncientSealShopItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AncientSealShopItem> mData = new Dictionary<int, FB_AncientSealShopItem>();
    private List<FB_AncientSealShopItem> mListData = new List<FB_AncientSealShopItem>();
    public List<FB_AncientSealShopItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AncientSealShopItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AncientSealShopItem);
    }
    public Dictionary<int, FB_AncientSealShopItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AncientSealShopItemContainer.FB_AncientSealShopItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AncientSealShopItemContainer.GetRootAsFB_AncientSealShopItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ArenaRewardProvider
{
    private static FB_ArenaRewardProvider _Instance;
    public static FB_ArenaRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ArenaRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ArenaReward.txt";
    protected FB_ArenaRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ArenaReward> mData = new Dictionary<int, FB_ArenaReward>();
    private List<FB_ArenaReward> mListData = new List<FB_ArenaReward>();
    public List<FB_ArenaReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ArenaReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ArenaReward);
    }
    public Dictionary<int, FB_ArenaReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ArenaRewardContainer.FB_ArenaRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ArenaRewardContainer.GetRootAsFB_ArenaRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ArtifactBaseProvider
{
    private static FB_ArtifactBaseProvider _Instance;
    public static FB_ArtifactBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ArtifactBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ArtifactBase.txt";
    protected FB_ArtifactBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ArtifactBase> mData = new Dictionary<int, FB_ArtifactBase>();
    private List<FB_ArtifactBase> mListData = new List<FB_ArtifactBase>();
    public List<FB_ArtifactBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ArtifactBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ArtifactBase);
    }
    public Dictionary<int, FB_ArtifactBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ArtifactBaseContainer.FB_ArtifactBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ArtifactBaseContainer.GetRootAsFB_ArtifactBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ArtifactBaseLevelUpProvider
{
    private static FB_ArtifactBaseLevelUpProvider _Instance;
    public static FB_ArtifactBaseLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ArtifactBaseLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ArtifactBaseLevelUp.txt";
    protected FB_ArtifactBaseLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ArtifactBaseLevelUp> mData = new Dictionary<int, FB_ArtifactBaseLevelUp>();
    private List<FB_ArtifactBaseLevelUp> mListData = new List<FB_ArtifactBaseLevelUp>();
    public List<FB_ArtifactBaseLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ArtifactBaseLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ArtifactBaseLevelUp);
    }
    public Dictionary<int, FB_ArtifactBaseLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ArtifactBaseLevelUpContainer.FB_ArtifactBaseLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ArtifactBaseLevelUpContainer.GetRootAsFB_ArtifactBaseLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ArtifactBaseLevelUpSpecialProvider
{
    private static FB_ArtifactBaseLevelUpSpecialProvider _Instance;
    public static FB_ArtifactBaseLevelUpSpecialProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ArtifactBaseLevelUpSpecialProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ArtifactBaseLevelUpSpecial.txt";
    protected FB_ArtifactBaseLevelUpSpecialContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ArtifactBaseLevelUpSpecial> mData = new Dictionary<int, FB_ArtifactBaseLevelUpSpecial>();
    private List<FB_ArtifactBaseLevelUpSpecial> mListData = new List<FB_ArtifactBaseLevelUpSpecial>();
    public List<FB_ArtifactBaseLevelUpSpecial> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ArtifactBaseLevelUpSpecial GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ArtifactBaseLevelUpSpecial);
    }
    public Dictionary<int, FB_ArtifactBaseLevelUpSpecial> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ArtifactBaseLevelUpSpecialContainer.FB_ArtifactBaseLevelUpSpecialContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ArtifactBaseLevelUpSpecialContainer.GetRootAsFB_ArtifactBaseLevelUpSpecialContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AttrPowerBaseProvider
{
    private static FB_AttrPowerBaseProvider _Instance;
    public static FB_AttrPowerBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AttrPowerBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AttrPowerBase.txt";
    protected FB_AttrPowerBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AttrPowerBase> mData = new Dictionary<int, FB_AttrPowerBase>();
    private List<FB_AttrPowerBase> mListData = new List<FB_AttrPowerBase>();
    public List<FB_AttrPowerBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AttrPowerBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AttrPowerBase);
    }
    public Dictionary<int, FB_AttrPowerBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AttrPowerBaseContainer.FB_AttrPowerBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AttrPowerBaseContainer.GetRootAsFB_AttrPowerBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AuctionClassProvider
{
    private static FB_AuctionClassProvider _Instance;
    public static FB_AuctionClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AuctionClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AuctionClass.txt";
    protected FB_AuctionClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AuctionClass> mData = new Dictionary<int, FB_AuctionClass>();
    private List<FB_AuctionClass> mListData = new List<FB_AuctionClass>();
    public List<FB_AuctionClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AuctionClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AuctionClass);
    }
    public Dictionary<int, FB_AuctionClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AuctionClassContainer.FB_AuctionClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AuctionClassContainer.GetRootAsFB_AuctionClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AuctionItemProvider
{
    private static FB_AuctionItemProvider _Instance;
    public static FB_AuctionItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AuctionItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AuctionItem.txt";
    protected FB_AuctionItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AuctionItem> mData = new Dictionary<int, FB_AuctionItem>();
    private List<FB_AuctionItem> mListData = new List<FB_AuctionItem>();
    public List<FB_AuctionItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AuctionItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AuctionItem);
    }
    public Dictionary<int, FB_AuctionItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AuctionItemContainer.FB_AuctionItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AuctionItemContainer.GetRootAsFB_AuctionItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AuctionTypeProvider
{
    private static FB_AuctionTypeProvider _Instance;
    public static FB_AuctionTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AuctionTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AuctionType.txt";
    protected FB_AuctionTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AuctionType> mData = new Dictionary<int, FB_AuctionType>();
    private List<FB_AuctionType> mListData = new List<FB_AuctionType>();
    public List<FB_AuctionType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AuctionType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AuctionType);
    }
    public Dictionary<int, FB_AuctionType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AuctionTypeContainer.FB_AuctionTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AuctionTypeContainer.GetRootAsFB_AuctionTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_AutoBindBaseProvider
{
    private static FB_AutoBindBaseProvider _Instance;
    public static FB_AutoBindBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_AutoBindBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/AutoBindBase.txt";
    protected FB_AutoBindBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_AutoBindBase> mData = new Dictionary<int, FB_AutoBindBase>();
    private List<FB_AutoBindBase> mListData = new List<FB_AutoBindBase>();
    public List<FB_AutoBindBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_AutoBindBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_AutoBindBase);
    }
    public Dictionary<int, FB_AutoBindBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_AutoBindBaseContainer.FB_AutoBindBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_AutoBindBaseContainer.GetRootAsFB_AutoBindBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BagTreasureProvider
{
    private static FB_BagTreasureProvider _Instance;
    public static FB_BagTreasureProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BagTreasureProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BagTreasure.txt";
    protected FB_BagTreasureContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BagTreasure> mData = new Dictionary<int, FB_BagTreasure>();
    private List<FB_BagTreasure> mListData = new List<FB_BagTreasure>();
    public List<FB_BagTreasure> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BagTreasure GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BagTreasure);
    }
    public Dictionary<int, FB_BagTreasure> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BagTreasureContainer.FB_BagTreasureContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BagTreasureContainer.GetRootAsFB_BagTreasureContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_baiwanjijieProvider
{
    private static FB_baiwanjijieProvider _Instance;
    public static FB_baiwanjijieProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_baiwanjijieProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/baiwanjijie.txt";
    protected FB_baiwanjijieContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_baiwanjijie> mData = new Dictionary<int, FB_baiwanjijie>();
    private List<FB_baiwanjijie> mListData = new List<FB_baiwanjijie>();
    public List<FB_baiwanjijie> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_baiwanjijie GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_baiwanjijie);
    }
    public Dictionary<int, FB_baiwanjijie> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_baiwanjijieContainer.FB_baiwanjijieContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_baiwanjijieContainer.GetRootAsFB_baiwanjijieContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_baiwanjijie2Provider
{
    private static FB_baiwanjijie2Provider _Instance;
    public static FB_baiwanjijie2Provider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_baiwanjijie2Provider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/baiwanjijie2.txt";
    protected FB_baiwanjijie2Container mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_baiwanjijie2> mData = new Dictionary<int, FB_baiwanjijie2>();
    private List<FB_baiwanjijie2> mListData = new List<FB_baiwanjijie2>();
    public List<FB_baiwanjijie2> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_baiwanjijie2 GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_baiwanjijie2);
    }
    public Dictionary<int, FB_baiwanjijie2> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_baiwanjijie2Container.FB_baiwanjijie2ContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_baiwanjijie2Container.GetRootAsFB_baiwanjijie2Container(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BattlefieldCampLevelBuffProvider
{
    private static FB_BattlefieldCampLevelBuffProvider _Instance;
    public static FB_BattlefieldCampLevelBuffProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BattlefieldCampLevelBuffProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BattlefieldCampLevelBuff.txt";
    protected FB_BattlefieldCampLevelBuffContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BattlefieldCampLevelBuff> mData = new Dictionary<int, FB_BattlefieldCampLevelBuff>();
    private List<FB_BattlefieldCampLevelBuff> mListData = new List<FB_BattlefieldCampLevelBuff>();
    public List<FB_BattlefieldCampLevelBuff> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BattlefieldCampLevelBuff GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BattlefieldCampLevelBuff);
    }
    public Dictionary<int, FB_BattlefieldCampLevelBuff> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BattlefieldCampLevelBuffContainer.FB_BattlefieldCampLevelBuffContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BattlefieldCampLevelBuffContainer.GetRootAsFB_BattlefieldCampLevelBuffContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BattlefieldCampRewProvider
{
    private static FB_BattlefieldCampRewProvider _Instance;
    public static FB_BattlefieldCampRewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BattlefieldCampRewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BattlefieldCampRew.txt";
    protected FB_BattlefieldCampRewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BattlefieldCampRew> mData = new Dictionary<int, FB_BattlefieldCampRew>();
    private List<FB_BattlefieldCampRew> mListData = new List<FB_BattlefieldCampRew>();
    public List<FB_BattlefieldCampRew> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BattlefieldCampRew GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BattlefieldCampRew);
    }
    public Dictionary<int, FB_BattlefieldCampRew> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BattlefieldCampRewContainer.FB_BattlefieldCampRewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BattlefieldCampRewContainer.GetRootAsFB_BattlefieldCampRewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BattlefieldCollectionRewProvider
{
    private static FB_BattlefieldCollectionRewProvider _Instance;
    public static FB_BattlefieldCollectionRewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BattlefieldCollectionRewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BattlefieldCollectionRew.txt";
    protected FB_BattlefieldCollectionRewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BattlefieldCollectionRew> mData = new Dictionary<int, FB_BattlefieldCollectionRew>();
    private List<FB_BattlefieldCollectionRew> mListData = new List<FB_BattlefieldCollectionRew>();
    public List<FB_BattlefieldCollectionRew> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BattlefieldCollectionRew GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BattlefieldCollectionRew);
    }
    public Dictionary<int, FB_BattlefieldCollectionRew> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BattlefieldCollectionRewContainer.FB_BattlefieldCollectionRewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BattlefieldCollectionRewContainer.GetRootAsFB_BattlefieldCollectionRewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BattlefieldRankRewProvider
{
    private static FB_BattlefieldRankRewProvider _Instance;
    public static FB_BattlefieldRankRewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BattlefieldRankRewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BattlefieldRankRew.txt";
    protected FB_BattlefieldRankRewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BattlefieldRankRew> mData = new Dictionary<int, FB_BattlefieldRankRew>();
    private List<FB_BattlefieldRankRew> mListData = new List<FB_BattlefieldRankRew>();
    public List<FB_BattlefieldRankRew> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BattlefieldRankRew GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BattlefieldRankRew);
    }
    public Dictionary<int, FB_BattlefieldRankRew> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BattlefieldRankRewContainer.FB_BattlefieldRankRewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BattlefieldRankRewContainer.GetRootAsFB_BattlefieldRankRewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BenYuanItemBaseProvider
{
    private static FB_BenYuanItemBaseProvider _Instance;
    public static FB_BenYuanItemBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BenYuanItemBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BenYuanItemBase.txt";
    protected FB_BenYuanItemBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BenYuanItemBase> mData = new Dictionary<int, FB_BenYuanItemBase>();
    private List<FB_BenYuanItemBase> mListData = new List<FB_BenYuanItemBase>();
    public List<FB_BenYuanItemBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BenYuanItemBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BenYuanItemBase);
    }
    public Dictionary<int, FB_BenYuanItemBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BenYuanItemBaseContainer.FB_BenYuanItemBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BenYuanItemBaseContainer.GetRootAsFB_BenYuanItemBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BenYuanItemLevelUpProvider
{
    private static FB_BenYuanItemLevelUpProvider _Instance;
    public static FB_BenYuanItemLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BenYuanItemLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BenYuanItemLevelUp.txt";
    protected FB_BenYuanItemLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BenYuanItemLevelUp> mData = new Dictionary<int, FB_BenYuanItemLevelUp>();
    private List<FB_BenYuanItemLevelUp> mListData = new List<FB_BenYuanItemLevelUp>();
    public List<FB_BenYuanItemLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BenYuanItemLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BenYuanItemLevelUp);
    }
    public Dictionary<int, FB_BenYuanItemLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BenYuanItemLevelUpContainer.FB_BenYuanItemLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BenYuanItemLevelUpContainer.GetRootAsFB_BenYuanItemLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BlackCardSignInRewardProvider
{
    private static FB_BlackCardSignInRewardProvider _Instance;
    public static FB_BlackCardSignInRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BlackCardSignInRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BlackCardSignInReward.txt";
    protected FB_BlackCardSignInRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BlackCardSignInReward> mData = new Dictionary<int, FB_BlackCardSignInReward>();
    private List<FB_BlackCardSignInReward> mListData = new List<FB_BlackCardSignInReward>();
    public List<FB_BlackCardSignInReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BlackCardSignInReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BlackCardSignInReward);
    }
    public Dictionary<int, FB_BlackCardSignInReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BlackCardSignInRewardContainer.FB_BlackCardSignInRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BlackCardSignInRewardContainer.GetRootAsFB_BlackCardSignInRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BlackCardTickProvider
{
    private static FB_BlackCardTickProvider _Instance;
    public static FB_BlackCardTickProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BlackCardTickProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BlackCardTick.txt";
    protected FB_BlackCardTickContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BlackCardTick> mData = new Dictionary<int, FB_BlackCardTick>();
    private List<FB_BlackCardTick> mListData = new List<FB_BlackCardTick>();
    public List<FB_BlackCardTick> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BlackCardTick GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BlackCardTick);
    }
    public Dictionary<int, FB_BlackCardTick> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BlackCardTickContainer.FB_BlackCardTickContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BlackCardTickContainer.GetRootAsFB_BlackCardTickContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BloodBaseProvider
{
    private static FB_BloodBaseProvider _Instance;
    public static FB_BloodBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BloodBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BloodBase.txt";
    protected FB_BloodBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BloodBase> mData = new Dictionary<int, FB_BloodBase>();
    private List<FB_BloodBase> mListData = new List<FB_BloodBase>();
    public List<FB_BloodBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BloodBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BloodBase);
    }
    public Dictionary<int, FB_BloodBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BloodBaseContainer.FB_BloodBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BloodBaseContainer.GetRootAsFB_BloodBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BloodMixProvider
{
    private static FB_BloodMixProvider _Instance;
    public static FB_BloodMixProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BloodMixProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BloodMix.txt";
    protected FB_BloodMixContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BloodMix> mData = new Dictionary<int, FB_BloodMix>();
    private List<FB_BloodMix> mListData = new List<FB_BloodMix>();
    public List<FB_BloodMix> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BloodMix GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BloodMix);
    }
    public Dictionary<int, FB_BloodMix> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BloodMixContainer.FB_BloodMixContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BloodMixContainer.GetRootAsFB_BloodMixContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BloodMixLevelProvider
{
    private static FB_BloodMixLevelProvider _Instance;
    public static FB_BloodMixLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BloodMixLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BloodMixLevel.txt";
    protected FB_BloodMixLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BloodMixLevel> mData = new Dictionary<int, FB_BloodMixLevel>();
    private List<FB_BloodMixLevel> mListData = new List<FB_BloodMixLevel>();
    public List<FB_BloodMixLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BloodMixLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BloodMixLevel);
    }
    public Dictionary<int, FB_BloodMixLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BloodMixLevelContainer.FB_BloodMixLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BloodMixLevelContainer.GetRootAsFB_BloodMixLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BloodPossessedProvider
{
    private static FB_BloodPossessedProvider _Instance;
    public static FB_BloodPossessedProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BloodPossessedProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BloodPossessed.txt";
    protected FB_BloodPossessedContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BloodPossessed> mData = new Dictionary<int, FB_BloodPossessed>();
    private List<FB_BloodPossessed> mListData = new List<FB_BloodPossessed>();
    public List<FB_BloodPossessed> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BloodPossessed GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BloodPossessed);
    }
    public Dictionary<int, FB_BloodPossessed> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BloodPossessedContainer.FB_BloodPossessedContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BloodPossessedContainer.GetRootAsFB_BloodPossessedContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BloodPossessedModelProvider
{
    private static FB_BloodPossessedModelProvider _Instance;
    public static FB_BloodPossessedModelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BloodPossessedModelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BloodPossessedModel.txt";
    protected FB_BloodPossessedModelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BloodPossessedModel> mData = new Dictionary<int, FB_BloodPossessedModel>();
    private List<FB_BloodPossessedModel> mListData = new List<FB_BloodPossessedModel>();
    public List<FB_BloodPossessedModel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BloodPossessedModel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BloodPossessedModel);
    }
    public Dictionary<int, FB_BloodPossessedModel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BloodPossessedModelContainer.FB_BloodPossessedModelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BloodPossessedModelContainer.GetRootAsFB_BloodPossessedModelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BossGongChengRewardProvider
{
    private static FB_BossGongChengRewardProvider _Instance;
    public static FB_BossGongChengRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BossGongChengRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BossGongChengReward.txt";
    protected FB_BossGongChengRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BossGongChengReward> mData = new Dictionary<int, FB_BossGongChengReward>();
    private List<FB_BossGongChengReward> mListData = new List<FB_BossGongChengReward>();
    public List<FB_BossGongChengReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BossGongChengReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BossGongChengReward);
    }
    public Dictionary<int, FB_BossGongChengReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BossGongChengRewardContainer.FB_BossGongChengRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BossGongChengRewardContainer.GetRootAsFB_BossGongChengRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BossInvestProvider
{
    private static FB_BossInvestProvider _Instance;
    public static FB_BossInvestProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BossInvestProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BossInvest.txt";
    protected FB_BossInvestContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BossInvest> mData = new Dictionary<int, FB_BossInvest>();
    private List<FB_BossInvest> mListData = new List<FB_BossInvest>();
    public List<FB_BossInvest> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BossInvest GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BossInvest);
    }
    public Dictionary<int, FB_BossInvest> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BossInvestContainer.FB_BossInvestContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BossInvestContainer.GetRootAsFB_BossInvestContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_BossInvestTypeProvider
{
    private static FB_BossInvestTypeProvider _Instance;
    public static FB_BossInvestTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_BossInvestTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/BossInvestType.txt";
    protected FB_BossInvestTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_BossInvestType> mData = new Dictionary<int, FB_BossInvestType>();
    private List<FB_BossInvestType> mListData = new List<FB_BossInvestType>();
    public List<FB_BossInvestType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_BossInvestType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_BossInvestType);
    }
    public Dictionary<int, FB_BossInvestType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_BossInvestTypeContainer.FB_BossInvestTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_BossInvestTypeContainer.GetRootAsFB_BossInvestTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardBaseProvider
{
    private static FB_CardBaseProvider _Instance;
    public static FB_CardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardBase.txt";
    protected FB_CardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardBase> mData = new Dictionary<int, FB_CardBase>();
    private List<FB_CardBase> mListData = new List<FB_CardBase>();
    public List<FB_CardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardBase);
    }
    public Dictionary<int, FB_CardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardBaseContainer.FB_CardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardBaseContainer.GetRootAsFB_CardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardFlopBaseProvider
{
    private static FB_CardFlopBaseProvider _Instance;
    public static FB_CardFlopBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardFlopBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardFlopBase.txt";
    protected FB_CardFlopBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardFlopBase> mData = new Dictionary<int, FB_CardFlopBase>();
    private List<FB_CardFlopBase> mListData = new List<FB_CardFlopBase>();
    public List<FB_CardFlopBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardFlopBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardFlopBase);
    }
    public Dictionary<int, FB_CardFlopBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardFlopBaseContainer.FB_CardFlopBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardFlopBaseContainer.GetRootAsFB_CardFlopBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardJiBanActivateRewardProvider
{
    private static FB_CardJiBanActivateRewardProvider _Instance;
    public static FB_CardJiBanActivateRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardJiBanActivateRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardJiBanActivateReward.txt";
    protected FB_CardJiBanActivateRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardJiBanActivateReward> mData = new Dictionary<int, FB_CardJiBanActivateReward>();
    private List<FB_CardJiBanActivateReward> mListData = new List<FB_CardJiBanActivateReward>();
    public List<FB_CardJiBanActivateReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardJiBanActivateReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardJiBanActivateReward);
    }
    public Dictionary<int, FB_CardJiBanActivateReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardJiBanActivateRewardContainer.FB_CardJiBanActivateRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardJiBanActivateRewardContainer.GetRootAsFB_CardJiBanActivateRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardRankRewardBaseProvider
{
    private static FB_CardRankRewardBaseProvider _Instance;
    public static FB_CardRankRewardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardRankRewardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardRankRewardBase.txt";
    protected FB_CardRankRewardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardRankRewardBase> mData = new Dictionary<int, FB_CardRankRewardBase>();
    private List<FB_CardRankRewardBase> mListData = new List<FB_CardRankRewardBase>();
    public List<FB_CardRankRewardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardRankRewardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardRankRewardBase);
    }
    public Dictionary<int, FB_CardRankRewardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardRankRewardBaseContainer.FB_CardRankRewardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardRankRewardBaseContainer.GetRootAsFB_CardRankRewardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardShopProvider
{
    private static FB_CardShopProvider _Instance;
    public static FB_CardShopProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardShopProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardShop.txt";
    protected FB_CardShopContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardShop> mData = new Dictionary<int, FB_CardShop>();
    private List<FB_CardShop> mListData = new List<FB_CardShop>();
    public List<FB_CardShop> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardShop GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardShop);
    }
    public Dictionary<int, FB_CardShop> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardShopContainer.FB_CardShopContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardShopContainer.GetRootAsFB_CardShopContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardXunBaoBaseProvider
{
    private static FB_CardXunBaoBaseProvider _Instance;
    public static FB_CardXunBaoBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardXunBaoBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardXunBaoBase.txt";
    protected FB_CardXunBaoBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardXunBaoBase> mData = new Dictionary<int, FB_CardXunBaoBase>();
    private List<FB_CardXunBaoBase> mListData = new List<FB_CardXunBaoBase>();
    public List<FB_CardXunBaoBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardXunBaoBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardXunBaoBase);
    }
    public Dictionary<int, FB_CardXunBaoBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardXunBaoBaseContainer.FB_CardXunBaoBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardXunBaoBaseContainer.GetRootAsFB_CardXunBaoBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CardXunBaoShowProvider
{
    private static FB_CardXunBaoShowProvider _Instance;
    public static FB_CardXunBaoShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CardXunBaoShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CardXunBaoShow.txt";
    protected FB_CardXunBaoShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CardXunBaoShow> mData = new Dictionary<int, FB_CardXunBaoShow>();
    private List<FB_CardXunBaoShow> mListData = new List<FB_CardXunBaoShow>();
    public List<FB_CardXunBaoShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CardXunBaoShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CardXunBaoShow);
    }
    public Dictionary<int, FB_CardXunBaoShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CardXunBaoShowContainer.FB_CardXunBaoShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CardXunBaoShowContainer.GetRootAsFB_CardXunBaoShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeJob6ItemBaseProvider
{
    private static FB_ChangeJob6ItemBaseProvider _Instance;
    public static FB_ChangeJob6ItemBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeJob6ItemBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeJob6ItemBase.txt";
    protected FB_ChangeJob6ItemBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeJob6ItemBase> mData = new Dictionary<int, FB_ChangeJob6ItemBase>();
    private List<FB_ChangeJob6ItemBase> mListData = new List<FB_ChangeJob6ItemBase>();
    public List<FB_ChangeJob6ItemBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeJob6ItemBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeJob6ItemBase);
    }
    public Dictionary<int, FB_ChangeJob6ItemBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeJob6ItemBaseContainer.FB_ChangeJob6ItemBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeJob6ItemBaseContainer.GetRootAsFB_ChangeJob6ItemBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeJob8ComprehendUpProvider
{
    private static FB_ChangeJob8ComprehendUpProvider _Instance;
    public static FB_ChangeJob8ComprehendUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeJob8ComprehendUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeJob8ComprehendUp.txt";
    protected FB_ChangeJob8ComprehendUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeJob8ComprehendUp> mData = new Dictionary<int, FB_ChangeJob8ComprehendUp>();
    private List<FB_ChangeJob8ComprehendUp> mListData = new List<FB_ChangeJob8ComprehendUp>();
    public List<FB_ChangeJob8ComprehendUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeJob8ComprehendUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeJob8ComprehendUp);
    }
    public Dictionary<int, FB_ChangeJob8ComprehendUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeJob8ComprehendUpContainer.FB_ChangeJob8ComprehendUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeJob8ComprehendUpContainer.GetRootAsFB_ChangeJob8ComprehendUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeJob8MissionProvider
{
    private static FB_ChangeJob8MissionProvider _Instance;
    public static FB_ChangeJob8MissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeJob8MissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeJob8Mission.txt";
    protected FB_ChangeJob8MissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeJob8Mission> mData = new Dictionary<int, FB_ChangeJob8Mission>();
    private List<FB_ChangeJob8Mission> mListData = new List<FB_ChangeJob8Mission>();
    public List<FB_ChangeJob8Mission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeJob8Mission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeJob8Mission);
    }
    public Dictionary<int, FB_ChangeJob8Mission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeJob8MissionContainer.FB_ChangeJob8MissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeJob8MissionContainer.GetRootAsFB_ChangeJob8MissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.MissionId))
            {
                mData.Add(item.MissionId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeJobBaseProvider
{
    private static FB_ChangeJobBaseProvider _Instance;
    public static FB_ChangeJobBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeJobBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeJobBase.txt";
    protected FB_ChangeJobBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeJobBase> mData = new Dictionary<int, FB_ChangeJobBase>();
    private List<FB_ChangeJobBase> mListData = new List<FB_ChangeJobBase>();
    public List<FB_ChangeJobBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeJobBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeJobBase);
    }
    public Dictionary<int, FB_ChangeJobBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeJobBaseContainer.FB_ChangeJobBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeJobBaseContainer.GetRootAsFB_ChangeJobBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeJobPhaseProvider
{
    private static FB_ChangeJobPhaseProvider _Instance;
    public static FB_ChangeJobPhaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeJobPhaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeJobPhase.txt";
    protected FB_ChangeJobPhaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeJobPhase> mData = new Dictionary<int, FB_ChangeJobPhase>();
    private List<FB_ChangeJobPhase> mListData = new List<FB_ChangeJobPhase>();
    public List<FB_ChangeJobPhase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeJobPhase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeJobPhase);
    }
    public Dictionary<int, FB_ChangeJobPhase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeJobPhaseContainer.FB_ChangeJobPhaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeJobPhaseContainer.GetRootAsFB_ChangeJobPhaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChangeMenPaiConditionProvider
{
    private static FB_ChangeMenPaiConditionProvider _Instance;
    public static FB_ChangeMenPaiConditionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChangeMenPaiConditionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChangeMenPaiCondition.txt";
    protected FB_ChangeMenPaiConditionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChangeMenPaiCondition> mData = new Dictionary<int, FB_ChangeMenPaiCondition>();
    private List<FB_ChangeMenPaiCondition> mListData = new List<FB_ChangeMenPaiCondition>();
    public List<FB_ChangeMenPaiCondition> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChangeMenPaiCondition GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChangeMenPaiCondition);
    }
    public Dictionary<int, FB_ChangeMenPaiCondition> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChangeMenPaiConditionContainer.FB_ChangeMenPaiConditionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChangeMenPaiConditionContainer.GetRootAsFB_ChangeMenPaiConditionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChapterCardBaseProvider
{
    private static FB_ChapterCardBaseProvider _Instance;
    public static FB_ChapterCardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChapterCardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChapterCardBase.txt";
    protected FB_ChapterCardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChapterCardBase> mData = new Dictionary<int, FB_ChapterCardBase>();
    private List<FB_ChapterCardBase> mListData = new List<FB_ChapterCardBase>();
    public List<FB_ChapterCardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChapterCardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChapterCardBase);
    }
    public Dictionary<int, FB_ChapterCardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChapterCardBaseContainer.FB_ChapterCardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChapterCardBaseContainer.GetRootAsFB_ChapterCardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChapterCardLevelUpProvider
{
    private static FB_ChapterCardLevelUpProvider _Instance;
    public static FB_ChapterCardLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChapterCardLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChapterCardLevelUp.txt";
    protected FB_ChapterCardLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChapterCardLevelUp> mData = new Dictionary<int, FB_ChapterCardLevelUp>();
    private List<FB_ChapterCardLevelUp> mListData = new List<FB_ChapterCardLevelUp>();
    public List<FB_ChapterCardLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChapterCardLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChapterCardLevelUp);
    }
    public Dictionary<int, FB_ChapterCardLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChapterCardLevelUpContainer.FB_ChapterCardLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChapterCardLevelUpContainer.GetRootAsFB_ChapterCardLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CharmLoveRankRewardBaseProvider
{
    private static FB_CharmLoveRankRewardBaseProvider _Instance;
    public static FB_CharmLoveRankRewardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CharmLoveRankRewardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CharmLoveRankRewardBase.txt";
    protected FB_CharmLoveRankRewardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CharmLoveRankRewardBase> mData = new Dictionary<int, FB_CharmLoveRankRewardBase>();
    private List<FB_CharmLoveRankRewardBase> mListData = new List<FB_CharmLoveRankRewardBase>();
    public List<FB_CharmLoveRankRewardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CharmLoveRankRewardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CharmLoveRankRewardBase);
    }
    public Dictionary<int, FB_CharmLoveRankRewardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CharmLoveRankRewardBaseContainer.FB_CharmLoveRankRewardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CharmLoveRankRewardBaseContainer.GetRootAsFB_CharmLoveRankRewardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChatLimitProvider
{
    private static FB_ChatLimitProvider _Instance;
    public static FB_ChatLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChatLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChatLimit.txt";
    protected FB_ChatLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChatLimit> mData = new Dictionary<int, FB_ChatLimit>();
    private List<FB_ChatLimit> mListData = new List<FB_ChatLimit>();
    public List<FB_ChatLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChatLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChatLimit);
    }
    public Dictionary<int, FB_ChatLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChatLimitContainer.FB_ChatLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChatLimitContainer.GetRootAsFB_ChatLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChiJiBaseProvider
{
    private static FB_ChiJiBaseProvider _Instance;
    public static FB_ChiJiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChiJiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChiJiBase.txt";
    protected FB_ChiJiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChiJiBase> mData = new Dictionary<int, FB_ChiJiBase>();
    private List<FB_ChiJiBase> mListData = new List<FB_ChiJiBase>();
    public List<FB_ChiJiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChiJiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChiJiBase);
    }
    public Dictionary<int, FB_ChiJiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChiJiBaseContainer.FB_ChiJiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChiJiBaseContainer.GetRootAsFB_ChiJiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChiJiRewardBaseProvider
{
    private static FB_ChiJiRewardBaseProvider _Instance;
    public static FB_ChiJiRewardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChiJiRewardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChiJiRewardBase.txt";
    protected FB_ChiJiRewardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChiJiRewardBase> mData = new Dictionary<int, FB_ChiJiRewardBase>();
    private List<FB_ChiJiRewardBase> mListData = new List<FB_ChiJiRewardBase>();
    public List<FB_ChiJiRewardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChiJiRewardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChiJiRewardBase);
    }
    public Dictionary<int, FB_ChiJiRewardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChiJiRewardBaseContainer.FB_ChiJiRewardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChiJiRewardBaseContainer.GetRootAsFB_ChiJiRewardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ChongJiGiftProvider
{
    private static FB_ChongJiGiftProvider _Instance;
    public static FB_ChongJiGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ChongJiGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ChongJiGift.txt";
    protected FB_ChongJiGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ChongJiGift> mData = new Dictionary<int, FB_ChongJiGift>();
    private List<FB_ChongJiGift> mListData = new List<FB_ChongJiGift>();
    public List<FB_ChongJiGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ChongJiGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ChongJiGift);
    }
    public Dictionary<int, FB_ChongJiGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ChongJiGiftContainer.FB_ChongJiGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ChongJiGiftContainer.GetRootAsFB_ChongJiGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ClientConfigProvider
{
    private static FB_ClientConfigProvider _Instance;
    public static FB_ClientConfigProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ClientConfigProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ClientConfig.txt";
    protected FB_ClientConfigContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ClientConfig> mData = new Dictionary<int, FB_ClientConfig>();
    private List<FB_ClientConfig> mListData = new List<FB_ClientConfig>();
    public List<FB_ClientConfig> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ClientConfig GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ClientConfig);
    }
    public Dictionary<int, FB_ClientConfig> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ClientConfigContainer.FB_ClientConfigContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ClientConfigContainer.GetRootAsFB_ClientConfigContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CollectActivityProvider
{
    private static FB_CollectActivityProvider _Instance;
    public static FB_CollectActivityProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CollectActivityProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CollectActivity.txt";
    protected FB_CollectActivityContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CollectActivity> mData = new Dictionary<int, FB_CollectActivity>();
    private List<FB_CollectActivity> mListData = new List<FB_CollectActivity>();
    public List<FB_CollectActivity> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CollectActivity GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CollectActivity);
    }
    public Dictionary<int, FB_CollectActivity> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CollectActivityContainer.FB_CollectActivityContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CollectActivityContainer.GetRootAsFB_CollectActivityContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CombatPetBaseProvider
{
    private static FB_CombatPetBaseProvider _Instance;
    public static FB_CombatPetBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CombatPetBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CombatPetBase.txt";
    protected FB_CombatPetBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CombatPetBase> mData = new Dictionary<int, FB_CombatPetBase>();
    private List<FB_CombatPetBase> mListData = new List<FB_CombatPetBase>();
    public List<FB_CombatPetBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CombatPetBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CombatPetBase);
    }
    public Dictionary<int, FB_CombatPetBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CombatPetBaseContainer.FB_CombatPetBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CombatPetBaseContainer.GetRootAsFB_CombatPetBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CombatPetRewardProvider
{
    private static FB_CombatPetRewardProvider _Instance;
    public static FB_CombatPetRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CombatPetRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CombatPetReward.txt";
    protected FB_CombatPetRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CombatPetReward> mData = new Dictionary<int, FB_CombatPetReward>();
    private List<FB_CombatPetReward> mListData = new List<FB_CombatPetReward>();
    public List<FB_CombatPetReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CombatPetReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CombatPetReward);
    }
    public Dictionary<int, FB_CombatPetReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CombatPetRewardContainer.FB_CombatPetRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CombatPetRewardContainer.GetRootAsFB_CombatPetRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CommonItemProvider
{
    private static FB_CommonItemProvider _Instance;
    public static FB_CommonItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CommonItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CommonItem.txt";
    protected FB_CommonItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CommonItem> mData = new Dictionary<int, FB_CommonItem>();
    private List<FB_CommonItem> mListData = new List<FB_CommonItem>();
    public List<FB_CommonItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CommonItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CommonItem);
    }
    public Dictionary<int, FB_CommonItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CommonItemContainer.FB_CommonItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CommonItemContainer.GetRootAsFB_CommonItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CoolDownTimeProvider
{
    private static FB_CoolDownTimeProvider _Instance;
    public static FB_CoolDownTimeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CoolDownTimeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CoolDownTime.txt";
    protected FB_CoolDownTimeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CoolDownTime> mData = new Dictionary<int, FB_CoolDownTime>();
    private List<FB_CoolDownTime> mListData = new List<FB_CoolDownTime>();
    public List<FB_CoolDownTime> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CoolDownTime GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CoolDownTime);
    }
    public Dictionary<int, FB_CoolDownTime> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CoolDownTimeContainer.FB_CoolDownTimeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CoolDownTimeContainer.GetRootAsFB_CoolDownTimeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneLimitProvider
{
    private static FB_CopySceneLimitProvider _Instance;
    public static FB_CopySceneLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneLimit.txt";
    protected FB_CopySceneLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneLimit> mData = new Dictionary<int, FB_CopySceneLimit>();
    private List<FB_CopySceneLimit> mListData = new List<FB_CopySceneLimit>();
    public List<FB_CopySceneLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneLimit);
    }
    public Dictionary<int, FB_CopySceneLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneLimitContainer.FB_CopySceneLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneLimitContainer.GetRootAsFB_CopySceneLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneMoNengFeiXuProvider
{
    private static FB_CopySceneMoNengFeiXuProvider _Instance;
    public static FB_CopySceneMoNengFeiXuProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneMoNengFeiXuProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneMoNengFeiXu.txt";
    protected FB_CopySceneMoNengFeiXuContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneMoNengFeiXu> mData = new Dictionary<int, FB_CopySceneMoNengFeiXu>();
    private List<FB_CopySceneMoNengFeiXu> mListData = new List<FB_CopySceneMoNengFeiXu>();
    public List<FB_CopySceneMoNengFeiXu> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneMoNengFeiXu GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneMoNengFeiXu);
    }
    public Dictionary<int, FB_CopySceneMoNengFeiXu> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneMoNengFeiXuContainer.FB_CopySceneMoNengFeiXuContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneMoNengFeiXuContainer.GetRootAsFB_CopySceneMoNengFeiXuContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneShopProvider
{
    private static FB_CopySceneShopProvider _Instance;
    public static FB_CopySceneShopProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneShopProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneShop.txt";
    protected FB_CopySceneShopContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneShop> mData = new Dictionary<int, FB_CopySceneShop>();
    private List<FB_CopySceneShop> mListData = new List<FB_CopySceneShop>();
    public List<FB_CopySceneShop> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneShop GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneShop);
    }
    public Dictionary<int, FB_CopySceneShop> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneShopContainer.FB_CopySceneShopContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneShopContainer.GetRootAsFB_CopySceneShopContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneStageDicProvider
{
    private static FB_CopySceneStageDicProvider _Instance;
    public static FB_CopySceneStageDicProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneStageDicProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneStageDic.txt";
    protected FB_CopySceneStageDicContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneStageDic> mData = new Dictionary<int, FB_CopySceneStageDic>();
    private List<FB_CopySceneStageDic> mListData = new List<FB_CopySceneStageDic>();
    public List<FB_CopySceneStageDic> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneStageDic GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneStageDic);
    }
    public Dictionary<int, FB_CopySceneStageDic> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneStageDicContainer.FB_CopySceneStageDicContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneStageDicContainer.GetRootAsFB_CopySceneStageDicContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneTowerProvider
{
    private static FB_CopySceneTowerProvider _Instance;
    public static FB_CopySceneTowerProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneTowerProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneTower.txt";
    protected FB_CopySceneTowerContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneTower> mData = new Dictionary<int, FB_CopySceneTower>();
    private List<FB_CopySceneTower> mListData = new List<FB_CopySceneTower>();
    public List<FB_CopySceneTower> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneTower GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneTower);
    }
    public Dictionary<int, FB_CopySceneTower> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneTowerContainer.FB_CopySceneTowerContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneTowerContainer.GetRootAsFB_CopySceneTowerContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CopySceneTowerSkillProvider
{
    private static FB_CopySceneTowerSkillProvider _Instance;
    public static FB_CopySceneTowerSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CopySceneTowerSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CopySceneTowerSkill.txt";
    protected FB_CopySceneTowerSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CopySceneTowerSkill> mData = new Dictionary<int, FB_CopySceneTowerSkill>();
    private List<FB_CopySceneTowerSkill> mListData = new List<FB_CopySceneTowerSkill>();
    public List<FB_CopySceneTowerSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CopySceneTowerSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CopySceneTowerSkill);
    }
    public Dictionary<int, FB_CopySceneTowerSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CopySceneTowerSkillContainer.FB_CopySceneTowerSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CopySceneTowerSkillContainer.GetRootAsFB_CopySceneTowerSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CreatePlayerProvider
{
    private static FB_CreatePlayerProvider _Instance;
    public static FB_CreatePlayerProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CreatePlayerProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CreatePlayer.txt";
    protected FB_CreatePlayerContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CreatePlayer> mData = new Dictionary<int, FB_CreatePlayer>();
    private List<FB_CreatePlayer> mListData = new List<FB_CreatePlayer>();
    public List<FB_CreatePlayer> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CreatePlayer GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CreatePlayer);
    }
    public Dictionary<int, FB_CreatePlayer> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CreatePlayerContainer.FB_CreatePlayerContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CreatePlayerContainer.GetRootAsFB_CreatePlayerContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CSEvalueRewardProvider
{
    private static FB_CSEvalueRewardProvider _Instance;
    public static FB_CSEvalueRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CSEvalueRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CSEvalueReward.txt";
    protected FB_CSEvalueRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CSEvalueReward> mData = new Dictionary<int, FB_CSEvalueReward>();
    private List<FB_CSEvalueReward> mListData = new List<FB_CSEvalueReward>();
    public List<FB_CSEvalueReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CSEvalueReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CSEvalueReward);
    }
    public Dictionary<int, FB_CSEvalueReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CSEvalueRewardContainer.FB_CSEvalueRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CSEvalueRewardContainer.GetRootAsFB_CSEvalueRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_CurrencyBaseProvider
{
    private static FB_CurrencyBaseProvider _Instance;
    public static FB_CurrencyBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_CurrencyBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/CurrencyBase.txt";
    protected FB_CurrencyBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_CurrencyBase> mData = new Dictionary<int, FB_CurrencyBase>();
    private List<FB_CurrencyBase> mListData = new List<FB_CurrencyBase>();
    public List<FB_CurrencyBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_CurrencyBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_CurrencyBase);
    }
    public Dictionary<int, FB_CurrencyBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_CurrencyBaseContainer.FB_CurrencyBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_CurrencyBaseContainer.GetRootAsFB_CurrencyBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DailyRebateProvider
{
    private static FB_DailyRebateProvider _Instance;
    public static FB_DailyRebateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DailyRebateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DailyRebate.txt";
    protected FB_DailyRebateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DailyRebate> mData = new Dictionary<int, FB_DailyRebate>();
    private List<FB_DailyRebate> mListData = new List<FB_DailyRebate>();
    public List<FB_DailyRebate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DailyRebate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DailyRebate);
    }
    public Dictionary<int, FB_DailyRebate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DailyRebateContainer.FB_DailyRebateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DailyRebateContainer.GetRootAsFB_DailyRebateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DailyRechargeProvider
{
    private static FB_DailyRechargeProvider _Instance;
    public static FB_DailyRechargeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DailyRechargeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DailyRecharge.txt";
    protected FB_DailyRechargeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DailyRecharge> mData = new Dictionary<int, FB_DailyRecharge>();
    private List<FB_DailyRecharge> mListData = new List<FB_DailyRecharge>();
    public List<FB_DailyRecharge> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DailyRecharge GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DailyRecharge);
    }
    public Dictionary<int, FB_DailyRecharge> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DailyRechargeContainer.FB_DailyRechargeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DailyRechargeContainer.GetRootAsFB_DailyRechargeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBaseProvider
{
    private static FB_DestinyBaseProvider _Instance;
    public static FB_DestinyBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyBase.txt";
    protected FB_DestinyBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBase> mData = new Dictionary<int, FB_DestinyBase>();
    private List<FB_DestinyBase> mListData = new List<FB_DestinyBase>();
    public List<FB_DestinyBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBase);
    }
    public Dictionary<int, FB_DestinyBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBaseContainer.FB_DestinyBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBaseContainer.GetRootAsFB_DestinyBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBaseLevelUpProvider
{
    private static FB_DestinyBaseLevelUpProvider _Instance;
    public static FB_DestinyBaseLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBaseLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyBaseLevelUp.txt";
    protected FB_DestinyBaseLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBaseLevelUp> mData = new Dictionary<int, FB_DestinyBaseLevelUp>();
    private List<FB_DestinyBaseLevelUp> mListData = new List<FB_DestinyBaseLevelUp>();
    public List<FB_DestinyBaseLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBaseLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBaseLevelUp);
    }
    public Dictionary<int, FB_DestinyBaseLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBaseLevelUpContainer.FB_DestinyBaseLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBaseLevelUpContainer.GetRootAsFB_DestinyBaseLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBloodBaseProvider
{
    private static FB_DestinyBloodBaseProvider _Instance;
    public static FB_DestinyBloodBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBloodBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyBloodBase.txt";
    protected FB_DestinyBloodBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBloodBase> mData = new Dictionary<int, FB_DestinyBloodBase>();
    private List<FB_DestinyBloodBase> mListData = new List<FB_DestinyBloodBase>();
    public List<FB_DestinyBloodBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBloodBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBloodBase);
    }
    public Dictionary<int, FB_DestinyBloodBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBloodBaseContainer.FB_DestinyBloodBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBloodBaseContainer.GetRootAsFB_DestinyBloodBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBloodItemProvider
{
    private static FB_DestinyBloodItemProvider _Instance;
    public static FB_DestinyBloodItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBloodItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyBloodItem.txt";
    protected FB_DestinyBloodItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBloodItem> mData = new Dictionary<int, FB_DestinyBloodItem>();
    private List<FB_DestinyBloodItem> mListData = new List<FB_DestinyBloodItem>();
    public List<FB_DestinyBloodItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBloodItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBloodItem);
    }
    public Dictionary<int, FB_DestinyBloodItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBloodItemContainer.FB_DestinyBloodItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBloodItemContainer.GetRootAsFB_DestinyBloodItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyBloodLevelUpProvider
{
    private static FB_DestinyBloodLevelUpProvider _Instance;
    public static FB_DestinyBloodLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyBloodLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyBloodLevelUp.txt";
    protected FB_DestinyBloodLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyBloodLevelUp> mData = new Dictionary<int, FB_DestinyBloodLevelUp>();
    private List<FB_DestinyBloodLevelUp> mListData = new List<FB_DestinyBloodLevelUp>();
    public List<FB_DestinyBloodLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyBloodLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyBloodLevelUp);
    }
    public Dictionary<int, FB_DestinyBloodLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyBloodLevelUpContainer.FB_DestinyBloodLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyBloodLevelUpContainer.GetRootAsFB_DestinyBloodLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyCultureLevelUpProvider
{
    private static FB_DestinyCultureLevelUpProvider _Instance;
    public static FB_DestinyCultureLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyCultureLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyCultureLevelUp.txt";
    protected FB_DestinyCultureLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyCultureLevelUp> mData = new Dictionary<int, FB_DestinyCultureLevelUp>();
    private List<FB_DestinyCultureLevelUp> mListData = new List<FB_DestinyCultureLevelUp>();
    public List<FB_DestinyCultureLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyCultureLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyCultureLevelUp);
    }
    public Dictionary<int, FB_DestinyCultureLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyCultureLevelUpContainer.FB_DestinyCultureLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyCultureLevelUpContainer.GetRootAsFB_DestinyCultureLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinySkillProvider
{
    private static FB_DestinySkillProvider _Instance;
    public static FB_DestinySkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinySkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinySkill.txt";
    protected FB_DestinySkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinySkill> mData = new Dictionary<int, FB_DestinySkill>();
    private List<FB_DestinySkill> mListData = new List<FB_DestinySkill>();
    public List<FB_DestinySkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinySkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinySkill);
    }
    public Dictionary<int, FB_DestinySkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinySkillContainer.FB_DestinySkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinySkillContainer.GetRootAsFB_DestinySkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyTemperBaseProvider
{
    private static FB_DestinyTemperBaseProvider _Instance;
    public static FB_DestinyTemperBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyTemperBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyTemperBase.txt";
    protected FB_DestinyTemperBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyTemperBase> mData = new Dictionary<int, FB_DestinyTemperBase>();
    private List<FB_DestinyTemperBase> mListData = new List<FB_DestinyTemperBase>();
    public List<FB_DestinyTemperBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyTemperBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyTemperBase);
    }
    public Dictionary<int, FB_DestinyTemperBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyTemperBaseContainer.FB_DestinyTemperBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyTemperBaseContainer.GetRootAsFB_DestinyTemperBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DestinyTemperRateProvider
{
    private static FB_DestinyTemperRateProvider _Instance;
    public static FB_DestinyTemperRateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DestinyTemperRateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DestinyTemperRate.txt";
    protected FB_DestinyTemperRateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DestinyTemperRate> mData = new Dictionary<int, FB_DestinyTemperRate>();
    private List<FB_DestinyTemperRate> mListData = new List<FB_DestinyTemperRate>();
    public List<FB_DestinyTemperRate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DestinyTemperRate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DestinyTemperRate);
    }
    public Dictionary<int, FB_DestinyTemperRate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DestinyTemperRateContainer.FB_DestinyTemperRateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DestinyTemperRateContainer.GetRootAsFB_DestinyTemperRateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondAttributeProvider
{
    private static FB_DiamondAttributeProvider _Instance;
    public static FB_DiamondAttributeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondAttributeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondAttribute.txt";
    protected FB_DiamondAttributeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondAttribute> mData = new Dictionary<int, FB_DiamondAttribute>();
    private List<FB_DiamondAttribute> mListData = new List<FB_DiamondAttribute>();
    public List<FB_DiamondAttribute> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondAttribute GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondAttribute);
    }
    public Dictionary<int, FB_DiamondAttribute> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondAttributeContainer.FB_DiamondAttributeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondAttributeContainer.GetRootAsFB_DiamondAttributeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondBaseProvider
{
    private static FB_DiamondBaseProvider _Instance;
    public static FB_DiamondBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondBase.txt";
    protected FB_DiamondBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondBase> mData = new Dictionary<int, FB_DiamondBase>();
    private List<FB_DiamondBase> mListData = new List<FB_DiamondBase>();
    public List<FB_DiamondBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondBase);
    }
    public Dictionary<int, FB_DiamondBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondBaseContainer.FB_DiamondBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondBaseContainer.GetRootAsFB_DiamondBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondCuiLianProvider
{
    private static FB_DiamondCuiLianProvider _Instance;
    public static FB_DiamondCuiLianProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondCuiLianProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondCuiLian.txt";
    protected FB_DiamondCuiLianContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondCuiLian> mData = new Dictionary<int, FB_DiamondCuiLian>();
    private List<FB_DiamondCuiLian> mListData = new List<FB_DiamondCuiLian>();
    public List<FB_DiamondCuiLian> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondCuiLian GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondCuiLian);
    }
    public Dictionary<int, FB_DiamondCuiLian> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondCuiLianContainer.FB_DiamondCuiLianContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondCuiLianContainer.GetRootAsFB_DiamondCuiLianContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondGongZhenProvider
{
    private static FB_DiamondGongZhenProvider _Instance;
    public static FB_DiamondGongZhenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondGongZhenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondGongZhen.txt";
    protected FB_DiamondGongZhenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondGongZhen> mData = new Dictionary<int, FB_DiamondGongZhen>();
    private List<FB_DiamondGongZhen> mListData = new List<FB_DiamondGongZhen>();
    public List<FB_DiamondGongZhen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondGongZhen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondGongZhen);
    }
    public Dictionary<int, FB_DiamondGongZhen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondGongZhenContainer.FB_DiamondGongZhenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondGongZhenContainer.GetRootAsFB_DiamondGongZhenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondGongZhenAllProvider
{
    private static FB_DiamondGongZhenAllProvider _Instance;
    public static FB_DiamondGongZhenAllProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondGongZhenAllProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondGongZhenAll.txt";
    protected FB_DiamondGongZhenAllContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondGongZhenAll> mData = new Dictionary<int, FB_DiamondGongZhenAll>();
    private List<FB_DiamondGongZhenAll> mListData = new List<FB_DiamondGongZhenAll>();
    public List<FB_DiamondGongZhenAll> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondGongZhenAll GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondGongZhenAll);
    }
    public Dictionary<int, FB_DiamondGongZhenAll> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondGongZhenAllContainer.FB_DiamondGongZhenAllContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondGongZhenAllContainer.GetRootAsFB_DiamondGongZhenAllContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondGongZhenEnumProvider
{
    private static FB_DiamondGongZhenEnumProvider _Instance;
    public static FB_DiamondGongZhenEnumProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondGongZhenEnumProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondGongZhenEnum.txt";
    protected FB_DiamondGongZhenEnumContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondGongZhenEnum> mData = new Dictionary<int, FB_DiamondGongZhenEnum>();
    private List<FB_DiamondGongZhenEnum> mListData = new List<FB_DiamondGongZhenEnum>();
    public List<FB_DiamondGongZhenEnum> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondGongZhenEnum GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondGongZhenEnum);
    }
    public Dictionary<int, FB_DiamondGongZhenEnum> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondGongZhenEnumContainer.FB_DiamondGongZhenEnumContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondGongZhenEnumContainer.GetRootAsFB_DiamondGongZhenEnumContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondSetProvider
{
    private static FB_DiamondSetProvider _Instance;
    public static FB_DiamondSetProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondSetProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondSet.txt";
    protected FB_DiamondSetContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondSet> mData = new Dictionary<int, FB_DiamondSet>();
    private List<FB_DiamondSet> mListData = new List<FB_DiamondSet>();
    public List<FB_DiamondSet> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondSet GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondSet);
    }
    public Dictionary<int, FB_DiamondSet> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondSetContainer.FB_DiamondSetContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondSetContainer.GetRootAsFB_DiamondSetContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_DiamondStrengthenProvider
{
    private static FB_DiamondStrengthenProvider _Instance;
    public static FB_DiamondStrengthenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_DiamondStrengthenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/DiamondStrengthen.txt";
    protected FB_DiamondStrengthenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_DiamondStrengthen> mData = new Dictionary<int, FB_DiamondStrengthen>();
    private List<FB_DiamondStrengthen> mListData = new List<FB_DiamondStrengthen>();
    public List<FB_DiamondStrengthen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_DiamondStrengthen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_DiamondStrengthen);
    }
    public Dictionary<int, FB_DiamondStrengthen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_DiamondStrengthenContainer.FB_DiamondStrengthenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_DiamondStrengthenContainer.GetRootAsFB_DiamondStrengthenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EmotionBaseProvider
{
    private static FB_EmotionBaseProvider _Instance;
    public static FB_EmotionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EmotionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EmotionBase.txt";
    protected FB_EmotionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EmotionBase> mData = new Dictionary<int, FB_EmotionBase>();
    private List<FB_EmotionBase> mListData = new List<FB_EmotionBase>();
    public List<FB_EmotionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EmotionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EmotionBase);
    }
    public Dictionary<int, FB_EmotionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EmotionBaseContainer.FB_EmotionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EmotionBaseContainer.GetRootAsFB_EmotionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EmotionClassProvider
{
    private static FB_EmotionClassProvider _Instance;
    public static FB_EmotionClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EmotionClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EmotionClass.txt";
    protected FB_EmotionClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EmotionClass> mData = new Dictionary<int, FB_EmotionClass>();
    private List<FB_EmotionClass> mListData = new List<FB_EmotionClass>();
    public List<FB_EmotionClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EmotionClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EmotionClass);
    }
    public Dictionary<int, FB_EmotionClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EmotionClassContainer.FB_EmotionClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EmotionClassContainer.GetRootAsFB_EmotionClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipAttrProvider
{
    private static FB_EquipAttrProvider _Instance;
    public static FB_EquipAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipAttr.txt";
    protected FB_EquipAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipAttr> mData = new Dictionary<int, FB_EquipAttr>();
    private List<FB_EquipAttr> mListData = new List<FB_EquipAttr>();
    public List<FB_EquipAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipAttr);
    }
    public Dictionary<int, FB_EquipAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipAttrContainer.FB_EquipAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipAttrContainer.GetRootAsFB_EquipAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipAttrRateProvider
{
    private static FB_EquipAttrRateProvider _Instance;
    public static FB_EquipAttrRateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipAttrRateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipAttrRate.txt";
    protected FB_EquipAttrRateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipAttrRate> mData = new Dictionary<int, FB_EquipAttrRate>();
    private List<FB_EquipAttrRate> mListData = new List<FB_EquipAttrRate>();
    public List<FB_EquipAttrRate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipAttrRate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipAttrRate);
    }
    public Dictionary<int, FB_EquipAttrRate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipAttrRateContainer.FB_EquipAttrRateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipAttrRateContainer.GetRootAsFB_EquipAttrRateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipAttrValueProvider
{
    private static FB_EquipAttrValueProvider _Instance;
    public static FB_EquipAttrValueProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipAttrValueProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipAttrValue.txt";
    protected FB_EquipAttrValueContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipAttrValue> mData = new Dictionary<int, FB_EquipAttrValue>();
    private List<FB_EquipAttrValue> mListData = new List<FB_EquipAttrValue>();
    public List<FB_EquipAttrValue> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipAttrValue GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipAttrValue);
    }
    public Dictionary<int, FB_EquipAttrValue> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipAttrValueContainer.FB_EquipAttrValueContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipAttrValueContainer.GetRootAsFB_EquipAttrValueContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipCompoundTypeProvider
{
    private static FB_EquipCompoundTypeProvider _Instance;
    public static FB_EquipCompoundTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipCompoundTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipCompoundType.txt";
    protected FB_EquipCompoundTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipCompoundType> mData = new Dictionary<int, FB_EquipCompoundType>();
    private List<FB_EquipCompoundType> mListData = new List<FB_EquipCompoundType>();
    public List<FB_EquipCompoundType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipCompoundType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipCompoundType);
    }
    public Dictionary<int, FB_EquipCompoundType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipCompoundTypeContainer.FB_EquipCompoundTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipCompoundTypeContainer.GetRootAsFB_EquipCompoundTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipCompoundTypeShenZhuangProvider
{
    private static FB_EquipCompoundTypeShenZhuangProvider _Instance;
    public static FB_EquipCompoundTypeShenZhuangProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipCompoundTypeShenZhuangProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipCompoundTypeShenZhuang.txt";
    protected FB_EquipCompoundTypeShenZhuangContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipCompoundTypeShenZhuang> mData = new Dictionary<int, FB_EquipCompoundTypeShenZhuang>();
    private List<FB_EquipCompoundTypeShenZhuang> mListData = new List<FB_EquipCompoundTypeShenZhuang>();
    public List<FB_EquipCompoundTypeShenZhuang> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipCompoundTypeShenZhuang GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipCompoundTypeShenZhuang);
    }
    public Dictionary<int, FB_EquipCompoundTypeShenZhuang> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipCompoundTypeShenZhuangContainer.FB_EquipCompoundTypeShenZhuangContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipCompoundTypeShenZhuangContainer.GetRootAsFB_EquipCompoundTypeShenZhuangContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipExchangeProvider
{
    private static FB_EquipExchangeProvider _Instance;
    public static FB_EquipExchangeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipExchangeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipExchange.txt";
    protected FB_EquipExchangeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipExchange> mData = new Dictionary<int, FB_EquipExchange>();
    private List<FB_EquipExchange> mListData = new List<FB_EquipExchange>();
    public List<FB_EquipExchange> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipExchange GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipExchange);
    }
    public Dictionary<int, FB_EquipExchange> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipExchangeContainer.FB_EquipExchangeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipExchangeContainer.GetRootAsFB_EquipExchangeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipExhibitionProvider
{
    private static FB_EquipExhibitionProvider _Instance;
    public static FB_EquipExhibitionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipExhibitionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipExhibition.txt";
    protected FB_EquipExhibitionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipExhibition> mData = new Dictionary<int, FB_EquipExhibition>();
    private List<FB_EquipExhibition> mListData = new List<FB_EquipExhibition>();
    public List<FB_EquipExhibition> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipExhibition GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipExhibition);
    }
    public Dictionary<int, FB_EquipExhibition> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipExhibitionContainer.FB_EquipExhibitionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipExhibitionContainer.GetRootAsFB_EquipExhibitionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipExtraAttrProvider
{
    private static FB_EquipExtraAttrProvider _Instance;
    public static FB_EquipExtraAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipExtraAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipExtraAttr.txt";
    protected FB_EquipExtraAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipExtraAttr> mData = new Dictionary<int, FB_EquipExtraAttr>();
    private List<FB_EquipExtraAttr> mListData = new List<FB_EquipExtraAttr>();
    public List<FB_EquipExtraAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipExtraAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipExtraAttr);
    }
    public Dictionary<int, FB_EquipExtraAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipExtraAttrContainer.FB_EquipExtraAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipExtraAttrContainer.GetRootAsFB_EquipExtraAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipFavPointProvider
{
    private static FB_EquipFavPointProvider _Instance;
    public static FB_EquipFavPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipFavPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipFavPoint.txt";
    protected FB_EquipFavPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipFavPoint> mData = new Dictionary<int, FB_EquipFavPoint>();
    private List<FB_EquipFavPoint> mListData = new List<FB_EquipFavPoint>();
    public List<FB_EquipFavPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipFavPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipFavPoint);
    }
    public Dictionary<int, FB_EquipFavPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipFavPointContainer.FB_EquipFavPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipFavPointContainer.GetRootAsFB_EquipFavPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipFuLingAttrProvider
{
    private static FB_EquipFuLingAttrProvider _Instance;
    public static FB_EquipFuLingAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipFuLingAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipFuLingAttr.txt";
    protected FB_EquipFuLingAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipFuLingAttr> mData = new Dictionary<int, FB_EquipFuLingAttr>();
    private List<FB_EquipFuLingAttr> mListData = new List<FB_EquipFuLingAttr>();
    public List<FB_EquipFuLingAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipFuLingAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipFuLingAttr);
    }
    public Dictionary<int, FB_EquipFuLingAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipFuLingAttrContainer.FB_EquipFuLingAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipFuLingAttrContainer.GetRootAsFB_EquipFuLingAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipFuLingLevelUpProvider
{
    private static FB_EquipFuLingLevelUpProvider _Instance;
    public static FB_EquipFuLingLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipFuLingLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipFuLingLevelUp.txt";
    protected FB_EquipFuLingLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipFuLingLevelUp> mData = new Dictionary<int, FB_EquipFuLingLevelUp>();
    private List<FB_EquipFuLingLevelUp> mListData = new List<FB_EquipFuLingLevelUp>();
    public List<FB_EquipFuLingLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipFuLingLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipFuLingLevelUp);
    }
    public Dictionary<int, FB_EquipFuLingLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipFuLingLevelUpContainer.FB_EquipFuLingLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipFuLingLevelUpContainer.GetRootAsFB_EquipFuLingLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipFusionAttrProvider
{
    private static FB_EquipFusionAttrProvider _Instance;
    public static FB_EquipFusionAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipFusionAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipFusionAttr.txt";
    protected FB_EquipFusionAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipFusionAttr> mData = new Dictionary<int, FB_EquipFusionAttr>();
    private List<FB_EquipFusionAttr> mListData = new List<FB_EquipFusionAttr>();
    public List<FB_EquipFusionAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipFusionAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipFusionAttr);
    }
    public Dictionary<int, FB_EquipFusionAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipFusionAttrContainer.FB_EquipFusionAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipFusionAttrContainer.GetRootAsFB_EquipFusionAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipFusionBaseProvider
{
    private static FB_EquipFusionBaseProvider _Instance;
    public static FB_EquipFusionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipFusionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipFusionBase.txt";
    protected FB_EquipFusionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipFusionBase> mData = new Dictionary<int, FB_EquipFusionBase>();
    private List<FB_EquipFusionBase> mListData = new List<FB_EquipFusionBase>();
    public List<FB_EquipFusionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipFusionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipFusionBase);
    }
    public Dictionary<int, FB_EquipFusionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipFusionBaseContainer.FB_EquipFusionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipFusionBaseContainer.GetRootAsFB_EquipFusionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipPartZhuHunProvider
{
    private static FB_EquipPartZhuHunProvider _Instance;
    public static FB_EquipPartZhuHunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipPartZhuHunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipPartZhuHun.txt";
    protected FB_EquipPartZhuHunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipPartZhuHun> mData = new Dictionary<int, FB_EquipPartZhuHun>();
    private List<FB_EquipPartZhuHun> mListData = new List<FB_EquipPartZhuHun>();
    public List<FB_EquipPartZhuHun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipPartZhuHun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipPartZhuHun);
    }
    public Dictionary<int, FB_EquipPartZhuHun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipPartZhuHunContainer.FB_EquipPartZhuHunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipPartZhuHunContainer.GetRootAsFB_EquipPartZhuHunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipPartZhuHunBaoShiProvider
{
    private static FB_EquipPartZhuHunBaoShiProvider _Instance;
    public static FB_EquipPartZhuHunBaoShiProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipPartZhuHunBaoShiProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipPartZhuHunBaoShi.txt";
    protected FB_EquipPartZhuHunBaoShiContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipPartZhuHunBaoShi> mData = new Dictionary<int, FB_EquipPartZhuHunBaoShi>();
    private List<FB_EquipPartZhuHunBaoShi> mListData = new List<FB_EquipPartZhuHunBaoShi>();
    public List<FB_EquipPartZhuHunBaoShi> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipPartZhuHunBaoShi GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipPartZhuHunBaoShi);
    }
    public Dictionary<int, FB_EquipPartZhuHunBaoShi> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipPartZhuHunBaoShiContainer.FB_EquipPartZhuHunBaoShiContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipPartZhuHunBaoShiContainer.GetRootAsFB_EquipPartZhuHunBaoShiContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipRandomAttrProvider
{
    private static FB_EquipRandomAttrProvider _Instance;
    public static FB_EquipRandomAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipRandomAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipRandomAttr.txt";
    protected FB_EquipRandomAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipRandomAttr> mData = new Dictionary<int, FB_EquipRandomAttr>();
    private List<FB_EquipRandomAttr> mListData = new List<FB_EquipRandomAttr>();
    public List<FB_EquipRandomAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipRandomAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipRandomAttr);
    }
    public Dictionary<int, FB_EquipRandomAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipRandomAttrContainer.FB_EquipRandomAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipRandomAttrContainer.GetRootAsFB_EquipRandomAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipRecastProvider
{
    private static FB_EquipRecastProvider _Instance;
    public static FB_EquipRecastProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipRecastProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipRecast.txt";
    protected FB_EquipRecastContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipRecast> mData = new Dictionary<int, FB_EquipRecast>();
    private List<FB_EquipRecast> mListData = new List<FB_EquipRecast>();
    public List<FB_EquipRecast> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipRecast GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipRecast);
    }
    public Dictionary<int, FB_EquipRecast> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipRecastContainer.FB_EquipRecastContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipRecastContainer.GetRootAsFB_EquipRecastContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSetStoneProvider
{
    private static FB_EquipSetStoneProvider _Instance;
    public static FB_EquipSetStoneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSetStoneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSetStone.txt";
    protected FB_EquipSetStoneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSetStone> mData = new Dictionary<int, FB_EquipSetStone>();
    private List<FB_EquipSetStone> mListData = new List<FB_EquipSetStone>();
    public List<FB_EquipSetStone> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSetStone GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSetStone);
    }
    public Dictionary<int, FB_EquipSetStone> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSetStoneContainer.FB_EquipSetStoneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSetStoneContainer.GetRootAsFB_EquipSetStoneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSetStoneGroupAttrProvider
{
    private static FB_EquipSetStoneGroupAttrProvider _Instance;
    public static FB_EquipSetStoneGroupAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSetStoneGroupAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSetStoneGroupAttr.txt";
    protected FB_EquipSetStoneGroupAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSetStoneGroupAttr> mData = new Dictionary<int, FB_EquipSetStoneGroupAttr>();
    private List<FB_EquipSetStoneGroupAttr> mListData = new List<FB_EquipSetStoneGroupAttr>();
    public List<FB_EquipSetStoneGroupAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSetStoneGroupAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSetStoneGroupAttr);
    }
    public Dictionary<int, FB_EquipSetStoneGroupAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSetStoneGroupAttrContainer.FB_EquipSetStoneGroupAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSetStoneGroupAttrContainer.GetRootAsFB_EquipSetStoneGroupAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSlotAttrProvider
{
    private static FB_EquipSlotAttrProvider _Instance;
    public static FB_EquipSlotAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSlotAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSlotAttr.txt";
    protected FB_EquipSlotAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSlotAttr> mData = new Dictionary<int, FB_EquipSlotAttr>();
    private List<FB_EquipSlotAttr> mListData = new List<FB_EquipSlotAttr>();
    public List<FB_EquipSlotAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSlotAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSlotAttr);
    }
    public Dictionary<int, FB_EquipSlotAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSlotAttrContainer.FB_EquipSlotAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSlotAttrContainer.GetRootAsFB_EquipSlotAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSlotResonanceProvider
{
    private static FB_EquipSlotResonanceProvider _Instance;
    public static FB_EquipSlotResonanceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSlotResonanceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSlotResonance.txt";
    protected FB_EquipSlotResonanceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSlotResonance> mData = new Dictionary<int, FB_EquipSlotResonance>();
    private List<FB_EquipSlotResonance> mListData = new List<FB_EquipSlotResonance>();
    public List<FB_EquipSlotResonance> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSlotResonance GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSlotResonance);
    }
    public Dictionary<int, FB_EquipSlotResonance> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSlotResonanceContainer.FB_EquipSlotResonanceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSlotResonanceContainer.GetRootAsFB_EquipSlotResonanceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSlotStrengthenProvider
{
    private static FB_EquipSlotStrengthenProvider _Instance;
    public static FB_EquipSlotStrengthenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSlotStrengthenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSlotStrengthen.txt";
    protected FB_EquipSlotStrengthenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSlotStrengthen> mData = new Dictionary<int, FB_EquipSlotStrengthen>();
    private List<FB_EquipSlotStrengthen> mListData = new List<FB_EquipSlotStrengthen>();
    public List<FB_EquipSlotStrengthen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSlotStrengthen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSlotStrengthen);
    }
    public Dictionary<int, FB_EquipSlotStrengthen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSlotStrengthenContainer.FB_EquipSlotStrengthenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSlotStrengthenContainer.GetRootAsFB_EquipSlotStrengthenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipSourceProvider
{
    private static FB_EquipSourceProvider _Instance;
    public static FB_EquipSourceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipSourceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipSource.txt";
    protected FB_EquipSourceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipSource> mData = new Dictionary<int, FB_EquipSource>();
    private List<FB_EquipSource> mListData = new List<FB_EquipSource>();
    public List<FB_EquipSource> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipSource GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipSource);
    }
    public Dictionary<int, FB_EquipSource> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipSourceContainer.FB_EquipSourceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipSourceContainer.GetRootAsFB_EquipSourceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipStrengthenProvider
{
    private static FB_EquipStrengthenProvider _Instance;
    public static FB_EquipStrengthenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipStrengthenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipStrengthen.txt";
    protected FB_EquipStrengthenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipStrengthen> mData = new Dictionary<int, FB_EquipStrengthen>();
    private List<FB_EquipStrengthen> mListData = new List<FB_EquipStrengthen>();
    public List<FB_EquipStrengthen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipStrengthen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipStrengthen);
    }
    public Dictionary<int, FB_EquipStrengthen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipStrengthenContainer.FB_EquipStrengthenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipStrengthenContainer.GetRootAsFB_EquipStrengthenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EquipZhuHunProvider
{
    private static FB_EquipZhuHunProvider _Instance;
    public static FB_EquipZhuHunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EquipZhuHunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EquipZhuHun.txt";
    protected FB_EquipZhuHunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EquipZhuHun> mData = new Dictionary<int, FB_EquipZhuHun>();
    private List<FB_EquipZhuHun> mListData = new List<FB_EquipZhuHun>();
    public List<FB_EquipZhuHun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EquipZhuHun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EquipZhuHun);
    }
    public Dictionary<int, FB_EquipZhuHun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EquipZhuHunContainer.FB_EquipZhuHunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EquipZhuHunContainer.GetRootAsFB_EquipZhuHunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EternalTreasureProvider
{
    private static FB_EternalTreasureProvider _Instance;
    public static FB_EternalTreasureProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EternalTreasureProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EternalTreasure.txt";
    protected FB_EternalTreasureContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EternalTreasure> mData = new Dictionary<int, FB_EternalTreasure>();
    private List<FB_EternalTreasure> mListData = new List<FB_EternalTreasure>();
    public List<FB_EternalTreasure> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EternalTreasure GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EternalTreasure);
    }
    public Dictionary<int, FB_EternalTreasure> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EternalTreasureContainer.FB_EternalTreasureContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EternalTreasureContainer.GetRootAsFB_EternalTreasureContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_EternalTreasureRewardProvider
{
    private static FB_EternalTreasureRewardProvider _Instance;
    public static FB_EternalTreasureRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_EternalTreasureRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/EternalTreasureReward.txt";
    protected FB_EternalTreasureRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_EternalTreasureReward> mData = new Dictionary<int, FB_EternalTreasureReward>();
    private List<FB_EternalTreasureReward> mListData = new List<FB_EternalTreasureReward>();
    public List<FB_EternalTreasureReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_EternalTreasureReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_EternalTreasureReward);
    }
    public Dictionary<int, FB_EternalTreasureReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_EternalTreasureRewardContainer.FB_EternalTreasureRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_EternalTreasureRewardContainer.GetRootAsFB_EternalTreasureRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FakeObjectProvider
{
    private static FB_FakeObjectProvider _Instance;
    public static FB_FakeObjectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FakeObjectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FakeObject.txt";
    protected FB_FakeObjectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FakeObject> mData = new Dictionary<int, FB_FakeObject>();
    private List<FB_FakeObject> mListData = new List<FB_FakeObject>();
    public List<FB_FakeObject> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FakeObject GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FakeObject);
    }
    public Dictionary<int, FB_FakeObject> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FakeObjectContainer.FB_FakeObjectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FakeObjectContainer.GetRootAsFB_FakeObjectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FindRewardBaseProvider
{
    private static FB_FindRewardBaseProvider _Instance;
    public static FB_FindRewardBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FindRewardBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FindRewardBase.txt";
    protected FB_FindRewardBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FindRewardBase> mData = new Dictionary<int, FB_FindRewardBase>();
    private List<FB_FindRewardBase> mListData = new List<FB_FindRewardBase>();
    public List<FB_FindRewardBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FindRewardBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FindRewardBase);
    }
    public Dictionary<int, FB_FindRewardBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FindRewardBaseContainer.FB_FindRewardBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FindRewardBaseContainer.GetRootAsFB_FindRewardBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FindRewardClassProvider
{
    private static FB_FindRewardClassProvider _Instance;
    public static FB_FindRewardClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FindRewardClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FindRewardClass.txt";
    protected FB_FindRewardClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FindRewardClass> mData = new Dictionary<int, FB_FindRewardClass>();
    private List<FB_FindRewardClass> mListData = new List<FB_FindRewardClass>();
    public List<FB_FindRewardClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FindRewardClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FindRewardClass);
    }
    public Dictionary<int, FB_FindRewardClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FindRewardClassContainer.FB_FindRewardClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FindRewardClassContainer.GetRootAsFB_FindRewardClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FuLiDaTingProvider
{
    private static FB_FuLiDaTingProvider _Instance;
    public static FB_FuLiDaTingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FuLiDaTingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FuLiDaTing.txt";
    protected FB_FuLiDaTingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FuLiDaTing> mData = new Dictionary<int, FB_FuLiDaTing>();
    private List<FB_FuLiDaTing> mListData = new List<FB_FuLiDaTing>();
    public List<FB_FuLiDaTing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FuLiDaTing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FuLiDaTing);
    }
    public Dictionary<int, FB_FuLiDaTing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FuLiDaTingContainer.FB_FuLiDaTingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FuLiDaTingContainer.GetRootAsFB_FuLiDaTingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FunctionBaseProvider
{
    private static FB_FunctionBaseProvider _Instance;
    public static FB_FunctionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FunctionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FunctionBase.txt";
    protected FB_FunctionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FunctionBase> mData = new Dictionary<int, FB_FunctionBase>();
    private List<FB_FunctionBase> mListData = new List<FB_FunctionBase>();
    public List<FB_FunctionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FunctionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FunctionBase);
    }
    public Dictionary<int, FB_FunctionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FunctionBaseContainer.FB_FunctionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FunctionBaseContainer.GetRootAsFB_FunctionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_FunctionPrepareProvider
{
    private static FB_FunctionPrepareProvider _Instance;
    public static FB_FunctionPrepareProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_FunctionPrepareProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/FunctionPrepare.txt";
    protected FB_FunctionPrepareContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_FunctionPrepare> mData = new Dictionary<int, FB_FunctionPrepare>();
    private List<FB_FunctionPrepare> mListData = new List<FB_FunctionPrepare>();
    public List<FB_FunctionPrepare> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_FunctionPrepare GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_FunctionPrepare);
    }
    public Dictionary<int, FB_FunctionPrepare> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_FunctionPrepareContainer.FB_FunctionPrepareContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_FunctionPrepareContainer.GetRootAsFB_FunctionPrepareContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GodWeaponBaseProvider
{
    private static FB_GodWeaponBaseProvider _Instance;
    public static FB_GodWeaponBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GodWeaponBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GodWeaponBase.txt";
    protected FB_GodWeaponBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GodWeaponBase> mData = new Dictionary<int, FB_GodWeaponBase>();
    private List<FB_GodWeaponBase> mListData = new List<FB_GodWeaponBase>();
    public List<FB_GodWeaponBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GodWeaponBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GodWeaponBase);
    }
    public Dictionary<int, FB_GodWeaponBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GodWeaponBaseContainer.FB_GodWeaponBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GodWeaponBaseContainer.GetRootAsFB_GodWeaponBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GodWeaponLevelProvider
{
    private static FB_GodWeaponLevelProvider _Instance;
    public static FB_GodWeaponLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GodWeaponLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GodWeaponLevel.txt";
    protected FB_GodWeaponLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GodWeaponLevel> mData = new Dictionary<int, FB_GodWeaponLevel>();
    private List<FB_GodWeaponLevel> mListData = new List<FB_GodWeaponLevel>();
    public List<FB_GodWeaponLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GodWeaponLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GodWeaponLevel);
    }
    public Dictionary<int, FB_GodWeaponLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GodWeaponLevelContainer.FB_GodWeaponLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GodWeaponLevelContainer.GetRootAsFB_GodWeaponLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GodWordBaseProvider
{
    private static FB_GodWordBaseProvider _Instance;
    public static FB_GodWordBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GodWordBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GodWordBase.txt";
    protected FB_GodWordBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GodWordBase> mData = new Dictionary<int, FB_GodWordBase>();
    private List<FB_GodWordBase> mListData = new List<FB_GodWordBase>();
    public List<FB_GodWordBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GodWordBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GodWordBase);
    }
    public Dictionary<int, FB_GodWordBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GodWordBaseContainer.FB_GodWordBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GodWordBaseContainer.GetRootAsFB_GodWordBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GodWordCharmProvider
{
    private static FB_GodWordCharmProvider _Instance;
    public static FB_GodWordCharmProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GodWordCharmProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GodWordCharm.txt";
    protected FB_GodWordCharmContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GodWordCharm> mData = new Dictionary<int, FB_GodWordCharm>();
    private List<FB_GodWordCharm> mListData = new List<FB_GodWordCharm>();
    public List<FB_GodWordCharm> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GodWordCharm GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GodWordCharm);
    }
    public Dictionary<int, FB_GodWordCharm> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GodWordCharmContainer.FB_GodWordCharmContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GodWordCharmContainer.GetRootAsFB_GodWordCharmContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GoldCopyAwardProvider
{
    private static FB_GoldCopyAwardProvider _Instance;
    public static FB_GoldCopyAwardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GoldCopyAwardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GoldCopyAward.txt";
    protected FB_GoldCopyAwardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GoldCopyAward> mData = new Dictionary<int, FB_GoldCopyAward>();
    private List<FB_GoldCopyAward> mListData = new List<FB_GoldCopyAward>();
    public List<FB_GoldCopyAward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GoldCopyAward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GoldCopyAward);
    }
    public Dictionary<int, FB_GoldCopyAward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GoldCopyAwardContainer.FB_GoldCopyAwardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GoldCopyAwardContainer.GetRootAsFB_GoldCopyAwardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GoldenBadgeBaseProvider
{
    private static FB_GoldenBadgeBaseProvider _Instance;
    public static FB_GoldenBadgeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GoldenBadgeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GoldenBadgeBase.txt";
    protected FB_GoldenBadgeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GoldenBadgeBase> mData = new Dictionary<int, FB_GoldenBadgeBase>();
    private List<FB_GoldenBadgeBase> mListData = new List<FB_GoldenBadgeBase>();
    public List<FB_GoldenBadgeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GoldenBadgeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GoldenBadgeBase);
    }
    public Dictionary<int, FB_GoldenBadgeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GoldenBadgeBaseContainer.FB_GoldenBadgeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GoldenBadgeBaseContainer.GetRootAsFB_GoldenBadgeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GoldenBadgeLevelUpProvider
{
    private static FB_GoldenBadgeLevelUpProvider _Instance;
    public static FB_GoldenBadgeLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GoldenBadgeLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GoldenBadgeLevelUp.txt";
    protected FB_GoldenBadgeLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GoldenBadgeLevelUp> mData = new Dictionary<int, FB_GoldenBadgeLevelUp>();
    private List<FB_GoldenBadgeLevelUp> mListData = new List<FB_GoldenBadgeLevelUp>();
    public List<FB_GoldenBadgeLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GoldenBadgeLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GoldenBadgeLevelUp);
    }
    public Dictionary<int, FB_GoldenBadgeLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GoldenBadgeLevelUpContainer.FB_GoldenBadgeLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GoldenBadgeLevelUpContainer.GetRootAsFB_GoldenBadgeLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GreetingCardRewardProvider
{
    private static FB_GreetingCardRewardProvider _Instance;
    public static FB_GreetingCardRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GreetingCardRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GreetingCardReward.txt";
    protected FB_GreetingCardRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GreetingCardReward> mData = new Dictionary<int, FB_GreetingCardReward>();
    private List<FB_GreetingCardReward> mListData = new List<FB_GreetingCardReward>();
    public List<FB_GreetingCardReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GreetingCardReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GreetingCardReward);
    }
    public Dictionary<int, FB_GreetingCardReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GreetingCardRewardContainer.FB_GreetingCardRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GreetingCardRewardContainer.GetRootAsFB_GreetingCardRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GroupPointProvider
{
    private static FB_GroupPointProvider _Instance;
    public static FB_GroupPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GroupPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GroupPoint.txt";
    protected FB_GroupPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GroupPoint> mData = new Dictionary<int, FB_GroupPoint>();
    private List<FB_GroupPoint> mListData = new List<FB_GroupPoint>();
    public List<FB_GroupPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GroupPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GroupPoint);
    }
    public Dictionary<int, FB_GroupPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GroupPointContainer.FB_GroupPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GroupPointContainer.GetRootAsFB_GroupPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GrowUpBagProvider
{
    private static FB_GrowUpBagProvider _Instance;
    public static FB_GrowUpBagProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GrowUpBagProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GrowUpBag.txt";
    protected FB_GrowUpBagContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GrowUpBag> mData = new Dictionary<int, FB_GrowUpBag>();
    private List<FB_GrowUpBag> mListData = new List<FB_GrowUpBag>();
    public List<FB_GrowUpBag> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GrowUpBag GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GrowUpBag);
    }
    public Dictionary<int, FB_GrowUpBag> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GrowUpBagContainer.FB_GrowUpBagContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GrowUpBagContainer.GetRootAsFB_GrowUpBagContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuideCollectBaseProvider
{
    private static FB_GuideCollectBaseProvider _Instance;
    public static FB_GuideCollectBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuideCollectBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuideCollectBase.txt";
    protected FB_GuideCollectBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuideCollectBase> mData = new Dictionary<int, FB_GuideCollectBase>();
    private List<FB_GuideCollectBase> mListData = new List<FB_GuideCollectBase>();
    public List<FB_GuideCollectBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuideCollectBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuideCollectBase);
    }
    public Dictionary<int, FB_GuideCollectBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuideCollectBaseContainer.FB_GuideCollectBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuideCollectBaseContainer.GetRootAsFB_GuideCollectBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuideCollectBossTipsProvider
{
    private static FB_GuideCollectBossTipsProvider _Instance;
    public static FB_GuideCollectBossTipsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuideCollectBossTipsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuideCollectBossTips.txt";
    protected FB_GuideCollectBossTipsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuideCollectBossTips> mData = new Dictionary<int, FB_GuideCollectBossTips>();
    private List<FB_GuideCollectBossTips> mListData = new List<FB_GuideCollectBossTips>();
    public List<FB_GuideCollectBossTips> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuideCollectBossTips GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuideCollectBossTips);
    }
    public Dictionary<int, FB_GuideCollectBossTips> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuideCollectBossTipsContainer.FB_GuideCollectBossTipsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuideCollectBossTipsContainer.GetRootAsFB_GuideCollectBossTipsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildActiveBaseProvider
{
    private static FB_GuildActiveBaseProvider _Instance;
    public static FB_GuildActiveBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildActiveBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildActiveBase.txt";
    protected FB_GuildActiveBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildActiveBase> mData = new Dictionary<int, FB_GuildActiveBase>();
    private List<FB_GuildActiveBase> mListData = new List<FB_GuildActiveBase>();
    public List<FB_GuildActiveBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildActiveBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildActiveBase);
    }
    public Dictionary<int, FB_GuildActiveBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildActiveBaseContainer.FB_GuildActiveBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildActiveBaseContainer.GetRootAsFB_GuildActiveBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildBaseProvider
{
    private static FB_GuildBaseProvider _Instance;
    public static FB_GuildBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildBase.txt";
    protected FB_GuildBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildBase> mData = new Dictionary<int, FB_GuildBase>();
    private List<FB_GuildBase> mListData = new List<FB_GuildBase>();
    public List<FB_GuildBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildBase);
    }
    public Dictionary<int, FB_GuildBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildBaseContainer.FB_GuildBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildBaseContainer.GetRootAsFB_GuildBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildBlessBaseProvider
{
    private static FB_GuildBlessBaseProvider _Instance;
    public static FB_GuildBlessBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildBlessBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildBlessBase.txt";
    protected FB_GuildBlessBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildBlessBase> mData = new Dictionary<int, FB_GuildBlessBase>();
    private List<FB_GuildBlessBase> mListData = new List<FB_GuildBlessBase>();
    public List<FB_GuildBlessBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildBlessBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildBlessBase);
    }
    public Dictionary<int, FB_GuildBlessBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildBlessBaseContainer.FB_GuildBlessBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildBlessBaseContainer.GetRootAsFB_GuildBlessBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildBossProvider
{
    private static FB_GuildBossProvider _Instance;
    public static FB_GuildBossProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildBossProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildBoss.txt";
    protected FB_GuildBossContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildBoss> mData = new Dictionary<int, FB_GuildBoss>();
    private List<FB_GuildBoss> mListData = new List<FB_GuildBoss>();
    public List<FB_GuildBoss> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildBoss GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildBoss);
    }
    public Dictionary<int, FB_GuildBoss> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildBossContainer.FB_GuildBossContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildBossContainer.GetRootAsFB_GuildBossContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildFoodBoxProvider
{
    private static FB_GuildFoodBoxProvider _Instance;
    public static FB_GuildFoodBoxProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildFoodBoxProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildFoodBox.txt";
    protected FB_GuildFoodBoxContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildFoodBox> mData = new Dictionary<int, FB_GuildFoodBox>();
    private List<FB_GuildFoodBox> mListData = new List<FB_GuildFoodBox>();
    public List<FB_GuildFoodBox> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildFoodBox GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildFoodBox);
    }
    public Dictionary<int, FB_GuildFoodBox> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildFoodBoxContainer.FB_GuildFoodBoxContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildFoodBoxContainer.GetRootAsFB_GuildFoodBoxContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildFormationBaseProvider
{
    private static FB_GuildFormationBaseProvider _Instance;
    public static FB_GuildFormationBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildFormationBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildFormationBase.txt";
    protected FB_GuildFormationBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildFormationBase> mData = new Dictionary<int, FB_GuildFormationBase>();
    private List<FB_GuildFormationBase> mListData = new List<FB_GuildFormationBase>();
    public List<FB_GuildFormationBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildFormationBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildFormationBase);
    }
    public Dictionary<int, FB_GuildFormationBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildFormationBaseContainer.FB_GuildFormationBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildFormationBaseContainer.GetRootAsFB_GuildFormationBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildFormationLevelProvider
{
    private static FB_GuildFormationLevelProvider _Instance;
    public static FB_GuildFormationLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildFormationLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildFormationLevel.txt";
    protected FB_GuildFormationLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildFormationLevel> mData = new Dictionary<int, FB_GuildFormationLevel>();
    private List<FB_GuildFormationLevel> mListData = new List<FB_GuildFormationLevel>();
    public List<FB_GuildFormationLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildFormationLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildFormationLevel);
    }
    public Dictionary<int, FB_GuildFormationLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildFormationLevelContainer.FB_GuildFormationLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildFormationLevelContainer.GetRootAsFB_GuildFormationLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildFormationTypeNewProvider
{
    private static FB_GuildFormationTypeNewProvider _Instance;
    public static FB_GuildFormationTypeNewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildFormationTypeNewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildFormationTypeNew.txt";
    protected FB_GuildFormationTypeNewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildFormationTypeNew> mData = new Dictionary<int, FB_GuildFormationTypeNew>();
    private List<FB_GuildFormationTypeNew> mListData = new List<FB_GuildFormationTypeNew>();
    public List<FB_GuildFormationTypeNew> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildFormationTypeNew GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildFormationTypeNew);
    }
    public Dictionary<int, FB_GuildFormationTypeNew> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildFormationTypeNewContainer.FB_GuildFormationTypeNewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildFormationTypeNewContainer.GetRootAsFB_GuildFormationTypeNewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildPermissionProvider
{
    private static FB_GuildPermissionProvider _Instance;
    public static FB_GuildPermissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildPermissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildPermission.txt";
    protected FB_GuildPermissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildPermission> mData = new Dictionary<int, FB_GuildPermission>();
    private List<FB_GuildPermission> mListData = new List<FB_GuildPermission>();
    public List<FB_GuildPermission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildPermission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildPermission);
    }
    public Dictionary<int, FB_GuildPermission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildPermissionContainer.FB_GuildPermissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildPermissionContainer.GetRootAsFB_GuildPermissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildPresentProvider
{
    private static FB_GuildPresentProvider _Instance;
    public static FB_GuildPresentProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildPresentProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildPresent.txt";
    protected FB_GuildPresentContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildPresent> mData = new Dictionary<int, FB_GuildPresent>();
    private List<FB_GuildPresent> mListData = new List<FB_GuildPresent>();
    public List<FB_GuildPresent> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildPresent GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildPresent);
    }
    public Dictionary<int, FB_GuildPresent> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildPresentContainer.FB_GuildPresentContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildPresentContainer.GetRootAsFB_GuildPresentContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildRedPacketProvider
{
    private static FB_GuildRedPacketProvider _Instance;
    public static FB_GuildRedPacketProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildRedPacketProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildRedPacket.txt";
    protected FB_GuildRedPacketContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildRedPacket> mData = new Dictionary<int, FB_GuildRedPacket>();
    private List<FB_GuildRedPacket> mListData = new List<FB_GuildRedPacket>();
    public List<FB_GuildRedPacket> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildRedPacket GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildRedPacket);
    }
    public Dictionary<int, FB_GuildRedPacket> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildRedPacketContainer.FB_GuildRedPacketContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildRedPacketContainer.GetRootAsFB_GuildRedPacketContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_GuildWelfareBaseProvider
{
    private static FB_GuildWelfareBaseProvider _Instance;
    public static FB_GuildWelfareBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_GuildWelfareBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/GuildWelfareBase.txt";
    protected FB_GuildWelfareBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_GuildWelfareBase> mData = new Dictionary<int, FB_GuildWelfareBase>();
    private List<FB_GuildWelfareBase> mListData = new List<FB_GuildWelfareBase>();
    public List<FB_GuildWelfareBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_GuildWelfareBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_GuildWelfareBase);
    }
    public Dictionary<int, FB_GuildWelfareBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_GuildWelfareBaseContainer.FB_GuildWelfareBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_GuildWelfareBaseContainer.GetRootAsFB_GuildWelfareBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingBaseProvider
{
    private static FB_HuanJingBaseProvider _Instance;
    public static FB_HuanJingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingBase.txt";
    protected FB_HuanJingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingBase> mData = new Dictionary<int, FB_HuanJingBase>();
    private List<FB_HuanJingBase> mListData = new List<FB_HuanJingBase>();
    public List<FB_HuanJingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingBase);
    }
    public Dictionary<int, FB_HuanJingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingBaseContainer.FB_HuanJingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingBaseContainer.GetRootAsFB_HuanJingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingEquipProvider
{
    private static FB_HuanJingEquipProvider _Instance;
    public static FB_HuanJingEquipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingEquipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingEquip.txt";
    protected FB_HuanJingEquipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingEquip> mData = new Dictionary<int, FB_HuanJingEquip>();
    private List<FB_HuanJingEquip> mListData = new List<FB_HuanJingEquip>();
    public List<FB_HuanJingEquip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingEquip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingEquip);
    }
    public Dictionary<int, FB_HuanJingEquip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingEquipContainer.FB_HuanJingEquipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingEquipContainer.GetRootAsFB_HuanJingEquipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingEquipSlotProvider
{
    private static FB_HuanJingEquipSlotProvider _Instance;
    public static FB_HuanJingEquipSlotProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingEquipSlotProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingEquipSlot.txt";
    protected FB_HuanJingEquipSlotContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingEquipSlot> mData = new Dictionary<int, FB_HuanJingEquipSlot>();
    private List<FB_HuanJingEquipSlot> mListData = new List<FB_HuanJingEquipSlot>();
    public List<FB_HuanJingEquipSlot> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingEquipSlot GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingEquipSlot);
    }
    public Dictionary<int, FB_HuanJingEquipSlot> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingEquipSlotContainer.FB_HuanJingEquipSlotContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingEquipSlotContainer.GetRootAsFB_HuanJingEquipSlotContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingEquipStarProvider
{
    private static FB_HuanJingEquipStarProvider _Instance;
    public static FB_HuanJingEquipStarProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingEquipStarProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingEquipStar.txt";
    protected FB_HuanJingEquipStarContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingEquipStar> mData = new Dictionary<int, FB_HuanJingEquipStar>();
    private List<FB_HuanJingEquipStar> mListData = new List<FB_HuanJingEquipStar>();
    public List<FB_HuanJingEquipStar> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingEquipStar GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingEquipStar);
    }
    public Dictionary<int, FB_HuanJingEquipStar> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingEquipStarContainer.FB_HuanJingEquipStarContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingEquipStarContainer.GetRootAsFB_HuanJingEquipStarContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingJiBanProvider
{
    private static FB_HuanJingJiBanProvider _Instance;
    public static FB_HuanJingJiBanProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingJiBanProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingJiBan.txt";
    protected FB_HuanJingJiBanContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingJiBan> mData = new Dictionary<int, FB_HuanJingJiBan>();
    private List<FB_HuanJingJiBan> mListData = new List<FB_HuanJingJiBan>();
    public List<FB_HuanJingJiBan> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingJiBan GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingJiBan);
    }
    public Dictionary<int, FB_HuanJingJiBan> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingJiBanContainer.FB_HuanJingJiBanContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingJiBanContainer.GetRootAsFB_HuanJingJiBanContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingLevelProvider
{
    private static FB_HuanJingLevelProvider _Instance;
    public static FB_HuanJingLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingLevel.txt";
    protected FB_HuanJingLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingLevel> mData = new Dictionary<int, FB_HuanJingLevel>();
    private List<FB_HuanJingLevel> mListData = new List<FB_HuanJingLevel>();
    public List<FB_HuanJingLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingLevel);
    }
    public Dictionary<int, FB_HuanJingLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingLevelContainer.FB_HuanJingLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingLevelContainer.GetRootAsFB_HuanJingLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingSkillProvider
{
    private static FB_HuanJingSkillProvider _Instance;
    public static FB_HuanJingSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingSkill.txt";
    protected FB_HuanJingSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingSkill> mData = new Dictionary<int, FB_HuanJingSkill>();
    private List<FB_HuanJingSkill> mListData = new List<FB_HuanJingSkill>();
    public List<FB_HuanJingSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingSkill);
    }
    public Dictionary<int, FB_HuanJingSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingSkillContainer.FB_HuanJingSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingSkillContainer.GetRootAsFB_HuanJingSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuanJingTypeProvider
{
    private static FB_HuanJingTypeProvider _Instance;
    public static FB_HuanJingTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuanJingTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuanJingType.txt";
    protected FB_HuanJingTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuanJingType> mData = new Dictionary<int, FB_HuanJingType>();
    private List<FB_HuanJingType> mListData = new List<FB_HuanJingType>();
    public List<FB_HuanJingType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuanJingType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuanJingType);
    }
    public Dictionary<int, FB_HuanJingType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuanJingTypeContainer.FB_HuanJingTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuanJingTypeContainer.GetRootAsFB_HuanJingTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HuLingBaseProvider
{
    private static FB_HuLingBaseProvider _Instance;
    public static FB_HuLingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HuLingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HuLingBase.txt";
    protected FB_HuLingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HuLingBase> mData = new Dictionary<int, FB_HuLingBase>();
    private List<FB_HuLingBase> mListData = new List<FB_HuLingBase>();
    public List<FB_HuLingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HuLingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HuLingBase);
    }
    public Dictionary<int, FB_HuLingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HuLingBaseContainer.FB_HuLingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HuLingBaseContainer.GetRootAsFB_HuLingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunGeBaseProvider
{
    private static FB_HunGeBaseProvider _Instance;
    public static FB_HunGeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunGeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunGeBase.txt";
    protected FB_HunGeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunGeBase> mData = new Dictionary<int, FB_HunGeBase>();
    private List<FB_HunGeBase> mListData = new List<FB_HunGeBase>();
    public List<FB_HunGeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunGeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunGeBase);
    }
    public Dictionary<int, FB_HunGeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunGeBaseContainer.FB_HunGeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunGeBaseContainer.GetRootAsFB_HunGeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangGongMingProvider
{
    private static FB_HunJiangGongMingProvider _Instance;
    public static FB_HunJiangGongMingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangGongMingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangGongMing.txt";
    protected FB_HunJiangGongMingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangGongMing> mData = new Dictionary<int, FB_HunJiangGongMing>();
    private List<FB_HunJiangGongMing> mListData = new List<FB_HunJiangGongMing>();
    public List<FB_HunJiangGongMing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangGongMing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangGongMing);
    }
    public Dictionary<int, FB_HunJiangGongMing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangGongMingContainer.FB_HunJiangGongMingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangGongMingContainer.GetRootAsFB_HunJiangGongMingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangItemBaseProvider
{
    private static FB_HunJiangItemBaseProvider _Instance;
    public static FB_HunJiangItemBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangItemBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangItemBase.txt";
    protected FB_HunJiangItemBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangItemBase> mData = new Dictionary<int, FB_HunJiangItemBase>();
    private List<FB_HunJiangItemBase> mListData = new List<FB_HunJiangItemBase>();
    public List<FB_HunJiangItemBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangItemBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangItemBase);
    }
    public Dictionary<int, FB_HunJiangItemBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangItemBaseContainer.FB_HunJiangItemBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangItemBaseContainer.GetRootAsFB_HunJiangItemBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangItemLevelUpProvider
{
    private static FB_HunJiangItemLevelUpProvider _Instance;
    public static FB_HunJiangItemLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangItemLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangItemLevelUp.txt";
    protected FB_HunJiangItemLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangItemLevelUp> mData = new Dictionary<int, FB_HunJiangItemLevelUp>();
    private List<FB_HunJiangItemLevelUp> mListData = new List<FB_HunJiangItemLevelUp>();
    public List<FB_HunJiangItemLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangItemLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangItemLevelUp);
    }
    public Dictionary<int, FB_HunJiangItemLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangItemLevelUpContainer.FB_HunJiangItemLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangItemLevelUpContainer.GetRootAsFB_HunJiangItemLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangJiBanBaseProvider
{
    private static FB_HunJiangJiBanBaseProvider _Instance;
    public static FB_HunJiangJiBanBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangJiBanBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangJiBanBase.txt";
    protected FB_HunJiangJiBanBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangJiBanBase> mData = new Dictionary<int, FB_HunJiangJiBanBase>();
    private List<FB_HunJiangJiBanBase> mListData = new List<FB_HunJiangJiBanBase>();
    public List<FB_HunJiangJiBanBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangJiBanBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangJiBanBase);
    }
    public Dictionary<int, FB_HunJiangJiBanBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangJiBanBaseContainer.FB_HunJiangJiBanBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangJiBanBaseContainer.GetRootAsFB_HunJiangJiBanBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangJiBanLevelUpProvider
{
    private static FB_HunJiangJiBanLevelUpProvider _Instance;
    public static FB_HunJiangJiBanLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangJiBanLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangJiBanLevelUp.txt";
    protected FB_HunJiangJiBanLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangJiBanLevelUp> mData = new Dictionary<int, FB_HunJiangJiBanLevelUp>();
    private List<FB_HunJiangJiBanLevelUp> mListData = new List<FB_HunJiangJiBanLevelUp>();
    public List<FB_HunJiangJiBanLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangJiBanLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangJiBanLevelUp);
    }
    public Dictionary<int, FB_HunJiangJiBanLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangJiBanLevelUpContainer.FB_HunJiangJiBanLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangJiBanLevelUpContainer.GetRootAsFB_HunJiangJiBanLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangJiBanSkillProvider
{
    private static FB_HunJiangJiBanSkillProvider _Instance;
    public static FB_HunJiangJiBanSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangJiBanSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangJiBanSkill.txt";
    protected FB_HunJiangJiBanSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangJiBanSkill> mData = new Dictionary<int, FB_HunJiangJiBanSkill>();
    private List<FB_HunJiangJiBanSkill> mListData = new List<FB_HunJiangJiBanSkill>();
    public List<FB_HunJiangJiBanSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangJiBanSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangJiBanSkill);
    }
    public Dictionary<int, FB_HunJiangJiBanSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangJiBanSkillContainer.FB_HunJiangJiBanSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangJiBanSkillContainer.GetRootAsFB_HunJiangJiBanSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangJuHunProvider
{
    private static FB_HunJiangJuHunProvider _Instance;
    public static FB_HunJiangJuHunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangJuHunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangJuHun.txt";
    protected FB_HunJiangJuHunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangJuHun> mData = new Dictionary<int, FB_HunJiangJuHun>();
    private List<FB_HunJiangJuHun> mListData = new List<FB_HunJiangJuHun>();
    public List<FB_HunJiangJuHun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangJuHun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangJuHun);
    }
    public Dictionary<int, FB_HunJiangJuHun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangJuHunContainer.FB_HunJiangJuHunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangJuHunContainer.GetRootAsFB_HunJiangJuHunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangRongLianProvider
{
    private static FB_HunJiangRongLianProvider _Instance;
    public static FB_HunJiangRongLianProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangRongLianProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangRongLian.txt";
    protected FB_HunJiangRongLianContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangRongLian> mData = new Dictionary<int, FB_HunJiangRongLian>();
    private List<FB_HunJiangRongLian> mListData = new List<FB_HunJiangRongLian>();
    public List<FB_HunJiangRongLian> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangRongLian GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangRongLian);
    }
    public Dictionary<int, FB_HunJiangRongLian> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangRongLianContainer.FB_HunJiangRongLianContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangRongLianContainer.GetRootAsFB_HunJiangRongLianContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangShangZhenProvider
{
    private static FB_HunJiangShangZhenProvider _Instance;
    public static FB_HunJiangShangZhenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangShangZhenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangShangZhen.txt";
    protected FB_HunJiangShangZhenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangShangZhen> mData = new Dictionary<int, FB_HunJiangShangZhen>();
    private List<FB_HunJiangShangZhen> mListData = new List<FB_HunJiangShangZhen>();
    public List<FB_HunJiangShangZhen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangShangZhen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangShangZhen);
    }
    public Dictionary<int, FB_HunJiangShangZhen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangShangZhenContainer.FB_HunJiangShangZhenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangShangZhenContainer.GetRootAsFB_HunJiangShangZhenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangSkillBaseProvider
{
    private static FB_HunJiangSkillBaseProvider _Instance;
    public static FB_HunJiangSkillBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangSkillBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangSkillBase.txt";
    protected FB_HunJiangSkillBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangSkillBase> mData = new Dictionary<int, FB_HunJiangSkillBase>();
    private List<FB_HunJiangSkillBase> mListData = new List<FB_HunJiangSkillBase>();
    public List<FB_HunJiangSkillBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangSkillBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangSkillBase);
    }
    public Dictionary<int, FB_HunJiangSkillBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangSkillBaseContainer.FB_HunJiangSkillBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangSkillBaseContainer.GetRootAsFB_HunJiangSkillBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangSkillValueProvider
{
    private static FB_HunJiangSkillValueProvider _Instance;
    public static FB_HunJiangSkillValueProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangSkillValueProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangSkillValue.txt";
    protected FB_HunJiangSkillValueContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangSkillValue> mData = new Dictionary<int, FB_HunJiangSkillValue>();
    private List<FB_HunJiangSkillValue> mListData = new List<FB_HunJiangSkillValue>();
    public List<FB_HunJiangSkillValue> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangSkillValue GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangSkillValue);
    }
    public Dictionary<int, FB_HunJiangSkillValue> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangSkillValueContainer.FB_HunJiangSkillValueContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangSkillValueContainer.GetRootAsFB_HunJiangSkillValueContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_HunJiangXunBaoProvider
{
    private static FB_HunJiangXunBaoProvider _Instance;
    public static FB_HunJiangXunBaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_HunJiangXunBaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/HunJiangXunBao.txt";
    protected FB_HunJiangXunBaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_HunJiangXunBao> mData = new Dictionary<int, FB_HunJiangXunBao>();
    private List<FB_HunJiangXunBao> mListData = new List<FB_HunJiangXunBao>();
    public List<FB_HunJiangXunBao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_HunJiangXunBao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_HunJiangXunBao);
    }
    public Dictionary<int, FB_HunJiangXunBao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_HunJiangXunBaoContainer.FB_HunJiangXunBaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_HunJiangXunBaoContainer.GetRootAsFB_HunJiangXunBaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_IapGiftProvider
{
    private static FB_IapGiftProvider _Instance;
    public static FB_IapGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_IapGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/IapGift.txt";
    protected FB_IapGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_IapGift> mData = new Dictionary<int, FB_IapGift>();
    private List<FB_IapGift> mListData = new List<FB_IapGift>();
    public List<FB_IapGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_IapGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_IapGift);
    }
    public Dictionary<int, FB_IapGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_IapGiftContainer.FB_IapGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_IapGiftContainer.GetRootAsFB_IapGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_IapGift2Provider
{
    private static FB_IapGift2Provider _Instance;
    public static FB_IapGift2Provider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_IapGift2Provider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/IapGift2.txt";
    protected FB_IapGift2Container mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_IapGift2> mData = new Dictionary<int, FB_IapGift2>();
    private List<FB_IapGift2> mListData = new List<FB_IapGift2>();
    public List<FB_IapGift2> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_IapGift2 GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_IapGift2);
    }
    public Dictionary<int, FB_IapGift2> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_IapGift2Container.FB_IapGift2ContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_IapGift2Container.GetRootAsFB_IapGift2Container(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_IapGiftRewardProvider
{
    private static FB_IapGiftRewardProvider _Instance;
    public static FB_IapGiftRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_IapGiftRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/IapGiftReward.txt";
    protected FB_IapGiftRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_IapGiftReward> mData = new Dictionary<int, FB_IapGiftReward>();
    private List<FB_IapGiftReward> mListData = new List<FB_IapGiftReward>();
    public List<FB_IapGiftReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_IapGiftReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_IapGiftReward);
    }
    public Dictionary<int, FB_IapGiftReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_IapGiftRewardContainer.FB_IapGiftRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_IapGiftRewardContainer.GetRootAsFB_IapGiftRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_IapGiftReward2Provider
{
    private static FB_IapGiftReward2Provider _Instance;
    public static FB_IapGiftReward2Provider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_IapGiftReward2Provider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/IapGiftReward2.txt";
    protected FB_IapGiftReward2Container mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_IapGiftReward2> mData = new Dictionary<int, FB_IapGiftReward2>();
    private List<FB_IapGiftReward2> mListData = new List<FB_IapGiftReward2>();
    public List<FB_IapGiftReward2> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_IapGiftReward2 GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_IapGiftReward2);
    }
    public Dictionary<int, FB_IapGiftReward2> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_IapGiftReward2Container.FB_IapGiftReward2ContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_IapGiftReward2Container.GetRootAsFB_IapGiftReward2Container(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ImpactProvider
{
    private static FB_ImpactProvider _Instance;
    public static FB_ImpactProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ImpactProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/Impact.txt";
    protected FB_ImpactContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Impact> mData = new Dictionary<int, FB_Impact>();
    private List<FB_Impact> mListData = new List<FB_Impact>();
    public List<FB_Impact> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Impact GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Impact);
    }
    public Dictionary<int, FB_Impact> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ImpactContainer.FB_ImpactContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ImpactContainer.GetRootAsFB_ImpactContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ImpactID))
            {
                mData.Add(item.ImpactID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemCompoundBaseProvider
{
    private static FB_ItemCompoundBaseProvider _Instance;
    public static FB_ItemCompoundBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemCompoundBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ItemCompoundBase.txt";
    protected FB_ItemCompoundBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemCompoundBase> mData = new Dictionary<int, FB_ItemCompoundBase>();
    private List<FB_ItemCompoundBase> mListData = new List<FB_ItemCompoundBase>();
    public List<FB_ItemCompoundBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemCompoundBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemCompoundBase);
    }
    public Dictionary<int, FB_ItemCompoundBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemCompoundBaseContainer.FB_ItemCompoundBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemCompoundBaseContainer.GetRootAsFB_ItemCompoundBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemCompoundTypeProvider
{
    private static FB_ItemCompoundTypeProvider _Instance;
    public static FB_ItemCompoundTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemCompoundTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ItemCompoundType.txt";
    protected FB_ItemCompoundTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemCompoundType> mData = new Dictionary<int, FB_ItemCompoundType>();
    private List<FB_ItemCompoundType> mListData = new List<FB_ItemCompoundType>();
    public List<FB_ItemCompoundType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemCompoundType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemCompoundType);
    }
    public Dictionary<int, FB_ItemCompoundType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemCompoundTypeContainer.FB_ItemCompoundTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemCompoundTypeContainer.GetRootAsFB_ItemCompoundTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemGiftBaseProvider
{
    private static FB_ItemGiftBaseProvider _Instance;
    public static FB_ItemGiftBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemGiftBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ItemGiftBase.txt";
    protected FB_ItemGiftBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemGiftBase> mData = new Dictionary<int, FB_ItemGiftBase>();
    private List<FB_ItemGiftBase> mListData = new List<FB_ItemGiftBase>();
    public List<FB_ItemGiftBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemGiftBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemGiftBase);
    }
    public Dictionary<int, FB_ItemGiftBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemGiftBaseContainer.FB_ItemGiftBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemGiftBaseContainer.GetRootAsFB_ItemGiftBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemLocationProvider
{
    private static FB_ItemLocationProvider _Instance;
    public static FB_ItemLocationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemLocationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ItemLocation.txt";
    protected FB_ItemLocationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemLocation> mData = new Dictionary<int, FB_ItemLocation>();
    private List<FB_ItemLocation> mListData = new List<FB_ItemLocation>();
    public List<FB_ItemLocation> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemLocation GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemLocation);
    }
    public Dictionary<int, FB_ItemLocation> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemLocationContainer.FB_ItemLocationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemLocationContainer.GetRootAsFB_ItemLocationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ItemStepUpBaseProvider
{
    private static FB_ItemStepUpBaseProvider _Instance;
    public static FB_ItemStepUpBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ItemStepUpBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ItemStepUpBase.txt";
    protected FB_ItemStepUpBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ItemStepUpBase> mData = new Dictionary<int, FB_ItemStepUpBase>();
    private List<FB_ItemStepUpBase> mListData = new List<FB_ItemStepUpBase>();
    public List<FB_ItemStepUpBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ItemStepUpBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ItemStepUpBase);
    }
    public Dictionary<int, FB_ItemStepUpBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ItemStepUpBaseContainer.FB_ItemStepUpBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ItemStepUpBaseContainer.GetRootAsFB_ItemStepUpBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiBanAttrLevelUpProvider
{
    private static FB_JiBanAttrLevelUpProvider _Instance;
    public static FB_JiBanAttrLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiBanAttrLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiBanAttrLevelUp.txt";
    protected FB_JiBanAttrLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiBanAttrLevelUp> mData = new Dictionary<int, FB_JiBanAttrLevelUp>();
    private List<FB_JiBanAttrLevelUp> mListData = new List<FB_JiBanAttrLevelUp>();
    public List<FB_JiBanAttrLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiBanAttrLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiBanAttrLevelUp);
    }
    public Dictionary<int, FB_JiBanAttrLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiBanAttrLevelUpContainer.FB_JiBanAttrLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiBanAttrLevelUpContainer.GetRootAsFB_JiBanAttrLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiBanBaseProvider
{
    private static FB_JiBanBaseProvider _Instance;
    public static FB_JiBanBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiBanBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiBanBase.txt";
    protected FB_JiBanBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiBanBase> mData = new Dictionary<int, FB_JiBanBase>();
    private List<FB_JiBanBase> mListData = new List<FB_JiBanBase>();
    public List<FB_JiBanBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiBanBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiBanBase);
    }
    public Dictionary<int, FB_JiBanBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiBanBaseContainer.FB_JiBanBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiBanBaseContainer.GetRootAsFB_JiBanBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieSoulStoneProvider
{
    private static FB_JieSoulStoneProvider _Instance;
    public static FB_JieSoulStoneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieSoulStoneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieSoulStone.txt";
    protected FB_JieSoulStoneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieSoulStone> mData = new Dictionary<int, FB_JieSoulStone>();
    private List<FB_JieSoulStone> mListData = new List<FB_JieSoulStone>();
    public List<FB_JieSoulStone> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieSoulStone GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieSoulStone);
    }
    public Dictionary<int, FB_JieSoulStone> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieSoulStoneContainer.FB_JieSoulStoneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieSoulStoneContainer.GetRootAsFB_JieSoulStoneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieYuanBaseProvider
{
    private static FB_JieYuanBaseProvider _Instance;
    public static FB_JieYuanBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieYuanBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieYuanBase.txt";
    protected FB_JieYuanBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieYuanBase> mData = new Dictionary<int, FB_JieYuanBase>();
    private List<FB_JieYuanBase> mListData = new List<FB_JieYuanBase>();
    public List<FB_JieYuanBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieYuanBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieYuanBase);
    }
    public Dictionary<int, FB_JieYuanBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieYuanBaseContainer.FB_JieYuanBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieYuanBaseContainer.GetRootAsFB_JieYuanBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieYuanLevelUpProvider
{
    private static FB_JieYuanLevelUpProvider _Instance;
    public static FB_JieYuanLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieYuanLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieYuanLevelUp.txt";
    protected FB_JieYuanLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieYuanLevelUp> mData = new Dictionary<int, FB_JieYuanLevelUp>();
    private List<FB_JieYuanLevelUp> mListData = new List<FB_JieYuanLevelUp>();
    public List<FB_JieYuanLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieYuanLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieYuanLevelUp);
    }
    public Dictionary<int, FB_JieYuanLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieYuanLevelUpContainer.FB_JieYuanLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieYuanLevelUpContainer.GetRootAsFB_JieYuanLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieYuanSlotResonanceProvider
{
    private static FB_JieYuanSlotResonanceProvider _Instance;
    public static FB_JieYuanSlotResonanceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieYuanSlotResonanceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieYuanSlotResonance.txt";
    protected FB_JieYuanSlotResonanceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieYuanSlotResonance> mData = new Dictionary<int, FB_JieYuanSlotResonance>();
    private List<FB_JieYuanSlotResonance> mListData = new List<FB_JieYuanSlotResonance>();
    public List<FB_JieYuanSlotResonance> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieYuanSlotResonance GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieYuanSlotResonance);
    }
    public Dictionary<int, FB_JieYuanSlotResonance> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieYuanSlotResonanceContainer.FB_JieYuanSlotResonanceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieYuanSlotResonanceContainer.GetRootAsFB_JieYuanSlotResonanceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieYuanSuitProvider
{
    private static FB_JieYuanSuitProvider _Instance;
    public static FB_JieYuanSuitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieYuanSuitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieYuanSuit.txt";
    protected FB_JieYuanSuitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieYuanSuit> mData = new Dictionary<int, FB_JieYuanSuit>();
    private List<FB_JieYuanSuit> mListData = new List<FB_JieYuanSuit>();
    public List<FB_JieYuanSuit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieYuanSuit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieYuanSuit);
    }
    public Dictionary<int, FB_JieYuanSuit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieYuanSuitContainer.FB_JieYuanSuitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieYuanSuitContainer.GetRootAsFB_JieYuanSuitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JieYuanSuitInfoProvider
{
    private static FB_JieYuanSuitInfoProvider _Instance;
    public static FB_JieYuanSuitInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JieYuanSuitInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JieYuanSuitInfo.txt";
    protected FB_JieYuanSuitInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JieYuanSuitInfo> mData = new Dictionary<int, FB_JieYuanSuitInfo>();
    private List<FB_JieYuanSuitInfo> mListData = new List<FB_JieYuanSuitInfo>();
    public List<FB_JieYuanSuitInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JieYuanSuitInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JieYuanSuitInfo);
    }
    public Dictionary<int, FB_JieYuanSuitInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JieYuanSuitInfoContainer.FB_JieYuanSuitInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JieYuanSuitInfoContainer.GetRootAsFB_JieYuanSuitInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingAttrPercentLevelUpProvider
{
    private static FB_JiLingAttrPercentLevelUpProvider _Instance;
    public static FB_JiLingAttrPercentLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingAttrPercentLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingAttrPercentLevelUp.txt";
    protected FB_JiLingAttrPercentLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingAttrPercentLevelUp> mData = new Dictionary<int, FB_JiLingAttrPercentLevelUp>();
    private List<FB_JiLingAttrPercentLevelUp> mListData = new List<FB_JiLingAttrPercentLevelUp>();
    public List<FB_JiLingAttrPercentLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingAttrPercentLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingAttrPercentLevelUp);
    }
    public Dictionary<int, FB_JiLingAttrPercentLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingAttrPercentLevelUpContainer.FB_JiLingAttrPercentLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingAttrPercentLevelUpContainer.GetRootAsFB_JiLingAttrPercentLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingDecomposeProvider
{
    private static FB_JiLingDecomposeProvider _Instance;
    public static FB_JiLingDecomposeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingDecomposeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingDecompose.txt";
    protected FB_JiLingDecomposeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingDecompose> mData = new Dictionary<int, FB_JiLingDecompose>();
    private List<FB_JiLingDecompose> mListData = new List<FB_JiLingDecompose>();
    public List<FB_JiLingDecompose> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingDecompose GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingDecompose);
    }
    public Dictionary<int, FB_JiLingDecompose> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingDecomposeContainer.FB_JiLingDecomposeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingDecomposeContainer.GetRootAsFB_JiLingDecomposeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingDestinyAddAttrProvider
{
    private static FB_JiLingDestinyAddAttrProvider _Instance;
    public static FB_JiLingDestinyAddAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingDestinyAddAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingDestinyAddAttr.txt";
    protected FB_JiLingDestinyAddAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingDestinyAddAttr> mData = new Dictionary<int, FB_JiLingDestinyAddAttr>();
    private List<FB_JiLingDestinyAddAttr> mListData = new List<FB_JiLingDestinyAddAttr>();
    public List<FB_JiLingDestinyAddAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingDestinyAddAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingDestinyAddAttr);
    }
    public Dictionary<int, FB_JiLingDestinyAddAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingDestinyAddAttrContainer.FB_JiLingDestinyAddAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingDestinyAddAttrContainer.GetRootAsFB_JiLingDestinyAddAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingDestinyLevelUpProvider
{
    private static FB_JiLingDestinyLevelUpProvider _Instance;
    public static FB_JiLingDestinyLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingDestinyLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingDestinyLevelUp.txt";
    protected FB_JiLingDestinyLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingDestinyLevelUp> mData = new Dictionary<int, FB_JiLingDestinyLevelUp>();
    private List<FB_JiLingDestinyLevelUp> mListData = new List<FB_JiLingDestinyLevelUp>();
    public List<FB_JiLingDestinyLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingDestinyLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingDestinyLevelUp);
    }
    public Dictionary<int, FB_JiLingDestinyLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingDestinyLevelUpContainer.FB_JiLingDestinyLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingDestinyLevelUpContainer.GetRootAsFB_JiLingDestinyLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingJingJieProvider
{
    private static FB_JiLingJingJieProvider _Instance;
    public static FB_JiLingJingJieProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingJingJieProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingJingJie.txt";
    protected FB_JiLingJingJieContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingJingJie> mData = new Dictionary<int, FB_JiLingJingJie>();
    private List<FB_JiLingJingJie> mListData = new List<FB_JiLingJingJie>();
    public List<FB_JiLingJingJie> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingJingJie GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingJingJie);
    }
    public Dictionary<int, FB_JiLingJingJie> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingJingJieContainer.FB_JiLingJingJieContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingJingJieContainer.GetRootAsFB_JiLingJingJieContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingMapBaseProvider
{
    private static FB_JiLingMapBaseProvider _Instance;
    public static FB_JiLingMapBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingMapBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingMapBase.txt";
    protected FB_JiLingMapBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingMapBase> mData = new Dictionary<int, FB_JiLingMapBase>();
    private List<FB_JiLingMapBase> mListData = new List<FB_JiLingMapBase>();
    public List<FB_JiLingMapBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingMapBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingMapBase);
    }
    public Dictionary<int, FB_JiLingMapBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingMapBaseContainer.FB_JiLingMapBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingMapBaseContainer.GetRootAsFB_JiLingMapBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingQiLingBaseProvider
{
    private static FB_JiLingQiLingBaseProvider _Instance;
    public static FB_JiLingQiLingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingQiLingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingQiLingBase.txt";
    protected FB_JiLingQiLingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingQiLingBase> mData = new Dictionary<int, FB_JiLingQiLingBase>();
    private List<FB_JiLingQiLingBase> mListData = new List<FB_JiLingQiLingBase>();
    public List<FB_JiLingQiLingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingQiLingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingQiLingBase);
    }
    public Dictionary<int, FB_JiLingQiLingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingQiLingBaseContainer.FB_JiLingQiLingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingQiLingBaseContainer.GetRootAsFB_JiLingQiLingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingQiLingGongMingProvider
{
    private static FB_JiLingQiLingGongMingProvider _Instance;
    public static FB_JiLingQiLingGongMingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingQiLingGongMingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingQiLingGongMing.txt";
    protected FB_JiLingQiLingGongMingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingQiLingGongMing> mData = new Dictionary<int, FB_JiLingQiLingGongMing>();
    private List<FB_JiLingQiLingGongMing> mListData = new List<FB_JiLingQiLingGongMing>();
    public List<FB_JiLingQiLingGongMing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingQiLingGongMing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingQiLingGongMing);
    }
    public Dictionary<int, FB_JiLingQiLingGongMing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingQiLingGongMingContainer.FB_JiLingQiLingGongMingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingQiLingGongMingContainer.GetRootAsFB_JiLingQiLingGongMingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingQiLingGongMingAddAttrProvider
{
    private static FB_JiLingQiLingGongMingAddAttrProvider _Instance;
    public static FB_JiLingQiLingGongMingAddAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingQiLingGongMingAddAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingQiLingGongMingAddAttr.txt";
    protected FB_JiLingQiLingGongMingAddAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingQiLingGongMingAddAttr> mData = new Dictionary<int, FB_JiLingQiLingGongMingAddAttr>();
    private List<FB_JiLingQiLingGongMingAddAttr> mListData = new List<FB_JiLingQiLingGongMingAddAttr>();
    public List<FB_JiLingQiLingGongMingAddAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingQiLingGongMingAddAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingQiLingGongMingAddAttr);
    }
    public Dictionary<int, FB_JiLingQiLingGongMingAddAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingQiLingGongMingAddAttrContainer.FB_JiLingQiLingGongMingAddAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingQiLingGongMingAddAttrContainer.GetRootAsFB_JiLingQiLingGongMingAddAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingQiLingLevelUpProvider
{
    private static FB_JiLingQiLingLevelUpProvider _Instance;
    public static FB_JiLingQiLingLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingQiLingLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingQiLingLevelUp.txt";
    protected FB_JiLingQiLingLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingQiLingLevelUp> mData = new Dictionary<int, FB_JiLingQiLingLevelUp>();
    private List<FB_JiLingQiLingLevelUp> mListData = new List<FB_JiLingQiLingLevelUp>();
    public List<FB_JiLingQiLingLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingQiLingLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingQiLingLevelUp);
    }
    public Dictionary<int, FB_JiLingQiLingLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingQiLingLevelUpContainer.FB_JiLingQiLingLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingQiLingLevelUpContainer.GetRootAsFB_JiLingQiLingLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingTransformationAttrProvider
{
    private static FB_JiLingTransformationAttrProvider _Instance;
    public static FB_JiLingTransformationAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingTransformationAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingTransformationAttr.txt";
    protected FB_JiLingTransformationAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingTransformationAttr> mData = new Dictionary<int, FB_JiLingTransformationAttr>();
    private List<FB_JiLingTransformationAttr> mListData = new List<FB_JiLingTransformationAttr>();
    public List<FB_JiLingTransformationAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingTransformationAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingTransformationAttr);
    }
    public Dictionary<int, FB_JiLingTransformationAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingTransformationAttrContainer.FB_JiLingTransformationAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingTransformationAttrContainer.GetRootAsFB_JiLingTransformationAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingWuHunLevelUpProvider
{
    private static FB_JiLingWuHunLevelUpProvider _Instance;
    public static FB_JiLingWuHunLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingWuHunLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingWuHunLevelUp.txt";
    protected FB_JiLingWuHunLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingWuHunLevelUp> mData = new Dictionary<int, FB_JiLingWuHunLevelUp>();
    private List<FB_JiLingWuHunLevelUp> mListData = new List<FB_JiLingWuHunLevelUp>();
    public List<FB_JiLingWuHunLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingWuHunLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingWuHunLevelUp);
    }
    public Dictionary<int, FB_JiLingWuHunLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingWuHunLevelUpContainer.FB_JiLingWuHunLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingWuHunLevelUpContainer.GetRootAsFB_JiLingWuHunLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiLingWuHunNingHunProvider
{
    private static FB_JiLingWuHunNingHunProvider _Instance;
    public static FB_JiLingWuHunNingHunProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiLingWuHunNingHunProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiLingWuHunNingHun.txt";
    protected FB_JiLingWuHunNingHunContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiLingWuHunNingHun> mData = new Dictionary<int, FB_JiLingWuHunNingHun>();
    private List<FB_JiLingWuHunNingHun> mListData = new List<FB_JiLingWuHunNingHun>();
    public List<FB_JiLingWuHunNingHun> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiLingWuHunNingHun GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiLingWuHunNingHun);
    }
    public Dictionary<int, FB_JiLingWuHunNingHun> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiLingWuHunNingHunContainer.FB_JiLingWuHunNingHunContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiLingWuHunNingHunContainer.GetRootAsFB_JiLingWuHunNingHunContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JiYiBaseProvider
{
    private static FB_JiYiBaseProvider _Instance;
    public static FB_JiYiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JiYiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JiYiBase.txt";
    protected FB_JiYiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JiYiBase> mData = new Dictionary<int, FB_JiYiBase>();
    private List<FB_JiYiBase> mListData = new List<FB_JiYiBase>();
    public List<FB_JiYiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JiYiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JiYiBase);
    }
    public Dictionary<int, FB_JiYiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JiYiBaseContainer.FB_JiYiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JiYiBaseContainer.GetRootAsFB_JiYiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JuBaoPenTreasureProvider
{
    private static FB_JuBaoPenTreasureProvider _Instance;
    public static FB_JuBaoPenTreasureProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JuBaoPenTreasureProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JuBaoPenTreasure.txt";
    protected FB_JuBaoPenTreasureContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JuBaoPenTreasure> mData = new Dictionary<int, FB_JuBaoPenTreasure>();
    private List<FB_JuBaoPenTreasure> mListData = new List<FB_JuBaoPenTreasure>();
    public List<FB_JuBaoPenTreasure> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JuBaoPenTreasure GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JuBaoPenTreasure);
    }
    public Dictionary<int, FB_JuBaoPenTreasure> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JuBaoPenTreasureContainer.FB_JuBaoPenTreasureContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JuBaoPenTreasureContainer.GetRootAsFB_JuBaoPenTreasureContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JuHunAttrProvider
{
    private static FB_JuHunAttrProvider _Instance;
    public static FB_JuHunAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JuHunAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JuHunAttr.txt";
    protected FB_JuHunAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JuHunAttr> mData = new Dictionary<int, FB_JuHunAttr>();
    private List<FB_JuHunAttr> mListData = new List<FB_JuHunAttr>();
    public List<FB_JuHunAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JuHunAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JuHunAttr);
    }
    public Dictionary<int, FB_JuHunAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JuHunAttrContainer.FB_JuHunAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JuHunAttrContainer.GetRootAsFB_JuHunAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JuhunBoxWeightProvider
{
    private static FB_JuhunBoxWeightProvider _Instance;
    public static FB_JuhunBoxWeightProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JuhunBoxWeightProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JuhunBoxWeight.txt";
    protected FB_JuhunBoxWeightContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JuhunBoxWeight> mData = new Dictionary<int, FB_JuhunBoxWeight>();
    private List<FB_JuhunBoxWeight> mListData = new List<FB_JuhunBoxWeight>();
    public List<FB_JuhunBoxWeight> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JuhunBoxWeight GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JuhunBoxWeight);
    }
    public Dictionary<int, FB_JuhunBoxWeight> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JuhunBoxWeightContainer.FB_JuhunBoxWeightContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JuhunBoxWeightContainer.GetRootAsFB_JuhunBoxWeightContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JuHunLevelUpProvider
{
    private static FB_JuHunLevelUpProvider _Instance;
    public static FB_JuHunLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JuHunLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JuHunLevelUp.txt";
    protected FB_JuHunLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JuHunLevelUp> mData = new Dictionary<int, FB_JuHunLevelUp>();
    private List<FB_JuHunLevelUp> mListData = new List<FB_JuHunLevelUp>();
    public List<FB_JuHunLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JuHunLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JuHunLevelUp);
    }
    public Dictionary<int, FB_JuHunLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JuHunLevelUpContainer.FB_JuHunLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JuHunLevelUpContainer.GetRootAsFB_JuHunLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_JuLingCSbaseProvider
{
    private static FB_JuLingCSbaseProvider _Instance;
    public static FB_JuLingCSbaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_JuLingCSbaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/JuLingCSbase.txt";
    protected FB_JuLingCSbaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_JuLingCSbase> mData = new Dictionary<int, FB_JuLingCSbase>();
    private List<FB_JuLingCSbase> mListData = new List<FB_JuLingCSbase>();
    public List<FB_JuLingCSbase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_JuLingCSbase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_JuLingCSbase);
    }
    public Dictionary<int, FB_JuLingCSbase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_JuLingCSbaseContainer.FB_JuLingCSbaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_JuLingCSbaseContainer.GetRootAsFB_JuLingCSbaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KaiFuPaiHangProvider
{
    private static FB_KaiFuPaiHangProvider _Instance;
    public static FB_KaiFuPaiHangProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KaiFuPaiHangProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/KaiFuPaiHang.txt";
    protected FB_KaiFuPaiHangContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KaiFuPaiHang> mData = new Dictionary<int, FB_KaiFuPaiHang>();
    private List<FB_KaiFuPaiHang> mListData = new List<FB_KaiFuPaiHang>();
    public List<FB_KaiFuPaiHang> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KaiFuPaiHang GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KaiFuPaiHang);
    }
    public Dictionary<int, FB_KaiFuPaiHang> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KaiFuPaiHangContainer.FB_KaiFuPaiHangContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KaiFuPaiHangContainer.GetRootAsFB_KaiFuPaiHangContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KaiFuPaiHangTypeProvider
{
    private static FB_KaiFuPaiHangTypeProvider _Instance;
    public static FB_KaiFuPaiHangTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KaiFuPaiHangTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/KaiFuPaiHangType.txt";
    protected FB_KaiFuPaiHangTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KaiFuPaiHangType> mData = new Dictionary<int, FB_KaiFuPaiHangType>();
    private List<FB_KaiFuPaiHangType> mListData = new List<FB_KaiFuPaiHangType>();
    public List<FB_KaiFuPaiHangType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KaiFuPaiHangType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KaiFuPaiHangType);
    }
    public Dictionary<int, FB_KaiFuPaiHangType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KaiFuPaiHangTypeContainer.FB_KaiFuPaiHangTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KaiFuPaiHangTypeContainer.GetRootAsFB_KaiFuPaiHangTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_KneadFaceOClothingProvider
{
    private static FB_KneadFaceOClothingProvider _Instance;
    public static FB_KneadFaceOClothingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_KneadFaceOClothingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/KneadFaceOClothing.txt";
    protected FB_KneadFaceOClothingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_KneadFaceOClothing> mData = new Dictionary<int, FB_KneadFaceOClothing>();
    private List<FB_KneadFaceOClothing> mListData = new List<FB_KneadFaceOClothing>();
    public List<FB_KneadFaceOClothing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_KneadFaceOClothing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_KneadFaceOClothing);
    }
    public Dictionary<int, FB_KneadFaceOClothing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_KneadFaceOClothingContainer.FB_KneadFaceOClothingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_KneadFaceOClothingContainer.GetRootAsFB_KneadFaceOClothingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LadderProvider
{
    private static FB_LadderProvider _Instance;
    public static FB_LadderProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LadderProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/Ladder.txt";
    protected FB_LadderContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Ladder> mData = new Dictionary<int, FB_Ladder>();
    private List<FB_Ladder> mListData = new List<FB_Ladder>();
    public List<FB_Ladder> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Ladder GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Ladder);
    }
    public Dictionary<int, FB_Ladder> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LadderContainer.FB_LadderContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LadderContainer.GetRootAsFB_LadderContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LadderHonorProvider
{
    private static FB_LadderHonorProvider _Instance;
    public static FB_LadderHonorProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LadderHonorProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LadderHonor.txt";
    protected FB_LadderHonorContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LadderHonor> mData = new Dictionary<int, FB_LadderHonor>();
    private List<FB_LadderHonor> mListData = new List<FB_LadderHonor>();
    public List<FB_LadderHonor> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LadderHonor GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LadderHonor);
    }
    public Dictionary<int, FB_LadderHonor> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LadderHonorContainer.FB_LadderHonorContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LadderHonorContainer.GetRootAsFB_LadderHonorContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LadderMissionProvider
{
    private static FB_LadderMissionProvider _Instance;
    public static FB_LadderMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LadderMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LadderMission.txt";
    protected FB_LadderMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LadderMission> mData = new Dictionary<int, FB_LadderMission>();
    private List<FB_LadderMission> mListData = new List<FB_LadderMission>();
    public List<FB_LadderMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LadderMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LadderMission);
    }
    public Dictionary<int, FB_LadderMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LadderMissionContainer.FB_LadderMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LadderMissionContainer.GetRootAsFB_LadderMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelCompensateProvider
{
    private static FB_LevelCompensateProvider _Instance;
    public static FB_LevelCompensateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelCompensateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelCompensate.txt";
    protected FB_LevelCompensateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelCompensate> mData = new Dictionary<int, FB_LevelCompensate>();
    private List<FB_LevelCompensate> mListData = new List<FB_LevelCompensate>();
    public List<FB_LevelCompensate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelCompensate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelCompensate);
    }
    public Dictionary<int, FB_LevelCompensate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelCompensateContainer.FB_LevelCompensateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelCompensateContainer.GetRootAsFB_LevelCompensateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelExpProvider
{
    private static FB_LevelExpProvider _Instance;
    public static FB_LevelExpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelExpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelExp.txt";
    protected FB_LevelExpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelExp> mData = new Dictionary<int, FB_LevelExp>();
    private List<FB_LevelExp> mListData = new List<FB_LevelExp>();
    public List<FB_LevelExp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelExp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelExp);
    }
    public Dictionary<int, FB_LevelExp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelExpContainer.FB_LevelExpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelExpContainer.GetRootAsFB_LevelExpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.LevelID))
            {
                mData.Add(item.LevelID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelSealAddExpRateProvider
{
    private static FB_LevelSealAddExpRateProvider _Instance;
    public static FB_LevelSealAddExpRateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelSealAddExpRateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelSealAddExpRate.txt";
    protected FB_LevelSealAddExpRateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelSealAddExpRate> mData = new Dictionary<int, FB_LevelSealAddExpRate>();
    private List<FB_LevelSealAddExpRate> mListData = new List<FB_LevelSealAddExpRate>();
    public List<FB_LevelSealAddExpRate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelSealAddExpRate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelSealAddExpRate);
    }
    public Dictionary<int, FB_LevelSealAddExpRate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelSealAddExpRateContainer.FB_LevelSealAddExpRateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelSealAddExpRateContainer.GetRootAsFB_LevelSealAddExpRateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelSealAttrProvider
{
    private static FB_LevelSealAttrProvider _Instance;
    public static FB_LevelSealAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelSealAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelSealAttr.txt";
    protected FB_LevelSealAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelSealAttr> mData = new Dictionary<int, FB_LevelSealAttr>();
    private List<FB_LevelSealAttr> mListData = new List<FB_LevelSealAttr>();
    public List<FB_LevelSealAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelSealAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelSealAttr);
    }
    public Dictionary<int, FB_LevelSealAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelSealAttrContainer.FB_LevelSealAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelSealAttrContainer.GetRootAsFB_LevelSealAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelSealBaseProvider
{
    private static FB_LevelSealBaseProvider _Instance;
    public static FB_LevelSealBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelSealBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelSealBase.txt";
    protected FB_LevelSealBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelSealBase> mData = new Dictionary<int, FB_LevelSealBase>();
    private List<FB_LevelSealBase> mListData = new List<FB_LevelSealBase>();
    public List<FB_LevelSealBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelSealBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelSealBase);
    }
    public Dictionary<int, FB_LevelSealBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelSealBaseContainer.FB_LevelSealBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelSealBaseContainer.GetRootAsFB_LevelSealBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LevelSealCopySceneProvider
{
    private static FB_LevelSealCopySceneProvider _Instance;
    public static FB_LevelSealCopySceneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LevelSealCopySceneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LevelSealCopyScene.txt";
    protected FB_LevelSealCopySceneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LevelSealCopyScene> mData = new Dictionary<int, FB_LevelSealCopyScene>();
    private List<FB_LevelSealCopyScene> mListData = new List<FB_LevelSealCopyScene>();
    public List<FB_LevelSealCopyScene> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LevelSealCopyScene GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LevelSealCopyScene);
    }
    public Dictionary<int, FB_LevelSealCopyScene> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LevelSealCopySceneContainer.FB_LevelSealCopySceneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LevelSealCopySceneContainer.GetRootAsFB_LevelSealCopySceneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LimitActivityBroadcastProvider
{
    private static FB_LimitActivityBroadcastProvider _Instance;
    public static FB_LimitActivityBroadcastProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LimitActivityBroadcastProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LimitActivityBroadcast.txt";
    protected FB_LimitActivityBroadcastContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LimitActivityBroadcast> mData = new Dictionary<int, FB_LimitActivityBroadcast>();
    private List<FB_LimitActivityBroadcast> mListData = new List<FB_LimitActivityBroadcast>();
    public List<FB_LimitActivityBroadcast> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LimitActivityBroadcast GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LimitActivityBroadcast);
    }
    public Dictionary<int, FB_LimitActivityBroadcast> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LimitActivityBroadcastContainer.FB_LimitActivityBroadcastContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LimitActivityBroadcastContainer.GetRootAsFB_LimitActivityBroadcastContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingBaoBaseProvider
{
    private static FB_LingBaoBaseProvider _Instance;
    public static FB_LingBaoBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingBaoBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingBaoBase.txt";
    protected FB_LingBaoBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingBaoBase> mData = new Dictionary<int, FB_LingBaoBase>();
    private List<FB_LingBaoBase> mListData = new List<FB_LingBaoBase>();
    public List<FB_LingBaoBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingBaoBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingBaoBase);
    }
    public Dictionary<int, FB_LingBaoBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingBaoBaseContainer.FB_LingBaoBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingBaoBaseContainer.GetRootAsFB_LingBaoBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingBaoLevelUpProvider
{
    private static FB_LingBaoLevelUpProvider _Instance;
    public static FB_LingBaoLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingBaoLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingBaoLevelUp.txt";
    protected FB_LingBaoLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingBaoLevelUp> mData = new Dictionary<int, FB_LingBaoLevelUp>();
    private List<FB_LingBaoLevelUp> mListData = new List<FB_LingBaoLevelUp>();
    public List<FB_LingBaoLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingBaoLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingBaoLevelUp);
    }
    public Dictionary<int, FB_LingBaoLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingBaoLevelUpContainer.FB_LingBaoLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingBaoLevelUpContainer.GetRootAsFB_LingBaoLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingBaoQiLingProvider
{
    private static FB_LingBaoQiLingProvider _Instance;
    public static FB_LingBaoQiLingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingBaoQiLingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingBaoQiLing.txt";
    protected FB_LingBaoQiLingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingBaoQiLing> mData = new Dictionary<int, FB_LingBaoQiLing>();
    private List<FB_LingBaoQiLing> mListData = new List<FB_LingBaoQiLing>();
    public List<FB_LingBaoQiLing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingBaoQiLing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingBaoQiLing);
    }
    public Dictionary<int, FB_LingBaoQiLing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingBaoQiLingContainer.FB_LingBaoQiLingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingBaoQiLingContainer.GetRootAsFB_LingBaoQiLingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangBaseProvider
{
    private static FB_LingGangBaseProvider _Instance;
    public static FB_LingGangBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangBase.txt";
    protected FB_LingGangBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangBase> mData = new Dictionary<int, FB_LingGangBase>();
    private List<FB_LingGangBase> mListData = new List<FB_LingGangBase>();
    public List<FB_LingGangBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangBase);
    }
    public Dictionary<int, FB_LingGangBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangBaseContainer.FB_LingGangBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangBaseContainer.GetRootAsFB_LingGangBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangLingWuLevelUpProvider
{
    private static FB_LingGangLingWuLevelUpProvider _Instance;
    public static FB_LingGangLingWuLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangLingWuLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangLingWuLevelUp.txt";
    protected FB_LingGangLingWuLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangLingWuLevelUp> mData = new Dictionary<int, FB_LingGangLingWuLevelUp>();
    private List<FB_LingGangLingWuLevelUp> mListData = new List<FB_LingGangLingWuLevelUp>();
    public List<FB_LingGangLingWuLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangLingWuLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangLingWuLevelUp);
    }
    public Dictionary<int, FB_LingGangLingWuLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangLingWuLevelUpContainer.FB_LingGangLingWuLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangLingWuLevelUpContainer.GetRootAsFB_LingGangLingWuLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangSkillBaseProvider
{
    private static FB_LingGangSkillBaseProvider _Instance;
    public static FB_LingGangSkillBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangSkillBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangSkillBase.txt";
    protected FB_LingGangSkillBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangSkillBase> mData = new Dictionary<int, FB_LingGangSkillBase>();
    private List<FB_LingGangSkillBase> mListData = new List<FB_LingGangSkillBase>();
    public List<FB_LingGangSkillBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangSkillBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangSkillBase);
    }
    public Dictionary<int, FB_LingGangSkillBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangSkillBaseContainer.FB_LingGangSkillBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangSkillBaseContainer.GetRootAsFB_LingGangSkillBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangSkillLevelUpProvider
{
    private static FB_LingGangSkillLevelUpProvider _Instance;
    public static FB_LingGangSkillLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangSkillLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangSkillLevelUp.txt";
    protected FB_LingGangSkillLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangSkillLevelUp> mData = new Dictionary<int, FB_LingGangSkillLevelUp>();
    private List<FB_LingGangSkillLevelUp> mListData = new List<FB_LingGangSkillLevelUp>();
    public List<FB_LingGangSkillLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangSkillLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangSkillLevelUp);
    }
    public Dictionary<int, FB_LingGangSkillLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangSkillLevelUpContainer.FB_LingGangSkillLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangSkillLevelUpContainer.GetRootAsFB_LingGangSkillLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangStepBaseProvider
{
    private static FB_LingGangStepBaseProvider _Instance;
    public static FB_LingGangStepBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangStepBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangStepBase.txt";
    protected FB_LingGangStepBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangStepBase> mData = new Dictionary<int, FB_LingGangStepBase>();
    private List<FB_LingGangStepBase> mListData = new List<FB_LingGangStepBase>();
    public List<FB_LingGangStepBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangStepBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangStepBase);
    }
    public Dictionary<int, FB_LingGangStepBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangStepBaseContainer.FB_LingGangStepBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangStepBaseContainer.GetRootAsFB_LingGangStepBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LingGangXuLingProvider
{
    private static FB_LingGangXuLingProvider _Instance;
    public static FB_LingGangXuLingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LingGangXuLingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LingGangXuLing.txt";
    protected FB_LingGangXuLingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LingGangXuLing> mData = new Dictionary<int, FB_LingGangXuLing>();
    private List<FB_LingGangXuLing> mListData = new List<FB_LingGangXuLing>();
    public List<FB_LingGangXuLing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LingGangXuLing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LingGangXuLing);
    }
    public Dictionary<int, FB_LingGangXuLing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LingGangXuLingContainer.FB_LingGangXuLingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LingGangXuLingContainer.GetRootAsFB_LingGangXuLingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LotteryMissionProvider
{
    private static FB_LotteryMissionProvider _Instance;
    public static FB_LotteryMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LotteryMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LotteryMission.txt";
    protected FB_LotteryMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LotteryMission> mData = new Dictionary<int, FB_LotteryMission>();
    private List<FB_LotteryMission> mListData = new List<FB_LotteryMission>();
    public List<FB_LotteryMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LotteryMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LotteryMission);
    }
    public Dictionary<int, FB_LotteryMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LotteryMissionContainer.FB_LotteryMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LotteryMissionContainer.GetRootAsFB_LotteryMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LuckyRollDailyMissionsProvider
{
    private static FB_LuckyRollDailyMissionsProvider _Instance;
    public static FB_LuckyRollDailyMissionsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LuckyRollDailyMissionsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LuckyRollDailyMissions.txt";
    protected FB_LuckyRollDailyMissionsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LuckyRollDailyMissions> mData = new Dictionary<int, FB_LuckyRollDailyMissions>();
    private List<FB_LuckyRollDailyMissions> mListData = new List<FB_LuckyRollDailyMissions>();
    public List<FB_LuckyRollDailyMissions> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LuckyRollDailyMissions GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LuckyRollDailyMissions);
    }
    public Dictionary<int, FB_LuckyRollDailyMissions> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LuckyRollDailyMissionsContainer.FB_LuckyRollDailyMissionsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LuckyRollDailyMissionsContainer.GetRootAsFB_LuckyRollDailyMissionsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_LuckyRollMissionProvider
{
    private static FB_LuckyRollMissionProvider _Instance;
    public static FB_LuckyRollMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_LuckyRollMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/LuckyRollMission.txt";
    protected FB_LuckyRollMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_LuckyRollMission> mData = new Dictionary<int, FB_LuckyRollMission>();
    private List<FB_LuckyRollMission> mListData = new List<FB_LuckyRollMission>();
    public List<FB_LuckyRollMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_LuckyRollMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_LuckyRollMission);
    }
    public Dictionary<int, FB_LuckyRollMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_LuckyRollMissionContainer.FB_LuckyRollMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_LuckyRollMissionContainer.GetRootAsFB_LuckyRollMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MaiDianPartProvider
{
    private static FB_MaiDianPartProvider _Instance;
    public static FB_MaiDianPartProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MaiDianPartProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MaiDianPart.txt";
    protected FB_MaiDianPartContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MaiDianPart> mData = new Dictionary<int, FB_MaiDianPart>();
    private List<FB_MaiDianPart> mListData = new List<FB_MaiDianPart>();
    public List<FB_MaiDianPart> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MaiDianPart GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MaiDianPart);
    }
    public Dictionary<int, FB_MaiDianPart> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MaiDianPartContainer.FB_MaiDianPartContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MaiDianPartContainer.GetRootAsFB_MaiDianPartContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MaiDianSuitProvider
{
    private static FB_MaiDianSuitProvider _Instance;
    public static FB_MaiDianSuitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MaiDianSuitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MaiDianSuit.txt";
    protected FB_MaiDianSuitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MaiDianSuit> mData = new Dictionary<int, FB_MaiDianSuit>();
    private List<FB_MaiDianSuit> mListData = new List<FB_MaiDianSuit>();
    public List<FB_MaiDianSuit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MaiDianSuit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MaiDianSuit);
    }
    public Dictionary<int, FB_MaiDianSuit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MaiDianSuitContainer.FB_MaiDianSuitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MaiDianSuitContainer.GetRootAsFB_MaiDianSuitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryActivityMissionProvider
{
    private static FB_MarryActivityMissionProvider _Instance;
    public static FB_MarryActivityMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryActivityMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryActivityMission.txt";
    protected FB_MarryActivityMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryActivityMission> mData = new Dictionary<int, FB_MarryActivityMission>();
    private List<FB_MarryActivityMission> mListData = new List<FB_MarryActivityMission>();
    public List<FB_MarryActivityMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryActivityMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryActivityMission);
    }
    public Dictionary<int, FB_MarryActivityMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryActivityMissionContainer.FB_MarryActivityMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryActivityMissionContainer.GetRootAsFB_MarryActivityMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryActivityMissionRewardProvider
{
    private static FB_MarryActivityMissionRewardProvider _Instance;
    public static FB_MarryActivityMissionRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryActivityMissionRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryActivityMissionReward.txt";
    protected FB_MarryActivityMissionRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryActivityMissionReward> mData = new Dictionary<int, FB_MarryActivityMissionReward>();
    private List<FB_MarryActivityMissionReward> mListData = new List<FB_MarryActivityMissionReward>();
    public List<FB_MarryActivityMissionReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryActivityMissionReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryActivityMissionReward);
    }
    public Dictionary<int, FB_MarryActivityMissionReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryActivityMissionRewardContainer.FB_MarryActivityMissionRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryActivityMissionRewardContainer.GetRootAsFB_MarryActivityMissionRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryBaseInfoProvider
{
    private static FB_MarryBaseInfoProvider _Instance;
    public static FB_MarryBaseInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryBaseInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryBaseInfo.txt";
    protected FB_MarryBaseInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryBaseInfo> mData = new Dictionary<int, FB_MarryBaseInfo>();
    private List<FB_MarryBaseInfo> mListData = new List<FB_MarryBaseInfo>();
    public List<FB_MarryBaseInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryBaseInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryBaseInfo);
    }
    public Dictionary<int, FB_MarryBaseInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryBaseInfoContainer.FB_MarryBaseInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryBaseInfoContainer.GetRootAsFB_MarryBaseInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryGiftInfoProvider
{
    private static FB_MarryGiftInfoProvider _Instance;
    public static FB_MarryGiftInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryGiftInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryGiftInfo.txt";
    protected FB_MarryGiftInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryGiftInfo> mData = new Dictionary<int, FB_MarryGiftInfo>();
    private List<FB_MarryGiftInfo> mListData = new List<FB_MarryGiftInfo>();
    public List<FB_MarryGiftInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryGiftInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryGiftInfo);
    }
    public Dictionary<int, FB_MarryGiftInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryGiftInfoContainer.FB_MarryGiftInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryGiftInfoContainer.GetRootAsFB_MarryGiftInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarrySceneInfoProvider
{
    private static FB_MarrySceneInfoProvider _Instance;
    public static FB_MarrySceneInfoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarrySceneInfoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarrySceneInfo.txt";
    protected FB_MarrySceneInfoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarrySceneInfo> mData = new Dictionary<int, FB_MarrySceneInfo>();
    private List<FB_MarrySceneInfo> mListData = new List<FB_MarrySceneInfo>();
    public List<FB_MarrySceneInfo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarrySceneInfo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarrySceneInfo);
    }
    public Dictionary<int, FB_MarrySceneInfo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarrySceneInfoContainer.FB_MarrySceneInfoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarrySceneInfoContainer.GetRootAsFB_MarrySceneInfoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryShopItemProvider
{
    private static FB_MarryShopItemProvider _Instance;
    public static FB_MarryShopItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryShopItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryShopItem.txt";
    protected FB_MarryShopItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryShopItem> mData = new Dictionary<int, FB_MarryShopItem>();
    private List<FB_MarryShopItem> mListData = new List<FB_MarryShopItem>();
    public List<FB_MarryShopItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryShopItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryShopItem);
    }
    public Dictionary<int, FB_MarryShopItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryShopItemContainer.FB_MarryShopItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryShopItemContainer.GetRootAsFB_MarryShopItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryShowItemProvider
{
    private static FB_MarryShowItemProvider _Instance;
    public static FB_MarryShowItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryShowItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryShowItem.txt";
    protected FB_MarryShowItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryShowItem> mData = new Dictionary<int, FB_MarryShowItem>();
    private List<FB_MarryShowItem> mListData = new List<FB_MarryShowItem>();
    public List<FB_MarryShowItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryShowItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryShowItem);
    }
    public Dictionary<int, FB_MarryShowItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryShowItemContainer.FB_MarryShowItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryShowItemContainer.GetRootAsFB_MarryShowItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryTitleBaseProvider
{
    private static FB_MarryTitleBaseProvider _Instance;
    public static FB_MarryTitleBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryTitleBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryTitleBase.txt";
    protected FB_MarryTitleBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryTitleBase> mData = new Dictionary<int, FB_MarryTitleBase>();
    private List<FB_MarryTitleBase> mListData = new List<FB_MarryTitleBase>();
    public List<FB_MarryTitleBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryTitleBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryTitleBase);
    }
    public Dictionary<int, FB_MarryTitleBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryTitleBaseContainer.FB_MarryTitleBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryTitleBaseContainer.GetRootAsFB_MarryTitleBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryWuNvBaseProvider
{
    private static FB_MarryWuNvBaseProvider _Instance;
    public static FB_MarryWuNvBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryWuNvBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryWuNvBase.txt";
    protected FB_MarryWuNvBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryWuNvBase> mData = new Dictionary<int, FB_MarryWuNvBase>();
    private List<FB_MarryWuNvBase> mListData = new List<FB_MarryWuNvBase>();
    public List<FB_MarryWuNvBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryWuNvBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryWuNvBase);
    }
    public Dictionary<int, FB_MarryWuNvBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryWuNvBaseContainer.FB_MarryWuNvBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryWuNvBaseContainer.GetRootAsFB_MarryWuNvBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MarryXinWuBaseProvider
{
    private static FB_MarryXinWuBaseProvider _Instance;
    public static FB_MarryXinWuBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MarryXinWuBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MarryXinWuBase.txt";
    protected FB_MarryXinWuBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MarryXinWuBase> mData = new Dictionary<int, FB_MarryXinWuBase>();
    private List<FB_MarryXinWuBase> mListData = new List<FB_MarryXinWuBase>();
    public List<FB_MarryXinWuBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MarryXinWuBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MarryXinWuBase);
    }
    public Dictionary<int, FB_MarryXinWuBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MarryXinWuBaseContainer.FB_MarryXinWuBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MarryXinWuBaseContainer.GetRootAsFB_MarryXinWuBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MergeRankRewardProvider
{
    private static FB_MergeRankRewardProvider _Instance;
    public static FB_MergeRankRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MergeRankRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MergeRankReward.txt";
    protected FB_MergeRankRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MergeRankReward> mData = new Dictionary<int, FB_MergeRankReward>();
    private List<FB_MergeRankReward> mListData = new List<FB_MergeRankReward>();
    public List<FB_MergeRankReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MergeRankReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MergeRankReward);
    }
    public Dictionary<int, FB_MergeRankReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MergeRankRewardContainer.FB_MergeRankRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MergeRankRewardContainer.GetRootAsFB_MergeRankRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MergeRechargeProvider
{
    private static FB_MergeRechargeProvider _Instance;
    public static FB_MergeRechargeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MergeRechargeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MergeRecharge.txt";
    protected FB_MergeRechargeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MergeRecharge> mData = new Dictionary<int, FB_MergeRecharge>();
    private List<FB_MergeRecharge> mListData = new List<FB_MergeRecharge>();
    public List<FB_MergeRecharge> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MergeRecharge GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MergeRecharge);
    }
    public Dictionary<int, FB_MergeRecharge> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MergeRechargeContainer.FB_MergeRechargeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MergeRechargeContainer.GetRootAsFB_MergeRechargeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MergeTouZiProvider
{
    private static FB_MergeTouZiProvider _Instance;
    public static FB_MergeTouZiProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MergeTouZiProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MergeTouZi.txt";
    protected FB_MergeTouZiContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MergeTouZi> mData = new Dictionary<int, FB_MergeTouZi>();
    private List<FB_MergeTouZi> mListData = new List<FB_MergeTouZi>();
    public List<FB_MergeTouZi> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MergeTouZi GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MergeTouZi);
    }
    public Dictionary<int, FB_MergeTouZi> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MergeTouZiContainer.FB_MergeTouZiContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MergeTouZiContainer.GetRootAsFB_MergeTouZiContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MergeTouZiTypeProvider
{
    private static FB_MergeTouZiTypeProvider _Instance;
    public static FB_MergeTouZiTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MergeTouZiTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MergeTouZiType.txt";
    protected FB_MergeTouZiTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MergeTouZiType> mData = new Dictionary<int, FB_MergeTouZiType>();
    private List<FB_MergeTouZiType> mListData = new List<FB_MergeTouZiType>();
    public List<FB_MergeTouZiType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MergeTouZiType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MergeTouZiType);
    }
    public Dictionary<int, FB_MergeTouZiType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MergeTouZiTypeContainer.FB_MergeTouZiTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MergeTouZiTypeContainer.GetRootAsFB_MergeTouZiTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MingGeBaseProvider
{
    private static FB_MingGeBaseProvider _Instance;
    public static FB_MingGeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MingGeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MingGeBase.txt";
    protected FB_MingGeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MingGeBase> mData = new Dictionary<int, FB_MingGeBase>();
    private List<FB_MingGeBase> mListData = new List<FB_MingGeBase>();
    public List<FB_MingGeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MingGeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MingGeBase);
    }
    public Dictionary<int, FB_MingGeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MingGeBaseContainer.FB_MingGeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MingGeBaseContainer.GetRootAsFB_MingGeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MiniMapProvider
{
    private static FB_MiniMapProvider _Instance;
    public static FB_MiniMapProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MiniMapProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MiniMap.txt";
    protected FB_MiniMapContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MiniMap> mData = new Dictionary<int, FB_MiniMap>();
    private List<FB_MiniMap> mListData = new List<FB_MiniMap>();
    public List<FB_MiniMap> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MiniMap GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MiniMap);
    }
    public Dictionary<int, FB_MiniMap> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MiniMapContainer.FB_MiniMapContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MiniMapContainer.GetRootAsFB_MiniMapContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionBaseProvider
{
    private static FB_MissionBaseProvider _Instance;
    public static FB_MissionBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionBase.txt";
    protected FB_MissionBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionBase> mData = new Dictionary<int, FB_MissionBase>();
    private List<FB_MissionBase> mListData = new List<FB_MissionBase>();
    public List<FB_MissionBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionBase);
    }
    public Dictionary<int, FB_MissionBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionBaseContainer.FB_MissionBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionBaseContainer.GetRootAsFB_MissionBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionBonusProvider
{
    private static FB_MissionBonusProvider _Instance;
    public static FB_MissionBonusProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionBonusProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionBonus.txt";
    protected FB_MissionBonusContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionBonus> mData = new Dictionary<int, FB_MissionBonus>();
    private List<FB_MissionBonus> mListData = new List<FB_MissionBonus>();
    public List<FB_MissionBonus> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionBonus GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionBonus);
    }
    public Dictionary<int, FB_MissionBonus> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionBonusContainer.FB_MissionBonusContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionBonusContainer.GetRootAsFB_MissionBonusContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionCollectItemProvider
{
    private static FB_MissionCollectItemProvider _Instance;
    public static FB_MissionCollectItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionCollectItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionCollectItem.txt";
    protected FB_MissionCollectItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionCollectItem> mData = new Dictionary<int, FB_MissionCollectItem>();
    private List<FB_MissionCollectItem> mListData = new List<FB_MissionCollectItem>();
    public List<FB_MissionCollectItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionCollectItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionCollectItem);
    }
    public Dictionary<int, FB_MissionCollectItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionCollectItemContainer.FB_MissionCollectItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionCollectItemContainer.GetRootAsFB_MissionCollectItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Index))
            {
                mData.Add(item.Index, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionCopySceneProvider
{
    private static FB_MissionCopySceneProvider _Instance;
    public static FB_MissionCopySceneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionCopySceneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionCopyScene.txt";
    protected FB_MissionCopySceneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionCopyScene> mData = new Dictionary<int, FB_MissionCopyScene>();
    private List<FB_MissionCopyScene> mListData = new List<FB_MissionCopyScene>();
    public List<FB_MissionCopyScene> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionCopyScene GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionCopyScene);
    }
    public Dictionary<int, FB_MissionCopyScene> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionCopySceneContainer.FB_MissionCopySceneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionCopySceneContainer.GetRootAsFB_MissionCopySceneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionEnterAreaProvider
{
    private static FB_MissionEnterAreaProvider _Instance;
    public static FB_MissionEnterAreaProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionEnterAreaProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionEnterArea.txt";
    protected FB_MissionEnterAreaContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionEnterArea> mData = new Dictionary<int, FB_MissionEnterArea>();
    private List<FB_MissionEnterArea> mListData = new List<FB_MissionEnterArea>();
    public List<FB_MissionEnterArea> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionEnterArea GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionEnterArea);
    }
    public Dictionary<int, FB_MissionEnterArea> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionEnterAreaContainer.FB_MissionEnterAreaContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionEnterAreaContainer.GetRootAsFB_MissionEnterAreaContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionFailedBaseProvider
{
    private static FB_MissionFailedBaseProvider _Instance;
    public static FB_MissionFailedBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionFailedBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionFailedBase.txt";
    protected FB_MissionFailedBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionFailedBase> mData = new Dictionary<int, FB_MissionFailedBase>();
    private List<FB_MissionFailedBase> mListData = new List<FB_MissionFailedBase>();
    public List<FB_MissionFailedBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionFailedBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionFailedBase);
    }
    public Dictionary<int, FB_MissionFailedBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionFailedBaseContainer.FB_MissionFailedBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionFailedBaseContainer.GetRootAsFB_MissionFailedBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionFailedConditionProvider
{
    private static FB_MissionFailedConditionProvider _Instance;
    public static FB_MissionFailedConditionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionFailedConditionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionFailedCondition.txt";
    protected FB_MissionFailedConditionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionFailedCondition> mData = new Dictionary<int, FB_MissionFailedCondition>();
    private List<FB_MissionFailedCondition> mListData = new List<FB_MissionFailedCondition>();
    public List<FB_MissionFailedCondition> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionFailedCondition GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionFailedCondition);
    }
    public Dictionary<int, FB_MissionFailedCondition> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionFailedConditionContainer.FB_MissionFailedConditionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionFailedConditionContainer.GetRootAsFB_MissionFailedConditionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionGuideProvider
{
    private static FB_MissionGuideProvider _Instance;
    public static FB_MissionGuideProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionGuideProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionGuide.txt";
    protected FB_MissionGuideContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionGuide> mData = new Dictionary<int, FB_MissionGuide>();
    private List<FB_MissionGuide> mListData = new List<FB_MissionGuide>();
    public List<FB_MissionGuide> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionGuide GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionGuide);
    }
    public Dictionary<int, FB_MissionGuide> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionGuideContainer.FB_MissionGuideContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionGuideContainer.GetRootAsFB_MissionGuideContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionKillMonsterProvider
{
    private static FB_MissionKillMonsterProvider _Instance;
    public static FB_MissionKillMonsterProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionKillMonsterProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionKillMonster.txt";
    protected FB_MissionKillMonsterContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionKillMonster> mData = new Dictionary<int, FB_MissionKillMonster>();
    private List<FB_MissionKillMonster> mListData = new List<FB_MissionKillMonster>();
    public List<FB_MissionKillMonster> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionKillMonster GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionKillMonster);
    }
    public Dictionary<int, FB_MissionKillMonster> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionKillMonsterContainer.FB_MissionKillMonsterContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionKillMonsterContainer.GetRootAsFB_MissionKillMonsterContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Index))
            {
                mData.Add(item.Index, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionLimitProvider
{
    private static FB_MissionLimitProvider _Instance;
    public static FB_MissionLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionLimit.txt";
    protected FB_MissionLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionLimit> mData = new Dictionary<int, FB_MissionLimit>();
    private List<FB_MissionLimit> mListData = new List<FB_MissionLimit>();
    public List<FB_MissionLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionLimit);
    }
    public Dictionary<int, FB_MissionLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionLimitContainer.FB_MissionLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionLimitContainer.GetRootAsFB_MissionLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionLootItemProvider
{
    private static FB_MissionLootItemProvider _Instance;
    public static FB_MissionLootItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionLootItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionLootItem.txt";
    protected FB_MissionLootItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionLootItem> mData = new Dictionary<int, FB_MissionLootItem>();
    private List<FB_MissionLootItem> mListData = new List<FB_MissionLootItem>();
    public List<FB_MissionLootItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionLootItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionLootItem);
    }
    public Dictionary<int, FB_MissionLootItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionLootItemContainer.FB_MissionLootItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionLootItemContainer.GetRootAsFB_MissionLootItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionPuzzleProvider
{
    private static FB_MissionPuzzleProvider _Instance;
    public static FB_MissionPuzzleProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionPuzzleProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionPuzzle.txt";
    protected FB_MissionPuzzleContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionPuzzle> mData = new Dictionary<int, FB_MissionPuzzle>();
    private List<FB_MissionPuzzle> mListData = new List<FB_MissionPuzzle>();
    public List<FB_MissionPuzzle> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionPuzzle GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionPuzzle);
    }
    public Dictionary<int, FB_MissionPuzzle> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionPuzzleContainer.FB_MissionPuzzleContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionPuzzleContainer.GetRootAsFB_MissionPuzzleContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionRoundProvider
{
    private static FB_MissionRoundProvider _Instance;
    public static FB_MissionRoundProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionRoundProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionRound.txt";
    protected FB_MissionRoundContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionRound> mData = new Dictionary<int, FB_MissionRound>();
    private List<FB_MissionRound> mListData = new List<FB_MissionRound>();
    public List<FB_MissionRound> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionRound GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionRound);
    }
    public Dictionary<int, FB_MissionRound> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionRoundContainer.FB_MissionRoundContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionRoundContainer.GetRootAsFB_MissionRoundContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionRoundBonusProvider
{
    private static FB_MissionRoundBonusProvider _Instance;
    public static FB_MissionRoundBonusProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionRoundBonusProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionRoundBonus.txt";
    protected FB_MissionRoundBonusContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionRoundBonus> mData = new Dictionary<int, FB_MissionRoundBonus>();
    private List<FB_MissionRoundBonus> mListData = new List<FB_MissionRoundBonus>();
    public List<FB_MissionRoundBonus> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionRoundBonus GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionRoundBonus);
    }
    public Dictionary<int, FB_MissionRoundBonus> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionRoundBonusContainer.FB_MissionRoundBonusContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionRoundBonusContainer.GetRootAsFB_MissionRoundBonusContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionRoundCommitProvider
{
    private static FB_MissionRoundCommitProvider _Instance;
    public static FB_MissionRoundCommitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionRoundCommitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionRoundCommit.txt";
    protected FB_MissionRoundCommitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionRoundCommit> mData = new Dictionary<int, FB_MissionRoundCommit>();
    private List<FB_MissionRoundCommit> mListData = new List<FB_MissionRoundCommit>();
    public List<FB_MissionRoundCommit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionRoundCommit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionRoundCommit);
    }
    public Dictionary<int, FB_MissionRoundCommit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionRoundCommitContainer.FB_MissionRoundCommitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionRoundCommitContainer.GetRootAsFB_MissionRoundCommitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionRoundConfigProvider
{
    private static FB_MissionRoundConfigProvider _Instance;
    public static FB_MissionRoundConfigProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionRoundConfigProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionRoundConfig.txt";
    protected FB_MissionRoundConfigContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionRoundConfig> mData = new Dictionary<int, FB_MissionRoundConfig>();
    private List<FB_MissionRoundConfig> mListData = new List<FB_MissionRoundConfig>();
    public List<FB_MissionRoundConfig> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionRoundConfig GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionRoundConfig);
    }
    public Dictionary<int, FB_MissionRoundConfig> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionRoundConfigContainer.FB_MissionRoundConfigContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionRoundConfigContainer.GetRootAsFB_MissionRoundConfigContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionRoundLevelProvider
{
    private static FB_MissionRoundLevelProvider _Instance;
    public static FB_MissionRoundLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionRoundLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionRoundLevel.txt";
    protected FB_MissionRoundLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionRoundLevel> mData = new Dictionary<int, FB_MissionRoundLevel>();
    private List<FB_MissionRoundLevel> mListData = new List<FB_MissionRoundLevel>();
    public List<FB_MissionRoundLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionRoundLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionRoundLevel);
    }
    public Dictionary<int, FB_MissionRoundLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionRoundLevelContainer.FB_MissionRoundLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionRoundLevelContainer.GetRootAsFB_MissionRoundLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionSectionRewardProvider
{
    private static FB_MissionSectionRewardProvider _Instance;
    public static FB_MissionSectionRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionSectionRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionSectionReward.txt";
    protected FB_MissionSectionRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionSectionReward> mData = new Dictionary<int, FB_MissionSectionReward>();
    private List<FB_MissionSectionReward> mListData = new List<FB_MissionSectionReward>();
    public List<FB_MissionSectionReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionSectionReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionSectionReward);
    }
    public Dictionary<int, FB_MissionSectionReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionSectionRewardContainer.FB_MissionSectionRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionSectionRewardContainer.GetRootAsFB_MissionSectionRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MissionUseItemProvider
{
    private static FB_MissionUseItemProvider _Instance;
    public static FB_MissionUseItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MissionUseItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MissionUseItem.txt";
    protected FB_MissionUseItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MissionUseItem> mData = new Dictionary<int, FB_MissionUseItem>();
    private List<FB_MissionUseItem> mListData = new List<FB_MissionUseItem>();
    public List<FB_MissionUseItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MissionUseItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MissionUseItem);
    }
    public Dictionary<int, FB_MissionUseItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MissionUseItemContainer.FB_MissionUseItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MissionUseItemContainer.GetRootAsFB_MissionUseItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MondayLuckDrawBaseProvider
{
    private static FB_MondayLuckDrawBaseProvider _Instance;
    public static FB_MondayLuckDrawBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MondayLuckDrawBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MondayLuckDrawBase.txt";
    protected FB_MondayLuckDrawBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MondayLuckDrawBase> mData = new Dictionary<int, FB_MondayLuckDrawBase>();
    private List<FB_MondayLuckDrawBase> mListData = new List<FB_MondayLuckDrawBase>();
    public List<FB_MondayLuckDrawBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MondayLuckDrawBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MondayLuckDrawBase);
    }
    public Dictionary<int, FB_MondayLuckDrawBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MondayLuckDrawBaseContainer.FB_MondayLuckDrawBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MondayLuckDrawBaseContainer.GetRootAsFB_MondayLuckDrawBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MondayLuckDrawItemProvider
{
    private static FB_MondayLuckDrawItemProvider _Instance;
    public static FB_MondayLuckDrawItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MondayLuckDrawItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MondayLuckDrawItem.txt";
    protected FB_MondayLuckDrawItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MondayLuckDrawItem> mData = new Dictionary<int, FB_MondayLuckDrawItem>();
    private List<FB_MondayLuckDrawItem> mListData = new List<FB_MondayLuckDrawItem>();
    public List<FB_MondayLuckDrawItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MondayLuckDrawItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MondayLuckDrawItem);
    }
    public Dictionary<int, FB_MondayLuckDrawItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MondayLuckDrawItemContainer.FB_MondayLuckDrawItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MondayLuckDrawItemContainer.GetRootAsFB_MondayLuckDrawItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MondayLuckDrawMissionsProvider
{
    private static FB_MondayLuckDrawMissionsProvider _Instance;
    public static FB_MondayLuckDrawMissionsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MondayLuckDrawMissionsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MondayLuckDrawMissions.txt";
    protected FB_MondayLuckDrawMissionsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MondayLuckDrawMissions> mData = new Dictionary<int, FB_MondayLuckDrawMissions>();
    private List<FB_MondayLuckDrawMissions> mListData = new List<FB_MondayLuckDrawMissions>();
    public List<FB_MondayLuckDrawMissions> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MondayLuckDrawMissions GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MondayLuckDrawMissions);
    }
    public Dictionary<int, FB_MondayLuckDrawMissions> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MondayLuckDrawMissionsContainer.FB_MondayLuckDrawMissionsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MondayLuckDrawMissionsContainer.GetRootAsFB_MondayLuckDrawMissionsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_MopUpBaseProvider
{
    private static FB_MopUpBaseProvider _Instance;
    public static FB_MopUpBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_MopUpBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/MopUpBase.txt";
    protected FB_MopUpBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_MopUpBase> mData = new Dictionary<int, FB_MopUpBase>();
    private List<FB_MopUpBase> mListData = new List<FB_MopUpBase>();
    public List<FB_MopUpBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_MopUpBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_MopUpBase);
    }
    public Dictionary<int, FB_MopUpBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_MopUpBaseContainer.FB_MopUpBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_MopUpBaseContainer.GetRootAsFB_MopUpBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_NpcDialogProvider
{
    private static FB_NpcDialogProvider _Instance;
    public static FB_NpcDialogProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_NpcDialogProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/NpcDialog.txt";
    protected FB_NpcDialogContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_NpcDialog> mData = new Dictionary<int, FB_NpcDialog>();
    private List<FB_NpcDialog> mListData = new List<FB_NpcDialog>();
    public List<FB_NpcDialog> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_NpcDialog GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_NpcDialog);
    }
    public Dictionary<int, FB_NpcDialog> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_NpcDialogContainer.FB_NpcDialogContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_NpcDialogContainer.GetRootAsFB_NpcDialogContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OccupationBaseProvider
{
    private static FB_OccupationBaseProvider _Instance;
    public static FB_OccupationBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OccupationBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OccupationBase.txt";
    protected FB_OccupationBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OccupationBase> mData = new Dictionary<int, FB_OccupationBase>();
    private List<FB_OccupationBase> mListData = new List<FB_OccupationBase>();
    public List<FB_OccupationBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OccupationBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OccupationBase);
    }
    public Dictionary<int, FB_OccupationBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OccupationBaseContainer.FB_OccupationBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OccupationBaseContainer.GetRootAsFB_OccupationBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OfflineRewardProvider
{
    private static FB_OfflineRewardProvider _Instance;
    public static FB_OfflineRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OfflineRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OfflineReward.txt";
    protected FB_OfflineRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OfflineReward> mData = new Dictionary<int, FB_OfflineReward>();
    private List<FB_OfflineReward> mListData = new List<FB_OfflineReward>();
    public List<FB_OfflineReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OfflineReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OfflineReward);
    }
    public Dictionary<int, FB_OfflineReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OfflineRewardContainer.FB_OfflineRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OfflineRewardContainer.GetRootAsFB_OfflineRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodDiamondBaseProvider
{
    private static FB_OldGodDiamondBaseProvider _Instance;
    public static FB_OldGodDiamondBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodDiamondBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodDiamondBase.txt";
    protected FB_OldGodDiamondBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodDiamondBase> mData = new Dictionary<int, FB_OldGodDiamondBase>();
    private List<FB_OldGodDiamondBase> mListData = new List<FB_OldGodDiamondBase>();
    public List<FB_OldGodDiamondBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodDiamondBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodDiamondBase);
    }
    public Dictionary<int, FB_OldGodDiamondBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodDiamondBaseContainer.FB_OldGodDiamondBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodDiamondBaseContainer.GetRootAsFB_OldGodDiamondBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodDiamondLevelUpProvider
{
    private static FB_OldGodDiamondLevelUpProvider _Instance;
    public static FB_OldGodDiamondLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodDiamondLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodDiamondLevelUp.txt";
    protected FB_OldGodDiamondLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodDiamondLevelUp> mData = new Dictionary<int, FB_OldGodDiamondLevelUp>();
    private List<FB_OldGodDiamondLevelUp> mListData = new List<FB_OldGodDiamondLevelUp>();
    public List<FB_OldGodDiamondLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodDiamondLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodDiamondLevelUp);
    }
    public Dictionary<int, FB_OldGodDiamondLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodDiamondLevelUpContainer.FB_OldGodDiamondLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodDiamondLevelUpContainer.GetRootAsFB_OldGodDiamondLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodItemBaseProvider
{
    private static FB_OldGodItemBaseProvider _Instance;
    public static FB_OldGodItemBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodItemBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodItemBase.txt";
    protected FB_OldGodItemBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodItemBase> mData = new Dictionary<int, FB_OldGodItemBase>();
    private List<FB_OldGodItemBase> mListData = new List<FB_OldGodItemBase>();
    public List<FB_OldGodItemBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodItemBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodItemBase);
    }
    public Dictionary<int, FB_OldGodItemBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodItemBaseContainer.FB_OldGodItemBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodItemBaseContainer.GetRootAsFB_OldGodItemBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodItemLevelUpProvider
{
    private static FB_OldGodItemLevelUpProvider _Instance;
    public static FB_OldGodItemLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodItemLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodItemLevelUp.txt";
    protected FB_OldGodItemLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodItemLevelUp> mData = new Dictionary<int, FB_OldGodItemLevelUp>();
    private List<FB_OldGodItemLevelUp> mListData = new List<FB_OldGodItemLevelUp>();
    public List<FB_OldGodItemLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodItemLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodItemLevelUp);
    }
    public Dictionary<int, FB_OldGodItemLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodItemLevelUpContainer.FB_OldGodItemLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodItemLevelUpContainer.GetRootAsFB_OldGodItemLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodSuitAttrProvider
{
    private static FB_OldGodSuitAttrProvider _Instance;
    public static FB_OldGodSuitAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodSuitAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodSuitAttr.txt";
    protected FB_OldGodSuitAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodSuitAttr> mData = new Dictionary<int, FB_OldGodSuitAttr>();
    private List<FB_OldGodSuitAttr> mListData = new List<FB_OldGodSuitAttr>();
    public List<FB_OldGodSuitAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodSuitAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodSuitAttr);
    }
    public Dictionary<int, FB_OldGodSuitAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodSuitAttrContainer.FB_OldGodSuitAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodSuitAttrContainer.GetRootAsFB_OldGodSuitAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodSuitBaseProvider
{
    private static FB_OldGodSuitBaseProvider _Instance;
    public static FB_OldGodSuitBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodSuitBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodSuitBase.txt";
    protected FB_OldGodSuitBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodSuitBase> mData = new Dictionary<int, FB_OldGodSuitBase>();
    private List<FB_OldGodSuitBase> mListData = new List<FB_OldGodSuitBase>();
    public List<FB_OldGodSuitBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodSuitBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodSuitBase);
    }
    public Dictionary<int, FB_OldGodSuitBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodSuitBaseContainer.FB_OldGodSuitBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodSuitBaseContainer.GetRootAsFB_OldGodSuitBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OldGodUnitBaseProvider
{
    private static FB_OldGodUnitBaseProvider _Instance;
    public static FB_OldGodUnitBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OldGodUnitBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OldGodUnitBase.txt";
    protected FB_OldGodUnitBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OldGodUnitBase> mData = new Dictionary<int, FB_OldGodUnitBase>();
    private List<FB_OldGodUnitBase> mListData = new List<FB_OldGodUnitBase>();
    public List<FB_OldGodUnitBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OldGodUnitBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OldGodUnitBase);
    }
    public Dictionary<int, FB_OldGodUnitBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OldGodUnitBaseContainer.FB_OldGodUnitBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OldGodUnitBaseContainer.GetRootAsFB_OldGodUnitBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OperationActivityGiftProvider
{
    private static FB_OperationActivityGiftProvider _Instance;
    public static FB_OperationActivityGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OperationActivityGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OperationActivityGift.txt";
    protected FB_OperationActivityGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OperationActivityGift> mData = new Dictionary<int, FB_OperationActivityGift>();
    private List<FB_OperationActivityGift> mListData = new List<FB_OperationActivityGift>();
    public List<FB_OperationActivityGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OperationActivityGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OperationActivityGift);
    }
    public Dictionary<int, FB_OperationActivityGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OperationActivityGiftContainer.FB_OperationActivityGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OperationActivityGiftContainer.GetRootAsFB_OperationActivityGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OperationActivityListProvider
{
    private static FB_OperationActivityListProvider _Instance;
    public static FB_OperationActivityListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OperationActivityListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OperationActivityList.txt";
    protected FB_OperationActivityListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OperationActivityList> mData = new Dictionary<int, FB_OperationActivityList>();
    private List<FB_OperationActivityList> mListData = new List<FB_OperationActivityList>();
    public List<FB_OperationActivityList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OperationActivityList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OperationActivityList);
    }
    public Dictionary<int, FB_OperationActivityList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OperationActivityListContainer.FB_OperationActivityListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OperationActivityListContainer.GetRootAsFB_OperationActivityListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_OppoRewardProvider
{
    private static FB_OppoRewardProvider _Instance;
    public static FB_OppoRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_OppoRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/OppoReward.txt";
    protected FB_OppoRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_OppoReward> mData = new Dictionary<int, FB_OppoReward>();
    private List<FB_OppoReward> mListData = new List<FB_OppoReward>();
    public List<FB_OppoReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_OppoReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_OppoReward);
    }
    public Dictionary<int, FB_OppoReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_OppoRewardContainer.FB_OppoRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_OppoRewardContainer.GetRootAsFB_OppoRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PackageUnlockProvider
{
    private static FB_PackageUnlockProvider _Instance;
    public static FB_PackageUnlockProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PackageUnlockProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PackageUnlock.txt";
    protected FB_PackageUnlockContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PackageUnlock> mData = new Dictionary<int, FB_PackageUnlock>();
    private List<FB_PackageUnlock> mListData = new List<FB_PackageUnlock>();
    public List<FB_PackageUnlock> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PackageUnlock GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PackageUnlock);
    }
    public Dictionary<int, FB_PackageUnlock> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PackageUnlockContainer.FB_PackageUnlockContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PackageUnlockContainer.GetRootAsFB_PackageUnlockContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ParamCollectionPublicProvider
{
    private static FB_ParamCollectionPublicProvider _Instance;
    public static FB_ParamCollectionPublicProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ParamCollectionPublicProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ParamCollectionPublic.txt";
    protected FB_ParamCollectionPublicContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ParamCollectionPublic> mData = new Dictionary<int, FB_ParamCollectionPublic>();
    private List<FB_ParamCollectionPublic> mListData = new List<FB_ParamCollectionPublic>();
    public List<FB_ParamCollectionPublic> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ParamCollectionPublic GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ParamCollectionPublic);
    }
    public Dictionary<int, FB_ParamCollectionPublic> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ParamCollectionPublicContainer.FB_ParamCollectionPublicContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ParamCollectionPublicContainer.GetRootAsFB_ParamCollectionPublicContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PassiveSkillBaseProvider
{
    private static FB_PassiveSkillBaseProvider _Instance;
    public static FB_PassiveSkillBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PassiveSkillBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PassiveSkillBase.txt";
    protected FB_PassiveSkillBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PassiveSkillBase> mData = new Dictionary<int, FB_PassiveSkillBase>();
    private List<FB_PassiveSkillBase> mListData = new List<FB_PassiveSkillBase>();
    public List<FB_PassiveSkillBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PassiveSkillBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PassiveSkillBase);
    }
    public Dictionary<int, FB_PassiveSkillBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PassiveSkillBaseContainer.FB_PassiveSkillBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PassiveSkillBaseContainer.GetRootAsFB_PassiveSkillBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PeiShiCompoundBaseProvider
{
    private static FB_PeiShiCompoundBaseProvider _Instance;
    public static FB_PeiShiCompoundBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PeiShiCompoundBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PeiShiCompoundBase.txt";
    protected FB_PeiShiCompoundBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PeiShiCompoundBase> mData = new Dictionary<int, FB_PeiShiCompoundBase>();
    private List<FB_PeiShiCompoundBase> mListData = new List<FB_PeiShiCompoundBase>();
    public List<FB_PeiShiCompoundBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PeiShiCompoundBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PeiShiCompoundBase);
    }
    public Dictionary<int, FB_PeiShiCompoundBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PeiShiCompoundBaseContainer.FB_PeiShiCompoundBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PeiShiCompoundBaseContainer.GetRootAsFB_PeiShiCompoundBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PeiShiCompoundTypeProvider
{
    private static FB_PeiShiCompoundTypeProvider _Instance;
    public static FB_PeiShiCompoundTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PeiShiCompoundTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PeiShiCompoundType.txt";
    protected FB_PeiShiCompoundTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PeiShiCompoundType> mData = new Dictionary<int, FB_PeiShiCompoundType>();
    private List<FB_PeiShiCompoundType> mListData = new List<FB_PeiShiCompoundType>();
    public List<FB_PeiShiCompoundType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PeiShiCompoundType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PeiShiCompoundType);
    }
    public Dictionary<int, FB_PeiShiCompoundType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PeiShiCompoundTypeContainer.FB_PeiShiCompoundTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PeiShiCompoundTypeContainer.GetRootAsFB_PeiShiCompoundTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PetBaseProvider
{
    private static FB_PetBaseProvider _Instance;
    public static FB_PetBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PetBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PetBase.txt";
    protected FB_PetBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PetBase> mData = new Dictionary<int, FB_PetBase>();
    private List<FB_PetBase> mListData = new List<FB_PetBase>();
    public List<FB_PetBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PetBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PetBase);
    }
    public Dictionary<int, FB_PetBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PetBaseContainer.FB_PetBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PetBaseContainer.GetRootAsFB_PetBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PetBattleSkillProvider
{
    private static FB_PetBattleSkillProvider _Instance;
    public static FB_PetBattleSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PetBattleSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PetBattleSkill.txt";
    protected FB_PetBattleSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PetBattleSkill> mData = new Dictionary<int, FB_PetBattleSkill>();
    private List<FB_PetBattleSkill> mListData = new List<FB_PetBattleSkill>();
    public List<FB_PetBattleSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PetBattleSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PetBattleSkill);
    }
    public Dictionary<int, FB_PetBattleSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PetBattleSkillContainer.FB_PetBattleSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PetBattleSkillContainer.GetRootAsFB_PetBattleSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PetMountProvider
{
    private static FB_PetMountProvider _Instance;
    public static FB_PetMountProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PetMountProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PetMount.txt";
    protected FB_PetMountContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PetMount> mData = new Dictionary<int, FB_PetMount>();
    private List<FB_PetMount> mListData = new List<FB_PetMount>();
    public List<FB_PetMount> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PetMount GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PetMount);
    }
    public Dictionary<int, FB_PetMount> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PetMountContainer.FB_PetMountContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PetMountContainer.GetRootAsFB_PetMountContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PetSoulStoneProvider
{
    private static FB_PetSoulStoneProvider _Instance;
    public static FB_PetSoulStoneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PetSoulStoneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PetSoulStone.txt";
    protected FB_PetSoulStoneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PetSoulStone> mData = new Dictionary<int, FB_PetSoulStone>();
    private List<FB_PetSoulStone> mListData = new List<FB_PetSoulStone>();
    public List<FB_PetSoulStone> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PetSoulStone GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PetSoulStone);
    }
    public Dictionary<int, FB_PetSoulStone> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PetSoulStoneContainer.FB_PetSoulStoneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PetSoulStoneContainer.GetRootAsFB_PetSoulStoneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerLevelAttrProvider
{
    private static FB_PlayerLevelAttrProvider _Instance;
    public static FB_PlayerLevelAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerLevelAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PlayerLevelAttr.txt";
    protected FB_PlayerLevelAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerLevelAttr> mData = new Dictionary<int, FB_PlayerLevelAttr>();
    private List<FB_PlayerLevelAttr> mListData = new List<FB_PlayerLevelAttr>();
    public List<FB_PlayerLevelAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerLevelAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerLevelAttr);
    }
    public Dictionary<int, FB_PlayerLevelAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerLevelAttrContainer.FB_PlayerLevelAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerLevelAttrContainer.GetRootAsFB_PlayerLevelAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerSkinBaseProvider
{
    private static FB_PlayerSkinBaseProvider _Instance;
    public static FB_PlayerSkinBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerSkinBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PlayerSkinBase.txt";
    protected FB_PlayerSkinBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerSkinBase> mData = new Dictionary<int, FB_PlayerSkinBase>();
    private List<FB_PlayerSkinBase> mListData = new List<FB_PlayerSkinBase>();
    public List<FB_PlayerSkinBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerSkinBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerSkinBase);
    }
    public Dictionary<int, FB_PlayerSkinBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerSkinBaseContainer.FB_PlayerSkinBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerSkinBaseContainer.GetRootAsFB_PlayerSkinBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerSkinColorProvider
{
    private static FB_PlayerSkinColorProvider _Instance;
    public static FB_PlayerSkinColorProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerSkinColorProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PlayerSkinColor.txt";
    protected FB_PlayerSkinColorContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerSkinColor> mData = new Dictionary<int, FB_PlayerSkinColor>();
    private List<FB_PlayerSkinColor> mListData = new List<FB_PlayerSkinColor>();
    public List<FB_PlayerSkinColor> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerSkinColor GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerSkinColor);
    }
    public Dictionary<int, FB_PlayerSkinColor> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerSkinColorContainer.FB_PlayerSkinColorContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerSkinColorContainer.GetRootAsFB_PlayerSkinColorContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerSkinLevelUpProvider
{
    private static FB_PlayerSkinLevelUpProvider _Instance;
    public static FB_PlayerSkinLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerSkinLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PlayerSkinLevelUp.txt";
    protected FB_PlayerSkinLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerSkinLevelUp> mData = new Dictionary<int, FB_PlayerSkinLevelUp>();
    private List<FB_PlayerSkinLevelUp> mListData = new List<FB_PlayerSkinLevelUp>();
    public List<FB_PlayerSkinLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerSkinLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerSkinLevelUp);
    }
    public Dictionary<int, FB_PlayerSkinLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerSkinLevelUpContainer.FB_PlayerSkinLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerSkinLevelUpContainer.GetRootAsFB_PlayerSkinLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PlayerSkinPartProvider
{
    private static FB_PlayerSkinPartProvider _Instance;
    public static FB_PlayerSkinPartProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PlayerSkinPartProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PlayerSkinPart.txt";
    protected FB_PlayerSkinPartContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PlayerSkinPart> mData = new Dictionary<int, FB_PlayerSkinPart>();
    private List<FB_PlayerSkinPart> mListData = new List<FB_PlayerSkinPart>();
    public List<FB_PlayerSkinPart> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PlayerSkinPart GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PlayerSkinPart);
    }
    public Dictionary<int, FB_PlayerSkinPart> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PlayerSkinPartContainer.FB_PlayerSkinPartContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PlayerSkinPartContainer.GetRootAsFB_PlayerSkinPartContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PoseBaseProvider
{
    private static FB_PoseBaseProvider _Instance;
    public static FB_PoseBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PoseBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PoseBase.txt";
    protected FB_PoseBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PoseBase> mData = new Dictionary<int, FB_PoseBase>();
    private List<FB_PoseBase> mListData = new List<FB_PoseBase>();
    public List<FB_PoseBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PoseBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PoseBase);
    }
    public Dictionary<int, FB_PoseBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PoseBaseContainer.FB_PoseBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PoseBaseContainer.GetRootAsFB_PoseBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ProgressBaseProvider
{
    private static FB_ProgressBaseProvider _Instance;
    public static FB_ProgressBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ProgressBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ProgressBase.txt";
    protected FB_ProgressBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ProgressBase> mData = new Dictionary<int, FB_ProgressBase>();
    private List<FB_ProgressBase> mListData = new List<FB_ProgressBase>();
    public List<FB_ProgressBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ProgressBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ProgressBase);
    }
    public Dictionary<int, FB_ProgressBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ProgressBaseContainer.FB_ProgressBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ProgressBaseContainer.GetRootAsFB_ProgressBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PugongCutProvider
{
    private static FB_PugongCutProvider _Instance;
    public static FB_PugongCutProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PugongCutProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PugongCut.txt";
    protected FB_PugongCutContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PugongCut> mData = new Dictionary<int, FB_PugongCut>();
    private List<FB_PugongCut> mListData = new List<FB_PugongCut>();
    public List<FB_PugongCut> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PugongCut GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PugongCut);
    }
    public Dictionary<int, FB_PugongCut> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PugongCutContainer.FB_PugongCutContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PugongCutContainer.GetRootAsFB_PugongCutContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_PurchaseAndRestitutProvider
{
    private static FB_PurchaseAndRestitutProvider _Instance;
    public static FB_PurchaseAndRestitutProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_PurchaseAndRestitutProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/PurchaseAndRestitut.txt";
    protected FB_PurchaseAndRestitutContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_PurchaseAndRestitut> mData = new Dictionary<int, FB_PurchaseAndRestitut>();
    private List<FB_PurchaseAndRestitut> mListData = new List<FB_PurchaseAndRestitut>();
    public List<FB_PurchaseAndRestitut> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_PurchaseAndRestitut GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_PurchaseAndRestitut);
    }
    public Dictionary<int, FB_PurchaseAndRestitut> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_PurchaseAndRestitutContainer.FB_PurchaseAndRestitutContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_PurchaseAndRestitutContainer.GetRootAsFB_PurchaseAndRestitutContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QianKunDuoBaoBaseProvider
{
    private static FB_QianKunDuoBaoBaseProvider _Instance;
    public static FB_QianKunDuoBaoBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QianKunDuoBaoBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/QianKunDuoBaoBase.txt";
    protected FB_QianKunDuoBaoBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QianKunDuoBaoBase> mData = new Dictionary<int, FB_QianKunDuoBaoBase>();
    private List<FB_QianKunDuoBaoBase> mListData = new List<FB_QianKunDuoBaoBase>();
    public List<FB_QianKunDuoBaoBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QianKunDuoBaoBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QianKunDuoBaoBase);
    }
    public Dictionary<int, FB_QianKunDuoBaoBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QianKunDuoBaoBaseContainer.FB_QianKunDuoBaoBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QianKunDuoBaoBaseContainer.GetRootAsFB_QianKunDuoBaoBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QianKunDuoBaoGetIntegralProvider
{
    private static FB_QianKunDuoBaoGetIntegralProvider _Instance;
    public static FB_QianKunDuoBaoGetIntegralProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QianKunDuoBaoGetIntegralProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/QianKunDuoBaoGetIntegral.txt";
    protected FB_QianKunDuoBaoGetIntegralContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QianKunDuoBaoGetIntegral> mData = new Dictionary<int, FB_QianKunDuoBaoGetIntegral>();
    private List<FB_QianKunDuoBaoGetIntegral> mListData = new List<FB_QianKunDuoBaoGetIntegral>();
    public List<FB_QianKunDuoBaoGetIntegral> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QianKunDuoBaoGetIntegral GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QianKunDuoBaoGetIntegral);
    }
    public Dictionary<int, FB_QianKunDuoBaoGetIntegral> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QianKunDuoBaoGetIntegralContainer.FB_QianKunDuoBaoGetIntegralContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QianKunDuoBaoGetIntegralContainer.GetRootAsFB_QianKunDuoBaoGetIntegralContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QQDaTingRewardProvider
{
    private static FB_QQDaTingRewardProvider _Instance;
    public static FB_QQDaTingRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QQDaTingRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/QQDaTingReward.txt";
    protected FB_QQDaTingRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QQDaTingReward> mData = new Dictionary<int, FB_QQDaTingReward>();
    private List<FB_QQDaTingReward> mListData = new List<FB_QQDaTingReward>();
    public List<FB_QQDaTingReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QQDaTingReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QQDaTingReward);
    }
    public Dictionary<int, FB_QQDaTingReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QQDaTingRewardContainer.FB_QQDaTingRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QQDaTingRewardContainer.GetRootAsFB_QQDaTingRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QQDaWanKaRewardProvider
{
    private static FB_QQDaWanKaRewardProvider _Instance;
    public static FB_QQDaWanKaRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QQDaWanKaRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/QQDaWanKaReward.txt";
    protected FB_QQDaWanKaRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QQDaWanKaReward> mData = new Dictionary<int, FB_QQDaWanKaReward>();
    private List<FB_QQDaWanKaReward> mListData = new List<FB_QQDaWanKaReward>();
    public List<FB_QQDaWanKaReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QQDaWanKaReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QQDaWanKaReward);
    }
    public Dictionary<int, FB_QQDaWanKaReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QQDaWanKaRewardContainer.FB_QQDaWanKaRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QQDaWanKaRewardContainer.GetRootAsFB_QQDaWanKaRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_QuickChangeEquipProvider
{
    private static FB_QuickChangeEquipProvider _Instance;
    public static FB_QuickChangeEquipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_QuickChangeEquipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/QuickChangeEquip.txt";
    protected FB_QuickChangeEquipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_QuickChangeEquip> mData = new Dictionary<int, FB_QuickChangeEquip>();
    private List<FB_QuickChangeEquip> mListData = new List<FB_QuickChangeEquip>();
    public List<FB_QuickChangeEquip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_QuickChangeEquip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_QuickChangeEquip);
    }
    public Dictionary<int, FB_QuickChangeEquip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_QuickChangeEquipContainer.FB_QuickChangeEquipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_QuickChangeEquipContainer.GetRootAsFB_QuickChangeEquipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RankBaseProvider
{
    private static FB_RankBaseProvider _Instance;
    public static FB_RankBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RankBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RankBase.txt";
    protected FB_RankBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RankBase> mData = new Dictionary<int, FB_RankBase>();
    private List<FB_RankBase> mListData = new List<FB_RankBase>();
    public List<FB_RankBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RankBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RankBase);
    }
    public Dictionary<int, FB_RankBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RankBaseContainer.FB_RankBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RankBaseContainer.GetRootAsFB_RankBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RankBonusProvider
{
    private static FB_RankBonusProvider _Instance;
    public static FB_RankBonusProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RankBonusProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RankBonus.txt";
    protected FB_RankBonusContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RankBonus> mData = new Dictionary<int, FB_RankBonus>();
    private List<FB_RankBonus> mListData = new List<FB_RankBonus>();
    public List<FB_RankBonus> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RankBonus GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RankBonus);
    }
    public Dictionary<int, FB_RankBonus> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RankBonusContainer.FB_RankBonusContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RankBonusContainer.GetRootAsFB_RankBonusContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RealmPracticeBaseProvider
{
    private static FB_RealmPracticeBaseProvider _Instance;
    public static FB_RealmPracticeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RealmPracticeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RealmPracticeBase.txt";
    protected FB_RealmPracticeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RealmPracticeBase> mData = new Dictionary<int, FB_RealmPracticeBase>();
    private List<FB_RealmPracticeBase> mListData = new List<FB_RealmPracticeBase>();
    public List<FB_RealmPracticeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RealmPracticeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RealmPracticeBase);
    }
    public Dictionary<int, FB_RealmPracticeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RealmPracticeBaseContainer.FB_RealmPracticeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RealmPracticeBaseContainer.GetRootAsFB_RealmPracticeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RealmPracticeLevelUpProvider
{
    private static FB_RealmPracticeLevelUpProvider _Instance;
    public static FB_RealmPracticeLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RealmPracticeLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RealmPracticeLevelUp.txt";
    protected FB_RealmPracticeLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RealmPracticeLevelUp> mData = new Dictionary<int, FB_RealmPracticeLevelUp>();
    private List<FB_RealmPracticeLevelUp> mListData = new List<FB_RealmPracticeLevelUp>();
    public List<FB_RealmPracticeLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RealmPracticeLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RealmPracticeLevelUp);
    }
    public Dictionary<int, FB_RealmPracticeLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RealmPracticeLevelUpContainer.FB_RealmPracticeLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RealmPracticeLevelUpContainer.GetRootAsFB_RealmPracticeLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RebateRuleProvider
{
    private static FB_RebateRuleProvider _Instance;
    public static FB_RebateRuleProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RebateRuleProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RebateRule.txt";
    protected FB_RebateRuleContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RebateRule> mData = new Dictionary<int, FB_RebateRule>();
    private List<FB_RebateRule> mListData = new List<FB_RebateRule>();
    public List<FB_RebateRule> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RebateRule GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RebateRule);
    }
    public Dictionary<int, FB_RebateRule> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RebateRuleContainer.FB_RebateRuleContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RebateRuleContainer.GetRootAsFB_RebateRuleContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RechargeAndConsumeBaseProvider
{
    private static FB_RechargeAndConsumeBaseProvider _Instance;
    public static FB_RechargeAndConsumeBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RechargeAndConsumeBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RechargeAndConsumeBase.txt";
    protected FB_RechargeAndConsumeBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RechargeAndConsumeBase> mData = new Dictionary<int, FB_RechargeAndConsumeBase>();
    private List<FB_RechargeAndConsumeBase> mListData = new List<FB_RechargeAndConsumeBase>();
    public List<FB_RechargeAndConsumeBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RechargeAndConsumeBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RechargeAndConsumeBase);
    }
    public Dictionary<int, FB_RechargeAndConsumeBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RechargeAndConsumeBaseContainer.FB_RechargeAndConsumeBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RechargeAndConsumeBaseContainer.GetRootAsFB_RechargeAndConsumeBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RechargeGiftProvider
{
    private static FB_RechargeGiftProvider _Instance;
    public static FB_RechargeGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RechargeGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RechargeGift.txt";
    protected FB_RechargeGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RechargeGift> mData = new Dictionary<int, FB_RechargeGift>();
    private List<FB_RechargeGift> mListData = new List<FB_RechargeGift>();
    public List<FB_RechargeGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RechargeGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RechargeGift);
    }
    public Dictionary<int, FB_RechargeGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RechargeGiftContainer.FB_RechargeGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RechargeGiftContainer.GetRootAsFB_RechargeGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RechargeNewProvider
{
    private static FB_RechargeNewProvider _Instance;
    public static FB_RechargeNewProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RechargeNewProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RechargeNew.txt";
    protected FB_RechargeNewContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RechargeNew> mData = new Dictionary<int, FB_RechargeNew>();
    private List<FB_RechargeNew> mListData = new List<FB_RechargeNew>();
    public List<FB_RechargeNew> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RechargeNew GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RechargeNew);
    }
    public Dictionary<int, FB_RechargeNew> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RechargeNewContainer.FB_RechargeNewContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RechargeNewContainer.GetRootAsFB_RechargeNewContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RelationProvider
{
    private static FB_RelationProvider _Instance;
    public static FB_RelationProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RelationProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/Relation.txt";
    protected FB_RelationContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Relation> mData = new Dictionary<int, FB_Relation>();
    private List<FB_Relation> mListData = new List<FB_Relation>();
    public List<FB_Relation> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Relation GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Relation);
    }
    public Dictionary<int, FB_Relation> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RelationContainer.FB_RelationContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RelationContainer.GetRootAsFB_RelationContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RevivePriceProvider
{
    private static FB_RevivePriceProvider _Instance;
    public static FB_RevivePriceProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RevivePriceProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RevivePrice.txt";
    protected FB_RevivePriceContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RevivePrice> mData = new Dictionary<int, FB_RevivePrice>();
    private List<FB_RevivePrice> mListData = new List<FB_RevivePrice>();
    public List<FB_RevivePrice> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RevivePrice GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RevivePrice);
    }
    public Dictionary<int, FB_RevivePrice> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RevivePriceContainer.FB_RevivePriceContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RevivePriceContainer.GetRootAsFB_RevivePriceContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RewardSurveyProvider
{
    private static FB_RewardSurveyProvider _Instance;
    public static FB_RewardSurveyProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RewardSurveyProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RewardSurvey.txt";
    protected FB_RewardSurveyContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RewardSurvey> mData = new Dictionary<int, FB_RewardSurvey>();
    private List<FB_RewardSurvey> mListData = new List<FB_RewardSurvey>();
    public List<FB_RewardSurvey> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RewardSurvey GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RewardSurvey);
    }
    public Dictionary<int, FB_RewardSurvey> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RewardSurveyContainer.FB_RewardSurveyContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RewardSurveyContainer.GetRootAsFB_RewardSurveyContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RewardSurveyConfigProvider
{
    private static FB_RewardSurveyConfigProvider _Instance;
    public static FB_RewardSurveyConfigProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RewardSurveyConfigProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RewardSurveyConfig.txt";
    protected FB_RewardSurveyConfigContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RewardSurveyConfig> mData = new Dictionary<int, FB_RewardSurveyConfig>();
    private List<FB_RewardSurveyConfig> mListData = new List<FB_RewardSurveyConfig>();
    public List<FB_RewardSurveyConfig> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RewardSurveyConfig GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RewardSurveyConfig);
    }
    public Dictionary<int, FB_RewardSurveyConfig> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RewardSurveyConfigContainer.FB_RewardSurveyConfigContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RewardSurveyConfigContainer.GetRootAsFB_RewardSurveyConfigContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RMBProvider
{
    private static FB_RMBProvider _Instance;
    public static FB_RMBProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RMBProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RMB.txt";
    protected FB_RMBContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RMB> mData = new Dictionary<int, FB_RMB>();
    private List<FB_RMB> mListData = new List<FB_RMB>();
    public List<FB_RMB> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RMB GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RMB);
    }
    public Dictionary<int, FB_RMB> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RMBContainer.FB_RMBContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RMBContainer.GetRootAsFB_RMBContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RMBAttributeProvider
{
    private static FB_RMBAttributeProvider _Instance;
    public static FB_RMBAttributeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RMBAttributeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RMBAttribute.txt";
    protected FB_RMBAttributeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RMBAttribute> mData = new Dictionary<int, FB_RMBAttribute>();
    private List<FB_RMBAttribute> mListData = new List<FB_RMBAttribute>();
    public List<FB_RMBAttribute> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RMBAttribute GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RMBAttribute);
    }
    public Dictionary<int, FB_RMBAttribute> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RMBAttributeContainer.FB_RMBAttributeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RMBAttributeContainer.GetRootAsFB_RMBAttributeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RobotBaseProvider
{
    private static FB_RobotBaseProvider _Instance;
    public static FB_RobotBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RobotBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RobotBase.txt";
    protected FB_RobotBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RobotBase> mData = new Dictionary<int, FB_RobotBase>();
    private List<FB_RobotBase> mListData = new List<FB_RobotBase>();
    public List<FB_RobotBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RobotBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RobotBase);
    }
    public Dictionary<int, FB_RobotBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RobotBaseContainer.FB_RobotBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RobotBaseContainer.GetRootAsFB_RobotBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RoleBaseAttrProvider
{
    private static FB_RoleBaseAttrProvider _Instance;
    public static FB_RoleBaseAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RoleBaseAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RoleBaseAttr.txt";
    protected FB_RoleBaseAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RoleBaseAttr> mData = new Dictionary<int, FB_RoleBaseAttr>();
    private List<FB_RoleBaseAttr> mListData = new List<FB_RoleBaseAttr>();
    public List<FB_RoleBaseAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RoleBaseAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RoleBaseAttr);
    }
    public Dictionary<int, FB_RoleBaseAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RoleBaseAttrContainer.FB_RoleBaseAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RoleBaseAttrContainer.GetRootAsFB_RoleBaseAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RongYaoCollectionAwakeProvider
{
    private static FB_RongYaoCollectionAwakeProvider _Instance;
    public static FB_RongYaoCollectionAwakeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RongYaoCollectionAwakeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RongYaoCollectionAwake.txt";
    protected FB_RongYaoCollectionAwakeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RongYaoCollectionAwake> mData = new Dictionary<int, FB_RongYaoCollectionAwake>();
    private List<FB_RongYaoCollectionAwake> mListData = new List<FB_RongYaoCollectionAwake>();
    public List<FB_RongYaoCollectionAwake> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RongYaoCollectionAwake GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RongYaoCollectionAwake);
    }
    public Dictionary<int, FB_RongYaoCollectionAwake> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RongYaoCollectionAwakeContainer.FB_RongYaoCollectionAwakeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RongYaoCollectionAwakeContainer.GetRootAsFB_RongYaoCollectionAwakeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RongYaoCollectionUpdateProvider
{
    private static FB_RongYaoCollectionUpdateProvider _Instance;
    public static FB_RongYaoCollectionUpdateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RongYaoCollectionUpdateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RongYaoCollectionUpdate.txt";
    protected FB_RongYaoCollectionUpdateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RongYaoCollectionUpdate> mData = new Dictionary<int, FB_RongYaoCollectionUpdate>();
    private List<FB_RongYaoCollectionUpdate> mListData = new List<FB_RongYaoCollectionUpdate>();
    public List<FB_RongYaoCollectionUpdate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RongYaoCollectionUpdate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RongYaoCollectionUpdate);
    }
    public Dictionary<int, FB_RongYaoCollectionUpdate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RongYaoCollectionUpdateContainer.FB_RongYaoCollectionUpdateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RongYaoCollectionUpdateContainer.GetRootAsFB_RongYaoCollectionUpdateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RongYaoSuitProvider
{
    private static FB_RongYaoSuitProvider _Instance;
    public static FB_RongYaoSuitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RongYaoSuitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RongYaoSuit.txt";
    protected FB_RongYaoSuitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RongYaoSuit> mData = new Dictionary<int, FB_RongYaoSuit>();
    private List<FB_RongYaoSuit> mListData = new List<FB_RongYaoSuit>();
    public List<FB_RongYaoSuit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RongYaoSuit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RongYaoSuit);
    }
    public Dictionary<int, FB_RongYaoSuit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RongYaoSuitContainer.FB_RongYaoSuitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RongYaoSuitContainer.GetRootAsFB_RongYaoSuitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RuneAttrProvider
{
    private static FB_RuneAttrProvider _Instance;
    public static FB_RuneAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RuneAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RuneAttr.txt";
    protected FB_RuneAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RuneAttr> mData = new Dictionary<int, FB_RuneAttr>();
    private List<FB_RuneAttr> mListData = new List<FB_RuneAttr>();
    public List<FB_RuneAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RuneAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RuneAttr);
    }
    public Dictionary<int, FB_RuneAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RuneAttrContainer.FB_RuneAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RuneAttrContainer.GetRootAsFB_RuneAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RuneBoxWeightProvider
{
    private static FB_RuneBoxWeightProvider _Instance;
    public static FB_RuneBoxWeightProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RuneBoxWeightProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RuneBoxWeight.txt";
    protected FB_RuneBoxWeightContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RuneBoxWeight> mData = new Dictionary<int, FB_RuneBoxWeight>();
    private List<FB_RuneBoxWeight> mListData = new List<FB_RuneBoxWeight>();
    public List<FB_RuneBoxWeight> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RuneBoxWeight GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RuneBoxWeight);
    }
    public Dictionary<int, FB_RuneBoxWeight> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RuneBoxWeightContainer.FB_RuneBoxWeightContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RuneBoxWeightContainer.GetRootAsFB_RuneBoxWeightContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RuneJieExpProvider
{
    private static FB_RuneJieExpProvider _Instance;
    public static FB_RuneJieExpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RuneJieExpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RuneJieExp.txt";
    protected FB_RuneJieExpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RuneJieExp> mData = new Dictionary<int, FB_RuneJieExp>();
    private List<FB_RuneJieExp> mListData = new List<FB_RuneJieExp>();
    public List<FB_RuneJieExp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RuneJieExp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RuneJieExp);
    }
    public Dictionary<int, FB_RuneJieExp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RuneJieExpContainer.FB_RuneJieExpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RuneJieExpContainer.GetRootAsFB_RuneJieExpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RuneLevelExpProvider
{
    private static FB_RuneLevelExpProvider _Instance;
    public static FB_RuneLevelExpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RuneLevelExpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RuneLevelExp.txt";
    protected FB_RuneLevelExpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RuneLevelExp> mData = new Dictionary<int, FB_RuneLevelExp>();
    private List<FB_RuneLevelExp> mListData = new List<FB_RuneLevelExp>();
    public List<FB_RuneLevelExp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RuneLevelExp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RuneLevelExp);
    }
    public Dictionary<int, FB_RuneLevelExp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RuneLevelExpContainer.FB_RuneLevelExpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RuneLevelExpContainer.GetRootAsFB_RuneLevelExpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_RunesTreasureBaseProvider
{
    private static FB_RunesTreasureBaseProvider _Instance;
    public static FB_RunesTreasureBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_RunesTreasureBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/RunesTreasureBase.txt";
    protected FB_RunesTreasureBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_RunesTreasureBase> mData = new Dictionary<int, FB_RunesTreasureBase>();
    private List<FB_RunesTreasureBase> mListData = new List<FB_RunesTreasureBase>();
    public List<FB_RunesTreasureBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_RunesTreasureBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_RunesTreasureBase);
    }
    public Dictionary<int, FB_RunesTreasureBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_RunesTreasureBaseContainer.FB_RunesTreasureBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_RunesTreasureBaseContainer.GetRootAsFB_RunesTreasureBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneClassProvider
{
    private static FB_SceneClassProvider _Instance;
    public static FB_SceneClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SceneClass.txt";
    protected FB_SceneClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneClass> mData = new Dictionary<int, FB_SceneClass>();
    private List<FB_SceneClass> mListData = new List<FB_SceneClass>();
    public List<FB_SceneClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneClass);
    }
    public Dictionary<int, FB_SceneClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneClassContainer.FB_SceneClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneClassContainer.GetRootAsFB_SceneClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.SceneID))
            {
                mData.Add(item.SceneID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneGroupPointProvider
{
    private static FB_SceneGroupPointProvider _Instance;
    public static FB_SceneGroupPointProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneGroupPointProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SceneGroupPoint.txt";
    protected FB_SceneGroupPointContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneGroupPoint> mData = new Dictionary<int, FB_SceneGroupPoint>();
    private List<FB_SceneGroupPoint> mListData = new List<FB_SceneGroupPoint>();
    public List<FB_SceneGroupPoint> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneGroupPoint GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneGroupPoint);
    }
    public Dictionary<int, FB_SceneGroupPoint> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneGroupPointContainer.FB_SceneGroupPointContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneGroupPointContainer.GetRootAsFB_SceneGroupPointContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneMirrorProvider
{
    private static FB_SceneMirrorProvider _Instance;
    public static FB_SceneMirrorProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneMirrorProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SceneMirror.txt";
    protected FB_SceneMirrorContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneMirror> mData = new Dictionary<int, FB_SceneMirror>();
    private List<FB_SceneMirror> mListData = new List<FB_SceneMirror>();
    public List<FB_SceneMirror> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneMirror GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneMirror);
    }
    public Dictionary<int, FB_SceneMirror> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneMirrorContainer.FB_SceneMirrorContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneMirrorContainer.GetRootAsFB_SceneMirrorContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.SceneID))
            {
                mData.Add(item.SceneID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SceneNpcProvider
{
    private static FB_SceneNpcProvider _Instance;
    public static FB_SceneNpcProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SceneNpcProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SceneNpc.txt";
    protected FB_SceneNpcContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SceneNpc> mData = new Dictionary<int, FB_SceneNpc>();
    private List<FB_SceneNpc> mListData = new List<FB_SceneNpc>();
    public List<FB_SceneNpc> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SceneNpc GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SceneNpc);
    }
    public Dictionary<int, FB_SceneNpc> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SceneNpcContainer.FB_SceneNpcContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SceneNpcContainer.GetRootAsFB_SceneNpcContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ServerLevelExpExtraProvider
{
    private static FB_ServerLevelExpExtraProvider _Instance;
    public static FB_ServerLevelExpExtraProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ServerLevelExpExtraProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ServerLevelExpExtra.txt";
    protected FB_ServerLevelExpExtraContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ServerLevelExpExtra> mData = new Dictionary<int, FB_ServerLevelExpExtra>();
    private List<FB_ServerLevelExpExtra> mListData = new List<FB_ServerLevelExpExtra>();
    public List<FB_ServerLevelExpExtra> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ServerLevelExpExtra GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ServerLevelExpExtra);
    }
    public Dictionary<int, FB_ServerLevelExpExtra> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ServerLevelExpExtraContainer.FB_ServerLevelExpExtraContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ServerLevelExpExtraContainer.GetRootAsFB_ServerLevelExpExtraContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SevenStartBaseProvider
{
    private static FB_SevenStartBaseProvider _Instance;
    public static FB_SevenStartBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SevenStartBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SevenStartBase.txt";
    protected FB_SevenStartBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SevenStartBase> mData = new Dictionary<int, FB_SevenStartBase>();
    private List<FB_SevenStartBase> mListData = new List<FB_SevenStartBase>();
    public List<FB_SevenStartBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SevenStartBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SevenStartBase);
    }
    public Dictionary<int, FB_SevenStartBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SevenStartBaseContainer.FB_SevenStartBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SevenStartBaseContainer.GetRootAsFB_SevenStartBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SevenStartBaseLevelUpProvider
{
    private static FB_SevenStartBaseLevelUpProvider _Instance;
    public static FB_SevenStartBaseLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SevenStartBaseLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SevenStartBaseLevelUp.txt";
    protected FB_SevenStartBaseLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SevenStartBaseLevelUp> mData = new Dictionary<int, FB_SevenStartBaseLevelUp>();
    private List<FB_SevenStartBaseLevelUp> mListData = new List<FB_SevenStartBaseLevelUp>();
    public List<FB_SevenStartBaseLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SevenStartBaseLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SevenStartBaseLevelUp);
    }
    public Dictionary<int, FB_SevenStartBaseLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SevenStartBaseLevelUpContainer.FB_SevenStartBaseLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SevenStartBaseLevelUpContainer.GetRootAsFB_SevenStartBaseLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingBaseProvider
{
    private static FB_ShengLingBaseProvider _Instance;
    public static FB_ShengLingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingBase.txt";
    protected FB_ShengLingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingBase> mData = new Dictionary<int, FB_ShengLingBase>();
    private List<FB_ShengLingBase> mListData = new List<FB_ShengLingBase>();
    public List<FB_ShengLingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingBase);
    }
    public Dictionary<int, FB_ShengLingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingBaseContainer.FB_ShengLingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingBaseContainer.GetRootAsFB_ShengLingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingCopySceneProvider
{
    private static FB_ShengLingCopySceneProvider _Instance;
    public static FB_ShengLingCopySceneProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingCopySceneProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingCopyScene.txt";
    protected FB_ShengLingCopySceneContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingCopyScene> mData = new Dictionary<int, FB_ShengLingCopyScene>();
    private List<FB_ShengLingCopyScene> mListData = new List<FB_ShengLingCopyScene>();
    public List<FB_ShengLingCopyScene> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingCopyScene GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingCopyScene);
    }
    public Dictionary<int, FB_ShengLingCopyScene> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingCopySceneContainer.FB_ShengLingCopySceneContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingCopySceneContainer.GetRootAsFB_ShengLingCopySceneContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingCopySceneLimitProvider
{
    private static FB_ShengLingCopySceneLimitProvider _Instance;
    public static FB_ShengLingCopySceneLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingCopySceneLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingCopySceneLimit.txt";
    protected FB_ShengLingCopySceneLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingCopySceneLimit> mData = new Dictionary<int, FB_ShengLingCopySceneLimit>();
    private List<FB_ShengLingCopySceneLimit> mListData = new List<FB_ShengLingCopySceneLimit>();
    public List<FB_ShengLingCopySceneLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingCopySceneLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingCopySceneLimit);
    }
    public Dictionary<int, FB_ShengLingCopySceneLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingCopySceneLimitContainer.FB_ShengLingCopySceneLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingCopySceneLimitContainer.GetRootAsFB_ShengLingCopySceneLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingCopySceneTypeProvider
{
    private static FB_ShengLingCopySceneTypeProvider _Instance;
    public static FB_ShengLingCopySceneTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingCopySceneTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingCopySceneType.txt";
    protected FB_ShengLingCopySceneTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingCopySceneType> mData = new Dictionary<int, FB_ShengLingCopySceneType>();
    private List<FB_ShengLingCopySceneType> mListData = new List<FB_ShengLingCopySceneType>();
    public List<FB_ShengLingCopySceneType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingCopySceneType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingCopySceneType);
    }
    public Dictionary<int, FB_ShengLingCopySceneType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingCopySceneTypeContainer.FB_ShengLingCopySceneTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingCopySceneTypeContainer.GetRootAsFB_ShengLingCopySceneTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingLevelUpProvider
{
    private static FB_ShengLingLevelUpProvider _Instance;
    public static FB_ShengLingLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingLevelUp.txt";
    protected FB_ShengLingLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingLevelUp> mData = new Dictionary<int, FB_ShengLingLevelUp>();
    private List<FB_ShengLingLevelUp> mListData = new List<FB_ShengLingLevelUp>();
    public List<FB_ShengLingLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingLevelUp);
    }
    public Dictionary<int, FB_ShengLingLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingLevelUpContainer.FB_ShengLingLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingLevelUpContainer.GetRootAsFB_ShengLingLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShengLingSkillProvider
{
    private static FB_ShengLingSkillProvider _Instance;
    public static FB_ShengLingSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShengLingSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShengLingSkill.txt";
    protected FB_ShengLingSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShengLingSkill> mData = new Dictionary<int, FB_ShengLingSkill>();
    private List<FB_ShengLingSkill> mListData = new List<FB_ShengLingSkill>();
    public List<FB_ShengLingSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShengLingSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShengLingSkill);
    }
    public Dictionary<int, FB_ShengLingSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShengLingSkillContainer.FB_ShengLingSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShengLingSkillContainer.GetRootAsFB_ShengLingSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenMoJiangYuBuyTimesCostProvider
{
    private static FB_ShenMoJiangYuBuyTimesCostProvider _Instance;
    public static FB_ShenMoJiangYuBuyTimesCostProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenMoJiangYuBuyTimesCostProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenMoJiangYuBuyTimesCost.txt";
    protected FB_ShenMoJiangYuBuyTimesCostContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenMoJiangYuBuyTimesCost> mData = new Dictionary<int, FB_ShenMoJiangYuBuyTimesCost>();
    private List<FB_ShenMoJiangYuBuyTimesCost> mListData = new List<FB_ShenMoJiangYuBuyTimesCost>();
    public List<FB_ShenMoJiangYuBuyTimesCost> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenMoJiangYuBuyTimesCost GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenMoJiangYuBuyTimesCost);
    }
    public Dictionary<int, FB_ShenMoJiangYuBuyTimesCost> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenMoJiangYuBuyTimesCostContainer.FB_ShenMoJiangYuBuyTimesCostContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenMoJiangYuBuyTimesCostContainer.GetRootAsFB_ShenMoJiangYuBuyTimesCostContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenQiRenZhuClassProvider
{
    private static FB_ShenQiRenZhuClassProvider _Instance;
    public static FB_ShenQiRenZhuClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenQiRenZhuClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenQiRenZhuClass.txt";
    protected FB_ShenQiRenZhuClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenQiRenZhuClass> mData = new Dictionary<int, FB_ShenQiRenZhuClass>();
    private List<FB_ShenQiRenZhuClass> mListData = new List<FB_ShenQiRenZhuClass>();
    public List<FB_ShenQiRenZhuClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenQiRenZhuClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenQiRenZhuClass);
    }
    public Dictionary<int, FB_ShenQiRenZhuClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenQiRenZhuClassContainer.FB_ShenQiRenZhuClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenQiRenZhuClassContainer.GetRootAsFB_ShenQiRenZhuClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenQiRenZhuTypeProvider
{
    private static FB_ShenQiRenZhuTypeProvider _Instance;
    public static FB_ShenQiRenZhuTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenQiRenZhuTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenQiRenZhuType.txt";
    protected FB_ShenQiRenZhuTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenQiRenZhuType> mData = new Dictionary<int, FB_ShenQiRenZhuType>();
    private List<FB_ShenQiRenZhuType> mListData = new List<FB_ShenQiRenZhuType>();
    public List<FB_ShenQiRenZhuType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenQiRenZhuType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenQiRenZhuType);
    }
    public Dictionary<int, FB_ShenQiRenZhuType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenQiRenZhuTypeContainer.FB_ShenQiRenZhuTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenQiRenZhuTypeContainer.GetRootAsFB_ShenQiRenZhuTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShiBaseProvider
{
    private static FB_ShenShiBaseProvider _Instance;
    public static FB_ShenShiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShiBase.txt";
    protected FB_ShenShiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShiBase> mData = new Dictionary<int, FB_ShenShiBase>();
    private List<FB_ShenShiBase> mListData = new List<FB_ShenShiBase>();
    public List<FB_ShenShiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShiBase);
    }
    public Dictionary<int, FB_ShenShiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShiBaseContainer.FB_ShenShiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShiBaseContainer.GetRootAsFB_ShenShiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShiMaxLevelProvider
{
    private static FB_ShenShiMaxLevelProvider _Instance;
    public static FB_ShenShiMaxLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShiMaxLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShiMaxLevel.txt";
    protected FB_ShenShiMaxLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShiMaxLevel> mData = new Dictionary<int, FB_ShenShiMaxLevel>();
    private List<FB_ShenShiMaxLevel> mListData = new List<FB_ShenShiMaxLevel>();
    public List<FB_ShenShiMaxLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShiMaxLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShiMaxLevel);
    }
    public Dictionary<int, FB_ShenShiMaxLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShiMaxLevelContainer.FB_ShenShiMaxLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShiMaxLevelContainer.GetRootAsFB_ShenShiMaxLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShouBaseProvider
{
    private static FB_ShenShouBaseProvider _Instance;
    public static FB_ShenShouBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShouBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShouBase.txt";
    protected FB_ShenShouBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShouBase> mData = new Dictionary<int, FB_ShenShouBase>();
    private List<FB_ShenShouBase> mListData = new List<FB_ShenShouBase>();
    public List<FB_ShenShouBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShouBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShouBase);
    }
    public Dictionary<int, FB_ShenShouBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShouBaseContainer.FB_ShenShouBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShouBaseContainer.GetRootAsFB_ShenShouBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShouEquipBaseProvider
{
    private static FB_ShenShouEquipBaseProvider _Instance;
    public static FB_ShenShouEquipBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShouEquipBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShouEquipBase.txt";
    protected FB_ShenShouEquipBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShouEquipBase> mData = new Dictionary<int, FB_ShenShouEquipBase>();
    private List<FB_ShenShouEquipBase> mListData = new List<FB_ShenShouEquipBase>();
    public List<FB_ShenShouEquipBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShouEquipBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShouEquipBase);
    }
    public Dictionary<int, FB_ShenShouEquipBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShouEquipBaseContainer.FB_ShenShouEquipBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShouEquipBaseContainer.GetRootAsFB_ShenShouEquipBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShouEquipLevelUpProvider
{
    private static FB_ShenShouEquipLevelUpProvider _Instance;
    public static FB_ShenShouEquipLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShouEquipLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShouEquipLevelUp.txt";
    protected FB_ShenShouEquipLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShouEquipLevelUp> mData = new Dictionary<int, FB_ShenShouEquipLevelUp>();
    private List<FB_ShenShouEquipLevelUp> mListData = new List<FB_ShenShouEquipLevelUp>();
    public List<FB_ShenShouEquipLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShouEquipLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShouEquipLevelUp);
    }
    public Dictionary<int, FB_ShenShouEquipLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShouEquipLevelUpContainer.FB_ShenShouEquipLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShouEquipLevelUpContainer.GetRootAsFB_ShenShouEquipLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenShouSkillProvider
{
    private static FB_ShenShouSkillProvider _Instance;
    public static FB_ShenShouSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenShouSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenShouSkill.txt";
    protected FB_ShenShouSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenShouSkill> mData = new Dictionary<int, FB_ShenShouSkill>();
    private List<FB_ShenShouSkill> mListData = new List<FB_ShenShouSkill>();
    public List<FB_ShenShouSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenShouSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenShouSkill);
    }
    public Dictionary<int, FB_ShenShouSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenShouSkillContainer.FB_ShenShouSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenShouSkillContainer.GetRootAsFB_ShenShouSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangLiLianProvider
{
    private static FB_ShenWangLiLianProvider _Instance;
    public static FB_ShenWangLiLianProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangLiLianProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangLiLian.txt";
    protected FB_ShenWangLiLianContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangLiLian> mData = new Dictionary<int, FB_ShenWangLiLian>();
    private List<FB_ShenWangLiLian> mListData = new List<FB_ShenWangLiLian>();
    public List<FB_ShenWangLiLian> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangLiLian GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangLiLian);
    }
    public Dictionary<int, FB_ShenWangLiLian> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangLiLianContainer.FB_ShenWangLiLianContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangLiLianContainer.GetRootAsFB_ShenWangLiLianContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaBaseProvider
{
    private static FB_ShenWangZhanJiaBaseProvider _Instance;
    public static FB_ShenWangZhanJiaBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaBase.txt";
    protected FB_ShenWangZhanJiaBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaBase> mData = new Dictionary<int, FB_ShenWangZhanJiaBase>();
    private List<FB_ShenWangZhanJiaBase> mListData = new List<FB_ShenWangZhanJiaBase>();
    public List<FB_ShenWangZhanJiaBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaBase);
    }
    public Dictionary<int, FB_ShenWangZhanJiaBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaBaseContainer.FB_ShenWangZhanJiaBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaBaseContainer.GetRootAsFB_ShenWangZhanJiaBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaCsBaseProvider
{
    private static FB_ShenWangZhanJiaCsBaseProvider _Instance;
    public static FB_ShenWangZhanJiaCsBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaCsBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaCsBase.txt";
    protected FB_ShenWangZhanJiaCsBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaCsBase> mData = new Dictionary<int, FB_ShenWangZhanJiaCsBase>();
    private List<FB_ShenWangZhanJiaCsBase> mListData = new List<FB_ShenWangZhanJiaCsBase>();
    public List<FB_ShenWangZhanJiaCsBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaCsBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaCsBase);
    }
    public Dictionary<int, FB_ShenWangZhanJiaCsBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaCsBaseContainer.FB_ShenWangZhanJiaCsBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaCsBaseContainer.GetRootAsFB_ShenWangZhanJiaCsBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaCsRewardProvider
{
    private static FB_ShenWangZhanJiaCsRewardProvider _Instance;
    public static FB_ShenWangZhanJiaCsRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaCsRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaCsReward.txt";
    protected FB_ShenWangZhanJiaCsRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaCsReward> mData = new Dictionary<int, FB_ShenWangZhanJiaCsReward>();
    private List<FB_ShenWangZhanJiaCsReward> mListData = new List<FB_ShenWangZhanJiaCsReward>();
    public List<FB_ShenWangZhanJiaCsReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaCsReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaCsReward);
    }
    public Dictionary<int, FB_ShenWangZhanJiaCsReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaCsRewardContainer.FB_ShenWangZhanJiaCsRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaCsRewardContainer.GetRootAsFB_ShenWangZhanJiaCsRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaCsShopProvider
{
    private static FB_ShenWangZhanJiaCsShopProvider _Instance;
    public static FB_ShenWangZhanJiaCsShopProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaCsShopProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaCsShop.txt";
    protected FB_ShenWangZhanJiaCsShopContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaCsShop> mData = new Dictionary<int, FB_ShenWangZhanJiaCsShop>();
    private List<FB_ShenWangZhanJiaCsShop> mListData = new List<FB_ShenWangZhanJiaCsShop>();
    public List<FB_ShenWangZhanJiaCsShop> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaCsShop GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaCsShop);
    }
    public Dictionary<int, FB_ShenWangZhanJiaCsShop> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaCsShopContainer.FB_ShenWangZhanJiaCsShopContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaCsShopContainer.GetRootAsFB_ShenWangZhanJiaCsShopContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaEquipProvider
{
    private static FB_ShenWangZhanJiaEquipProvider _Instance;
    public static FB_ShenWangZhanJiaEquipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaEquipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaEquip.txt";
    protected FB_ShenWangZhanJiaEquipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaEquip> mData = new Dictionary<int, FB_ShenWangZhanJiaEquip>();
    private List<FB_ShenWangZhanJiaEquip> mListData = new List<FB_ShenWangZhanJiaEquip>();
    public List<FB_ShenWangZhanJiaEquip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaEquip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaEquip);
    }
    public Dictionary<int, FB_ShenWangZhanJiaEquip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaEquipContainer.FB_ShenWangZhanJiaEquipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaEquipContainer.GetRootAsFB_ShenWangZhanJiaEquipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaLegendAttrProvider
{
    private static FB_ShenWangZhanJiaLegendAttrProvider _Instance;
    public static FB_ShenWangZhanJiaLegendAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaLegendAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaLegendAttr.txt";
    protected FB_ShenWangZhanJiaLegendAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaLegendAttr> mData = new Dictionary<int, FB_ShenWangZhanJiaLegendAttr>();
    private List<FB_ShenWangZhanJiaLegendAttr> mListData = new List<FB_ShenWangZhanJiaLegendAttr>();
    public List<FB_ShenWangZhanJiaLegendAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaLegendAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaLegendAttr);
    }
    public Dictionary<int, FB_ShenWangZhanJiaLegendAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaLegendAttrContainer.FB_ShenWangZhanJiaLegendAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaLegendAttrContainer.GetRootAsFB_ShenWangZhanJiaLegendAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaMakeLevelUpProvider
{
    private static FB_ShenWangZhanJiaMakeLevelUpProvider _Instance;
    public static FB_ShenWangZhanJiaMakeLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaMakeLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaMakeLevelUp.txt";
    protected FB_ShenWangZhanJiaMakeLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaMakeLevelUp> mData = new Dictionary<int, FB_ShenWangZhanJiaMakeLevelUp>();
    private List<FB_ShenWangZhanJiaMakeLevelUp> mListData = new List<FB_ShenWangZhanJiaMakeLevelUp>();
    public List<FB_ShenWangZhanJiaMakeLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaMakeLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaMakeLevelUp);
    }
    public Dictionary<int, FB_ShenWangZhanJiaMakeLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaMakeLevelUpContainer.FB_ShenWangZhanJiaMakeLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaMakeLevelUpContainer.GetRootAsFB_ShenWangZhanJiaMakeLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaPaintingMissProvider
{
    private static FB_ShenWangZhanJiaPaintingMissProvider _Instance;
    public static FB_ShenWangZhanJiaPaintingMissProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaPaintingMissProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaPaintingMiss.txt";
    protected FB_ShenWangZhanJiaPaintingMissContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaPaintingMiss> mData = new Dictionary<int, FB_ShenWangZhanJiaPaintingMiss>();
    private List<FB_ShenWangZhanJiaPaintingMiss> mListData = new List<FB_ShenWangZhanJiaPaintingMiss>();
    public List<FB_ShenWangZhanJiaPaintingMiss> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaPaintingMiss GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaPaintingMiss);
    }
    public Dictionary<int, FB_ShenWangZhanJiaPaintingMiss> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaPaintingMissContainer.FB_ShenWangZhanJiaPaintingMissContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaPaintingMissContainer.GetRootAsFB_ShenWangZhanJiaPaintingMissContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaPaintingPayProvider
{
    private static FB_ShenWangZhanJiaPaintingPayProvider _Instance;
    public static FB_ShenWangZhanJiaPaintingPayProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaPaintingPayProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaPaintingPay.txt";
    protected FB_ShenWangZhanJiaPaintingPayContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaPaintingPay> mData = new Dictionary<int, FB_ShenWangZhanJiaPaintingPay>();
    private List<FB_ShenWangZhanJiaPaintingPay> mListData = new List<FB_ShenWangZhanJiaPaintingPay>();
    public List<FB_ShenWangZhanJiaPaintingPay> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaPaintingPay GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaPaintingPay);
    }
    public Dictionary<int, FB_ShenWangZhanJiaPaintingPay> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaPaintingPayContainer.FB_ShenWangZhanJiaPaintingPayContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaPaintingPayContainer.GetRootAsFB_ShenWangZhanJiaPaintingPayContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaPaintingRewardProvider
{
    private static FB_ShenWangZhanJiaPaintingRewardProvider _Instance;
    public static FB_ShenWangZhanJiaPaintingRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaPaintingRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaPaintingReward.txt";
    protected FB_ShenWangZhanJiaPaintingRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaPaintingReward> mData = new Dictionary<int, FB_ShenWangZhanJiaPaintingReward>();
    private List<FB_ShenWangZhanJiaPaintingReward> mListData = new List<FB_ShenWangZhanJiaPaintingReward>();
    public List<FB_ShenWangZhanJiaPaintingReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaPaintingReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaPaintingReward);
    }
    public Dictionary<int, FB_ShenWangZhanJiaPaintingReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaPaintingRewardContainer.FB_ShenWangZhanJiaPaintingRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaPaintingRewardContainer.GetRootAsFB_ShenWangZhanJiaPaintingRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenWangZhanJiaPracticeLevelUpProvider
{
    private static FB_ShenWangZhanJiaPracticeLevelUpProvider _Instance;
    public static FB_ShenWangZhanJiaPracticeLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenWangZhanJiaPracticeLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenWangZhanJiaPracticeLevelUp.txt";
    protected FB_ShenWangZhanJiaPracticeLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenWangZhanJiaPracticeLevelUp> mData = new Dictionary<int, FB_ShenWangZhanJiaPracticeLevelUp>();
    private List<FB_ShenWangZhanJiaPracticeLevelUp> mListData = new List<FB_ShenWangZhanJiaPracticeLevelUp>();
    public List<FB_ShenWangZhanJiaPracticeLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenWangZhanJiaPracticeLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenWangZhanJiaPracticeLevelUp);
    }
    public Dictionary<int, FB_ShenWangZhanJiaPracticeLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenWangZhanJiaPracticeLevelUpContainer.FB_ShenWangZhanJiaPracticeLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenWangZhanJiaPracticeLevelUpContainer.GetRootAsFB_ShenWangZhanJiaPracticeLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenYuFengHaoBaseProvider
{
    private static FB_ShenYuFengHaoBaseProvider _Instance;
    public static FB_ShenYuFengHaoBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenYuFengHaoBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenYuFengHaoBase.txt";
    protected FB_ShenYuFengHaoBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenYuFengHaoBase> mData = new Dictionary<int, FB_ShenYuFengHaoBase>();
    private List<FB_ShenYuFengHaoBase> mListData = new List<FB_ShenYuFengHaoBase>();
    public List<FB_ShenYuFengHaoBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenYuFengHaoBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenYuFengHaoBase);
    }
    public Dictionary<int, FB_ShenYuFengHaoBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenYuFengHaoBaseContainer.FB_ShenYuFengHaoBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenYuFengHaoBaseContainer.GetRootAsFB_ShenYuFengHaoBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.SceneID))
            {
                mData.Add(item.SceneID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenYuPointAdditionProvider
{
    private static FB_ShenYuPointAdditionProvider _Instance;
    public static FB_ShenYuPointAdditionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenYuPointAdditionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenYuPointAddition.txt";
    protected FB_ShenYuPointAdditionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenYuPointAddition> mData = new Dictionary<int, FB_ShenYuPointAddition>();
    private List<FB_ShenYuPointAddition> mListData = new List<FB_ShenYuPointAddition>();
    public List<FB_ShenYuPointAddition> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenYuPointAddition GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenYuPointAddition);
    }
    public Dictionary<int, FB_ShenYuPointAddition> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenYuPointAdditionContainer.FB_ShenYuPointAdditionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenYuPointAdditionContainer.GetRootAsFB_ShenYuPointAdditionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenZhiJingBaseProvider
{
    private static FB_ShenZhiJingBaseProvider _Instance;
    public static FB_ShenZhiJingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenZhiJingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenZhiJingBase.txt";
    protected FB_ShenZhiJingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenZhiJingBase> mData = new Dictionary<int, FB_ShenZhiJingBase>();
    private List<FB_ShenZhiJingBase> mListData = new List<FB_ShenZhiJingBase>();
    public List<FB_ShenZhiJingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenZhiJingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenZhiJingBase);
    }
    public Dictionary<int, FB_ShenZhiJingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenZhiJingBaseContainer.FB_ShenZhiJingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenZhiJingBaseContainer.GetRootAsFB_ShenZhiJingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenZhiJingItemLevelUpProvider
{
    private static FB_ShenZhiJingItemLevelUpProvider _Instance;
    public static FB_ShenZhiJingItemLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenZhiJingItemLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenZhiJingItemLevelUp.txt";
    protected FB_ShenZhiJingItemLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenZhiJingItemLevelUp> mData = new Dictionary<int, FB_ShenZhiJingItemLevelUp>();
    private List<FB_ShenZhiJingItemLevelUp> mListData = new List<FB_ShenZhiJingItemLevelUp>();
    public List<FB_ShenZhiJingItemLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenZhiJingItemLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenZhiJingItemLevelUp);
    }
    public Dictionary<int, FB_ShenZhiJingItemLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenZhiJingItemLevelUpContainer.FB_ShenZhiJingItemLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenZhiJingItemLevelUpContainer.GetRootAsFB_ShenZhiJingItemLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShenZhuangLevelUpProvider
{
    private static FB_ShenZhuangLevelUpProvider _Instance;
    public static FB_ShenZhuangLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShenZhuangLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShenZhuangLevelUp.txt";
    protected FB_ShenZhuangLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShenZhuangLevelUp> mData = new Dictionary<int, FB_ShenZhuangLevelUp>();
    private List<FB_ShenZhuangLevelUp> mListData = new List<FB_ShenZhuangLevelUp>();
    public List<FB_ShenZhuangLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShenZhuangLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShenZhuangLevelUp);
    }
    public Dictionary<int, FB_ShenZhuangLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShenZhuangLevelUpContainer.FB_ShenZhuangLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShenZhuangLevelUpContainer.GetRootAsFB_ShenZhuangLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShiLianBossProvider
{
    private static FB_ShiLianBossProvider _Instance;
    public static FB_ShiLianBossProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShiLianBossProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShiLianBoss.txt";
    protected FB_ShiLianBossContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShiLianBoss> mData = new Dictionary<int, FB_ShiLianBoss>();
    private List<FB_ShiLianBoss> mListData = new List<FB_ShiLianBoss>();
    public List<FB_ShiLianBoss> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShiLianBoss GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShiLianBoss);
    }
    public Dictionary<int, FB_ShiLianBoss> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShiLianBossContainer.FB_ShiLianBossContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShiLianBossContainer.GetRootAsFB_ShiLianBossContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShopItemProvider
{
    private static FB_ShopItemProvider _Instance;
    public static FB_ShopItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShopItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShopItem.txt";
    protected FB_ShopItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShopItem> mData = new Dictionary<int, FB_ShopItem>();
    private List<FB_ShopItem> mListData = new List<FB_ShopItem>();
    public List<FB_ShopItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShopItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShopItem);
    }
    public Dictionary<int, FB_ShopItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShopItemContainer.FB_ShopItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShopItemContainer.GetRootAsFB_ShopItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShopTypeProvider
{
    private static FB_ShopTypeProvider _Instance;
    public static FB_ShopTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShopTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShopType.txt";
    protected FB_ShopTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShopType> mData = new Dictionary<int, FB_ShopType>();
    private List<FB_ShopType> mListData = new List<FB_ShopType>();
    public List<FB_ShopType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShopType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShopType);
    }
    public Dictionary<int, FB_ShopType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShopTypeContainer.FB_ShopTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShopTypeContainer.GetRootAsFB_ShopTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShouHuangXiLevelUpProvider
{
    private static FB_ShouHuangXiLevelUpProvider _Instance;
    public static FB_ShouHuangXiLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShouHuangXiLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShouHuangXiLevelUp.txt";
    protected FB_ShouHuangXiLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShouHuangXiLevelUp> mData = new Dictionary<int, FB_ShouHuangXiLevelUp>();
    private List<FB_ShouHuangXiLevelUp> mListData = new List<FB_ShouHuangXiLevelUp>();
    public List<FB_ShouHuangXiLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShouHuangXiLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShouHuangXiLevelUp);
    }
    public Dictionary<int, FB_ShouHuangXiLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShouHuangXiLevelUpContainer.FB_ShouHuangXiLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShouHuangXiLevelUpContainer.GetRootAsFB_ShouHuangXiLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShouHuangXiSkillProvider
{
    private static FB_ShouHuangXiSkillProvider _Instance;
    public static FB_ShouHuangXiSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShouHuangXiSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShouHuangXiSkill.txt";
    protected FB_ShouHuangXiSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShouHuangXiSkill> mData = new Dictionary<int, FB_ShouHuangXiSkill>();
    private List<FB_ShouHuangXiSkill> mListData = new List<FB_ShouHuangXiSkill>();
    public List<FB_ShouHuangXiSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShouHuangXiSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShouHuangXiSkill);
    }
    public Dictionary<int, FB_ShouHuangXiSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShouHuangXiSkillContainer.FB_ShouHuangXiSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShouHuangXiSkillContainer.GetRootAsFB_ShouHuangXiSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ShouHuBaseProvider
{
    private static FB_ShouHuBaseProvider _Instance;
    public static FB_ShouHuBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ShouHuBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ShouHuBase.txt";
    protected FB_ShouHuBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ShouHuBase> mData = new Dictionary<int, FB_ShouHuBase>();
    private List<FB_ShouHuBase> mListData = new List<FB_ShouHuBase>();
    public List<FB_ShouHuBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ShouHuBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ShouHuBase);
    }
    public Dictionary<int, FB_ShouHuBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ShouHuBaseContainer.FB_ShouHuBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ShouHuBaseContainer.GetRootAsFB_ShouHuBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SignInRewardProvider
{
    private static FB_SignInRewardProvider _Instance;
    public static FB_SignInRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SignInRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SignInReward.txt";
    protected FB_SignInRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SignInReward> mData = new Dictionary<int, FB_SignInReward>();
    private List<FB_SignInReward> mListData = new List<FB_SignInReward>();
    public List<FB_SignInReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SignInReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SignInReward);
    }
    public Dictionary<int, FB_SignInReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SignInRewardContainer.FB_SignInRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SignInRewardContainer.GetRootAsFB_SignInRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SignTotalRewardProvider
{
    private static FB_SignTotalRewardProvider _Instance;
    public static FB_SignTotalRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SignTotalRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SignTotalReward.txt";
    protected FB_SignTotalRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SignTotalReward> mData = new Dictionary<int, FB_SignTotalReward>();
    private List<FB_SignTotalReward> mListData = new List<FB_SignTotalReward>();
    public List<FB_SignTotalReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SignTotalReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SignTotalReward);
    }
    public Dictionary<int, FB_SignTotalReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SignTotalRewardContainer.FB_SignTotalRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SignTotalRewardContainer.GetRootAsFB_SignTotalRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillAddValueProvider
{
    private static FB_SkillAddValueProvider _Instance;
    public static FB_SkillAddValueProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillAddValueProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillAddValue.txt";
    protected FB_SkillAddValueContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillAddValue> mData = new Dictionary<int, FB_SkillAddValue>();
    private List<FB_SkillAddValue> mListData = new List<FB_SkillAddValue>();
    public List<FB_SkillAddValue> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillAddValue GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillAddValue);
    }
    public Dictionary<int, FB_SkillAddValue> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillAddValueContainer.FB_SkillAddValueContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillAddValueContainer.GetRootAsFB_SkillAddValueContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillBaseProvider
{
    private static FB_SkillBaseProvider _Instance;
    public static FB_SkillBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillBase.txt";
    protected FB_SkillBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillBase> mData = new Dictionary<int, FB_SkillBase>();
    private List<FB_SkillBase> mListData = new List<FB_SkillBase>();
    public List<FB_SkillBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillBase);
    }
    public Dictionary<int, FB_SkillBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillBaseContainer.FB_SkillBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillBaseContainer.GetRootAsFB_SkillBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillCalculateProvider
{
    private static FB_SkillCalculateProvider _Instance;
    public static FB_SkillCalculateProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillCalculateProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillCalculate.txt";
    protected FB_SkillCalculateContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillCalculate> mData = new Dictionary<int, FB_SkillCalculate>();
    private List<FB_SkillCalculate> mListData = new List<FB_SkillCalculate>();
    public List<FB_SkillCalculate> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillCalculate GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillCalculate);
    }
    public Dictionary<int, FB_SkillCalculate> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillCalculateContainer.FB_SkillCalculateContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillCalculateContainer.GetRootAsFB_SkillCalculateContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillDelayProvider
{
    private static FB_SkillDelayProvider _Instance;
    public static FB_SkillDelayProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillDelayProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillDelay.txt";
    protected FB_SkillDelayContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillDelay> mData = new Dictionary<int, FB_SkillDelay>();
    private List<FB_SkillDelay> mListData = new List<FB_SkillDelay>();
    public List<FB_SkillDelay> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillDelay GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillDelay);
    }
    public Dictionary<int, FB_SkillDelay> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillDelayContainer.FB_SkillDelayContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillDelayContainer.GetRootAsFB_SkillDelayContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillExProvider
{
    private static FB_SkillExProvider _Instance;
    public static FB_SkillExProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillExProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillEx.txt";
    protected FB_SkillExContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillEx> mData = new Dictionary<int, FB_SkillEx>();
    private List<FB_SkillEx> mListData = new List<FB_SkillEx>();
    public List<FB_SkillEx> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillEx GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillEx);
    }
    public Dictionary<int, FB_SkillEx> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillExContainer.FB_SkillExContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillExContainer.GetRootAsFB_SkillExContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.SkillExID))
            {
                mData.Add(item.SkillExID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillLevelProvider
{
    private static FB_SkillLevelProvider _Instance;
    public static FB_SkillLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillLevel.txt";
    protected FB_SkillLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillLevel> mData = new Dictionary<int, FB_SkillLevel>();
    private List<FB_SkillLevel> mListData = new List<FB_SkillLevel>();
    public List<FB_SkillLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillLevel);
    }
    public Dictionary<int, FB_SkillLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillLevelContainer.FB_SkillLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillLevelContainer.GetRootAsFB_SkillLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillListProvider
{
    private static FB_SkillListProvider _Instance;
    public static FB_SkillListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillList.txt";
    protected FB_SkillListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillList> mData = new Dictionary<int, FB_SkillList>();
    private List<FB_SkillList> mListData = new List<FB_SkillList>();
    public List<FB_SkillList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillList);
    }
    public Dictionary<int, FB_SkillList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillListContainer.FB_SkillListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillListContainer.GetRootAsFB_SkillListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SkillSkinBaseProvider
{
    private static FB_SkillSkinBaseProvider _Instance;
    public static FB_SkillSkinBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SkillSkinBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SkillSkinBase.txt";
    protected FB_SkillSkinBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SkillSkinBase> mData = new Dictionary<int, FB_SkillSkinBase>();
    private List<FB_SkillSkinBase> mListData = new List<FB_SkillSkinBase>();
    public List<FB_SkillSkinBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SkillSkinBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SkillSkinBase);
    }
    public Dictionary<int, FB_SkillSkinBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SkillSkinBaseContainer.FB_SkillSkinBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SkillSkinBaseContainer.GetRootAsFB_SkillSkinBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SoulPowerBaseProvider
{
    private static FB_SoulPowerBaseProvider _Instance;
    public static FB_SoulPowerBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SoulPowerBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SoulPowerBase.txt";
    protected FB_SoulPowerBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SoulPowerBase> mData = new Dictionary<int, FB_SoulPowerBase>();
    private List<FB_SoulPowerBase> mListData = new List<FB_SoulPowerBase>();
    public List<FB_SoulPowerBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SoulPowerBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SoulPowerBase);
    }
    public Dictionary<int, FB_SoulPowerBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SoulPowerBaseContainer.FB_SoulPowerBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SoulPowerBaseContainer.GetRootAsFB_SoulPowerBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SoulPowerDecomposeProvider
{
    private static FB_SoulPowerDecomposeProvider _Instance;
    public static FB_SoulPowerDecomposeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SoulPowerDecomposeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SoulPowerDecompose.txt";
    protected FB_SoulPowerDecomposeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SoulPowerDecompose> mData = new Dictionary<int, FB_SoulPowerDecompose>();
    private List<FB_SoulPowerDecompose> mListData = new List<FB_SoulPowerDecompose>();
    public List<FB_SoulPowerDecompose> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SoulPowerDecompose GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SoulPowerDecompose);
    }
    public Dictionary<int, FB_SoulPowerDecompose> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SoulPowerDecomposeContainer.FB_SoulPowerDecomposeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SoulPowerDecomposeContainer.GetRootAsFB_SoulPowerDecomposeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SoulPowerJieUpProvider
{
    private static FB_SoulPowerJieUpProvider _Instance;
    public static FB_SoulPowerJieUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SoulPowerJieUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SoulPowerJieUp.txt";
    protected FB_SoulPowerJieUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SoulPowerJieUp> mData = new Dictionary<int, FB_SoulPowerJieUp>();
    private List<FB_SoulPowerJieUp> mListData = new List<FB_SoulPowerJieUp>();
    public List<FB_SoulPowerJieUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SoulPowerJieUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SoulPowerJieUp);
    }
    public Dictionary<int, FB_SoulPowerJieUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SoulPowerJieUpContainer.FB_SoulPowerJieUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SoulPowerJieUpContainer.GetRootAsFB_SoulPowerJieUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SoulPowerLevelUpProvider
{
    private static FB_SoulPowerLevelUpProvider _Instance;
    public static FB_SoulPowerLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SoulPowerLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SoulPowerLevelUp.txt";
    protected FB_SoulPowerLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SoulPowerLevelUp> mData = new Dictionary<int, FB_SoulPowerLevelUp>();
    private List<FB_SoulPowerLevelUp> mListData = new List<FB_SoulPowerLevelUp>();
    public List<FB_SoulPowerLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SoulPowerLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SoulPowerLevelUp);
    }
    public Dictionary<int, FB_SoulPowerLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SoulPowerLevelUpContainer.FB_SoulPowerLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SoulPowerLevelUpContainer.GetRootAsFB_SoulPowerLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SpokesmanRewardProvider
{
    private static FB_SpokesmanRewardProvider _Instance;
    public static FB_SpokesmanRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SpokesmanRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SpokesmanReward.txt";
    protected FB_SpokesmanRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SpokesmanReward> mData = new Dictionary<int, FB_SpokesmanReward>();
    private List<FB_SpokesmanReward> mListData = new List<FB_SpokesmanReward>();
    public List<FB_SpokesmanReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SpokesmanReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SpokesmanReward);
    }
    public Dictionary<int, FB_SpokesmanReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SpokesmanRewardContainer.FB_SpokesmanRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SpokesmanRewardContainer.GetRootAsFB_SpokesmanRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarAttributeProvider
{
    private static FB_StarAttributeProvider _Instance;
    public static FB_StarAttributeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarAttributeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarAttribute.txt";
    protected FB_StarAttributeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarAttribute> mData = new Dictionary<int, FB_StarAttribute>();
    private List<FB_StarAttribute> mListData = new List<FB_StarAttribute>();
    public List<FB_StarAttribute> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarAttribute GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarAttribute);
    }
    public Dictionary<int, FB_StarAttribute> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarAttributeContainer.FB_StarAttributeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarAttributeContainer.GetRootAsFB_StarAttributeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarCraftFightProvider
{
    private static FB_StarCraftFightProvider _Instance;
    public static FB_StarCraftFightProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarCraftFightProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarCraftFight.txt";
    protected FB_StarCraftFightContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarCraftFight> mData = new Dictionary<int, FB_StarCraftFight>();
    private List<FB_StarCraftFight> mListData = new List<FB_StarCraftFight>();
    public List<FB_StarCraftFight> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarCraftFight GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarCraftFight);
    }
    public Dictionary<int, FB_StarCraftFight> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarCraftFightContainer.FB_StarCraftFightContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarCraftFightContainer.GetRootAsFB_StarCraftFightContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarCraftMapProvider
{
    private static FB_StarCraftMapProvider _Instance;
    public static FB_StarCraftMapProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarCraftMapProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarCraftMap.txt";
    protected FB_StarCraftMapContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarCraftMap> mData = new Dictionary<int, FB_StarCraftMap>();
    private List<FB_StarCraftMap> mListData = new List<FB_StarCraftMap>();
    public List<FB_StarCraftMap> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarCraftMap GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarCraftMap);
    }
    public Dictionary<int, FB_StarCraftMap> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarCraftMapContainer.FB_StarCraftMapContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarCraftMapContainer.GetRootAsFB_StarCraftMapContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarCraftSetProvider
{
    private static FB_StarCraftSetProvider _Instance;
    public static FB_StarCraftSetProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarCraftSetProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarCraftSet.txt";
    protected FB_StarCraftSetContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarCraftSet> mData = new Dictionary<int, FB_StarCraftSet>();
    private List<FB_StarCraftSet> mListData = new List<FB_StarCraftSet>();
    public List<FB_StarCraftSet> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarCraftSet GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarCraftSet);
    }
    public Dictionary<int, FB_StarCraftSet> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarCraftSetContainer.FB_StarCraftSetContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarCraftSetContainer.GetRootAsFB_StarCraftSetContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarCraftTicketProvider
{
    private static FB_StarCraftTicketProvider _Instance;
    public static FB_StarCraftTicketProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarCraftTicketProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarCraftTicket.txt";
    protected FB_StarCraftTicketContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarCraftTicket> mData = new Dictionary<int, FB_StarCraftTicket>();
    private List<FB_StarCraftTicket> mListData = new List<FB_StarCraftTicket>();
    public List<FB_StarCraftTicket> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarCraftTicket GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarCraftTicket);
    }
    public Dictionary<int, FB_StarCraftTicket> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarCraftTicketContainer.FB_StarCraftTicketContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarCraftTicketContainer.GetRootAsFB_StarCraftTicketContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarmapBaseProvider
{
    private static FB_StarmapBaseProvider _Instance;
    public static FB_StarmapBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarmapBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarmapBase.txt";
    protected FB_StarmapBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarmapBase> mData = new Dictionary<int, FB_StarmapBase>();
    private List<FB_StarmapBase> mListData = new List<FB_StarmapBase>();
    public List<FB_StarmapBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarmapBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarmapBase);
    }
    public Dictionary<int, FB_StarmapBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarmapBaseContainer.FB_StarmapBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarmapBaseContainer.GetRootAsFB_StarmapBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarmapRandomProvider
{
    private static FB_StarmapRandomProvider _Instance;
    public static FB_StarmapRandomProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarmapRandomProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarmapRandom.txt";
    protected FB_StarmapRandomContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarmapRandom> mData = new Dictionary<int, FB_StarmapRandom>();
    private List<FB_StarmapRandom> mListData = new List<FB_StarmapRandom>();
    public List<FB_StarmapRandom> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarmapRandom GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarmapRandom);
    }
    public Dictionary<int, FB_StarmapRandom> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarmapRandomContainer.FB_StarmapRandomContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarmapRandomContainer.GetRootAsFB_StarmapRandomContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarmapSectionProvider
{
    private static FB_StarmapSectionProvider _Instance;
    public static FB_StarmapSectionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarmapSectionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarmapSection.txt";
    protected FB_StarmapSectionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarmapSection> mData = new Dictionary<int, FB_StarmapSection>();
    private List<FB_StarmapSection> mListData = new List<FB_StarmapSection>();
    public List<FB_StarmapSection> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarmapSection GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarmapSection);
    }
    public Dictionary<int, FB_StarmapSection> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarmapSectionContainer.FB_StarmapSectionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarmapSectionContainer.GetRootAsFB_StarmapSectionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarSoulLevelProvider
{
    private static FB_StarSoulLevelProvider _Instance;
    public static FB_StarSoulLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarSoulLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarSoulLevel.txt";
    protected FB_StarSoulLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarSoulLevel> mData = new Dictionary<int, FB_StarSoulLevel>();
    private List<FB_StarSoulLevel> mListData = new List<FB_StarSoulLevel>();
    public List<FB_StarSoulLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarSoulLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarSoulLevel);
    }
    public Dictionary<int, FB_StarSoulLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarSoulLevelContainer.FB_StarSoulLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarSoulLevelContainer.GetRootAsFB_StarSoulLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarSoulSkillProvider
{
    private static FB_StarSoulSkillProvider _Instance;
    public static FB_StarSoulSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarSoulSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarSoulSkill.txt";
    protected FB_StarSoulSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarSoulSkill> mData = new Dictionary<int, FB_StarSoulSkill>();
    private List<FB_StarSoulSkill> mListData = new List<FB_StarSoulSkill>();
    public List<FB_StarSoulSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarSoulSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarSoulSkill);
    }
    public Dictionary<int, FB_StarSoulSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarSoulSkillContainer.FB_StarSoulSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarSoulSkillContainer.GetRootAsFB_StarSoulSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarSoulUnitBaseProvider
{
    private static FB_StarSoulUnitBaseProvider _Instance;
    public static FB_StarSoulUnitBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarSoulUnitBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarSoulUnitBase.txt";
    protected FB_StarSoulUnitBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarSoulUnitBase> mData = new Dictionary<int, FB_StarSoulUnitBase>();
    private List<FB_StarSoulUnitBase> mListData = new List<FB_StarSoulUnitBase>();
    public List<FB_StarSoulUnitBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarSoulUnitBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarSoulUnitBase);
    }
    public Dictionary<int, FB_StarSoulUnitBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarSoulUnitBaseContainer.FB_StarSoulUnitBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarSoulUnitBaseContainer.GetRootAsFB_StarSoulUnitBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarSoulUnitLevelProvider
{
    private static FB_StarSoulUnitLevelProvider _Instance;
    public static FB_StarSoulUnitLevelProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarSoulUnitLevelProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarSoulUnitLevel.txt";
    protected FB_StarSoulUnitLevelContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarSoulUnitLevel> mData = new Dictionary<int, FB_StarSoulUnitLevel>();
    private List<FB_StarSoulUnitLevel> mListData = new List<FB_StarSoulUnitLevel>();
    public List<FB_StarSoulUnitLevel> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarSoulUnitLevel GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarSoulUnitLevel);
    }
    public Dictionary<int, FB_StarSoulUnitLevel> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarSoulUnitLevelContainer.FB_StarSoulUnitLevelContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarSoulUnitLevelContainer.GetRootAsFB_StarSoulUnitLevelContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StarWishItemProvider
{
    private static FB_StarWishItemProvider _Instance;
    public static FB_StarWishItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StarWishItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StarWishItem.txt";
    protected FB_StarWishItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StarWishItem> mData = new Dictionary<int, FB_StarWishItem>();
    private List<FB_StarWishItem> mListData = new List<FB_StarWishItem>();
    public List<FB_StarWishItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StarWishItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StarWishItem);
    }
    public Dictionary<int, FB_StarWishItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StarWishItemContainer.FB_StarWishItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StarWishItemContainer.GetRootAsFB_StarWishItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrengthenBaseProvider
{
    private static FB_StrengthenBaseProvider _Instance;
    public static FB_StrengthenBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrengthenBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StrengthenBase.txt";
    protected FB_StrengthenBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrengthenBase> mData = new Dictionary<int, FB_StrengthenBase>();
    private List<FB_StrengthenBase> mListData = new List<FB_StrengthenBase>();
    public List<FB_StrengthenBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrengthenBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrengthenBase);
    }
    public Dictionary<int, FB_StrengthenBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrengthenBaseContainer.FB_StrengthenBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrengthenBaseContainer.GetRootAsFB_StrengthenBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_StrengthenSubClassProvider
{
    private static FB_StrengthenSubClassProvider _Instance;
    public static FB_StrengthenSubClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_StrengthenSubClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/StrengthenSubClass.txt";
    protected FB_StrengthenSubClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_StrengthenSubClass> mData = new Dictionary<int, FB_StrengthenSubClass>();
    private List<FB_StrengthenSubClass> mListData = new List<FB_StrengthenSubClass>();
    public List<FB_StrengthenSubClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_StrengthenSubClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_StrengthenSubClass);
    }
    public Dictionary<int, FB_StrengthenSubClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_StrengthenSubClassContainer.FB_StrengthenSubClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_StrengthenSubClassContainer.GetRootAsFB_StrengthenSubClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHBonusByStageProvider
{
    private static FB_SYHBonusByStageProvider _Instance;
    public static FB_SYHBonusByStageProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHBonusByStageProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHBonusByStage.txt";
    protected FB_SYHBonusByStageContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHBonusByStage> mData = new Dictionary<int, FB_SYHBonusByStage>();
    private List<FB_SYHBonusByStage> mListData = new List<FB_SYHBonusByStage>();
    public List<FB_SYHBonusByStage> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHBonusByStage GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHBonusByStage);
    }
    public Dictionary<int, FB_SYHBonusByStage> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHBonusByStageContainer.FB_SYHBonusByStageContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHBonusByStageContainer.GetRootAsFB_SYHBonusByStageContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHCangBaoHuiAwardProvider
{
    private static FB_SYHCangBaoHuiAwardProvider _Instance;
    public static FB_SYHCangBaoHuiAwardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHCangBaoHuiAwardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHCangBaoHuiAward.txt";
    protected FB_SYHCangBaoHuiAwardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHCangBaoHuiAward> mData = new Dictionary<int, FB_SYHCangBaoHuiAward>();
    private List<FB_SYHCangBaoHuiAward> mListData = new List<FB_SYHCangBaoHuiAward>();
    public List<FB_SYHCangBaoHuiAward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHCangBaoHuiAward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHCangBaoHuiAward);
    }
    public Dictionary<int, FB_SYHCangBaoHuiAward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHCangBaoHuiAwardContainer.FB_SYHCangBaoHuiAwardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHCangBaoHuiAwardContainer.GetRootAsFB_SYHCangBaoHuiAwardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHCangBaoMissionProvider
{
    private static FB_SYHCangBaoMissionProvider _Instance;
    public static FB_SYHCangBaoMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHCangBaoMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHCangBaoMission.txt";
    protected FB_SYHCangBaoMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHCangBaoMission> mData = new Dictionary<int, FB_SYHCangBaoMission>();
    private List<FB_SYHCangBaoMission> mListData = new List<FB_SYHCangBaoMission>();
    public List<FB_SYHCangBaoMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHCangBaoMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHCangBaoMission);
    }
    public Dictionary<int, FB_SYHCangBaoMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHCangBaoMissionContainer.FB_SYHCangBaoMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHCangBaoMissionContainer.GetRootAsFB_SYHCangBaoMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHFestivalActivityListProvider
{
    private static FB_SYHFestivalActivityListProvider _Instance;
    public static FB_SYHFestivalActivityListProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHFestivalActivityListProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHFestivalActivityList.txt";
    protected FB_SYHFestivalActivityListContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHFestivalActivityList> mData = new Dictionary<int, FB_SYHFestivalActivityList>();
    private List<FB_SYHFestivalActivityList> mListData = new List<FB_SYHFestivalActivityList>();
    public List<FB_SYHFestivalActivityList> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHFestivalActivityList GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHFestivalActivityList);
    }
    public Dictionary<int, FB_SYHFestivalActivityList> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHFestivalActivityListContainer.FB_SYHFestivalActivityListContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHFestivalActivityListContainer.GetRootAsFB_SYHFestivalActivityListContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHFestivalCarnivalMissionProvider
{
    private static FB_SYHFestivalCarnivalMissionProvider _Instance;
    public static FB_SYHFestivalCarnivalMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHFestivalCarnivalMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHFestivalCarnivalMission.txt";
    protected FB_SYHFestivalCarnivalMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHFestivalCarnivalMission> mData = new Dictionary<int, FB_SYHFestivalCarnivalMission>();
    private List<FB_SYHFestivalCarnivalMission> mListData = new List<FB_SYHFestivalCarnivalMission>();
    public List<FB_SYHFestivalCarnivalMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHFestivalCarnivalMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHFestivalCarnivalMission);
    }
    public Dictionary<int, FB_SYHFestivalCarnivalMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHFestivalCarnivalMissionContainer.FB_SYHFestivalCarnivalMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHFestivalCarnivalMissionContainer.GetRootAsFB_SYHFestivalCarnivalMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHFestivalCarnivalRewardProvider
{
    private static FB_SYHFestivalCarnivalRewardProvider _Instance;
    public static FB_SYHFestivalCarnivalRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHFestivalCarnivalRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHFestivalCarnivalReward.txt";
    protected FB_SYHFestivalCarnivalRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHFestivalCarnivalReward> mData = new Dictionary<int, FB_SYHFestivalCarnivalReward>();
    private List<FB_SYHFestivalCarnivalReward> mListData = new List<FB_SYHFestivalCarnivalReward>();
    public List<FB_SYHFestivalCarnivalReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHFestivalCarnivalReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHFestivalCarnivalReward);
    }
    public Dictionary<int, FB_SYHFestivalCarnivalReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHFestivalCarnivalRewardContainer.FB_SYHFestivalCarnivalRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHFestivalCarnivalRewardContainer.GetRootAsFB_SYHFestivalCarnivalRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHFestivalMonsterProvider
{
    private static FB_SYHFestivalMonsterProvider _Instance;
    public static FB_SYHFestivalMonsterProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHFestivalMonsterProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHFestivalMonster.txt";
    protected FB_SYHFestivalMonsterContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHFestivalMonster> mData = new Dictionary<int, FB_SYHFestivalMonster>();
    private List<FB_SYHFestivalMonster> mListData = new List<FB_SYHFestivalMonster>();
    public List<FB_SYHFestivalMonster> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHFestivalMonster GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHFestivalMonster);
    }
    public Dictionary<int, FB_SYHFestivalMonster> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHFestivalMonsterContainer.FB_SYHFestivalMonsterContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHFestivalMonsterContainer.GetRootAsFB_SYHFestivalMonsterContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJianBaoGeProvider
{
    private static FB_SYHJianBaoGeProvider _Instance;
    public static FB_SYHJianBaoGeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJianBaoGeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJianBaoGe.txt";
    protected FB_SYHJianBaoGeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJianBaoGe> mData = new Dictionary<int, FB_SYHJianBaoGe>();
    private List<FB_SYHJianBaoGe> mListData = new List<FB_SYHJianBaoGe>();
    public List<FB_SYHJianBaoGe> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJianBaoGe GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJianBaoGe);
    }
    public Dictionary<int, FB_SYHJianBaoGe> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJianBaoGeContainer.FB_SYHJianBaoGeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJianBaoGeContainer.GetRootAsFB_SYHJianBaoGeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJingXiXianGouBaseProvider
{
    private static FB_SYHJingXiXianGouBaseProvider _Instance;
    public static FB_SYHJingXiXianGouBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJingXiXianGouBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJingXiXianGouBase.txt";
    protected FB_SYHJingXiXianGouBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJingXiXianGouBase> mData = new Dictionary<int, FB_SYHJingXiXianGouBase>();
    private List<FB_SYHJingXiXianGouBase> mListData = new List<FB_SYHJingXiXianGouBase>();
    public List<FB_SYHJingXiXianGouBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJingXiXianGouBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJingXiXianGouBase);
    }
    public Dictionary<int, FB_SYHJingXiXianGouBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJingXiXianGouBaseContainer.FB_SYHJingXiXianGouBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJingXiXianGouBaseContainer.GetRootAsFB_SYHJingXiXianGouBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoFuDaiBaseProvider
{
    private static FB_SYHJuBaoFuDaiBaseProvider _Instance;
    public static FB_SYHJuBaoFuDaiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoFuDaiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoFuDaiBase.txt";
    protected FB_SYHJuBaoFuDaiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoFuDaiBase> mData = new Dictionary<int, FB_SYHJuBaoFuDaiBase>();
    private List<FB_SYHJuBaoFuDaiBase> mListData = new List<FB_SYHJuBaoFuDaiBase>();
    public List<FB_SYHJuBaoFuDaiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoFuDaiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoFuDaiBase);
    }
    public Dictionary<int, FB_SYHJuBaoFuDaiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoFuDaiBaseContainer.FB_SYHJuBaoFuDaiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoFuDaiBaseContainer.GetRootAsFB_SYHJuBaoFuDaiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoFuDaiItemProvider
{
    private static FB_SYHJuBaoFuDaiItemProvider _Instance;
    public static FB_SYHJuBaoFuDaiItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoFuDaiItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoFuDaiItem.txt";
    protected FB_SYHJuBaoFuDaiItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoFuDaiItem> mData = new Dictionary<int, FB_SYHJuBaoFuDaiItem>();
    private List<FB_SYHJuBaoFuDaiItem> mListData = new List<FB_SYHJuBaoFuDaiItem>();
    public List<FB_SYHJuBaoFuDaiItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoFuDaiItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoFuDaiItem);
    }
    public Dictionary<int, FB_SYHJuBaoFuDaiItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoFuDaiItemContainer.FB_SYHJuBaoFuDaiItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoFuDaiItemContainer.GetRootAsFB_SYHJuBaoFuDaiItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoFuDaiRewardProvider
{
    private static FB_SYHJuBaoFuDaiRewardProvider _Instance;
    public static FB_SYHJuBaoFuDaiRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoFuDaiRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoFuDaiReward.txt";
    protected FB_SYHJuBaoFuDaiRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoFuDaiReward> mData = new Dictionary<int, FB_SYHJuBaoFuDaiReward>();
    private List<FB_SYHJuBaoFuDaiReward> mListData = new List<FB_SYHJuBaoFuDaiReward>();
    public List<FB_SYHJuBaoFuDaiReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoFuDaiReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoFuDaiReward);
    }
    public Dictionary<int, FB_SYHJuBaoFuDaiReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoFuDaiRewardContainer.FB_SYHJuBaoFuDaiRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoFuDaiRewardContainer.GetRootAsFB_SYHJuBaoFuDaiRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoPenProvider
{
    private static FB_SYHJuBaoPenProvider _Instance;
    public static FB_SYHJuBaoPenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoPenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoPen.txt";
    protected FB_SYHJuBaoPenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoPen> mData = new Dictionary<int, FB_SYHJuBaoPen>();
    private List<FB_SYHJuBaoPen> mListData = new List<FB_SYHJuBaoPen>();
    public List<FB_SYHJuBaoPen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoPen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoPen);
    }
    public Dictionary<int, FB_SYHJuBaoPen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoPenContainer.FB_SYHJuBaoPenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoPenContainer.GetRootAsFB_SYHJuBaoPenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoPenPrizeProvider
{
    private static FB_SYHJuBaoPenPrizeProvider _Instance;
    public static FB_SYHJuBaoPenPrizeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoPenPrizeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoPenPrize.txt";
    protected FB_SYHJuBaoPenPrizeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoPenPrize> mData = new Dictionary<int, FB_SYHJuBaoPenPrize>();
    private List<FB_SYHJuBaoPenPrize> mListData = new List<FB_SYHJuBaoPenPrize>();
    public List<FB_SYHJuBaoPenPrize> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoPenPrize GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoPenPrize);
    }
    public Dictionary<int, FB_SYHJuBaoPenPrize> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoPenPrizeContainer.FB_SYHJuBaoPenPrizeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoPenPrizeContainer.GetRootAsFB_SYHJuBaoPenPrizeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoPenRankingProvider
{
    private static FB_SYHJuBaoPenRankingProvider _Instance;
    public static FB_SYHJuBaoPenRankingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoPenRankingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoPenRanking.txt";
    protected FB_SYHJuBaoPenRankingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoPenRanking> mData = new Dictionary<int, FB_SYHJuBaoPenRanking>();
    private List<FB_SYHJuBaoPenRanking> mListData = new List<FB_SYHJuBaoPenRanking>();
    public List<FB_SYHJuBaoPenRanking> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoPenRanking GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoPenRanking);
    }
    public Dictionary<int, FB_SYHJuBaoPenRanking> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoPenRankingContainer.FB_SYHJuBaoPenRankingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoPenRankingContainer.GetRootAsFB_SYHJuBaoPenRankingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHJuBaoPenRewardProvider
{
    private static FB_SYHJuBaoPenRewardProvider _Instance;
    public static FB_SYHJuBaoPenRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHJuBaoPenRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHJuBaoPenReward.txt";
    protected FB_SYHJuBaoPenRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHJuBaoPenReward> mData = new Dictionary<int, FB_SYHJuBaoPenReward>();
    private List<FB_SYHJuBaoPenReward> mListData = new List<FB_SYHJuBaoPenReward>();
    public List<FB_SYHJuBaoPenReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHJuBaoPenReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHJuBaoPenReward);
    }
    public Dictionary<int, FB_SYHJuBaoPenReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHJuBaoPenRewardContainer.FB_SYHJuBaoPenRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHJuBaoPenRewardContainer.GetRootAsFB_SYHJuBaoPenRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHNiuDanJiProvider
{
    private static FB_SYHNiuDanJiProvider _Instance;
    public static FB_SYHNiuDanJiProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHNiuDanJiProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHNiuDanJi.txt";
    protected FB_SYHNiuDanJiContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHNiuDanJi> mData = new Dictionary<int, FB_SYHNiuDanJi>();
    private List<FB_SYHNiuDanJi> mListData = new List<FB_SYHNiuDanJi>();
    public List<FB_SYHNiuDanJi> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHNiuDanJi GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHNiuDanJi);
    }
    public Dictionary<int, FB_SYHNiuDanJi> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHNiuDanJiContainer.FB_SYHNiuDanJiContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHNiuDanJiContainer.GetRootAsFB_SYHNiuDanJiContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHQiYuanBaoGeProvider
{
    private static FB_SYHQiYuanBaoGeProvider _Instance;
    public static FB_SYHQiYuanBaoGeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHQiYuanBaoGeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHQiYuanBaoGe.txt";
    protected FB_SYHQiYuanBaoGeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHQiYuanBaoGe> mData = new Dictionary<int, FB_SYHQiYuanBaoGe>();
    private List<FB_SYHQiYuanBaoGe> mListData = new List<FB_SYHQiYuanBaoGe>();
    public List<FB_SYHQiYuanBaoGe> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHQiYuanBaoGe GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHQiYuanBaoGe);
    }
    public Dictionary<int, FB_SYHQiYuanBaoGe> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHQiYuanBaoGeContainer.FB_SYHQiYuanBaoGeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHQiYuanBaoGeContainer.GetRootAsFB_SYHQiYuanBaoGeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHRechargeAndConsumeRewardProvider
{
    private static FB_SYHRechargeAndConsumeRewardProvider _Instance;
    public static FB_SYHRechargeAndConsumeRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHRechargeAndConsumeRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHRechargeAndConsumeReward.txt";
    protected FB_SYHRechargeAndConsumeRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHRechargeAndConsumeReward> mData = new Dictionary<int, FB_SYHRechargeAndConsumeReward>();
    private List<FB_SYHRechargeAndConsumeReward> mListData = new List<FB_SYHRechargeAndConsumeReward>();
    public List<FB_SYHRechargeAndConsumeReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHRechargeAndConsumeReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHRechargeAndConsumeReward);
    }
    public Dictionary<int, FB_SYHRechargeAndConsumeReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHRechargeAndConsumeRewardContainer.FB_SYHRechargeAndConsumeRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHRechargeAndConsumeRewardContainer.GetRootAsFB_SYHRechargeAndConsumeRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHTianXingBaoGeProvider
{
    private static FB_SYHTianXingBaoGeProvider _Instance;
    public static FB_SYHTianXingBaoGeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHTianXingBaoGeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHTianXingBaoGe.txt";
    protected FB_SYHTianXingBaoGeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHTianXingBaoGe> mData = new Dictionary<int, FB_SYHTianXingBaoGe>();
    private List<FB_SYHTianXingBaoGe> mListData = new List<FB_SYHTianXingBaoGe>();
    public List<FB_SYHTianXingBaoGe> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHTianXingBaoGe GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHTianXingBaoGe);
    }
    public Dictionary<int, FB_SYHTianXingBaoGe> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHTianXingBaoGeContainer.FB_SYHTianXingBaoGeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHTianXingBaoGeContainer.GetRootAsFB_SYHTianXingBaoGeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianShiBoxProvider
{
    private static FB_SYHXianShiBoxProvider _Instance;
    public static FB_SYHXianShiBoxProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianShiBoxProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianShiBox.txt";
    protected FB_SYHXianShiBoxContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianShiBox> mData = new Dictionary<int, FB_SYHXianShiBox>();
    private List<FB_SYHXianShiBox> mListData = new List<FB_SYHXianShiBox>();
    public List<FB_SYHXianShiBox> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianShiBox GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianShiBox);
    }
    public Dictionary<int, FB_SYHXianShiBox> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianShiBoxContainer.FB_SYHXianShiBoxContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianShiBoxContainer.GetRootAsFB_SYHXianShiBoxContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianShiQiangGouProvider
{
    private static FB_SYHXianShiQiangGouProvider _Instance;
    public static FB_SYHXianShiQiangGouProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianShiQiangGouProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianShiQiangGou.txt";
    protected FB_SYHXianShiQiangGouContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianShiQiangGou> mData = new Dictionary<int, FB_SYHXianShiQiangGou>();
    private List<FB_SYHXianShiQiangGou> mListData = new List<FB_SYHXianShiQiangGou>();
    public List<FB_SYHXianShiQiangGou> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianShiQiangGou GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianShiQiangGou);
    }
    public Dictionary<int, FB_SYHXianShiQiangGou> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianShiQiangGouContainer.FB_SYHXianShiQiangGouContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianShiQiangGouContainer.GetRootAsFB_SYHXianShiQiangGouContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianYuMissionProvider
{
    private static FB_SYHXianYuMissionProvider _Instance;
    public static FB_SYHXianYuMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianYuMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianYuMission.txt";
    protected FB_SYHXianYuMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianYuMission> mData = new Dictionary<int, FB_SYHXianYuMission>();
    private List<FB_SYHXianYuMission> mListData = new List<FB_SYHXianYuMission>();
    public List<FB_SYHXianYuMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianYuMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianYuMission);
    }
    public Dictionary<int, FB_SYHXianYuMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianYuMissionContainer.FB_SYHXianYuMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianYuMissionContainer.GetRootAsFB_SYHXianYuMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianYuQmlhProvider
{
    private static FB_SYHXianYuQmlhProvider _Instance;
    public static FB_SYHXianYuQmlhProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianYuQmlhProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianYuQmlh.txt";
    protected FB_SYHXianYuQmlhContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianYuQmlh> mData = new Dictionary<int, FB_SYHXianYuQmlh>();
    private List<FB_SYHXianYuQmlh> mListData = new List<FB_SYHXianYuQmlh>();
    public List<FB_SYHXianYuQmlh> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianYuQmlh GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianYuQmlh);
    }
    public Dictionary<int, FB_SYHXianYuQmlh> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianYuQmlhContainer.FB_SYHXianYuQmlhContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianYuQmlhContainer.GetRootAsFB_SYHXianYuQmlhContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianYuShengHuiAwardProvider
{
    private static FB_SYHXianYuShengHuiAwardProvider _Instance;
    public static FB_SYHXianYuShengHuiAwardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianYuShengHuiAwardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianYuShengHuiAward.txt";
    protected FB_SYHXianYuShengHuiAwardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianYuShengHuiAward> mData = new Dictionary<int, FB_SYHXianYuShengHuiAward>();
    private List<FB_SYHXianYuShengHuiAward> mListData = new List<FB_SYHXianYuShengHuiAward>();
    public List<FB_SYHXianYuShengHuiAward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianYuShengHuiAward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianYuShengHuiAward);
    }
    public Dictionary<int, FB_SYHXianYuShengHuiAward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianYuShengHuiAwardContainer.FB_SYHXianYuShengHuiAwardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianYuShengHuiAwardContainer.GetRootAsFB_SYHXianYuShengHuiAwardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHXianYuShengHuiBaseProvider
{
    private static FB_SYHXianYuShengHuiBaseProvider _Instance;
    public static FB_SYHXianYuShengHuiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHXianYuShengHuiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHXianYuShengHuiBase.txt";
    protected FB_SYHXianYuShengHuiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHXianYuShengHuiBase> mData = new Dictionary<int, FB_SYHXianYuShengHuiBase>();
    private List<FB_SYHXianYuShengHuiBase> mListData = new List<FB_SYHXianYuShengHuiBase>();
    public List<FB_SYHXianYuShengHuiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHXianYuShengHuiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHXianYuShengHuiBase);
    }
    public Dictionary<int, FB_SYHXianYuShengHuiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHXianYuShengHuiBaseContainer.FB_SYHXianYuShengHuiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHXianYuShengHuiBaseContainer.GetRootAsFB_SYHXianYuShengHuiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHYuanBaoInvestProvider
{
    private static FB_SYHYuanBaoInvestProvider _Instance;
    public static FB_SYHYuanBaoInvestProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHYuanBaoInvestProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHYuanBaoInvest.txt";
    protected FB_SYHYuanBaoInvestContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHYuanBaoInvest> mData = new Dictionary<int, FB_SYHYuanBaoInvest>();
    private List<FB_SYHYuanBaoInvest> mListData = new List<FB_SYHYuanBaoInvest>();
    public List<FB_SYHYuanBaoInvest> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHYuanBaoInvest GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHYuanBaoInvest);
    }
    public Dictionary<int, FB_SYHYuanBaoInvest> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHYuanBaoInvestContainer.FB_SYHYuanBaoInvestContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHYuanBaoInvestContainer.GetRootAsFB_SYHYuanBaoInvestContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHYuanBaoInvestTypeProvider
{
    private static FB_SYHYuanBaoInvestTypeProvider _Instance;
    public static FB_SYHYuanBaoInvestTypeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHYuanBaoInvestTypeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHYuanBaoInvestType.txt";
    protected FB_SYHYuanBaoInvestTypeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHYuanBaoInvestType> mData = new Dictionary<int, FB_SYHYuanBaoInvestType>();
    private List<FB_SYHYuanBaoInvestType> mListData = new List<FB_SYHYuanBaoInvestType>();
    public List<FB_SYHYuanBaoInvestType> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHYuanBaoInvestType GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHYuanBaoInvestType);
    }
    public Dictionary<int, FB_SYHYuanBaoInvestType> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHYuanBaoInvestTypeContainer.FB_SYHYuanBaoInvestTypeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHYuanBaoInvestTypeContainer.GetRootAsFB_SYHYuanBaoInvestTypeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHZaDanPingGuoProvider
{
    private static FB_SYHZaDanPingGuoProvider _Instance;
    public static FB_SYHZaDanPingGuoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHZaDanPingGuoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHZaDanPingGuo.txt";
    protected FB_SYHZaDanPingGuoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHZaDanPingGuo> mData = new Dictionary<int, FB_SYHZaDanPingGuo>();
    private List<FB_SYHZaDanPingGuo> mListData = new List<FB_SYHZaDanPingGuo>();
    public List<FB_SYHZaDanPingGuo> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHZaDanPingGuo GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHZaDanPingGuo);
    }
    public Dictionary<int, FB_SYHZaDanPingGuo> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHZaDanPingGuoContainer.FB_SYHZaDanPingGuoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHZaDanPingGuoContainer.GetRootAsFB_SYHZaDanPingGuoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_SYHZaDanPingGuoNumRewardProvider
{
    private static FB_SYHZaDanPingGuoNumRewardProvider _Instance;
    public static FB_SYHZaDanPingGuoNumRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_SYHZaDanPingGuoNumRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/SYHZaDanPingGuoNumReward.txt";
    protected FB_SYHZaDanPingGuoNumRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_SYHZaDanPingGuoNumReward> mData = new Dictionary<int, FB_SYHZaDanPingGuoNumReward>();
    private List<FB_SYHZaDanPingGuoNumReward> mListData = new List<FB_SYHZaDanPingGuoNumReward>();
    public List<FB_SYHZaDanPingGuoNumReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_SYHZaDanPingGuoNumReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_SYHZaDanPingGuoNumReward);
    }
    public Dictionary<int, FB_SYHZaDanPingGuoNumReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_SYHZaDanPingGuoNumRewardContainer.FB_SYHZaDanPingGuoNumRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_SYHZaDanPingGuoNumRewardContainer.GetRootAsFB_SYHZaDanPingGuoNumRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TaiGuRelicBaseProvider
{
    private static FB_TaiGuRelicBaseProvider _Instance;
    public static FB_TaiGuRelicBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TaiGuRelicBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TaiGuRelicBase.txt";
    protected FB_TaiGuRelicBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TaiGuRelicBase> mData = new Dictionary<int, FB_TaiGuRelicBase>();
    private List<FB_TaiGuRelicBase> mListData = new List<FB_TaiGuRelicBase>();
    public List<FB_TaiGuRelicBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TaiGuRelicBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TaiGuRelicBase);
    }
    public Dictionary<int, FB_TaiGuRelicBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TaiGuRelicBaseContainer.FB_TaiGuRelicBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TaiGuRelicBaseContainer.GetRootAsFB_TaiGuRelicBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TaiGuRelicShopItemProvider
{
    private static FB_TaiGuRelicShopItemProvider _Instance;
    public static FB_TaiGuRelicShopItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TaiGuRelicShopItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TaiGuRelicShopItem.txt";
    protected FB_TaiGuRelicShopItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TaiGuRelicShopItem> mData = new Dictionary<int, FB_TaiGuRelicShopItem>();
    private List<FB_TaiGuRelicShopItem> mListData = new List<FB_TaiGuRelicShopItem>();
    public List<FB_TaiGuRelicShopItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TaiGuRelicShopItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TaiGuRelicShopItem);
    }
    public Dictionary<int, FB_TaiGuRelicShopItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TaiGuRelicShopItemContainer.FB_TaiGuRelicShopItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TaiGuRelicShopItemContainer.GetRootAsFB_TaiGuRelicShopItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TaoZhuangAttrProvider
{
    private static FB_TaoZhuangAttrProvider _Instance;
    public static FB_TaoZhuangAttrProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TaoZhuangAttrProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TaoZhuangAttr.txt";
    protected FB_TaoZhuangAttrContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TaoZhuangAttr> mData = new Dictionary<int, FB_TaoZhuangAttr>();
    private List<FB_TaoZhuangAttr> mListData = new List<FB_TaoZhuangAttr>();
    public List<FB_TaoZhuangAttr> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TaoZhuangAttr GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TaoZhuangAttr);
    }
    public Dictionary<int, FB_TaoZhuangAttr> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TaoZhuangAttrContainer.FB_TaoZhuangAttrContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TaoZhuangAttrContainer.GetRootAsFB_TaoZhuangAttrContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TaoZhuangBaseProvider
{
    private static FB_TaoZhuangBaseProvider _Instance;
    public static FB_TaoZhuangBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TaoZhuangBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TaoZhuangBase.txt";
    protected FB_TaoZhuangBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TaoZhuangBase> mData = new Dictionary<int, FB_TaoZhuangBase>();
    private List<FB_TaoZhuangBase> mListData = new List<FB_TaoZhuangBase>();
    public List<FB_TaoZhuangBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TaoZhuangBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TaoZhuangBase);
    }
    public Dictionary<int, FB_TaoZhuangBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TaoZhuangBaseContainer.FB_TaoZhuangBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TaoZhuangBaseContainer.GetRootAsFB_TaoZhuangBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TeamPlatformProvider
{
    private static FB_TeamPlatformProvider _Instance;
    public static FB_TeamPlatformProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TeamPlatformProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TeamPlatform.txt";
    protected FB_TeamPlatformContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TeamPlatform> mData = new Dictionary<int, FB_TeamPlatform>();
    private List<FB_TeamPlatform> mListData = new List<FB_TeamPlatform>();
    public List<FB_TeamPlatform> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TeamPlatform GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TeamPlatform);
    }
    public Dictionary<int, FB_TeamPlatform> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TeamPlatformContainer.FB_TeamPlatformContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TeamPlatformContainer.GetRootAsFB_TeamPlatformContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TeamShipProvider
{
    private static FB_TeamShipProvider _Instance;
    public static FB_TeamShipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TeamShipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TeamShip.txt";
    protected FB_TeamShipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TeamShip> mData = new Dictionary<int, FB_TeamShip>();
    private List<FB_TeamShip> mListData = new List<FB_TeamShip>();
    public List<FB_TeamShip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TeamShip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TeamShip);
    }
    public Dictionary<int, FB_TeamShip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TeamShipContainer.FB_TeamShipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TeamShipContainer.GetRootAsFB_TeamShipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_teQuanEnumProvider
{
    private static FB_teQuanEnumProvider _Instance;
    public static FB_teQuanEnumProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_teQuanEnumProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/teQuanEnum.txt";
    protected FB_teQuanEnumContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_teQuanEnum> mData = new Dictionary<int, FB_teQuanEnum>();
    private List<FB_teQuanEnum> mListData = new List<FB_teQuanEnum>();
    public List<FB_teQuanEnum> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_teQuanEnum GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_teQuanEnum);
    }
    public Dictionary<int, FB_teQuanEnum> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_teQuanEnumContainer.FB_teQuanEnumContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_teQuanEnumContainer.GetRootAsFB_teQuanEnumContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_teQuanGainProvider
{
    private static FB_teQuanGainProvider _Instance;
    public static FB_teQuanGainProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_teQuanGainProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/teQuanGain.txt";
    protected FB_teQuanGainContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_teQuanGain> mData = new Dictionary<int, FB_teQuanGain>();
    private List<FB_teQuanGain> mListData = new List<FB_teQuanGain>();
    public List<FB_teQuanGain> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_teQuanGain GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_teQuanGain);
    }
    public Dictionary<int, FB_teQuanGain> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_teQuanGainContainer.FB_teQuanGainContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_teQuanGainContainer.GetRootAsFB_teQuanGainContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TheInheritProvider
{
    private static FB_TheInheritProvider _Instance;
    public static FB_TheInheritProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TheInheritProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TheInherit.txt";
    protected FB_TheInheritContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TheInherit> mData = new Dictionary<int, FB_TheInherit>();
    private List<FB_TheInherit> mListData = new List<FB_TheInherit>();
    public List<FB_TheInherit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TheInherit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TheInherit);
    }
    public Dictionary<int, FB_TheInherit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TheInheritContainer.FB_TheInheritContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TheInheritContainer.GetRootAsFB_TheInheritContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianCiHongFuBaseProvider
{
    private static FB_TianCiHongFuBaseProvider _Instance;
    public static FB_TianCiHongFuBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianCiHongFuBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianCiHongFuBase.txt";
    protected FB_TianCiHongFuBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianCiHongFuBase> mData = new Dictionary<int, FB_TianCiHongFuBase>();
    private List<FB_TianCiHongFuBase> mListData = new List<FB_TianCiHongFuBase>();
    public List<FB_TianCiHongFuBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianCiHongFuBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianCiHongFuBase);
    }
    public Dictionary<int, FB_TianCiHongFuBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianCiHongFuBaseContainer.FB_TianCiHongFuBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianCiHongFuBaseContainer.GetRootAsFB_TianCiHongFuBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianCiHongFuRewardProvider
{
    private static FB_TianCiHongFuRewardProvider _Instance;
    public static FB_TianCiHongFuRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianCiHongFuRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianCiHongFuReward.txt";
    protected FB_TianCiHongFuRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianCiHongFuReward> mData = new Dictionary<int, FB_TianCiHongFuReward>();
    private List<FB_TianCiHongFuReward> mListData = new List<FB_TianCiHongFuReward>();
    public List<FB_TianCiHongFuReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianCiHongFuReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianCiHongFuReward);
    }
    public Dictionary<int, FB_TianCiHongFuReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianCiHongFuRewardContainer.FB_TianCiHongFuRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianCiHongFuRewardContainer.GetRootAsFB_TianCiHongFuRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianDaoShengYuanProvider
{
    private static FB_TianDaoShengYuanProvider _Instance;
    public static FB_TianDaoShengYuanProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianDaoShengYuanProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianDaoShengYuan.txt";
    protected FB_TianDaoShengYuanContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianDaoShengYuan> mData = new Dictionary<int, FB_TianDaoShengYuan>();
    private List<FB_TianDaoShengYuan> mListData = new List<FB_TianDaoShengYuan>();
    public List<FB_TianDaoShengYuan> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianDaoShengYuan GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianDaoShengYuan);
    }
    public Dictionary<int, FB_TianDaoShengYuan> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianDaoShengYuanContainer.FB_TianDaoShengYuanContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianDaoShengYuanContainer.GetRootAsFB_TianDaoShengYuanContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianDaoShengYuanRewardProvider
{
    private static FB_TianDaoShengYuanRewardProvider _Instance;
    public static FB_TianDaoShengYuanRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianDaoShengYuanRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianDaoShengYuanReward.txt";
    protected FB_TianDaoShengYuanRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianDaoShengYuanReward> mData = new Dictionary<int, FB_TianDaoShengYuanReward>();
    private List<FB_TianDaoShengYuanReward> mListData = new List<FB_TianDaoShengYuanReward>();
    public List<FB_TianDaoShengYuanReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianDaoShengYuanReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianDaoShengYuanReward);
    }
    public Dictionary<int, FB_TianDaoShengYuanReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianDaoShengYuanRewardContainer.FB_TianDaoShengYuanRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianDaoShengYuanRewardContainer.GetRootAsFB_TianDaoShengYuanRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianFuBaseProvider
{
    private static FB_TianFuBaseProvider _Instance;
    public static FB_TianFuBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianFuBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianFuBase.txt";
    protected FB_TianFuBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianFuBase> mData = new Dictionary<int, FB_TianFuBase>();
    private List<FB_TianFuBase> mListData = new List<FB_TianFuBase>();
    public List<FB_TianFuBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianFuBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianFuBase);
    }
    public Dictionary<int, FB_TianFuBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianFuBaseContainer.FB_TianFuBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianFuBaseContainer.GetRootAsFB_TianFuBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TianJiBaoGeProvider
{
    private static FB_TianJiBaoGeProvider _Instance;
    public static FB_TianJiBaoGeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TianJiBaoGeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TianJiBaoGe.txt";
    protected FB_TianJiBaoGeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TianJiBaoGe> mData = new Dictionary<int, FB_TianJiBaoGe>();
    private List<FB_TianJiBaoGe> mListData = new List<FB_TianJiBaoGe>();
    public List<FB_TianJiBaoGe> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TianJiBaoGe GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TianJiBaoGe);
    }
    public Dictionary<int, FB_TianJiBaoGe> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TianJiBaoGeContainer.FB_TianJiBaoGeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TianJiBaoGeContainer.GetRootAsFB_TianJiBaoGeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TiKuanJiAwardProvider
{
    private static FB_TiKuanJiAwardProvider _Instance;
    public static FB_TiKuanJiAwardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TiKuanJiAwardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TiKuanJiAward.txt";
    protected FB_TiKuanJiAwardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TiKuanJiAward> mData = new Dictionary<int, FB_TiKuanJiAward>();
    private List<FB_TiKuanJiAward> mListData = new List<FB_TiKuanJiAward>();
    public List<FB_TiKuanJiAward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TiKuanJiAward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TiKuanJiAward);
    }
    public Dictionary<int, FB_TiKuanJiAward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TiKuanJiAwardContainer.FB_TiKuanJiAwardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TiKuanJiAwardContainer.GetRootAsFB_TiKuanJiAwardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TimeLimitBagProvider
{
    private static FB_TimeLimitBagProvider _Instance;
    public static FB_TimeLimitBagProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TimeLimitBagProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TimeLimitBag.txt";
    protected FB_TimeLimitBagContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TimeLimitBag> mData = new Dictionary<int, FB_TimeLimitBag>();
    private List<FB_TimeLimitBag> mListData = new List<FB_TimeLimitBag>();
    public List<FB_TimeLimitBag> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TimeLimitBag GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TimeLimitBag);
    }
    public Dictionary<int, FB_TimeLimitBag> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TimeLimitBagContainer.FB_TimeLimitBagContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TimeLimitBagContainer.GetRootAsFB_TimeLimitBagContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TimingBoxProvider
{
    private static FB_TimingBoxProvider _Instance;
    public static FB_TimingBoxProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TimingBoxProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TimingBox.txt";
    protected FB_TimingBoxContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TimingBox> mData = new Dictionary<int, FB_TimingBox>();
    private List<FB_TimingBox> mListData = new List<FB_TimingBox>();
    public List<FB_TimingBox> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TimingBox GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TimingBox);
    }
    public Dictionary<int, FB_TimingBox> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TimingBoxContainer.FB_TimingBoxContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TimingBoxContainer.GetRootAsFB_TimingBoxContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TitleBaseProvider
{
    private static FB_TitleBaseProvider _Instance;
    public static FB_TitleBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TitleBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TitleBase.txt";
    protected FB_TitleBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TitleBase> mData = new Dictionary<int, FB_TitleBase>();
    private List<FB_TitleBase> mListData = new List<FB_TitleBase>();
    public List<FB_TitleBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TitleBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TitleBase);
    }
    public Dictionary<int, FB_TitleBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TitleBaseContainer.FB_TitleBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TitleBaseContainer.GetRootAsFB_TitleBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TitleClassProvider
{
    private static FB_TitleClassProvider _Instance;
    public static FB_TitleClassProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TitleClassProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TitleClass.txt";
    protected FB_TitleClassContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TitleClass> mData = new Dictionary<int, FB_TitleClass>();
    private List<FB_TitleClass> mListData = new List<FB_TitleClass>();
    public List<FB_TitleClass> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TitleClass GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TitleClass);
    }
    public Dictionary<int, FB_TitleClass> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TitleClassContainer.FB_TitleClassContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TitleClassContainer.GetRootAsFB_TitleClassContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TreasureProvider
{
    private static FB_TreasureProvider _Instance;
    public static FB_TreasureProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TreasureProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/Treasure.txt";
    protected FB_TreasureContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Treasure> mData = new Dictionary<int, FB_Treasure>();
    private List<FB_Treasure> mListData = new List<FB_Treasure>();
    public List<FB_Treasure> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Treasure GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Treasure);
    }
    public Dictionary<int, FB_Treasure> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TreasureContainer.FB_TreasureContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TreasureContainer.GetRootAsFB_TreasureContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TreasureHuntMissionsProvider
{
    private static FB_TreasureHuntMissionsProvider _Instance;
    public static FB_TreasureHuntMissionsProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TreasureHuntMissionsProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TreasureHuntMissions.txt";
    protected FB_TreasureHuntMissionsContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TreasureHuntMissions> mData = new Dictionary<int, FB_TreasureHuntMissions>();
    private List<FB_TreasureHuntMissions> mListData = new List<FB_TreasureHuntMissions>();
    public List<FB_TreasureHuntMissions> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TreasureHuntMissions GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TreasureHuntMissions);
    }
    public Dictionary<int, FB_TreasureHuntMissions> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TreasureHuntMissionsContainer.FB_TreasureHuntMissionsContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TreasureHuntMissionsContainer.GetRootAsFB_TreasureHuntMissionsContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TreasureHuntShopItemProvider
{
    private static FB_TreasureHuntShopItemProvider _Instance;
    public static FB_TreasureHuntShopItemProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TreasureHuntShopItemProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TreasureHuntShopItem.txt";
    protected FB_TreasureHuntShopItemContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TreasureHuntShopItem> mData = new Dictionary<int, FB_TreasureHuntShopItem>();
    private List<FB_TreasureHuntShopItem> mListData = new List<FB_TreasureHuntShopItem>();
    public List<FB_TreasureHuntShopItem> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TreasureHuntShopItem GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TreasureHuntShopItem);
    }
    public Dictionary<int, FB_TreasureHuntShopItem> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TreasureHuntShopItemContainer.FB_TreasureHuntShopItemContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TreasureHuntShopItemContainer.GetRootAsFB_TreasureHuntShopItemContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_TreasureShowProvider
{
    private static FB_TreasureShowProvider _Instance;
    public static FB_TreasureShowProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_TreasureShowProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/TreasureShow.txt";
    protected FB_TreasureShowContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_TreasureShow> mData = new Dictionary<int, FB_TreasureShow>();
    private List<FB_TreasureShow> mListData = new List<FB_TreasureShow>();
    public List<FB_TreasureShow> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_TreasureShow GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_TreasureShow);
    }
    public Dictionary<int, FB_TreasureShow> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_TreasureShowContainer.FB_TreasureShowContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_TreasureShowContainer.GetRootAsFB_TreasureShowContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VehicleProvider
{
    private static FB_VehicleProvider _Instance;
    public static FB_VehicleProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VehicleProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/Vehicle.txt";
    protected FB_VehicleContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_Vehicle> mData = new Dictionary<int, FB_Vehicle>();
    private List<FB_Vehicle> mListData = new List<FB_Vehicle>();
    public List<FB_Vehicle> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_Vehicle GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_Vehicle);
    }
    public Dictionary<int, FB_Vehicle> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VehicleContainer.FB_VehicleContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VehicleContainer.GetRootAsFB_VehicleContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VipDayGiftProvider
{
    private static FB_VipDayGiftProvider _Instance;
    public static FB_VipDayGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VipDayGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VipDayGift.txt";
    protected FB_VipDayGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VipDayGift> mData = new Dictionary<int, FB_VipDayGift>();
    private List<FB_VipDayGift> mListData = new List<FB_VipDayGift>();
    public List<FB_VipDayGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VipDayGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VipDayGift);
    }
    public Dictionary<int, FB_VipDayGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VipDayGiftContainer.FB_VipDayGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VipDayGiftContainer.GetRootAsFB_VipDayGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VipEnjoyGiftProvider
{
    private static FB_VipEnjoyGiftProvider _Instance;
    public static FB_VipEnjoyGiftProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VipEnjoyGiftProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VipEnjoyGift.txt";
    protected FB_VipEnjoyGiftContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VipEnjoyGift> mData = new Dictionary<int, FB_VipEnjoyGift>();
    private List<FB_VipEnjoyGift> mListData = new List<FB_VipEnjoyGift>();
    public List<FB_VipEnjoyGift> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VipEnjoyGift GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VipEnjoyGift);
    }
    public Dictionary<int, FB_VipEnjoyGift> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VipEnjoyGiftContainer.FB_VipEnjoyGiftContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VipEnjoyGiftContainer.GetRootAsFB_VipEnjoyGiftContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VipHaoLiProvider
{
    private static FB_VipHaoLiProvider _Instance;
    public static FB_VipHaoLiProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VipHaoLiProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VipHaoLi.txt";
    protected FB_VipHaoLiContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VipHaoLi> mData = new Dictionary<int, FB_VipHaoLi>();
    private List<FB_VipHaoLi> mListData = new List<FB_VipHaoLi>();
    public List<FB_VipHaoLi> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VipHaoLi GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VipHaoLi);
    }
    public Dictionary<int, FB_VipHaoLi> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VipHaoLiContainer.FB_VipHaoLiContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VipHaoLiContainer.GetRootAsFB_VipHaoLiContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VIPInvestRewardProvider
{
    private static FB_VIPInvestRewardProvider _Instance;
    public static FB_VIPInvestRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VIPInvestRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VIPInvestReward.txt";
    protected FB_VIPInvestRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VIPInvestReward> mData = new Dictionary<int, FB_VIPInvestReward>();
    private List<FB_VIPInvestReward> mListData = new List<FB_VIPInvestReward>();
    public List<FB_VIPInvestReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VIPInvestReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VIPInvestReward);
    }
    public Dictionary<int, FB_VIPInvestReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VIPInvestRewardContainer.FB_VIPInvestRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VIPInvestRewardContainer.GetRootAsFB_VIPInvestRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VIPLimitProvider
{
    private static FB_VIPLimitProvider _Instance;
    public static FB_VIPLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VIPLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VIPLimit.txt";
    protected FB_VIPLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VIPLimit> mData = new Dictionary<int, FB_VIPLimit>();
    private List<FB_VIPLimit> mListData = new List<FB_VIPLimit>();
    public List<FB_VIPLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VIPLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VIPLimit);
    }
    public Dictionary<int, FB_VIPLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VIPLimitContainer.FB_VIPLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VIPLimitContainer.GetRootAsFB_VIPLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_VIPPowerProvider
{
    private static FB_VIPPowerProvider _Instance;
    public static FB_VIPPowerProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_VIPPowerProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/VIPPower.txt";
    protected FB_VIPPowerContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_VIPPower> mData = new Dictionary<int, FB_VIPPower>();
    private List<FB_VIPPower> mListData = new List<FB_VIPPower>();
    public List<FB_VIPPower> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_VIPPower GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_VIPPower);
    }
    public Dictionary<int, FB_VIPPower> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_VIPPowerContainer.FB_VIPPowerContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_VIPPowerContainer.GetRootAsFB_VIPPowerContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetArrayEffectProvider
{
    private static FB_WarPetArrayEffectProvider _Instance;
    public static FB_WarPetArrayEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetArrayEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetArrayEffect.txt";
    protected FB_WarPetArrayEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetArrayEffect> mData = new Dictionary<int, FB_WarPetArrayEffect>();
    private List<FB_WarPetArrayEffect> mListData = new List<FB_WarPetArrayEffect>();
    public List<FB_WarPetArrayEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetArrayEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetArrayEffect);
    }
    public Dictionary<int, FB_WarPetArrayEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetArrayEffectContainer.FB_WarPetArrayEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetArrayEffectContainer.GetRootAsFB_WarPetArrayEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetArrayTechniqueLevelUpProvider
{
    private static FB_WarPetArrayTechniqueLevelUpProvider _Instance;
    public static FB_WarPetArrayTechniqueLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetArrayTechniqueLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetArrayTechniqueLevelUp.txt";
    protected FB_WarPetArrayTechniqueLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetArrayTechniqueLevelUp> mData = new Dictionary<int, FB_WarPetArrayTechniqueLevelUp>();
    private List<FB_WarPetArrayTechniqueLevelUp> mListData = new List<FB_WarPetArrayTechniqueLevelUp>();
    public List<FB_WarPetArrayTechniqueLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetArrayTechniqueLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetArrayTechniqueLevelUp);
    }
    public Dictionary<int, FB_WarPetArrayTechniqueLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetArrayTechniqueLevelUpContainer.FB_WarPetArrayTechniqueLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetArrayTechniqueLevelUpContainer.GetRootAsFB_WarPetArrayTechniqueLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetBaseProvider
{
    private static FB_WarPetBaseProvider _Instance;
    public static FB_WarPetBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetBase.txt";
    protected FB_WarPetBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetBase> mData = new Dictionary<int, FB_WarPetBase>();
    private List<FB_WarPetBase> mListData = new List<FB_WarPetBase>();
    public List<FB_WarPetBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetBase);
    }
    public Dictionary<int, FB_WarPetBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetBaseContainer.FB_WarPetBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetBaseContainer.GetRootAsFB_WarPetBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetCompoundProvider
{
    private static FB_WarPetCompoundProvider _Instance;
    public static FB_WarPetCompoundProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetCompoundProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetCompound.txt";
    protected FB_WarPetCompoundContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetCompound> mData = new Dictionary<int, FB_WarPetCompound>();
    private List<FB_WarPetCompound> mListData = new List<FB_WarPetCompound>();
    public List<FB_WarPetCompound> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetCompound GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetCompound);
    }
    public Dictionary<int, FB_WarPetCompound> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetCompoundContainer.FB_WarPetCompoundContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetCompoundContainer.GetRootAsFB_WarPetCompoundContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetEquipProvider
{
    private static FB_WarPetEquipProvider _Instance;
    public static FB_WarPetEquipProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetEquipProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetEquip.txt";
    protected FB_WarPetEquipContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetEquip> mData = new Dictionary<int, FB_WarPetEquip>();
    private List<FB_WarPetEquip> mListData = new List<FB_WarPetEquip>();
    public List<FB_WarPetEquip> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetEquip GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetEquip);
    }
    public Dictionary<int, FB_WarPetEquip> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetEquipContainer.FB_WarPetEquipContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetEquipContainer.GetRootAsFB_WarPetEquipContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetEquipLevelUpProvider
{
    private static FB_WarPetEquipLevelUpProvider _Instance;
    public static FB_WarPetEquipLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetEquipLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetEquipLevelUp.txt";
    protected FB_WarPetEquipLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetEquipLevelUp> mData = new Dictionary<int, FB_WarPetEquipLevelUp>();
    private List<FB_WarPetEquipLevelUp> mListData = new List<FB_WarPetEquipLevelUp>();
    public List<FB_WarPetEquipLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetEquipLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetEquipLevelUp);
    }
    public Dictionary<int, FB_WarPetEquipLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetEquipLevelUpContainer.FB_WarPetEquipLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetEquipLevelUpContainer.GetRootAsFB_WarPetEquipLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetEquipStarLevelUpProvider
{
    private static FB_WarPetEquipStarLevelUpProvider _Instance;
    public static FB_WarPetEquipStarLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetEquipStarLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetEquipStarLevelUp.txt";
    protected FB_WarPetEquipStarLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetEquipStarLevelUp> mData = new Dictionary<int, FB_WarPetEquipStarLevelUp>();
    private List<FB_WarPetEquipStarLevelUp> mListData = new List<FB_WarPetEquipStarLevelUp>();
    public List<FB_WarPetEquipStarLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetEquipStarLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetEquipStarLevelUp);
    }
    public Dictionary<int, FB_WarPetEquipStarLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetEquipStarLevelUpContainer.FB_WarPetEquipStarLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetEquipStarLevelUpContainer.GetRootAsFB_WarPetEquipStarLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetItemDecomposeProvider
{
    private static FB_WarPetItemDecomposeProvider _Instance;
    public static FB_WarPetItemDecomposeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetItemDecomposeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetItemDecompose.txt";
    protected FB_WarPetItemDecomposeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetItemDecompose> mData = new Dictionary<int, FB_WarPetItemDecompose>();
    private List<FB_WarPetItemDecompose> mListData = new List<FB_WarPetItemDecompose>();
    public List<FB_WarPetItemDecompose> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetItemDecompose GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetItemDecompose);
    }
    public Dictionary<int, FB_WarPetItemDecompose> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetItemDecomposeContainer.FB_WarPetItemDecomposeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetItemDecomposeContainer.GetRootAsFB_WarPetItemDecomposeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetLevelUpProvider
{
    private static FB_WarPetLevelUpProvider _Instance;
    public static FB_WarPetLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetLevelUp.txt";
    protected FB_WarPetLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetLevelUp> mData = new Dictionary<int, FB_WarPetLevelUp>();
    private List<FB_WarPetLevelUp> mListData = new List<FB_WarPetLevelUp>();
    public List<FB_WarPetLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetLevelUp);
    }
    public Dictionary<int, FB_WarPetLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetLevelUpContainer.FB_WarPetLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetLevelUpContainer.GetRootAsFB_WarPetLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetRandomStarProvider
{
    private static FB_WarPetRandomStarProvider _Instance;
    public static FB_WarPetRandomStarProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetRandomStarProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetRandomStar.txt";
    protected FB_WarPetRandomStarContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetRandomStar> mData = new Dictionary<int, FB_WarPetRandomStar>();
    private List<FB_WarPetRandomStar> mListData = new List<FB_WarPetRandomStar>();
    public List<FB_WarPetRandomStar> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetRandomStar GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetRandomStar);
    }
    public Dictionary<int, FB_WarPetRandomStar> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetRandomStarContainer.FB_WarPetRandomStarContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetRandomStarContainer.GetRootAsFB_WarPetRandomStarContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetSkillProvider
{
    private static FB_WarPetSkillProvider _Instance;
    public static FB_WarPetSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetSkill.txt";
    protected FB_WarPetSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetSkill> mData = new Dictionary<int, FB_WarPetSkill>();
    private List<FB_WarPetSkill> mListData = new List<FB_WarPetSkill>();
    public List<FB_WarPetSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetSkill);
    }
    public Dictionary<int, FB_WarPetSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetSkillContainer.FB_WarPetSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetSkillContainer.GetRootAsFB_WarPetSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetSkillLevelUpProvider
{
    private static FB_WarPetSkillLevelUpProvider _Instance;
    public static FB_WarPetSkillLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetSkillLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetSkillLevelUp.txt";
    protected FB_WarPetSkillLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetSkillLevelUp> mData = new Dictionary<int, FB_WarPetSkillLevelUp>();
    private List<FB_WarPetSkillLevelUp> mListData = new List<FB_WarPetSkillLevelUp>();
    public List<FB_WarPetSkillLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetSkillLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetSkillLevelUp);
    }
    public Dictionary<int, FB_WarPetSkillLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetSkillLevelUpContainer.FB_WarPetSkillLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetSkillLevelUpContainer.GetRootAsFB_WarPetSkillLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetSkillLimitProvider
{
    private static FB_WarPetSkillLimitProvider _Instance;
    public static FB_WarPetSkillLimitProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetSkillLimitProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetSkillLimit.txt";
    protected FB_WarPetSkillLimitContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetSkillLimit> mData = new Dictionary<int, FB_WarPetSkillLimit>();
    private List<FB_WarPetSkillLimit> mListData = new List<FB_WarPetSkillLimit>();
    public List<FB_WarPetSkillLimit> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetSkillLimit GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetSkillLimit);
    }
    public Dictionary<int, FB_WarPetSkillLimit> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetSkillLimitContainer.FB_WarPetSkillLimitContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetSkillLimitContainer.GetRootAsFB_WarPetSkillLimitContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetStarProvider
{
    private static FB_WarPetStarProvider _Instance;
    public static FB_WarPetStarProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetStarProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetStar.txt";
    protected FB_WarPetStarContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetStar> mData = new Dictionary<int, FB_WarPetStar>();
    private List<FB_WarPetStar> mListData = new List<FB_WarPetStar>();
    public List<FB_WarPetStar> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetStar GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetStar);
    }
    public Dictionary<int, FB_WarPetStar> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetStarContainer.FB_WarPetStarContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetStarContainer.GetRootAsFB_WarPetStarContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WarPetTalentProvider
{
    private static FB_WarPetTalentProvider _Instance;
    public static FB_WarPetTalentProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WarPetTalentProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WarPetTalent.txt";
    protected FB_WarPetTalentContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WarPetTalent> mData = new Dictionary<int, FB_WarPetTalent>();
    private List<FB_WarPetTalent> mListData = new List<FB_WarPetTalent>();
    public List<FB_WarPetTalent> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WarPetTalent GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WarPetTalent);
    }
    public Dictionary<int, FB_WarPetTalent> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WarPetTalentContainer.FB_WarPetTalentContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WarPetTalentContainer.GetRootAsFB_WarPetTalentContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WingBaseProvider
{
    private static FB_WingBaseProvider _Instance;
    public static FB_WingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WingBase.txt";
    protected FB_WingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WingBase> mData = new Dictionary<int, FB_WingBase>();
    private List<FB_WingBase> mListData = new List<FB_WingBase>();
    public List<FB_WingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WingBase);
    }
    public Dictionary<int, FB_WingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WingBaseContainer.FB_WingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WingBaseContainer.GetRootAsFB_WingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WingTransmogProvider
{
    private static FB_WingTransmogProvider _Instance;
    public static FB_WingTransmogProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WingTransmogProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WingTransmog.txt";
    protected FB_WingTransmogContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WingTransmog> mData = new Dictionary<int, FB_WingTransmog>();
    private List<FB_WingTransmog> mListData = new List<FB_WingTransmog>();
    public List<FB_WingTransmog> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WingTransmog GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WingTransmog);
    }
    public Dictionary<int, FB_WingTransmog> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WingTransmogContainer.FB_WingTransmogContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WingTransmogContainer.GetRootAsFB_WingTransmogContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WishBaseProvider
{
    private static FB_WishBaseProvider _Instance;
    public static FB_WishBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WishBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WishBase.txt";
    protected FB_WishBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WishBase> mData = new Dictionary<int, FB_WishBase>();
    private List<FB_WishBase> mListData = new List<FB_WishBase>();
    public List<FB_WishBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WishBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WishBase);
    }
    public Dictionary<int, FB_WishBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WishBaseContainer.FB_WishBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WishBaseContainer.GetRootAsFB_WishBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WitCompeteProvider
{
    private static FB_WitCompeteProvider _Instance;
    public static FB_WitCompeteProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WitCompeteProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WitCompete.txt";
    protected FB_WitCompeteContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WitCompete> mData = new Dictionary<int, FB_WitCompete>();
    private List<FB_WitCompete> mListData = new List<FB_WitCompete>();
    public List<FB_WitCompete> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WitCompete GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WitCompete);
    }
    public Dictionary<int, FB_WitCompete> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WitCompeteContainer.FB_WitCompeteContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WitCompeteContainer.GetRootAsFB_WitCompeteContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WorldBossProvider
{
    private static FB_WorldBossProvider _Instance;
    public static FB_WorldBossProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WorldBossProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WorldBoss.txt";
    protected FB_WorldBossContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WorldBoss> mData = new Dictionary<int, FB_WorldBoss>();
    private List<FB_WorldBoss> mListData = new List<FB_WorldBoss>();
    public List<FB_WorldBoss> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WorldBoss GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WorldBoss);
    }
    public Dictionary<int, FB_WorldBoss> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WorldBossContainer.FB_WorldBossContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WorldBossContainer.GetRootAsFB_WorldBossContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WorldBossLikeProvider
{
    private static FB_WorldBossLikeProvider _Instance;
    public static FB_WorldBossLikeProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WorldBossLikeProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WorldBossLike.txt";
    protected FB_WorldBossLikeContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WorldBossLike> mData = new Dictionary<int, FB_WorldBossLike>();
    private List<FB_WorldBossLike> mListData = new List<FB_WorldBossLike>();
    public List<FB_WorldBossLike> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WorldBossLike GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WorldBossLike);
    }
    public Dictionary<int, FB_WorldBossLike> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WorldBossLikeContainer.FB_WorldBossLikeContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WorldBossLikeContainer.GetRootAsFB_WorldBossLikeContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_WuXingYuanLiProvider
{
    private static FB_WuXingYuanLiProvider _Instance;
    public static FB_WuXingYuanLiProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_WuXingYuanLiProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/WuXingYuanLi.txt";
    protected FB_WuXingYuanLiContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_WuXingYuanLi> mData = new Dictionary<int, FB_WuXingYuanLi>();
    private List<FB_WuXingYuanLi> mListData = new List<FB_WuXingYuanLi>();
    public List<FB_WuXingYuanLi> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_WuXingYuanLi GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_WuXingYuanLi);
    }
    public Dictionary<int, FB_WuXingYuanLi> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_WuXingYuanLiContainer.FB_WuXingYuanLiContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_WuXingYuanLiContainer.GetRootAsFB_WuXingYuanLiContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XianYuZhiYiBaseProvider
{
    private static FB_XianYuZhiYiBaseProvider _Instance;
    public static FB_XianYuZhiYiBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XianYuZhiYiBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XianYuZhiYiBase.txt";
    protected FB_XianYuZhiYiBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XianYuZhiYiBase> mData = new Dictionary<int, FB_XianYuZhiYiBase>();
    private List<FB_XianYuZhiYiBase> mListData = new List<FB_XianYuZhiYiBase>();
    public List<FB_XianYuZhiYiBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XianYuZhiYiBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XianYuZhiYiBase);
    }
    public Dictionary<int, FB_XianYuZhiYiBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XianYuZhiYiBaseContainer.FB_XianYuZhiYiBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XianYuZhiYiBaseContainer.GetRootAsFB_XianYuZhiYiBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XianYuZhiYiChapterBaseProvider
{
    private static FB_XianYuZhiYiChapterBaseProvider _Instance;
    public static FB_XianYuZhiYiChapterBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XianYuZhiYiChapterBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XianYuZhiYiChapterBase.txt";
    protected FB_XianYuZhiYiChapterBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XianYuZhiYiChapterBase> mData = new Dictionary<int, FB_XianYuZhiYiChapterBase>();
    private List<FB_XianYuZhiYiChapterBase> mListData = new List<FB_XianYuZhiYiChapterBase>();
    public List<FB_XianYuZhiYiChapterBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XianYuZhiYiChapterBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XianYuZhiYiChapterBase);
    }
    public Dictionary<int, FB_XianYuZhiYiChapterBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XianYuZhiYiChapterBaseContainer.FB_XianYuZhiYiChapterBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XianYuZhiYiChapterBaseContainer.GetRootAsFB_XianYuZhiYiChapterBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XianYuZhiYiLevelUpProvider
{
    private static FB_XianYuZhiYiLevelUpProvider _Instance;
    public static FB_XianYuZhiYiLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XianYuZhiYiLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XianYuZhiYiLevelUp.txt";
    protected FB_XianYuZhiYiLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XianYuZhiYiLevelUp> mData = new Dictionary<int, FB_XianYuZhiYiLevelUp>();
    private List<FB_XianYuZhiYiLevelUp> mListData = new List<FB_XianYuZhiYiLevelUp>();
    public List<FB_XianYuZhiYiLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XianYuZhiYiLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XianYuZhiYiLevelUp);
    }
    public Dictionary<int, FB_XianYuZhiYiLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XianYuZhiYiLevelUpContainer.FB_XianYuZhiYiLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XianYuZhiYiLevelUpContainer.GetRootAsFB_XianYuZhiYiLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XianYuZhiYiUnlockLevelUpProvider
{
    private static FB_XianYuZhiYiUnlockLevelUpProvider _Instance;
    public static FB_XianYuZhiYiUnlockLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XianYuZhiYiUnlockLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XianYuZhiYiUnlockLevelUp.txt";
    protected FB_XianYuZhiYiUnlockLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XianYuZhiYiUnlockLevelUp> mData = new Dictionary<int, FB_XianYuZhiYiUnlockLevelUp>();
    private List<FB_XianYuZhiYiUnlockLevelUp> mListData = new List<FB_XianYuZhiYiUnlockLevelUp>();
    public List<FB_XianYuZhiYiUnlockLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XianYuZhiYiUnlockLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XianYuZhiYiUnlockLevelUp);
    }
    public Dictionary<int, FB_XianYuZhiYiUnlockLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XianYuZhiYiUnlockLevelUpContainer.FB_XianYuZhiYiUnlockLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XianYuZhiYiUnlockLevelUpContainer.GetRootAsFB_XianYuZhiYiUnlockLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunItemBaseProvider
{
    private static FB_XingHunItemBaseProvider _Instance;
    public static FB_XingHunItemBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunItemBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunItemBase.txt";
    protected FB_XingHunItemBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunItemBase> mData = new Dictionary<int, FB_XingHunItemBase>();
    private List<FB_XingHunItemBase> mListData = new List<FB_XingHunItemBase>();
    public List<FB_XingHunItemBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunItemBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunItemBase);
    }
    public Dictionary<int, FB_XingHunItemBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunItemBaseContainer.FB_XingHunItemBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunItemBaseContainer.GetRootAsFB_XingHunItemBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunLevelUpProvider
{
    private static FB_XingHunLevelUpProvider _Instance;
    public static FB_XingHunLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunLevelUp.txt";
    protected FB_XingHunLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunLevelUp> mData = new Dictionary<int, FB_XingHunLevelUp>();
    private List<FB_XingHunLevelUp> mListData = new List<FB_XingHunLevelUp>();
    public List<FB_XingHunLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunLevelUp);
    }
    public Dictionary<int, FB_XingHunLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunLevelUpContainer.FB_XingHunLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunLevelUpContainer.GetRootAsFB_XingHunLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunTeZhiLevelUpProvider
{
    private static FB_XingHunTeZhiLevelUpProvider _Instance;
    public static FB_XingHunTeZhiLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunTeZhiLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunTeZhiLevelUp.txt";
    protected FB_XingHunTeZhiLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunTeZhiLevelUp> mData = new Dictionary<int, FB_XingHunTeZhiLevelUp>();
    private List<FB_XingHunTeZhiLevelUp> mListData = new List<FB_XingHunTeZhiLevelUp>();
    public List<FB_XingHunTeZhiLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunTeZhiLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunTeZhiLevelUp);
    }
    public Dictionary<int, FB_XingHunTeZhiLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunTeZhiLevelUpContainer.FB_XingHunTeZhiLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunTeZhiLevelUpContainer.GetRootAsFB_XingHunTeZhiLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunTeZhiPassiveSkillProvider
{
    private static FB_XingHunTeZhiPassiveSkillProvider _Instance;
    public static FB_XingHunTeZhiPassiveSkillProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunTeZhiPassiveSkillProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunTeZhiPassiveSkill.txt";
    protected FB_XingHunTeZhiPassiveSkillContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunTeZhiPassiveSkill> mData = new Dictionary<int, FB_XingHunTeZhiPassiveSkill>();
    private List<FB_XingHunTeZhiPassiveSkill> mListData = new List<FB_XingHunTeZhiPassiveSkill>();
    public List<FB_XingHunTeZhiPassiveSkill> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunTeZhiPassiveSkill GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunTeZhiPassiveSkill);
    }
    public Dictionary<int, FB_XingHunTeZhiPassiveSkill> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunTeZhiPassiveSkillContainer.FB_XingHunTeZhiPassiveSkillContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunTeZhiPassiveSkillContainer.GetRootAsFB_XingHunTeZhiPassiveSkillContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunUnitBaseProvider
{
    private static FB_XingHunUnitBaseProvider _Instance;
    public static FB_XingHunUnitBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunUnitBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunUnitBase.txt";
    protected FB_XingHunUnitBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunUnitBase> mData = new Dictionary<int, FB_XingHunUnitBase>();
    private List<FB_XingHunUnitBase> mListData = new List<FB_XingHunUnitBase>();
    public List<FB_XingHunUnitBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunUnitBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunUnitBase);
    }
    public Dictionary<int, FB_XingHunUnitBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunUnitBaseContainer.FB_XingHunUnitBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunUnitBaseContainer.GetRootAsFB_XingHunUnitBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunZhuanJingBaseProvider
{
    private static FB_XingHunZhuanJingBaseProvider _Instance;
    public static FB_XingHunZhuanJingBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunZhuanJingBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunZhuanJingBase.txt";
    protected FB_XingHunZhuanJingBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunZhuanJingBase> mData = new Dictionary<int, FB_XingHunZhuanJingBase>();
    private List<FB_XingHunZhuanJingBase> mListData = new List<FB_XingHunZhuanJingBase>();
    public List<FB_XingHunZhuanJingBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunZhuanJingBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunZhuanJingBase);
    }
    public Dictionary<int, FB_XingHunZhuanJingBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunZhuanJingBaseContainer.FB_XingHunZhuanJingBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunZhuanJingBaseContainer.GetRootAsFB_XingHunZhuanJingBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunZhuanJingEffectProvider
{
    private static FB_XingHunZhuanJingEffectProvider _Instance;
    public static FB_XingHunZhuanJingEffectProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunZhuanJingEffectProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunZhuanJingEffect.txt";
    protected FB_XingHunZhuanJingEffectContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunZhuanJingEffect> mData = new Dictionary<int, FB_XingHunZhuanJingEffect>();
    private List<FB_XingHunZhuanJingEffect> mListData = new List<FB_XingHunZhuanJingEffect>();
    public List<FB_XingHunZhuanJingEffect> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunZhuanJingEffect GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunZhuanJingEffect);
    }
    public Dictionary<int, FB_XingHunZhuanJingEffect> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunZhuanJingEffectContainer.FB_XingHunZhuanJingEffectContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunZhuanJingEffectContainer.GetRootAsFB_XingHunZhuanJingEffectContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingHunZhuanJingLevelUpProvider
{
    private static FB_XingHunZhuanJingLevelUpProvider _Instance;
    public static FB_XingHunZhuanJingLevelUpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingHunZhuanJingLevelUpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingHunZhuanJingLevelUp.txt";
    protected FB_XingHunZhuanJingLevelUpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingHunZhuanJingLevelUp> mData = new Dictionary<int, FB_XingHunZhuanJingLevelUp>();
    private List<FB_XingHunZhuanJingLevelUp> mListData = new List<FB_XingHunZhuanJingLevelUp>();
    public List<FB_XingHunZhuanJingLevelUp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingHunZhuanJingLevelUp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingHunZhuanJingLevelUp);
    }
    public Dictionary<int, FB_XingHunZhuanJingLevelUp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingHunZhuanJingLevelUpContainer.FB_XingHunZhuanJingLevelUpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingHunZhuanJingLevelUpContainer.GetRootAsFB_XingHunZhuanJingLevelUpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYunBlessingProvider
{
    private static FB_XingYunBlessingProvider _Instance;
    public static FB_XingYunBlessingProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYunBlessingProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYunBlessing.txt";
    protected FB_XingYunBlessingContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYunBlessing> mData = new Dictionary<int, FB_XingYunBlessing>();
    private List<FB_XingYunBlessing> mListData = new List<FB_XingYunBlessing>();
    public List<FB_XingYunBlessing> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYunBlessing GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYunBlessing);
    }
    public Dictionary<int, FB_XingYunBlessing> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYunBlessingContainer.FB_XingYunBlessingContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYunBlessingContainer.GetRootAsFB_XingYunBlessingContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.EventId))
            {
                mData.Add(item.EventId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYunExtractBaseProvider
{
    private static FB_XingYunExtractBaseProvider _Instance;
    public static FB_XingYunExtractBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYunExtractBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYunExtractBase.txt";
    protected FB_XingYunExtractBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYunExtractBase> mData = new Dictionary<int, FB_XingYunExtractBase>();
    private List<FB_XingYunExtractBase> mListData = new List<FB_XingYunExtractBase>();
    public List<FB_XingYunExtractBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYunExtractBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYunExtractBase);
    }
    public Dictionary<int, FB_XingYunExtractBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYunExtractBaseContainer.FB_XingYunExtractBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYunExtractBaseContainer.GetRootAsFB_XingYunExtractBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ExtractId))
            {
                mData.Add(item.ExtractId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYunGuideEventProvider
{
    private static FB_XingYunGuideEventProvider _Instance;
    public static FB_XingYunGuideEventProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYunGuideEventProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYunGuideEvent.txt";
    protected FB_XingYunGuideEventContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYunGuideEvent> mData = new Dictionary<int, FB_XingYunGuideEvent>();
    private List<FB_XingYunGuideEvent> mListData = new List<FB_XingYunGuideEvent>();
    public List<FB_XingYunGuideEvent> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYunGuideEvent GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYunGuideEvent);
    }
    public Dictionary<int, FB_XingYunGuideEvent> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYunGuideEventContainer.FB_XingYunGuideEventContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYunGuideEventContainer.GetRootAsFB_XingYunGuideEventContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.EventId))
            {
                mData.Add(item.EventId, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYunMissionProvider
{
    private static FB_XingYunMissionProvider _Instance;
    public static FB_XingYunMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYunMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYunMission.txt";
    protected FB_XingYunMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYunMission> mData = new Dictionary<int, FB_XingYunMission>();
    private List<FB_XingYunMission> mListData = new List<FB_XingYunMission>();
    public List<FB_XingYunMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYunMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYunMission);
    }
    public Dictionary<int, FB_XingYunMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYunMissionContainer.FB_XingYunMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYunMissionContainer.GetRootAsFB_XingYunMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.MissionID))
            {
                mData.Add(item.MissionID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYuPaiHangProvider
{
    private static FB_XingYuPaiHangProvider _Instance;
    public static FB_XingYuPaiHangProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYuPaiHangProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYuPaiHang.txt";
    protected FB_XingYuPaiHangContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYuPaiHang> mData = new Dictionary<int, FB_XingYuPaiHang>();
    private List<FB_XingYuPaiHang> mListData = new List<FB_XingYuPaiHang>();
    public List<FB_XingYuPaiHang> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYuPaiHang GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYuPaiHang);
    }
    public Dictionary<int, FB_XingYuPaiHang> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYuPaiHangContainer.FB_XingYuPaiHangContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYuPaiHangContainer.GetRootAsFB_XingYuPaiHangContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYuPingFenProvider
{
    private static FB_XingYuPingFenProvider _Instance;
    public static FB_XingYuPingFenProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYuPingFenProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYuPingFen.txt";
    protected FB_XingYuPingFenContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYuPingFen> mData = new Dictionary<int, FB_XingYuPingFen>();
    private List<FB_XingYuPingFen> mListData = new List<FB_XingYuPingFen>();
    public List<FB_XingYuPingFen> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYuPingFen GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYuPingFen);
    }
    public Dictionary<int, FB_XingYuPingFen> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYuPingFenContainer.FB_XingYuPingFenContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYuPingFenContainer.GetRootAsFB_XingYuPingFenContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYuRewardProvider
{
    private static FB_XingYuRewardProvider _Instance;
    public static FB_XingYuRewardProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYuRewardProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYuReward.txt";
    protected FB_XingYuRewardContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYuReward> mData = new Dictionary<int, FB_XingYuReward>();
    private List<FB_XingYuReward> mListData = new List<FB_XingYuReward>();
    public List<FB_XingYuReward> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYuReward GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYuReward);
    }
    public Dictionary<int, FB_XingYuReward> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYuRewardContainer.FB_XingYuRewardContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYuRewardContainer.GetRootAsFB_XingYuRewardContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYuTicketBonusProvider
{
    private static FB_XingYuTicketBonusProvider _Instance;
    public static FB_XingYuTicketBonusProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYuTicketBonusProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYuTicketBonus.txt";
    protected FB_XingYuTicketBonusContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYuTicketBonus> mData = new Dictionary<int, FB_XingYuTicketBonus>();
    private List<FB_XingYuTicketBonus> mListData = new List<FB_XingYuTicketBonus>();
    public List<FB_XingYuTicketBonus> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYuTicketBonus GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYuTicketBonus);
    }
    public Dictionary<int, FB_XingYuTicketBonus> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYuTicketBonusContainer.FB_XingYuTicketBonusContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYuTicketBonusContainer.GetRootAsFB_XingYuTicketBonusContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XingYuTicketMissionProvider
{
    private static FB_XingYuTicketMissionProvider _Instance;
    public static FB_XingYuTicketMissionProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XingYuTicketMissionProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XingYuTicketMission.txt";
    protected FB_XingYuTicketMissionContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XingYuTicketMission> mData = new Dictionary<int, FB_XingYuTicketMission>();
    private List<FB_XingYuTicketMission> mListData = new List<FB_XingYuTicketMission>();
    public List<FB_XingYuTicketMission> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XingYuTicketMission GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XingYuTicketMission);
    }
    public Dictionary<int, FB_XingYuTicketMission> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XingYuTicketMissionContainer.FB_XingYuTicketMissionContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XingYuTicketMissionContainer.GetRootAsFB_XingYuTicketMissionContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_XueShiBaoKuProvider
{
    private static FB_XueShiBaoKuProvider _Instance;
    public static FB_XueShiBaoKuProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_XueShiBaoKuProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/XueShiBaoKu.txt";
    protected FB_XueShiBaoKuContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_XueShiBaoKu> mData = new Dictionary<int, FB_XueShiBaoKu>();
    private List<FB_XueShiBaoKu> mListData = new List<FB_XueShiBaoKu>();
    public List<FB_XueShiBaoKu> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_XueShiBaoKu GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_XueShiBaoKu);
    }
    public Dictionary<int, FB_XueShiBaoKu> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_XueShiBaoKuContainer.FB_XueShiBaoKuContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_XueShiBaoKuContainer.GetRootAsFB_XueShiBaoKuContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YingYanBaseProvider
{
    private static FB_YingYanBaseProvider _Instance;
    public static FB_YingYanBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YingYanBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/YingYanBase.txt";
    protected FB_YingYanBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YingYanBase> mData = new Dictionary<int, FB_YingYanBase>();
    private List<FB_YingYanBase> mListData = new List<FB_YingYanBase>();
    public List<FB_YingYanBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YingYanBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YingYanBase);
    }
    public Dictionary<int, FB_YingYanBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YingYanBaseContainer.FB_YingYanBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YingYanBaseContainer.GetRootAsFB_YingYanBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YuanShenBaseProvider
{
    private static FB_YuanShenBaseProvider _Instance;
    public static FB_YuanShenBaseProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YuanShenBaseProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/YuanShenBase.txt";
    protected FB_YuanShenBaseContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YuanShenBase> mData = new Dictionary<int, FB_YuanShenBase>();
    private List<FB_YuanShenBase> mListData = new List<FB_YuanShenBase>();
    public List<FB_YuanShenBase> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YuanShenBase GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YuanShenBase);
    }
    public Dictionary<int, FB_YuanShenBase> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YuanShenBaseContainer.FB_YuanShenBaseContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YuanShenBaseContainer.GetRootAsFB_YuanShenBaseContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YuanShenShowExpProvider
{
    private static FB_YuanShenShowExpProvider _Instance;
    public static FB_YuanShenShowExpProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YuanShenShowExpProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/YuanShenShowExp.txt";
    protected FB_YuanShenShowExpContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YuanShenShowExp> mData = new Dictionary<int, FB_YuanShenShowExp>();
    private List<FB_YuanShenShowExp> mListData = new List<FB_YuanShenShowExp>();
    public List<FB_YuanShenShowExp> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YuanShenShowExp GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YuanShenShowExp);
    }
    public Dictionary<int, FB_YuanShenShowExp> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YuanShenShowExpContainer.FB_YuanShenShowExpContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YuanShenShowExpContainer.GetRootAsFB_YuanShenShowExpContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YueKaProvider
{
    private static FB_YueKaProvider _Instance;
    public static FB_YueKaProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YueKaProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/YueKa.txt";
    protected FB_YueKaContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YueKa> mData = new Dictionary<int, FB_YueKa>();
    private List<FB_YueKa> mListData = new List<FB_YueKa>();
    public List<FB_YueKa> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YueKa GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YueKa);
    }
    public Dictionary<int, FB_YueKa> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YueKaContainer.FB_YueKaContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YueKaContainer.GetRootAsFB_YueKaContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_YunGouProvider
{
    private static FB_YunGouProvider _Instance;
    public static FB_YunGouProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_YunGouProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/YunGou.txt";
    protected FB_YunGouContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_YunGou> mData = new Dictionary<int, FB_YunGou>();
    private List<FB_YunGou> mListData = new List<FB_YunGou>();
    public List<FB_YunGou> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_YunGou GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_YunGou);
    }
    public Dictionary<int, FB_YunGou> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_YunGouContainer.FB_YunGouContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_YunGouContainer.GetRootAsFB_YunGouContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ZhanLingLibaoProvider
{
    private static FB_ZhanLingLibaoProvider _Instance;
    public static FB_ZhanLingLibaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ZhanLingLibaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ZhanLingLibao.txt";
    protected FB_ZhanLingLibaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ZhanLingLibao> mData = new Dictionary<int, FB_ZhanLingLibao>();
    private List<FB_ZhanLingLibao> mListData = new List<FB_ZhanLingLibao>();
    public List<FB_ZhanLingLibao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ZhanLingLibao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ZhanLingLibao);
    }
    public Dictionary<int, FB_ZhanLingLibao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ZhanLingLibaoContainer.FB_ZhanLingLibaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ZhanLingLibaoContainer.GetRootAsFB_ZhanLingLibaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ZheKouShangDianProvider
{
    private static FB_ZheKouShangDianProvider _Instance;
    public static FB_ZheKouShangDianProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ZheKouShangDianProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ZheKouShangDian.txt";
    protected FB_ZheKouShangDianContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ZheKouShangDian> mData = new Dictionary<int, FB_ZheKouShangDian>();
    private List<FB_ZheKouShangDian> mListData = new List<FB_ZheKouShangDian>();
    public List<FB_ZheKouShangDian> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ZheKouShangDian GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ZheKouShangDian);
    }
    public Dictionary<int, FB_ZheKouShangDian> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ZheKouShangDianContainer.FB_ZheKouShangDianContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ZheKouShangDianContainer.GetRootAsFB_ZheKouShangDianContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ZhongShenDianProvider
{
    private static FB_ZhongShenDianProvider _Instance;
    public static FB_ZhongShenDianProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ZhongShenDianProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ZhongShenDian.txt";
    protected FB_ZhongShenDianContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ZhongShenDian> mData = new Dictionary<int, FB_ZhongShenDian>();
    private List<FB_ZhongShenDian> mListData = new List<FB_ZhongShenDian>();
    public List<FB_ZhongShenDian> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ZhongShenDian GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ZhongShenDian);
    }
    public Dictionary<int, FB_ZhongShenDian> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ZhongShenDianContainer.FB_ZhongShenDianContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ZhongShenDianContainer.GetRootAsFB_ZhongShenDianContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.ID))
            {
                mData.Add(item.ID, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
public partial class FB_ZhuangBeiXunBaoProvider
{
    private static FB_ZhuangBeiXunBaoProvider _Instance;
    public static FB_ZhuangBeiXunBaoProvider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_ZhuangBeiXunBaoProvider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "Public/ZhuangBeiXunBao.txt";
    protected FB_ZhuangBeiXunBaoContainer mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_ZhuangBeiXunBao> mData = new Dictionary<int, FB_ZhuangBeiXunBao>();
    private List<FB_ZhuangBeiXunBao> mListData = new List<FB_ZhuangBeiXunBao>();
    public List<FB_ZhuangBeiXunBao> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_ZhuangBeiXunBao GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_ZhuangBeiXunBao);
    }
    public Dictionary<int, FB_ZhuangBeiXunBao> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_ZhuangBeiXunBaoContainer.FB_ZhuangBeiXunBaoContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_ZhuangBeiXunBaoContainer.GetRootAsFB_ZhuangBeiXunBaoContainer(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.Id))
            {
                mData.Add(item.Id, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}
