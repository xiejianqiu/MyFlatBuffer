public partial class FB_@{class_name_tag}Provider
{
    private static FB_@{class_name_tag}Provider _Instance;
    public static FB_@{class_name_tag}Provider Instance {
        get
        {
            if (null == _Instance)
            {
                _Instance = new FB_@{class_name_tag}Provider();
            }
            return _Instance;
        }
    }
    public string tableRPath = "@{class_relative_path}";
    protected FB_@{class_name_tag}Container mFBSrcData;
    private static  Dictionary<int, int> mKeyMapDIct = new Dictionary<int, int>();
    protected Dictionary<int, FB_@{class_name_tag}> mData = new Dictionary<int, FB_@{class_name_tag}>();
    private List<FB_@{class_name_tag}> mListData = new List<FB_@{class_name_tag}>();
    public List<FB_@{class_name_tag}> ListData
    {
        get
        {
            var id = this.GetHashCode();
            if (mListData.Count <= 0)
            {
                if (mKeyMapDIct.Count > 0)
                {
                    this.Init();
                }
                mListData.AddRange(mData.Values);
            }
            return mListData;
        }
    }
    public FB_@{class_name_tag} GetDataById(int id)
    {
        if (mData.ContainsKey(id))
            return mData[id];
        if (mKeyMapDIct.ContainsKey(id))
        {
            mData[id] = mFBSrcData.GetItems(mKeyMapDIct[id]);
            return mData[id];
        }
        return default(FB_@{class_name_tag});
    }
    public Dictionary<int, FB_@{class_name_tag}> GetData()
    {
        return mData;
    }
    public void LoadFromFile(string dataPath)
    {
        this.LoadData(new ByteBuffer(File.ReadAllBytes(dataPath)));
    }
    public void LoadFromMemory(byte[] dataBytes)
    {
        this.LoadData(new ByteBuffer(dataBytes));
    }
    public void LoadData(ByteBuffer bb) {
        if (!FB_@{class_name_tag}Container.FB_@{class_name_tag}ContainerBufferHasIdentifier(bb))
        {
            throw new Exception("Identifier test failed, you sure the identifier is identical to the generated schema's one?");
        }
        var data = FB_@{class_name_tag}Container.GetRootAsFB_@{class_name_tag}Container(bb);
        mFBSrcData = data;
        if (mKeyMapDIct.Count <= 0 )
        {
            this.Init();
        }
    }
    private void Init()
    {
		HashSet<int> set = new HashSet<int>();
        var iter = mData.GetEnumerator();
        while (iter.MoveNext())
        {
            set.Add(mKeyMapDIct[iter.Current.Key]);
        }
        for (int index = 0; index < mFBSrcData.ItemsLength; index++)
        {
			if (set.Contains(index))
                continue;
            var item = mFBSrcData.GetItems(index);
            if (!mData.ContainsKey(item.@{field_id_name}))
            {
                mData.Add(item.@{field_id_name}, item);
            }
        }
    }
    public void Clear()
    {
        mData.Clear();
        mListData.Clear();
    }
}